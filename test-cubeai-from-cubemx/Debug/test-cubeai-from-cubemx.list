
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001619c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055a0  08016370  08016370  00026370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b910  0801b910  00030954  2**0
                  CONTENTS
  4 .ARM          00000008  0801b910  0801b910  0002b910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b918  0801b918  00030954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b918  0801b918  0002b918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b91c  0801b91c  0002b91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000954  20000000  0801b920  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040e64  20000958  0801c274  00030958  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  200417bc  0801c274  000317bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030954  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c2ab  00000000  00000000  00030984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000762d  00000000  00000000  0006cc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ac0  00000000  00000000  00074260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002790  00000000  00000000  00076d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035f09  00000000  00000000  000794b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000375c0  00000000  00000000  000af3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012fe03  00000000  00000000  000e6979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0021677c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8ac  00000000  00000000  0021684c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000958 	.word	0x20000958
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016354 	.word	0x08016354

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000095c 	.word	0x2000095c
 800020c:	08016354 	.word	0x08016354

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	f5ad 6db7 	sub.w	sp, sp, #1464	; 0x5b8
 8000ee6:	af02      	add	r7, sp, #8

	uiDisplayBasic();
 8000ee8:	f002 fcb8 	bl	800385c <uiDisplayBasic>

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000eec:	4ab2      	ldr	r2, [pc, #712]	; (80011b8 <audioLoop+0x2d8>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	48b2      	ldr	r0, [pc, #712]	; (80011bc <audioLoop+0x2dc>)
 8000ef2:	f011 fd6b 	bl	80129cc <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000ef6:	4bb2      	ldr	r3, [pc, #712]	; (80011c0 <audioLoop+0x2e0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000efc:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <audioLoop+0x2e4>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f06:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000f0a:	49af      	ldr	r1, [pc, #700]	; (80011c8 <audioLoop+0x2e8>)
 8000f0c:	48af      	ldr	r0, [pc, #700]	; (80011cc <audioLoop+0x2ec>)
 8000f0e:	f003 fa79 	bl	8004404 <start_Audio_Processing>

	/* Initialisation variable projet */
	char buf[50];
	int buf_len = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
	ai_error ai_err;
	ai_i32 nbatch;
	float y_val;
	float test = 0.0;
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 8000f20:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle tonecrafter = AI_HANDLE_NULL;
 8000f22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 8000f2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f2e:	4aa8      	ldr	r2, [pc, #672]	; (80011d0 <audioLoop+0x2f0>)
 8000f30:	461c      	mov	r4, r3
 8000f32:	4615      	mov	r5, r2
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f3c:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 8000f40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f44:	4aa3      	ldr	r2, [pc, #652]	; (80011d4 <audioLoop+0x2f4>)
 8000f46:	461c      	mov	r4, r3
 8000f48:	4615      	mov	r5, r2
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f52:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 8000f56:	463b      	mov	r3, r7
 8000f58:	4a9f      	ldr	r2, [pc, #636]	; (80011d8 <audioLoop+0x2f8>)
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2201      	movs	r2, #1
 8000f60:	809a      	strh	r2, [r3, #4]
 8000f62:	463b      	mov	r3, r7
 8000f64:	2201      	movs	r2, #1
 8000f66:	80da      	strh	r2, [r3, #6]
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	811a      	strh	r2, [r3, #8]
 8000f6e:	463b      	mov	r3, r7
 8000f70:	f243 02e4 	movw	r2, #12516	; 0x30e4
 8000f74:	60da      	str	r2, [r3, #12]
		AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 8000f76:	f00e fdab 	bl	800fad0 <ai_tonecrafter_data_weights_get>
 8000f7a:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	463b      	mov	r3, r7
 8000f88:	4a94      	ldr	r2, [pc, #592]	; (80011dc <audioLoop+0x2fc>)
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2201      	movs	r2, #1
 8000f90:	839a      	strh	r2, [r3, #28]
 8000f92:	463b      	mov	r3, r7
 8000f94:	2201      	movs	r2, #1
 8000f96:	83da      	strh	r2, [r3, #30]
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	841a      	strh	r2, [r3, #32]
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	f44f 7244 	mov.w	r2, #784	; 0x310
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
		AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
	};


	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8000fb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb8:	2201      	movs	r2, #1
 8000fba:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fc4:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8000fc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fca:	2201      	movs	r2, #1
 8000fcc:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fd6:	611a      	str	r2, [r3, #16]

	// Create instance of neural network
	ai_err = ai_tonecrafter_create(&tonecrafter, AI_TONECRAFTER_DATA_CONFIG);
 8000fd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00e fd10 	bl	800fa04 <ai_tonecrafter_create>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	if (ai_err.type != AI_ERROR_NONE)
 8000fea:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <audioLoop+0x124>
	{
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000ff2:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8000ff6:	497a      	ldr	r1, [pc, #488]	; (80011e0 <audioLoop+0x300>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f012 fab7 	bl	801356c <siprintf>
 8000ffe:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
	  while(1);
 8001002:	e7fe      	b.n	8001002 <audioLoop+0x122>
	}

	// Initialize neural network
	if (!ai_tonecrafter_init(tonecrafter, &ai_params))
 8001004:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	463a      	mov	r2, r7
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f00e fd0e 	bl	800fa30 <ai_tonecrafter_init>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <audioLoop+0x152>
	{
	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001020:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8001024:	496f      	ldr	r1, [pc, #444]	; (80011e4 <audioLoop+0x304>)
 8001026:	4618      	mov	r0, r3
 8001028:	f012 faa0 	bl	801356c <siprintf>
 800102c:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
	  while(1);
 8001030:	e7fe      	b.n	8001030 <audioLoop+0x150>
	}

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8001032:	f000 f949 	bl	80012c8 <accumulateInputLevels>
		count++;
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <audioLoop+0x308>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a6a      	ldr	r2, [pc, #424]	; (80011e8 <audioLoop+0x308>)
 800103e:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8001040:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <audioLoop+0x308>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b13      	cmp	r3, #19
 8001046:	dd3c      	ble.n	80010c2 <audioLoop+0x1e2>
			count = 0;
 8001048:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <audioLoop+0x308>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 800104e:	4b67      	ldr	r3, [pc, #412]	; (80011ec <audioLoop+0x30c>)
 8001050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001054:	a356      	add	r3, pc, #344	; (adr r3, 80011b0 <audioLoop+0x2d0>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff faed 	bl	8000638 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4962      	ldr	r1, [pc, #392]	; (80011ec <audioLoop+0x30c>)
 8001064:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 8001068:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <audioLoop+0x310>)
 800106a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106e:	a350      	add	r3, pc, #320	; (adr r3, 80011b0 <audioLoop+0x2d0>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fae0 	bl	8000638 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	495c      	ldr	r1, [pc, #368]	; (80011f0 <audioLoop+0x310>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]

			uiDisplayInputLevel(inputLevelL, inputLevelR);
 8001082:	4b5a      	ldr	r3, [pc, #360]	; (80011ec <audioLoop+0x30c>)
 8001084:	ed93 7b00 	vldr	d7, [r3]
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <audioLoop+0x310>)
 800108a:	ed93 6b00 	vldr	d6, [r3]
 800108e:	eeb0 1a46 	vmov.f32	s2, s12
 8001092:	eef0 1a66 	vmov.f32	s3, s13
 8001096:	eeb0 0a47 	vmov.f32	s0, s14
 800109a:	eef0 0a67 	vmov.f32	s1, s15
 800109e:	f002 fc17 	bl	80038d0 <uiDisplayInputLevel>

			inputLevelL = 0.;
 80010a2:	4952      	ldr	r1, [pc, #328]	; (80011ec <audioLoop+0x30c>)
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 80010b0:	494f      	ldr	r1, [pc, #316]	; (80011f0 <audioLoop+0x310>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until first half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 80010be:	e000      	b.n	80010c2 <audioLoop+0x1e2>
			asm("NOP");
 80010c0:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <audioLoop+0x2e0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d1fa      	bne.n	80010c0 <audioLoop+0x1e0>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <audioLoop+0x2e0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80010d6:	e051      	b.n	800117c <audioLoop+0x29c>

			// Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 80010de:	e018      	b.n	8001112 <audioLoop+0x232>
			{
			  ((ai_float *)in_data)[i] = (ai_float)buf_input[k + i];
 80010e0:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 80010e4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80010e8:	4413      	add	r3, r2
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <audioLoop+0x2e8>)
 80010ec:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80010f0:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010fa:	4413      	add	r3, r2
 80010fc:	ee07 1a90 	vmov	s15, r1
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	edc3 7a00 	vstr	s15, [r3]
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001108:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800110c:	3301      	adds	r3, #1
 800110e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8001112:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8001116:	2b77      	cmp	r3, #119	; 0x77
 8001118:	d9e2      	bls.n	80010e0 <audioLoop+0x200>
			}

			// Perform inference
			nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 800111a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001124:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001128:	4618      	mov	r0, r3
 800112a:	f00e fcc0 	bl	800faae <ai_tonecrafter_run>
 800112e:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
			if (nbatch != 1) {
 8001132:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001136:	2b01      	cmp	r3, #1
 8001138:	d007      	beq.n	800114a <audioLoop+0x26a>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800113a:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 800113e:	492d      	ldr	r1, [pc, #180]	; (80011f4 <audioLoop+0x314>)
 8001140:	4618      	mov	r0, r3
 8001142:	f012 fa13 	bl	801356c <siprintf>
 8001146:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 800114a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001154:	6013      	str	r3, [r2, #0]
			buf_input[k] = y_val;
 8001156:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	b219      	sxth	r1, r3
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <audioLoop+0x2e8>)
 800116a:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800116e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 8001172:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8001176:	3301      	adds	r3, #1
 8001178:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800117c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8001180:	2b13      	cmp	r3, #19
 8001182:	d9a9      	bls.n	80010d8 <audioLoop+0x1f8>
		}
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8001184:	4910      	ldr	r1, [pc, #64]	; (80011c8 <audioLoop+0x2e8>)
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <audioLoop+0x2ec>)
 8001188:	f000 f97e 	bl	8001488 <processAudio>

		/* Wait until second half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 800118c:	e000      	b.n	8001190 <audioLoop+0x2b0>
			asm("NOP");
 800118e:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <audioLoop+0x2e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d1fa      	bne.n	800118e <audioLoop+0x2ae>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <audioLoop+0x2e0>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80011a4:	e07b      	b.n	800129e <audioLoop+0x3be>

			// Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE ; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80011ac:	e040      	b.n	8001230 <audioLoop+0x350>
 80011ae:	bf00      	nop
 80011b0:	9999999a 	.word	0x9999999a
 80011b4:	3fa99999 	.word	0x3fa99999
 80011b8:	0076a000 	.word	0x0076a000
 80011bc:	c0096000 	.word	0xc0096000
 80011c0:	20000f50 	.word	0x20000f50
 80011c4:	2000117c 	.word	0x2000117c
 80011c8:	20000af0 	.word	0x20000af0
 80011cc:	20000d20 	.word	0x20000d20
 80011d0:	080163e0 	.word	0x080163e0
 80011d4:	080163f8 	.word	0x080163f8
 80011d8:	40040440 	.word	0x40040440
 80011dc:	00040440 	.word	0x00040440
 80011e0:	08016370 	.word	0x08016370
 80011e4:	08016398 	.word	0x08016398
 80011e8:	20000974 	.word	0x20000974
 80011ec:	20000978 	.word	0x20000978
 80011f0:	20000980 	.word	0x20000980
 80011f4:	080163bc 	.word	0x080163bc
			{
			  ((ai_float *)in_data)[i] = (ai_float)buf_input_half[k + i];
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <audioLoop+0x3dc>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8001200:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001204:	440b      	add	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800120e:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001218:	4413      	add	r3, r2
 800121a:	ee07 1a90 	vmov	s15, r1
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	edc3 7a00 	vstr	s15, [r3]
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE ; i++)
 8001226:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8001230:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001234:	2b77      	cmp	r3, #119	; 0x77
 8001236:	d9df      	bls.n	80011f8 <audioLoop+0x318>
			}

			// Perform inference
			nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 8001238:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001242:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001246:	4618      	mov	r0, r3
 8001248:	f00e fc31 	bl	800faae <ai_tonecrafter_run>
 800124c:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
			if (nbatch != 1) {
 8001250:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <audioLoop+0x388>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001258:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 800125c:	4918      	ldr	r1, [pc, #96]	; (80012c0 <audioLoop+0x3e0>)
 800125e:	4618      	mov	r0, r3
 8001260:	f012 f984 	bl	801356c <siprintf>
 8001264:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 8001268:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001272:	6013      	str	r3, [r2, #0]
			buf_input_half[k] = y_val;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <audioLoop+0x3dc>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001284:	edd2 7a00 	vldr	s15, [r2]
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 2a90 	vmov	r2, s15
 8001290:	b212      	sxth	r2, r2
 8001292:	801a      	strh	r2, [r3, #0]
		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 8001294:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001298:	3301      	adds	r3, #1
 800129a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800129e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80012a2:	2b13      	cmp	r3, #19
 80012a4:	f67f af7f 	bls.w	80011a6 <audioLoop+0x2c6>
		}
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <audioLoop+0x3e4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <audioLoop+0x3dc>)
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f8e8 	bl	8001488 <processAudio>
		accumulateInputLevels();
 80012b8:	e6bb      	b.n	8001032 <audioLoop+0x152>
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	080163bc 	.word	0x080163bc
 80012c4:	20000004 	.word	0x20000004

080012c8 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	e016      	b.n	8001306 <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 80012d8:	4a3e      	ldr	r2, [pc, #248]	; (80013d4 <accumulateInputLevels+0x10c>)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 80012e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dd05      	ble.n	80012f6 <accumulateInputLevels+0x2e>
			lvl += v;
 80012ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e004      	b.n	8001300 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 80012f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3302      	adds	r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800130c:	d3e4      	bcc.n	80012d8 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff f918 	bl	8000544 <__aeabi_ui2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <accumulateInputLevels+0x110>)
 800131a:	f7ff fab7 	bl	800088c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <accumulateInputLevels+0x114>)
 800132c:	f7ff faae 	bl	800088c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <accumulateInputLevels+0x118>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7fe ffc5 	bl	80002cc <__adddf3>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4926      	ldr	r1, [pc, #152]	; (80013e0 <accumulateInputLevels+0x118>)
 8001348:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001350:	2301      	movs	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	e016      	b.n	8001384 <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <accumulateInputLevels+0x10c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800135e:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8001360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd05      	ble.n	8001374 <accumulateInputLevels+0xac>
			lvl += v;
 8001368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e004      	b.n	800137e <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 8001374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3302      	adds	r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800138a:	d3e4      	bcc.n	8001356 <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff f8d9 	bl	8000544 <__aeabi_ui2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <accumulateInputLevels+0x110>)
 8001398:	f7ff fa78 	bl	800088c <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <accumulateInputLevels+0x114>)
 80013aa:	f7ff fa6f 	bl	800088c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <accumulateInputLevels+0x11c>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7fe ff86 	bl	80002cc <__adddf3>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <accumulateInputLevels+0x11c>)
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
	;
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000af0 	.word	0x20000af0
 80013d8:	40718000 	.word	0x40718000
 80013dc:	40e00000 	.word	0x40e00000
 80013e0:	20000978 	.word	0x20000978
 80013e4:	20000980 	.word	0x20000980

080013e8 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_SAI_RxCpltCallback+0x1c>)
 80013f2:	2202      	movs	r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
	return;
 80013f6:	bf00      	nop
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000f50 	.word	0x20000f50

08001408 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
	return;
 8001416:	bf00      	nop
}
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000f50 	.word	0x20000f50

08001428 <no_effect>:
// --------------------------- AUDIO ALGORITHMS ---------------------------

/**
 * No effect function which simply reproduces the input on the output
 */
static void no_effect(int16_t *out, int16_t *in) {
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]

	float A = 1.0;
 8001432:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001436:	60bb      	str	r3, [r7, #8]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e01a      	b.n	8001474 <no_effect+0x4c>
		out[n] = A * in[n];
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	edd7 7a02 	vldr	s15, [r7, #8]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 2a90 	vmov	r2, s15
 800146a:	b212      	sxth	r2, r2
 800146c:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b8b      	cmp	r3, #139	; 0x8b
 8001478:	d9e1      	bls.n	800143e <no_effect+0x16>
	}

}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 8001492:	f002 faa9 	bl	80039e8 <LED_On>

	no_effect(out, in); // If you want no effect on the audio output
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffc5 	bl	8001428 <no_effect>
	// echo_effect(out, in); // If you want a echo effect on the audio output
	// noise_gate(out, in);

	LED_Off();
 800149e:	f002 faaf 	bl	8003a00 <LED_Off>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014c4:	f3bf 8f4f 	dsb	sy
}
 80014c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ca:	f3bf 8f6f 	isb	sy
}
 80014ce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <SCB_EnableICache+0x48>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014d8:	f3bf 8f4f 	dsb	sy
}
 80014dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014de:	f3bf 8f6f 	isb	sy
}
 80014e2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <SCB_EnableICache+0x48>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <SCB_EnableICache+0x48>)
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f6:	f3bf 8f6f 	isb	sy
}
 80014fa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001510:	f3bf 8f4f 	dsb	sy
}
 8001514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001516:	f3bf 8f6f 	isb	sy
}
 800151a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <SCB_InvalidateICache+0x30>)
 800151e:	2200      	movs	r2, #0
 8001520:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001524:	f3bf 8f4f 	dsb	sy
}
 8001528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800152a:	f3bf 8f6f 	isb	sy
}
 800152e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <SCB_EnableDCache+0x84>)
 8001548:	2200      	movs	r2, #0
 800154a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800154e:	f3bf 8f4f 	dsb	sy
}
 8001552:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <SCB_EnableDCache+0x84>)
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	0b5b      	lsrs	r3, r3, #13
 8001560:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001564:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800156e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001578:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800157e:	4911      	ldr	r1, [pc, #68]	; (80015c4 <SCB_EnableDCache+0x84>)
 8001580:	4313      	orrs	r3, r2
 8001582:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ef      	bne.n	8001570 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	60fa      	str	r2, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1e5      	bne.n	8001566 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800159a:	f3bf 8f4f 	dsb	sy
}
 800159e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <SCB_EnableDCache+0x84>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <SCB_EnableDCache+0x84>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ac:	f3bf 8f4f 	dsb	sy
}
 80015b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b2:	f3bf 8f6f 	isb	sy
}
 80015b6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <SCB_InvalidateDCache+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015d6:	f3bf 8f4f 	dsb	sy
}
 80015da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <SCB_InvalidateDCache+0x74>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0b5b      	lsrs	r3, r3, #13
 80015e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	08db      	lsrs	r3, r3, #3
 80015f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001600:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <SCB_InvalidateDCache+0x74>)
 8001608:	4313      	orrs	r3, r2
 800160a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ef      	bne.n	80015f8 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	60fa      	str	r2, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1e5      	bne.n	80015ee <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001622:	f3bf 8f4f 	dsb	sy
}
 8001626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001628:	f3bf 8f6f 	isb	sy
}
 800162c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001644:	f7ff ffc0 	bl	80015c8 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001648:	f7ff ff60 	bl	800150c <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800164c:	f004 f86b 	bl	8005726 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001650:	f000 f826 	bl	80016a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001654:	f000 fd9e 	bl	8002194 <MX_GPIO_Init>
	MX_DMA_Init();
 8001658:	f000 fcda 	bl	8002010 <MX_DMA_Init>
	MX_ADC3_Init();
 800165c:	f000 f8e0 	bl	8001820 <MX_ADC3_Init>
	MX_CRC_Init();
 8001660:	f000 f930 	bl	80018c4 <MX_CRC_Init>
	MX_DCMI_Init();
 8001664:	f000 f950 	bl	8001908 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001668:	f000 f982 	bl	8001970 <MX_DMA2D_Init>
	MX_FMC_Init();
 800166c:	f000 fd3e 	bl	80020ec <MX_FMC_Init>
	MX_I2C1_Init();
 8001670:	f000 f9b0 	bl	80019d4 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001674:	f000 f9ee 	bl	8001a54 <MX_I2C3_Init>
	MX_LTDC_Init();
 8001678:	f000 fa2c 	bl	8001ad4 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800167c:	f000 faae 	bl	8001bdc <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001680:	f000 faee 	bl	8001c60 <MX_RTC_Init>
	MX_SAI2_Init();
 8001684:	f000 fb92 	bl	8001dac <MX_SAI2_Init>
//	MX_TIM1_Init();
//	MX_TIM2_Init();
//	MX_TIM3_Init();
//	MX_TIM5_Init();
//	MX_TIM8_Init();
	MX_TIM12_Init();
 8001688:	f000 fc4c 	bl	8001f24 <MX_TIM12_Init>
//	MX_USART1_UART_Init();
	MX_USART6_UART_Init();
 800168c:	f000 fc90 	bl	8001fb0 <MX_USART6_UART_Init>

	/* post-init touchscreen */
//	TS_Init();
//	printf("Touchscreen Init: OK\n");

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001690:	f7ff ff16 	bl	80014c0 <SCB_EnableICache>
	SCB_EnableDCache();
 8001694:	f7ff ff54 	bl	8001540 <SCB_EnableDCache>

	//test();
	audioLoop(); // comment to use RTOS (see below)
 8001698:	f7ff fc22 	bl	8000ee0 <audioLoop>
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
      while(1);
    }*/

	while (1)
 800169c:	e7fe      	b.n	800169c <main+0x5c>
	...

080016a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0b4      	sub	sp, #208	; 0xd0
 80016a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016aa:	2230      	movs	r2, #48	; 0x30
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f011 f98c 	bl	80129cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	2284      	movs	r2, #132	; 0x84
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f011 f97d 	bl	80129cc <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80016d2:	f008 fc03 	bl	8009edc <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b4f      	ldr	r3, [pc, #316]	; (8001814 <SystemClock_Config+0x174>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <SystemClock_Config+0x174>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <SystemClock_Config+0x174>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <SystemClock_Config+0x178>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a49      	ldr	r2, [pc, #292]	; (8001818 <SystemClock_Config+0x178>)
 80016f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <SystemClock_Config+0x178>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001706:	2309      	movs	r3, #9
 8001708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001714:	2301      	movs	r3, #1
 8001716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001720:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001728:	2319      	movs	r3, #25
 800172a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800172e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800173c:	2309      	movs	r3, #9
 800173e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001746:	4618      	mov	r0, r3
 8001748:	f009 fbec 	bl	800af24 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8001752:	f000 ff5d 	bl	8002610 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001756:	f008 fbd1 	bl	8009efc <HAL_PWREx_EnableOverDrive>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001760:	f000 ff56 	bl	8002610 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800177a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001786:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800178a:	2106      	movs	r1, #6
 800178c:	4618      	mov	r0, r3
 800178e:	f009 fe6d 	bl	800b46c <HAL_RCC_ClockConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001798:	f000 ff3a 	bl	8002610 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <SystemClock_Config+0x17c>)
 800179e:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80017a0:	2364      	movs	r3, #100	; 0x64
 80017a2:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017b4:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017b6:	2305      	movs	r3, #5
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 80017ba:	2308      	movs	r3, #8
 80017bc:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017be:	2303      	movs	r3, #3
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80017d6:	2300      	movs	r3, #0
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017da:	2300      	movs	r3, #0
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80017de:	2300      	movs	r3, #0
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a f83d 	bl	800b87c <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001808:	f000 ff02 	bl	8002610 <Error_Handler>
	}
}
 800180c:	bf00      	nop
 800180e:	37d0      	adds	r7, #208	; 0xd0
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
 800181c:	01b14868 	.word	0x01b14868

08001820 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <MX_ADC3_Init+0x9c>)
 8001836:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_ADC3_Init+0x98>)
 800183a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800183e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_ADC3_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_ADC3_Init+0x98>)
 800185c:	2200      	movs	r2, #0
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001862:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <MX_ADC3_Init+0xa0>)
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_ADC3_Init+0x98>)
 800186e:	2201      	movs	r2, #1
 8001870:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_ADC3_Init+0x98>)
 800187c:	2201      	movs	r2, #1
 800187e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_ADC3_Init+0x98>)
 8001882:	f003 ffa1 	bl	80057c8 <HAL_ADC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800188c:	f000 fec0 	bl	8002610 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001890:	2304      	movs	r3, #4
 8001892:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001894:	2301      	movs	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_ADC3_Init+0x98>)
 80018a2:	f003 ffd5 	bl	8005850 <HAL_ADC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80018ac:	f000 feb0 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20001494 	.word	0x20001494
 80018bc:	40012200 	.word	0x40012200
 80018c0:	0f000001 	.word	0x0f000001

080018c4 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_CRC_Init+0x3c>)
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <MX_CRC_Init+0x40>)
 80018cc:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_CRC_Init+0x3c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_CRC_Init+0x3c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_CRC_Init+0x3c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_CRC_Init+0x3c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_CRC_Init+0x3c>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_CRC_Init+0x3c>)
 80018ee:	f004 fb07 	bl	8005f00 <HAL_CRC_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80018f8:	f000 fe8a 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000124c 	.word	0x2000124c
 8001904:	40023000 	.word	0x40023000

08001908 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_DCMI_Init+0x60>)
 800190e:	4a17      	ldr	r2, [pc, #92]	; (800196c <MX_DCMI_Init+0x64>)
 8001910:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_DCMI_Init+0x60>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_DCMI_Init+0x60>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_DCMI_Init+0x60>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_DCMI_Init+0x60>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_DCMI_Init+0x60>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_DCMI_Init+0x60>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_DCMI_Init+0x60>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <MX_DCMI_Init+0x60>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_DCMI_Init+0x60>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_DCMI_Init+0x60>)
 800194a:	2200      	movs	r2, #0
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_DCMI_Init+0x60>)
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_DCMI_Init+0x60>)
 8001956:	f004 fbbd 	bl	80060d4 <HAL_DCMI_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 8001960:	f000 fe56 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200014dc 	.word	0x200014dc
 800196c:	50050000 	.word	0x50050000

08001970 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_DMA2D_Init+0x5c>)
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <MX_DMA2D_Init+0x60>)
 8001978:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_DMA2D_Init+0x5c>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_DMA2D_Init+0x5c>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_DMA2D_Init+0x5c>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_DMA2D_Init+0x5c>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_DMA2D_Init+0x5c>)
 8001994:	2200      	movs	r2, #0
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_DMA2D_Init+0x5c>)
 800199a:	2200      	movs	r2, #0
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_DMA2D_Init+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <MX_DMA2D_Init+0x5c>)
 80019a6:	f005 f8e9 	bl	8006b7c <HAL_DMA2D_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80019b0:	f000 fe2e 	bl	8002610 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80019b4:	2101      	movs	r1, #1
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_DMA2D_Init+0x5c>)
 80019b8:	f005 fb4e 	bl	8007058 <HAL_DMA2D_ConfigLayer>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80019c2:	f000 fe25 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20001700 	.word	0x20001700
 80019d0:	4002b000 	.word	0x4002b000

080019d4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <MX_I2C1_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <MX_I2C1_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a10:	f007 f9e4 	bl	8008ddc <HAL_I2C_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001a1a:	f000 fdf9 	bl	8002610 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a22:	f007 fee5 	bl	80097f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001a2c:	f000 fdf0 	bl	8002610 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a34:	f007 ff27 	bl	8009886 <HAL_I2CEx_ConfigDigitalFilter>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001a3e:	f000 fde7 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20001200 	.word	0x20001200
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	00c0eaff 	.word	0x00c0eaff

08001a54 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <MX_I2C3_Init+0x78>)
 8001a5c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <MX_I2C3_Init+0x7c>)
 8001a62:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a8e:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001a90:	f007 f9a4 	bl	8008ddc <HAL_I2C_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001a9a:	f000 fdb9 	bl	8002610 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001aa2:	f007 fea5 	bl	80097f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001aac:	f000 fdb0 	bl	8002610 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_I2C3_Init+0x74>)
 8001ab4:	f007 fee7 	bl	8009886 <HAL_I2CEx_ConfigDigitalFilter>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001abe:	f000 fda7 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000fd8 	.word	0x20000fd8
 8001acc:	40005c00 	.word	0x40005c00
 8001ad0:	00c0eaff 	.word	0x00c0eaff

08001ad4 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2234      	movs	r2, #52	; 0x34
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f010 ff73 	bl	80129cc <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001ae8:	4a3b      	ldr	r2, [pc, #236]	; (8001bd8 <MX_LTDC_Init+0x104>)
 8001aea:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b06:	2228      	movs	r2, #40	; 0x28
 8001b08:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b0c:	2209      	movs	r2, #9
 8001b0e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b12:	2235      	movs	r2, #53	; 0x35
 8001b14:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b18:	220b      	movs	r2, #11
 8001b1a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b1e:	f240 2215 	movw	r2, #533	; 0x215
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b26:	f240 121b 	movw	r2, #283	; 0x11b
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b2e:	f240 2235 	movw	r2, #565	; 0x235
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b36:	f240 121d 	movw	r2, #285	; 0x11d
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b54:	481f      	ldr	r0, [pc, #124]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001b56:	f007 fee3 	bl	8009920 <HAL_LTDC_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001b60:	f000 fd56 	bl	8002610 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001b68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b6c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001b72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b76:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001b7c:	23ff      	movs	r3, #255	; 0xff
 8001b7e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b88:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001b8e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001b94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001b9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_LTDC_Init+0x100>)
 8001bba:	f007 ff81 	bl	8009ac0 <HAL_LTDC_ConfigLayer>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001bc4:	f000 fd24 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001bc8:	f002 f802 	bl	8003bd0 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200013ec 	.word	0x200013ec
 8001bd8:	40016800 	.word	0x40016800

08001bdc <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <MX_QUADSPI_Init+0x80>)
 8001be4:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001bfa:	2218      	movs	r2, #24
 8001bfc:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c00:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001c04:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c18:	480f      	ldr	r0, [pc, #60]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c1a:	f008 f9bf 	bl	8009f9c <HAL_QSPI_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001c24:	f000 fcf4 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c2a:	f002 fab3 	bl	8004194 <DISCO_QSPI_ResetMemory>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_QUADSPI_Init+0x5c>
 8001c34:	f000 fcec 	bl	8002610 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_QUADSPI_Init+0x7c>)
 8001c3a:	f002 faed 	bl	8004218 <DISCO_QSPI_DummyCyclesCfg>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_QUADSPI_Init+0x6c>
 8001c44:	f000 fce4 	bl	8002610 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001c48:	f002 fa72 	bl	8004130 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001c4c:	205c      	movs	r0, #92	; 0x5c
 8001c4e:	f004 f949 	bl	8005ee4 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000180c 	.word	0x2000180c
 8001c5c:	a0001000 	.word	0xa0001000

08001c60 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b092      	sub	sp, #72	; 0x48
 8001c64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001c66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	222c      	movs	r2, #44	; 0x2c
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f010 fea2 	bl	80129cc <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <MX_RTC_Init+0x144>)
 8001c8a:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <MX_RTC_Init+0x148>)
 8001c8c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c8e:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <MX_RTC_Init+0x144>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <MX_RTC_Init+0x144>)
 8001c96:	227f      	movs	r2, #127	; 0x7f
 8001c98:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001c9a:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <MX_RTC_Init+0x144>)
 8001c9c:	22ff      	movs	r2, #255	; 0xff
 8001c9e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ca0:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <MX_RTC_Init+0x144>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <MX_RTC_Init+0x144>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <MX_RTC_Init+0x144>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb2:	483c      	ldr	r0, [pc, #240]	; (8001da4 <MX_RTC_Init+0x144>)
 8001cb4:	f00a fb16 	bl	800c2e4 <HAL_RTC_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001cbe:	f000 fca7 	bl	8002610 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	482f      	ldr	r0, [pc, #188]	; (8001da4 <MX_RTC_Init+0x144>)
 8001ce6:	f00a fb8f 	bl	800c408 <HAL_RTC_SetTime>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001cf0:	f000 fc8e 	bl	8002610 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d10:	2201      	movs	r2, #1
 8001d12:	4619      	mov	r1, r3
 8001d14:	4823      	ldr	r0, [pc, #140]	; (8001da4 <MX_RTC_Init+0x144>)
 8001d16:	f00a fc35 	bl	800c584 <HAL_RTC_SetDate>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001d20:	f000 fc76 	bl	8002610 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4812      	ldr	r0, [pc, #72]	; (8001da4 <MX_RTC_Init+0x144>)
 8001d5c:	f00a fcba 	bl	800c6d4 <HAL_RTC_SetAlarm>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001d66:	f000 fc53 	bl	8002610 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	2201      	movs	r2, #1
 8001d74:	4619      	mov	r1, r3
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <MX_RTC_Init+0x144>)
 8001d78:	f00a fcac 	bl	800c6d4 <HAL_RTC_SetAlarm>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001d82:	f000 fc45 	bl	8002610 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d86:	2202      	movs	r2, #2
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4806      	ldr	r0, [pc, #24]	; (8001da4 <MX_RTC_Init+0x144>)
 8001d8c:	f00a fe2c 	bl	800c9e8 <HAL_RTCEx_SetTimeStamp>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001d96:	f000 fc3b 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	3748      	adds	r7, #72	; 0x48
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200015b0 	.word	0x200015b0
 8001da8:	40002800 	.word	0x40002800

08001dac <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001db2:	4a59      	ldr	r2, [pc, #356]	; (8001f18 <MX_SAI2_Init+0x16c>)
 8001db4:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001db6:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001dbc:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001dc2:	4b54      	ldr	r3, [pc, #336]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dc8:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001dda:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de0:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001de2:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001de8:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001dee:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001df0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001df4:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dfc:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e02:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e16:	2220      	movs	r2, #32
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e20:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e28:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e3e:	2204      	movs	r2, #4
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e44:	2205      	movs	r2, #5
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e48:	4832      	ldr	r0, [pc, #200]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001e4a:	f00a fe23 	bl	800ca94 <HAL_SAI_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001e54:	f000 fbdc 	bl	8002610 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e5a:	4a31      	ldr	r2, [pc, #196]	; (8001f20 <MX_SAI2_Init+0x174>)
 8001e5c:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e66:	2203      	movs	r2, #3
 8001e68:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001eae:	2220      	movs	r2, #32
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eb8:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ec2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ec6:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001edc:	220a      	movs	r2, #10
 8001ede:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001ee2:	f00a fdd7 	bl	800ca94 <HAL_SAI_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001eec:	f000 fb90 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <MX_SAI2_Init+0x168>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001efe:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <MX_SAI2_Init+0x170>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f0e:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000117c 	.word	0x2000117c
 8001f18:	40015c04 	.word	0x40015c04
 8001f1c:	20000f54 	.word	0x20000f54
 8001f20:	40015c24 	.word	0x40015c24

08001f24 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	615a      	str	r2, [r3, #20]
 8001f3a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <MX_TIM12_Init+0x88>)
 8001f40:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f54:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f64:	f00b fabe 	bl	800d4e4 <HAL_TIM_PWM_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8001f6e:	f000 fb4f 	bl	8002610 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f72:	2360      	movs	r3, #96	; 0x60
 8001f74:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f8a:	f00b fc21 	bl	800d7d0 <HAL_TIM_PWM_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8001f94:	f000 fb3c 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM12_Init+0x84>)
 8001f9a:	f000 ffb7 	bl	8002f0c <HAL_TIM_MspPostInit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000178c 	.word	0x2000178c
 8001fac:	40001800 	.word	0x40001800

08001fb0 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fb6:	4a15      	ldr	r2, [pc, #84]	; (800200c <MX_USART6_UART_Init+0x5c>)
 8001fb8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_USART6_UART_Init+0x58>)
 8001ff4:	f00c f840 	bl	800e078 <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8001ffe:	f000 fb07 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000167c 	.word	0x2000167c
 800200c:	40011400 	.word	0x40011400

08002010 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <MX_DMA_Init+0xd0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <MX_DMA_Init+0xd0>)
 800201c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <MX_DMA_Init+0xd0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002030:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <MX_DMA_Init+0xd8>)
 8002032:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <MX_DMA_Init+0xd4>)
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002046:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <MX_DMA_Init+0xd4>)
 800204a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204e:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002056:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <MX_DMA_Init+0xd4>)
 800205a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205e:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800206c:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002070:	2204      	movs	r2, #4
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002076:	2203      	movs	r2, #3
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_DMA_Init+0xd4>)
 800207c:	2200      	movs	r2, #0
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002086:	4817      	ldr	r0, [pc, #92]	; (80020e4 <MX_DMA_Init+0xd4>)
 8002088:	f004 f96e 	bl	8006368 <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 8002092:	f000 fabd 	bl	8002610 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2105      	movs	r1, #5
 800209a:	2038      	movs	r0, #56	; 0x38
 800209c:	f003 fef8 	bl	8005e90 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020a0:	2038      	movs	r0, #56	; 0x38
 80020a2:	f003 ff11 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2105      	movs	r1, #5
 80020aa:	2039      	movs	r0, #57	; 0x39
 80020ac:	f003 fef0 	bl	8005e90 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020b0:	2039      	movs	r0, #57	; 0x39
 80020b2:	f003 ff09 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2105      	movs	r1, #5
 80020ba:	203c      	movs	r0, #60	; 0x3c
 80020bc:	f003 fee8 	bl	8005e90 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80020c0:	203c      	movs	r0, #60	; 0x3c
 80020c2:	f003 ff01 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2105      	movs	r1, #5
 80020ca:	2046      	movs	r0, #70	; 0x46
 80020cc:	f003 fee0 	bl	8005e90 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80020d0:	2046      	movs	r0, #70	; 0x46
 80020d2:	f003 fef9 	bl	8005ec8 <HAL_NVIC_EnableIRQ>

}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	20001024 	.word	0x20001024
 80020e8:	40026410 	.word	0x40026410

080020ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_FMC_Init+0xa0>)
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <MX_FMC_Init+0xa4>)
 8002108:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_FMC_Init+0xa0>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_FMC_Init+0xa0>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_FMC_Init+0xa0>)
 8002118:	2204      	movs	r2, #4
 800211a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_FMC_Init+0xa0>)
 800211e:	2210      	movs	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_FMC_Init+0xa0>)
 8002124:	2240      	movs	r2, #64	; 0x40
 8002126:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_FMC_Init+0xa0>)
 800212a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212e:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_FMC_Init+0xa0>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <MX_FMC_Init+0xa0>)
 8002138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_FMC_Init+0xa0>)
 8002140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_FMC_Init+0xa0>)
 8002148:	2200      	movs	r2, #0
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002150:	2307      	movs	r3, #7
 8002152:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002154:	2304      	movs	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8002158:	2307      	movs	r3, #7
 800215a:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 800215c:	2303      	movs	r3, #3
 800215e:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4807      	ldr	r0, [pc, #28]	; (800218c <MX_FMC_Init+0xa0>)
 800216e:	f00b f86a 	bl	800d246 <HAL_SDRAM_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8002178:	f000 fa4a 	bl	8002610 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800217c:	f240 6003 	movw	r0, #1539	; 0x603
 8002180:	f002 f9d4 	bl	800452c <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 8002184:	bf00      	nop
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200017d8 	.word	0x200017d8
 8002190:	a0000140 	.word	0xa0000140

08002194 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b090      	sub	sp, #64	; 0x40
 8002198:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	4baf      	ldr	r3, [pc, #700]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4aae      	ldr	r2, [pc, #696]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4bac      	ldr	r3, [pc, #688]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80021c2:	4ba9      	ldr	r3, [pc, #676]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4aa8      	ldr	r2, [pc, #672]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4ba6      	ldr	r3, [pc, #664]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	4ba3      	ldr	r3, [pc, #652]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4aa2      	ldr	r2, [pc, #648]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4ba0      	ldr	r3, [pc, #640]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80021f2:	4b9d      	ldr	r3, [pc, #628]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a9c      	ldr	r2, [pc, #624]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b9a      	ldr	r3, [pc, #616]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	4b97      	ldr	r3, [pc, #604]	; (8002468 <MX_GPIO_Init+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a96      	ldr	r2, [pc, #600]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b94      	ldr	r3, [pc, #592]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b91      	ldr	r3, [pc, #580]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a90      	ldr	r2, [pc, #576]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b8e      	ldr	r3, [pc, #568]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800223a:	4b8b      	ldr	r3, [pc, #556]	; (8002468 <MX_GPIO_Init+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002252:	4b85      	ldr	r3, [pc, #532]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a84      	ldr	r2, [pc, #528]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800226a:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <MX_GPIO_Init+0x2d4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a7e      	ldr	r2, [pc, #504]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002282:	4b79      	ldr	r3, [pc, #484]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a78      	ldr	r2, [pc, #480]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b76      	ldr	r3, [pc, #472]	; (8002468 <MX_GPIO_Init+0x2d4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800229a:	4b73      	ldr	r3, [pc, #460]	; (8002468 <MX_GPIO_Init+0x2d4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a72      	ldr	r2, [pc, #456]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b70      	ldr	r3, [pc, #448]	; (8002468 <MX_GPIO_Init+0x2d4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	2120      	movs	r1, #32
 80022b6:	486d      	ldr	r0, [pc, #436]	; (800246c <MX_GPIO_Init+0x2d8>)
 80022b8:	f005 fab4 	bl	8007824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	210e      	movs	r1, #14
 80022c0:	486b      	ldr	r0, [pc, #428]	; (8002470 <MX_GPIO_Init+0x2dc>)
 80022c2:	f005 faaf 	bl	8007824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2108      	movs	r1, #8
 80022ca:	486a      	ldr	r0, [pc, #424]	; (8002474 <MX_GPIO_Init+0x2e0>)
 80022cc:	f005 faaa 	bl	8007824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d6:	4866      	ldr	r0, [pc, #408]	; (8002470 <MX_GPIO_Init+0x2dc>)
 80022d8:	f005 faa4 	bl	8007824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e2:	4865      	ldr	r0, [pc, #404]	; (8002478 <MX_GPIO_Init+0x2e4>)
 80022e4:	f005 fa9e 	bl	8007824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	21c8      	movs	r1, #200	; 0xc8
 80022ec:	4863      	ldr	r0, [pc, #396]	; (800247c <MX_GPIO_Init+0x2e8>)
 80022ee:	f005 fa99 	bl	8007824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80022f2:	2308      	movs	r3, #8
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	485e      	ldr	r0, [pc, #376]	; (8002480 <MX_GPIO_Init+0x2ec>)
 8002306:	f004 ffd5 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800230a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800231c:	230b      	movs	r3, #11
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002324:	4619      	mov	r1, r3
 8002326:	4855      	ldr	r0, [pc, #340]	; (800247c <MX_GPIO_Init+0x2e8>)
 8002328:	f004 ffc4 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800232c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800233e:	230a      	movs	r3, #10
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002346:	4619      	mov	r1, r3
 8002348:	484e      	ldr	r0, [pc, #312]	; (8002484 <MX_GPIO_Init+0x2f0>)
 800234a:	f004 ffb3 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	4849      	ldr	r0, [pc, #292]	; (8002488 <MX_GPIO_Init+0x2f4>)
 8002364:	f004 ffa6 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002368:	2340      	movs	r3, #64	; 0x40
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800236c:	4b47      	ldr	r3, [pc, #284]	; (800248c <MX_GPIO_Init+0x2f8>)
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	483c      	ldr	r0, [pc, #240]	; (800246c <MX_GPIO_Init+0x2d8>)
 800237c:	f004 ff9a 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002380:	2320      	movs	r3, #32
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002394:	4619      	mov	r1, r3
 8002396:	4835      	ldr	r0, [pc, #212]	; (800246c <MX_GPIO_Init+0x2d8>)
 8002398:	f004 ff8c 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 800239c:	f241 030e 	movw	r3, #4110	; 0x100e
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b2:	4619      	mov	r1, r3
 80023b4:	482e      	ldr	r0, [pc, #184]	; (8002470 <MX_GPIO_Init+0x2dc>)
 80023b6:	f004 ff7d 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80023ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023cc:	4619      	mov	r1, r3
 80023ce:	4830      	ldr	r0, [pc, #192]	; (8002490 <MX_GPIO_Init+0x2fc>)
 80023d0:	f004 ff70 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80023d4:	2308      	movs	r3, #8
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	4619      	mov	r1, r3
 80023ea:	4822      	ldr	r0, [pc, #136]	; (8002474 <MX_GPIO_Init+0x2e0>)
 80023ec:	f004 ff62 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023f0:	2310      	movs	r3, #16
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	4619      	mov	r1, r3
 8002402:	481a      	ldr	r0, [pc, #104]	; (800246c <MX_GPIO_Init+0x2d8>)
 8002404:	f004 ff56 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002408:	f248 0304 	movw	r3, #32772	; 0x8004
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241a:	4619      	mov	r1, r3
 800241c:	4816      	ldr	r0, [pc, #88]	; (8002478 <MX_GPIO_Init+0x2e4>)
 800241e:	f004 ff49 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	4619      	mov	r1, r3
 800243a:	480f      	ldr	r0, [pc, #60]	; (8002478 <MX_GPIO_Init+0x2e4>)
 800243c:	f004 ff3a 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002452:	4619      	mov	r1, r3
 8002454:	4806      	ldr	r0, [pc, #24]	; (8002470 <MX_GPIO_Init+0x2dc>)
 8002456:	f004 ff2d 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800245a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_GPIO_Init+0x300>)
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	e017      	b.n	8002498 <MX_GPIO_Init+0x304>
 8002468:	40023800 	.word	0x40023800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40022000 	.word	0x40022000
 8002474:	40022800 	.word	0x40022800
 8002478:	40021c00 	.word	0x40021c00
 800247c:	40021800 	.word	0x40021800
 8002480:	40021000 	.word	0x40021000
 8002484:	40020400 	.word	0x40020400
 8002488:	40022400 	.word	0x40022400
 800248c:	10120000 	.word	0x10120000
 8002490:	40020800 	.word	0x40020800
 8002494:	10110000 	.word	0x10110000
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	4844      	ldr	r0, [pc, #272]	; (80025b4 <MX_GPIO_Init+0x420>)
 80024a2:	f004 ff07 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80024a6:	2310      	movs	r3, #16
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024b6:	230a      	movs	r3, #10
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	483d      	ldr	r0, [pc, #244]	; (80025b8 <MX_GPIO_Init+0x424>)
 80024c2:	f004 fef7 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80024c6:	23c8      	movs	r3, #200	; 0xc8
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ca:	2301      	movs	r3, #1
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	4837      	ldr	r0, [pc, #220]	; (80025bc <MX_GPIO_Init+0x428>)
 80024de:	f004 fee9 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80024e2:	2305      	movs	r3, #5
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024f2:	230a      	movs	r3, #10
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4830      	ldr	r0, [pc, #192]	; (80025c0 <MX_GPIO_Init+0x42c>)
 80024fe:	f004 fed9 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002502:	2332      	movs	r3, #50	; 0x32
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002512:	230b      	movs	r3, #11
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251a:	4619      	mov	r1, r3
 800251c:	4828      	ldr	r0, [pc, #160]	; (80025c0 <MX_GPIO_Init+0x42c>)
 800251e:	f004 fec9 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002522:	2304      	movs	r3, #4
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002532:	4619      	mov	r1, r3
 8002534:	4821      	ldr	r0, [pc, #132]	; (80025bc <MX_GPIO_Init+0x428>)
 8002536:	f004 febd 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800253a:	2386      	movs	r3, #134	; 0x86
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800254a:	230b      	movs	r3, #11
 800254c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002552:	4619      	mov	r1, r3
 8002554:	481b      	ldr	r0, [pc, #108]	; (80025c4 <MX_GPIO_Init+0x430>)
 8002556:	f004 fead 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800255a:	2328      	movs	r3, #40	; 0x28
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800256a:	230a      	movs	r3, #10
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4813      	ldr	r0, [pc, #76]	; (80025c4 <MX_GPIO_Init+0x430>)
 8002576:	f004 fe9d 	bl	80072b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800257a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800258c:	2305      	movs	r3, #5
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	480c      	ldr	r0, [pc, #48]	; (80025c8 <MX_GPIO_Init+0x434>)
 8002598:	f004 fe8c 	bl	80072b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2105      	movs	r1, #5
 80025a0:	2028      	movs	r0, #40	; 0x28
 80025a2:	f003 fc75 	bl	8005e90 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025a6:	2028      	movs	r0, #40	; 0x28
 80025a8:	f003 fc8e 	bl	8005ec8 <HAL_NVIC_EnableIRQ>

}
 80025ac:	bf00      	nop
 80025ae:	3740      	adds	r7, #64	; 0x40
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021c00 	.word	0x40021c00
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020000 	.word	0x40020000
 80025c8:	40020400 	.word	0x40020400

080025cc <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	printf(msg);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f010 ff15 	bl	8013404 <iprintf>
	printf("\n");
 80025da:	200a      	movs	r0, #10
 80025dc:	f010 ff2a 	bl	8013434 <putchar>
	Error_Handler();
 80025e0:	f000 f816 	bl	8002610 <Error_Handler>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80025fe:	f003 f89f 	bl	8005740 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40001000 	.word	0x40001000

08002610 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002614:	f001 fa00 	bl	8003a18 <LED_Toggle>
		HAL_Delay(100);
 8002618:	2064      	movs	r0, #100	; 0x64
 800261a:	f003 f8b1 	bl	8005780 <HAL_Delay>
		LED_Toggle();
 800261e:	e7f9      	b.n	8002614 <Error_Handler+0x4>

08002620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_MspInit+0x4c>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_MspInit+0x4c>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_MspInit+0x4c>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_MspInit+0x4c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_MspInit+0x4c>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_MspInit+0x4c>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	210f      	movs	r1, #15
 800265a:	f06f 0001 	mvn.w	r0, #1
 800265e:	f003 fc17 	bl	8005e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a21      	ldr	r2, [pc, #132]	; (8002714 <HAL_ADC_MspInit+0xa4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d13c      	bne.n	800270c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a20      	ldr	r2, [pc, #128]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 8002698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_ADC_MspInit+0xa8>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80026da:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026de:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e0:	2303      	movs	r3, #3
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <HAL_ADC_MspInit+0xac>)
 80026f0:	f004 fde0 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80026f4:	2301      	movs	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f8:	2303      	movs	r3, #3
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4806      	ldr	r0, [pc, #24]	; (8002720 <HAL_ADC_MspInit+0xb0>)
 8002708:	f004 fdd4 	bl	80072b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40012200 	.word	0x40012200
 8002718:	40023800 	.word	0x40023800
 800271c:	40021400 	.word	0x40021400
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_CRC_MspInit+0x38>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10b      	bne.n	800274e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_CRC_MspInit+0x3c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_CRC_MspInit+0x3c>)
 800273c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_CRC_MspInit+0x3c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023000 	.word	0x40023000
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <HAL_DCMI_MspInit+0x1d0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 80d2 	bne.w	800292c <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002788:	4b6b      	ldr	r3, [pc, #428]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	4a6a      	ldr	r2, [pc, #424]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6353      	str	r3, [r2, #52]	; 0x34
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027a6:	f043 0310 	orr.w	r3, r3, #16
 80027aa:	6313      	str	r3, [r2, #48]	; 0x30
 80027ac:	4b62      	ldr	r3, [pc, #392]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b8:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6313      	str	r3, [r2, #48]	; 0x30
 80027c4:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4a4c      	ldr	r2, [pc, #304]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6313      	str	r3, [r2, #48]	; 0x30
 800280c:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_DCMI_MspInit+0x1d4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002818:	2360      	movs	r3, #96	; 0x60
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002828:	230d      	movs	r3, #13
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	4842      	ldr	r0, [pc, #264]	; (800293c <HAL_DCMI_MspInit+0x1d8>)
 8002834:	f004 fd3e 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002838:	2308      	movs	r3, #8
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002848:	230d      	movs	r3, #13
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	483b      	ldr	r0, [pc, #236]	; (8002940 <HAL_DCMI_MspInit+0x1dc>)
 8002854:	f004 fd2e 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800286a:	230d      	movs	r3, #13
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800286e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002872:	4619      	mov	r1, r3
 8002874:	4833      	ldr	r0, [pc, #204]	; (8002944 <HAL_DCMI_MspInit+0x1e0>)
 8002876:	f004 fd1d 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800287a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800288c:	230d      	movs	r3, #13
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	482c      	ldr	r0, [pc, #176]	; (8002948 <HAL_DCMI_MspInit+0x1e4>)
 8002898:	f004 fd0c 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800289c:	2350      	movs	r3, #80	; 0x50
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028ac:	230d      	movs	r3, #13
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b4:	4619      	mov	r1, r3
 80028b6:	4825      	ldr	r0, [pc, #148]	; (800294c <HAL_DCMI_MspInit+0x1e8>)
 80028b8:	f004 fcfc 	bl	80072b4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028be:	4a25      	ldr	r2, [pc, #148]	; (8002954 <HAL_DCMI_MspInit+0x1f0>)
 80028c0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028dc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028e4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002900:	4813      	ldr	r0, [pc, #76]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 8002902:	f003 fd31 	bl	8006368 <HAL_DMA_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 800290c:	f7ff fe80 	bl	8002610 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 8002914:	649a      	str	r2, [r3, #72]	; 0x48
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_DCMI_MspInit+0x1ec>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2105      	movs	r1, #5
 8002920:	204e      	movs	r0, #78	; 0x4e
 8002922:	f003 fab5 	bl	8005e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002926:	204e      	movs	r0, #78	; 0x4e
 8002928:	f003 face 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800292c:	bf00      	nop
 800292e:	3738      	adds	r7, #56	; 0x38
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	50050000 	.word	0x50050000
 8002938:	40023800 	.word	0x40023800
 800293c:	40021000 	.word	0x40021000
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40020000 	.word	0x40020000
 8002950:	20001270 	.word	0x20001270
 8002954:	40026428 	.word	0x40026428

08002958 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_DMA2D_MspInit+0x44>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d113      	bne.n	8002992 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_DMA2D_MspInit+0x48>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_DMA2D_MspInit+0x48>)
 8002970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_DMA2D_MspInit+0x48>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2105      	movs	r1, #5
 8002986:	205a      	movs	r0, #90	; 0x5a
 8002988:	f003 fa82 	bl	8005e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800298c:	205a      	movs	r0, #90	; 0x5a
 800298e:	f003 fa9b 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	4002b000 	.word	0x4002b000
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <HAL_I2C_MspInit+0xdc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d129      	bne.n	8002a1a <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a2e      	ldr	r2, [pc, #184]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80029de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e4:	2312      	movs	r3, #18
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f0:	2304      	movs	r3, #4
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4823      	ldr	r0, [pc, #140]	; (8002a88 <HAL_I2C_MspInit+0xe4>)
 80029fc:	f004 fc5a 	bl	80072b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a18:	e02d      	b.n	8002a76 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_I2C_MspInit+0xe8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d128      	bne.n	8002a76 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002a3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a42:	2312      	movs	r3, #18
 8002a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	4619      	mov	r1, r3
 8002a58:	480d      	ldr	r0, [pc, #52]	; (8002a90 <HAL_I2C_MspInit+0xec>)
 8002a5a:	f004 fc2b 	bl	80072b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_I2C_MspInit+0xe0>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	bf00      	nop
 8002a78:	3730      	adds	r7, #48	; 0x30
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40005400 	.word	0x40005400
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40005c00 	.word	0x40005c00
 8002a90:	40021c00 	.word	0x40021c00

08002a94 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_I2C_MspDeInit+0x64>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d110      	bne.n	8002ac8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_I2C_MspDeInit+0x68>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a14      	ldr	r2, [pc, #80]	; (8002afc <HAL_I2C_MspDeInit+0x68>)
 8002aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ab6:	4812      	ldr	r0, [pc, #72]	; (8002b00 <HAL_I2C_MspDeInit+0x6c>)
 8002ab8:	f004 fda8 	bl	800760c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ac0:	480f      	ldr	r0, [pc, #60]	; (8002b00 <HAL_I2C_MspDeInit+0x6c>)
 8002ac2:	f004 fda3 	bl	800760c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002ac6:	e013      	b.n	8002af0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_I2C_MspDeInit+0x70>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10e      	bne.n	8002af0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_I2C_MspDeInit+0x68>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_I2C_MspDeInit+0x68>)
 8002ad8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <HAL_I2C_MspDeInit+0x74>)
 8002ae2:	f004 fd93 	bl	800760c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aea:	4807      	ldr	r0, [pc, #28]	; (8002b08 <HAL_I2C_MspDeInit+0x74>)
 8002aec:	f004 fd8e 	bl	800760c <HAL_GPIO_DeInit>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40005400 	.word	0x40005400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40005c00 	.word	0x40005c00
 8002b08:	40021c00 	.word	0x40021c00

08002b0c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <HAL_LTDC_MspInit+0x164>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	f040 809b 	bne.w	8002c66 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	4a4f      	ldr	r2, [pc, #316]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4a49      	ldr	r2, [pc, #292]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b4e:	f043 0310 	orr.w	r3, r3, #16
 8002b52:	6313      	str	r3, [r2, #48]	; 0x30
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b60:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a43      	ldr	r2, [pc, #268]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b78:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b90:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ba8:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <HAL_LTDC_MspInit+0x168>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bd0:	230e      	movs	r3, #14
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4827      	ldr	r0, [pc, #156]	; (8002c78 <HAL_LTDC_MspInit+0x16c>)
 8002bdc:	f004 fb6a 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002be0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bf2:	230e      	movs	r3, #14
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	481f      	ldr	r0, [pc, #124]	; (8002c7c <HAL_LTDC_MspInit+0x170>)
 8002bfe:	f004 fb59 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002c02:	23f7      	movs	r3, #247	; 0xf7
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c12:	230e      	movs	r3, #14
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4818      	ldr	r0, [pc, #96]	; (8002c80 <HAL_LTDC_MspInit+0x174>)
 8002c1e:	f004 fb49 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c34:	2309      	movs	r3, #9
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4811      	ldr	r0, [pc, #68]	; (8002c84 <HAL_LTDC_MspInit+0x178>)
 8002c40:	f004 fb38 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002c44:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c56:	230e      	movs	r3, #14
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <HAL_LTDC_MspInit+0x17c>)
 8002c62:	f004 fb27 	bl	80072b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c66:	bf00      	nop
 8002c68:	3738      	adds	r7, #56	; 0x38
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40016800 	.word	0x40016800
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40022400 	.word	0x40022400
 8002c80:	40022800 	.word	0x40022800
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40022000 	.word	0x40022000

08002c8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3f      	ldr	r2, [pc, #252]	; (8002da8 <HAL_QSPI_MspInit+0x11c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d178      	bne.n	8002da0 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6393      	str	r3, [r2, #56]	; 0x38
 8002cba:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a38      	ldr	r2, [pc, #224]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_QSPI_MspInit+0x120>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d1e:	2309      	movs	r3, #9
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 031c 	add.w	r3, r7, #28
 8002d26:	4619      	mov	r1, r3
 8002d28:	4821      	ldr	r0, [pc, #132]	; (8002db0 <HAL_QSPI_MspInit+0x124>)
 8002d2a:	f004 fac3 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d3e:	230a      	movs	r3, #10
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	481a      	ldr	r0, [pc, #104]	; (8002db4 <HAL_QSPI_MspInit+0x128>)
 8002d4a:	f004 fab3 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d4e:	2304      	movs	r3, #4
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d5e:	2309      	movs	r3, #9
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4812      	ldr	r0, [pc, #72]	; (8002db4 <HAL_QSPI_MspInit+0x128>)
 8002d6a:	f004 faa3 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002d6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d80:	2309      	movs	r3, #9
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480b      	ldr	r0, [pc, #44]	; (8002db8 <HAL_QSPI_MspInit+0x12c>)
 8002d8c:	f004 fa92 	bl	80072b4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2105      	movs	r1, #5
 8002d94:	205c      	movs	r0, #92	; 0x5c
 8002d96:	f003 f87b 	bl	8005e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002d9a:	205c      	movs	r0, #92	; 0x5c
 8002d9c:	f003 f894 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002da0:	bf00      	nop
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	a0001000 	.word	0xa0001000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020c00 	.word	0x40020c00

08002dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RTC_MspInit+0x2c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d105      	bne.n	8002dda <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RTC_MspInit+0x30>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_RTC_MspInit+0x30>)
 8002dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40002800 	.word	0x40002800
 8002dec:	40023800 	.word	0x40023800

08002df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_TIM_Base_MspInit+0xc8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10c      	bne.n	8002e1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002e1a:	e046      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d10c      	bne.n	8002e40 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a24      	ldr	r2, [pc, #144]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
}
 8002e3e:	e034      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10c      	bne.n	8002e64 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697b      	ldr	r3, [r7, #20]
}
 8002e62:	e022      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <HAL_TIM_Base_MspInit+0xd4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
}
 8002e86:	e010      	b.n	8002eaa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_TIM_Base_MspInit+0xd8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10b      	bne.n	8002eaa <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_TIM_Base_MspInit+0xcc>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	bf00      	nop
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000c00 	.word	0x40000c00
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_TIM_PWM_MspInit+0x38>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10b      	bne.n	8002ef6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_TIM_PWM_MspInit+0x3c>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40001800 	.word	0x40001800
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a56      	ldr	r2, [pc, #344]	; (8003084 <HAL_TIM_MspPostInit+0x178>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d11d      	bne.n	8002f6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2e:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a55      	ldr	r2, [pc, #340]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	484a      	ldr	r0, [pc, #296]	; (800308c <HAL_TIM_MspPostInit+0x180>)
 8002f64:	f004 f9a6 	bl	80072b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002f68:	e087      	b.n	800307a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d11d      	bne.n	8002fb0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f74:	4b44      	ldr	r3, [pc, #272]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4a43      	ldr	r2, [pc, #268]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4838      	ldr	r0, [pc, #224]	; (800308c <HAL_TIM_MspPostInit+0x180>)
 8002faa:	f004 f983 	bl	80072b4 <HAL_GPIO_Init>
}
 8002fae:	e064      	b.n	800307a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a36      	ldr	r2, [pc, #216]	; (8003090 <HAL_TIM_MspPostInit+0x184>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a32      	ldr	r2, [pc, #200]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	4829      	ldr	r0, [pc, #164]	; (8003094 <HAL_TIM_MspPostInit+0x188>)
 8002fee:	f004 f961 	bl	80072b4 <HAL_GPIO_Init>
}
 8002ff2:	e042      	b.n	800307a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <HAL_TIM_MspPostInit+0x18c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d11c      	bne.n	8003038 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003016:	2301      	movs	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003026:	2302      	movs	r3, #2
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4619      	mov	r1, r3
 8003030:	481a      	ldr	r0, [pc, #104]	; (800309c <HAL_TIM_MspPostInit+0x190>)
 8003032:	f004 f93f 	bl	80072b4 <HAL_GPIO_Init>
}
 8003036:	e020      	b.n	800307a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_TIM_MspPostInit+0x194>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11b      	bne.n	800307a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_TIM_MspPostInit+0x17c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800305a:	2340      	movs	r3, #64	; 0x40
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800306a:	2309      	movs	r3, #9
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	480b      	ldr	r0, [pc, #44]	; (80030a4 <HAL_TIM_MspPostInit+0x198>)
 8003076:	f004 f91d 	bl	80072b4 <HAL_GPIO_Init>
}
 800307a:	bf00      	nop
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40023800 	.word	0x40023800
 800308c:	40020000 	.word	0x40020000
 8003090:	40000400 	.word	0x40000400
 8003094:	40020400 	.word	0x40020400
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40022000 	.word	0x40022000
 80030a0:	40001800 	.word	0x40001800
 80030a4:	40021c00 	.word	0x40021c00

080030a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 031c 	add.w	r3, r7, #28
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <HAL_UART_MspInit+0x110>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d145      	bne.n	8003156 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ca:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	4a3b      	ldr	r2, [pc, #236]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030d0:	f043 0310 	orr.w	r3, r3, #16
 80030d4:	6453      	str	r3, [r2, #68]	; 0x44
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a35      	ldr	r2, [pc, #212]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b33      	ldr	r3, [pc, #204]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_UART_MspInit+0x114>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <HAL_UART_MspInit+0x114>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_UART_MspInit+0x114>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003122:	2307      	movs	r3, #7
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	4824      	ldr	r0, [pc, #144]	; (80031c0 <HAL_UART_MspInit+0x118>)
 800312e:	f004 f8c1 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003144:	2307      	movs	r3, #7
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	4619      	mov	r1, r3
 800314e:	481d      	ldr	r0, [pc, #116]	; (80031c4 <HAL_UART_MspInit+0x11c>)
 8003150:	f004 f8b0 	bl	80072b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003154:	e02c      	b.n	80031b0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_UART_MspInit+0x120>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d127      	bne.n	80031b0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_UART_MspInit+0x114>)
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_UART_MspInit+0x114>)
 8003166:	f043 0320 	orr.w	r3, r3, #32
 800316a:	6453      	str	r3, [r2, #68]	; 0x44
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_UART_MspInit+0x114>)
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_UART_MspInit+0x114>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_UART_MspInit+0x114>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_UART_MspInit+0x114>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003190:	23c0      	movs	r3, #192	; 0xc0
 8003192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031a0:	2308      	movs	r3, #8
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	4619      	mov	r1, r3
 80031aa:	4808      	ldr	r0, [pc, #32]	; (80031cc <HAL_UART_MspInit+0x124>)
 80031ac:	f004 f882 	bl	80072b4 <HAL_GPIO_Init>
}
 80031b0:	bf00      	nop
 80031b2:	3730      	adds	r7, #48	; 0x30
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40011000 	.word	0x40011000
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40020400 	.word	0x40020400
 80031c4:	40020000 	.word	0x40020000
 80031c8:	40011400 	.word	0x40011400
 80031cc:	40020800 	.word	0x40020800

080031d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80031e4:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_FMC_MspInit+0x10c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d173      	bne.n	80032d4 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_FMC_MspInit+0x10c>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_FMC_MspInit+0x110>)
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <HAL_FMC_MspInit+0x110>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6393      	str	r3, [r2, #56]	; 0x38
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_FMC_MspInit+0x110>)
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800320a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800320e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800321c:	230c      	movs	r3, #12
 800321e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	4619      	mov	r1, r3
 8003224:	482f      	ldr	r0, [pc, #188]	; (80032e4 <HAL_FMC_MspInit+0x114>)
 8003226:	f004 f845 	bl	80072b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800322a:	f248 1333 	movw	r3, #33075	; 0x8133
 800322e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800323c:	230c      	movs	r3, #12
 800323e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4828      	ldr	r0, [pc, #160]	; (80032e8 <HAL_FMC_MspInit+0x118>)
 8003246:	f004 f835 	bl	80072b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800324a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800324e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	2303      	movs	r3, #3
 800325a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800325c:	230c      	movs	r3, #12
 800325e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	4619      	mov	r1, r3
 8003264:	4821      	ldr	r0, [pc, #132]	; (80032ec <HAL_FMC_MspInit+0x11c>)
 8003266:	f004 f825 	bl	80072b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800326a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800326e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003278:	2303      	movs	r3, #3
 800327a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800327c:	230c      	movs	r3, #12
 800327e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	4619      	mov	r1, r3
 8003284:	481a      	ldr	r0, [pc, #104]	; (80032f0 <HAL_FMC_MspInit+0x120>)
 8003286:	f004 f815 	bl	80072b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800328a:	2328      	movs	r3, #40	; 0x28
 800328c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800329a:	230c      	movs	r3, #12
 800329c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4814      	ldr	r0, [pc, #80]	; (80032f4 <HAL_FMC_MspInit+0x124>)
 80032a4:	f004 f806 	bl	80072b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80032a8:	2308      	movs	r3, #8
 80032aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032b8:	230c      	movs	r3, #12
 80032ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	480d      	ldr	r0, [pc, #52]	; (80032f8 <HAL_FMC_MspInit+0x128>)
 80032c2:	f003 fff7 	bl	80072b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_FMC_MspInit+0x12c>)
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <HAL_FMC_MspInit+0x130>)
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_FMC_MspInit+0x130>)
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_FMC_MspInit+0x12c>)
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
 80032d2:	e000      	b.n	80032d6 <HAL_FMC_MspInit+0x106>
    return;
 80032d4:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000988 	.word	0x20000988
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40021800 	.word	0x40021800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021400 	.word	0x40021400
 80032f4:	40021c00 	.word	0x40021c00
 80032f8:	40020800 	.word	0x40020800
 80032fc:	200017d8 	.word	0x200017d8
 8003300:	20001024 	.word	0x20001024

08003304 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800330c:	f7ff ff60 	bl	80031d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6f      	ldr	r2, [pc, #444]	; (80034e4 <HAL_SAI_MspInit+0x1cc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d175      	bne.n	8003416 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_SAI_MspInit+0x1d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003332:	4b6e      	ldr	r3, [pc, #440]	; (80034ec <HAL_SAI_MspInit+0x1d4>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a6d      	ldr	r2, [pc, #436]	; (80034ec <HAL_SAI_MspInit+0x1d4>)
 8003338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <HAL_SAI_MspInit+0x1d4>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_SAI_MspInit+0x1d0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a65      	ldr	r2, [pc, #404]	; (80034e8 <HAL_SAI_MspInit+0x1d0>)
 8003352:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003354:	2310      	movs	r3, #16
 8003356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003360:	2303      	movs	r3, #3
 8003362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003364:	230a      	movs	r3, #10
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	4619      	mov	r1, r3
 800336e:	4860      	ldr	r0, [pc, #384]	; (80034f0 <HAL_SAI_MspInit+0x1d8>)
 8003370:	f003 ffa0 	bl	80072b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003374:	23e0      	movs	r3, #224	; 0xe0
 8003376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003380:	2302      	movs	r3, #2
 8003382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003384:	230a      	movs	r3, #10
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	4858      	ldr	r0, [pc, #352]	; (80034f0 <HAL_SAI_MspInit+0x1d8>)
 8003390:	f003 ff90 	bl	80072b4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003394:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 8003396:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_SAI_MspInit+0x1e0>)
 8003398:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 800339c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033a0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033a2:	4b54      	ldr	r3, [pc, #336]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033a4:	2240      	movs	r2, #64	; 0x40
 80033a6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a8:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80033ae:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b4:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033bc:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033be:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033c4:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80033c6:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033cc:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80033ce:	4b49      	ldr	r3, [pc, #292]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033d4:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033d8:	2204      	movs	r2, #4
 80033da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033dc:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033de:	2203      	movs	r2, #3
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80033ee:	4841      	ldr	r0, [pc, #260]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 80033f0:	f002 ffba 	bl	8006368 <HAL_DMA_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 80033fa:	f7ff f909 	bl	8002610 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a3c      	ldr	r2, [pc, #240]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 8003402:	671a      	str	r2, [r3, #112]	; 0x70
 8003404:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 800340e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003410:	4a38      	ldr	r2, [pc, #224]	; (80034f4 <HAL_SAI_MspInit+0x1dc>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a38      	ldr	r2, [pc, #224]	; (80034fc <HAL_SAI_MspInit+0x1e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d15c      	bne.n	80034da <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_SAI_MspInit+0x1d0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_SAI_MspInit+0x1d4>)
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <HAL_SAI_MspInit+0x1d4>)
 800342e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003432:	6453      	str	r3, [r2, #68]	; 0x44
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_SAI_MspInit+0x1d4>)
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_SAI_MspInit+0x1d0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_SAI_MspInit+0x1d0>)
 8003448:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800344a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003458:	2302      	movs	r3, #2
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800345c:	230a      	movs	r3, #10
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	4826      	ldr	r0, [pc, #152]	; (8003500 <HAL_SAI_MspInit+0x1e8>)
 8003468:	f003 ff24 	bl	80072b4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_SAI_MspInit+0x1f0>)
 8003470:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 8003480:	2200      	movs	r2, #0
 8003482:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 8003486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 800348e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003492:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 8003496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800349a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 800349e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a2:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80034a4:	4b17      	ldr	r3, [pc, #92]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034aa:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80034b2:	4814      	ldr	r0, [pc, #80]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034b4:	f002 ff58 	bl	8006368 <HAL_DMA_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 80034be:	f7ff f8a7 	bl	8002610 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034c6:	671a      	str	r2, [r3, #112]	; 0x70
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034d2:	66da      	str	r2, [r3, #108]	; 0x6c
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <HAL_SAI_MspInit+0x1ec>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80034da:	bf00      	nop
 80034dc:	3728      	adds	r7, #40	; 0x28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40015c04 	.word	0x40015c04
 80034e8:	2000098c 	.word	0x2000098c
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40022000 	.word	0x40022000
 80034f4:	2000161c 	.word	0x2000161c
 80034f8:	40026470 	.word	0x40026470
 80034fc:	40015c24 	.word	0x40015c24
 8003500:	40021800 	.word	0x40021800
 8003504:	200010d0 	.word	0x200010d0
 8003508:	400264b8 	.word	0x400264b8

0800350c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08c      	sub	sp, #48	; 0x30
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800351c:	2200      	movs	r2, #0
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	2036      	movs	r0, #54	; 0x36
 8003522:	f002 fcb5 	bl	8005e90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003526:	2036      	movs	r0, #54	; 0x36
 8003528:	f002 fcce 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <HAL_InitTick+0xa0>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <HAL_InitTick+0xa0>)
 8003532:	f043 0310 	orr.w	r3, r3, #16
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_InitTick+0xa0>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003544:	f107 0210 	add.w	r2, r7, #16
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f008 f962 	bl	800b818 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003554:	f008 f938 	bl	800b7c8 <HAL_RCC_GetPCLK1Freq>
 8003558:	4603      	mov	r3, r0
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_InitTick+0xa4>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0c9b      	lsrs	r3, r3, #18
 8003568:	3b01      	subs	r3, #1
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_InitTick+0xa8>)
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <HAL_InitTick+0xac>)
 8003570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <HAL_InitTick+0xa8>)
 8003574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003578:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800357a:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <HAL_InitTick+0xa8>)
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_InitTick+0xa8>)
 8003582:	2200      	movs	r2, #0
 8003584:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_InitTick+0xa8>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <HAL_InitTick+0xa8>)
 800358e:	f009 fed9 	bl	800d344 <HAL_TIM_Base_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003598:	4806      	ldr	r0, [pc, #24]	; (80035b4 <HAL_InitTick+0xa8>)
 800359a:	f009 ff2b 	bl	800d3f4 <HAL_TIM_Base_Start_IT>
 800359e:	4603      	mov	r3, r0
 80035a0:	e000      	b.n	80035a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	431bde83 	.word	0x431bde83
 80035b4:	20001858 	.word	0x20001858
 80035b8:	40001000 	.word	0x40001000

080035bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <NMI_Handler+0x4>

080035c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c6:	e7fe      	b.n	80035c6 <HardFault_Handler+0x4>

080035c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035cc:	e7fe      	b.n	80035cc <MemManage_Handler+0x4>

080035ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d2:	e7fe      	b.n	80035d2 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <UsageFault_Handler+0x4>

080035da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80035ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035f0:	f004 f94c 	bl	800788c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <TIM6_DAC_IRQHandler+0x10>)
 80035fe:	f009 ffc8 	bl	800d592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001858 	.word	0x20001858

0800360c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <DMA2_Stream0_IRQHandler+0x10>)
 8003612:	f003 f849 	bl	80066a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20001024 	.word	0x20001024

08003620 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <DMA2_Stream1_IRQHandler+0x10>)
 8003626:	f003 f83f 	bl	80066a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20001270 	.word	0x20001270

08003634 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <DMA2_Stream4_IRQHandler+0x10>)
 800363a:	f003 f835 	bl	80066a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000161c 	.word	0x2000161c

08003648 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <OTG_FS_IRQHandler+0x10>)
 800364e:	f004 f940 	bl	80078d2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200414a8 	.word	0x200414a8

0800365c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DMA2_Stream7_IRQHandler+0x10>)
 8003662:	f003 f821 	bl	80066a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200010d0 	.word	0x200010d0

08003670 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <DCMI_IRQHandler+0x10>)
 8003676:	f002 fda7 	bl	80061c8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200014dc 	.word	0x200014dc

08003684 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <DMA2D_IRQHandler+0x10>)
 800368a:	f003 fbd5 	bl	8006e38 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20001700 	.word	0x20001700

08003698 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <QUADSPI_IRQHandler+0x10>)
 800369e:	f006 fcf9 	bl	800a094 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000180c 	.word	0x2000180c

080036ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
	return 1;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <_kill>:

int _kill(int pid, int sig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036c6:	f00f f941 	bl	801294c <__errno>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2216      	movs	r2, #22
 80036ce:	601a      	str	r2, [r3, #0]
	return -1;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_exit>:

void _exit (int status)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ffe7 	bl	80036bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ee:	e7fe      	b.n	80036ee <_exit+0x12>

080036f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e00a      	b.n	8003718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003702:	f3af 8000 	nop.w
 8003706:	4601      	mov	r1, r0
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	b2ca      	uxtb	r2, r1
 8003710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	dbf0      	blt.n	8003702 <_read+0x12>
	}

return len;
 8003720:	687b      	ldr	r3, [r7, #4]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e009      	b.n	8003750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	60ba      	str	r2, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f971 	bl	8003a2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf1      	blt.n	800373c <_write+0x12>
	}
	return len;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_close>:

int _close(int file)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	return -1;
 800376a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800378a:	605a      	str	r2, [r3, #4]
	return 0;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_isatty>:

int _isatty(int file)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	return 1;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
	return 0;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d4:	4a14      	ldr	r2, [pc, #80]	; (8003828 <_sbrk+0x5c>)
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <_sbrk+0x60>)
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <_sbrk+0x64>)
 80037ea:	4a12      	ldr	r2, [pc, #72]	; (8003834 <_sbrk+0x68>)
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d207      	bcs.n	800380c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037fc:	f00f f8a6 	bl	801294c <__errno>
 8003800:	4603      	mov	r3, r0
 8003802:	220c      	movs	r2, #12
 8003804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380a:	e009      	b.n	8003820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <_sbrk+0x64>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <_sbrk+0x64>)
 800381c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20050000 	.word	0x20050000
 800382c:	00000800 	.word	0x00000800
 8003830:	20000990 	.word	0x20000990
 8003834:	200417c0 	.word	0x200417c0

08003838 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <SystemInit+0x20>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <SystemInit+0x20>)
 8003844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003866:	f000 fa77 	bl	8003d58 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800386a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800386e:	f000 f9f9 	bl	8003c64 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003876:	f000 fa25 	bl	8003cc4 <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 800387a:	4810      	ldr	r0, [pc, #64]	; (80038bc <uiDisplayBasic+0x60>)
 800387c:	f000 fa3a 	bl	8003cf4 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8003880:	2301      	movs	r3, #1
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2301      	movs	r3, #1
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <uiDisplayBasic+0x64>)
 8003888:	2100      	movs	r1, #0
 800388a:	2000      	movs	r0, #0
 800388c:	f000 faac 	bl	8003de8 <LCD_DrawString>

	LCD_SetFont(&Font12);
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <uiDisplayBasic+0x68>)
 8003892:	f000 fa2f 	bl	8003cf4 <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8003896:	2301      	movs	r3, #1
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2303      	movs	r3, #3
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <uiDisplayBasic+0x6c>)
 800389e:	211e      	movs	r1, #30
 80038a0:	200a      	movs	r0, #10
 80038a2:	f000 faa1 	bl	8003de8 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 80038a6:	2301      	movs	r3, #1
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2303      	movs	r3, #3
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <uiDisplayBasic+0x70>)
 80038ae:	2132      	movs	r1, #50	; 0x32
 80038b0:	200a      	movs	r0, #10
 80038b2:	f000 fa99 	bl	8003de8 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	2000001c 	.word	0x2000001c
 80038c0:	08016410 	.word	0x08016410
 80038c4:	20000014 	.word	0x20000014
 80038c8:	08016428 	.word	0x08016428
 80038cc:	08016434 	.word	0x08016434

080038d0 <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b096      	sub	sp, #88	; 0x58
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80038da:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80038de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80038e2:	f000 f9bf 	bl	8003c64 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 80038e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ea:	f000 f9eb 	bl	8003cc4 <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 80038ee:	483a      	ldr	r0, [pc, #232]	; (80039d8 <uiDisplayInputLevel+0x108>)
 80038f0:	f000 fa00 	bl	8003cf4 <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003900:	f7fd f92a 	bl	8000b58 <__aeabi_dcmpgt>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d023      	beq.n	8003952 <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 800390a:	ed97 0b02 	vldr	d0, [r7, #8]
 800390e:	f012 f827 	bl	8015960 <log10>
 8003912:	ec51 0b10 	vmov	r0, r1, d0
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <uiDisplayInputLevel+0x10c>)
 800391c:	f7fc fe8c 	bl	8000638 <__aeabi_dmul>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f7fd f936 	bl	8000b98 <__aeabi_d2iz>
 800392c:	4603      	mov	r3, r0
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003936:	492a      	ldr	r1, [pc, #168]	; (80039e0 <uiDisplayInputLevel+0x110>)
 8003938:	4618      	mov	r0, r3
 800393a:	f00f fe17 	bl	801356c <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 800393e:	f107 0214 	add.w	r2, r7, #20
 8003942:	2301      	movs	r3, #1
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2303      	movs	r3, #3
 8003948:	211e      	movs	r1, #30
 800394a:	205a      	movs	r0, #90	; 0x5a
 800394c:	f000 fa4c 	bl	8003de8 <LCD_DrawString>
 8003950:	e007      	b.n	8003962 <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 8003952:	2301      	movs	r3, #1
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	2303      	movs	r3, #3
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <uiDisplayInputLevel+0x114>)
 800395a:	211e      	movs	r1, #30
 800395c:	205a      	movs	r0, #90	; 0x5a
 800395e:	f000 fa43 	bl	8003de8 <LCD_DrawString>

	if (inputLevelR > 0) {
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800396e:	f7fd f8f3 	bl	8000b58 <__aeabi_dcmpgt>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d023      	beq.n	80039c0 <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8003978:	ed97 0b00 	vldr	d0, [r7]
 800397c:	f011 fff0 	bl	8015960 <log10>
 8003980:	ec51 0b10 	vmov	r0, r1, d0
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <uiDisplayInputLevel+0x10c>)
 800398a:	f7fc fe55 	bl	8000638 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f8ff 	bl	8000b98 <__aeabi_d2iz>
 800399a:	4603      	mov	r3, r0
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 800399e:	f107 0314 	add.w	r3, r7, #20
 80039a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <uiDisplayInputLevel+0x110>)
 80039a6:	4618      	mov	r0, r3
 80039a8:	f00f fde0 	bl	801356c <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 80039ac:	f107 0214 	add.w	r2, r7, #20
 80039b0:	2301      	movs	r3, #1
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2303      	movs	r3, #3
 80039b6:	2132      	movs	r1, #50	; 0x32
 80039b8:	205a      	movs	r0, #90	; 0x5a
 80039ba:	f000 fa15 	bl	8003de8 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 80039be:	e007      	b.n	80039d0 <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 80039c0:	2301      	movs	r3, #1
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2303      	movs	r3, #3
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <uiDisplayInputLevel+0x114>)
 80039c8:	2132      	movs	r1, #50	; 0x32
 80039ca:	205a      	movs	r0, #90	; 0x5a
 80039cc:	f000 fa0c 	bl	8003de8 <LCD_DrawString>
}
 80039d0:	bf00      	nop
 80039d2:	3750      	adds	r7, #80	; 0x50
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000014 	.word	0x20000014
 80039dc:	40340000 	.word	0x40340000
 80039e0:	08016440 	.word	0x08016440
 80039e4:	0801644c 	.word	0x0801644c

080039e8 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2102      	movs	r1, #2
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <LED_On+0x14>)
 80039f2:	f003 ff17 	bl	8007824 <HAL_GPIO_WritePin>
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000

08003a00 <LED_Off>:

void LED_Off(){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2102      	movs	r1, #2
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <LED_Off+0x14>)
 8003a0a:	f003 ff0b 	bl	8007824 <HAL_GPIO_WritePin>
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000

08003a18 <LED_Toggle>:

void LED_Toggle(){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	4802      	ldr	r0, [pc, #8]	; (8003a28 <LED_Toggle+0x10>)
 8003a20:	f003 ff19 	bl	8007856 <HAL_GPIO_TogglePin>

}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40022000 	.word	0x40022000

08003a2c <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003a34:	1d39      	adds	r1, r7, #4
 8003a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4803      	ldr	r0, [pc, #12]	; (8003a4c <__io_putchar+0x20>)
 8003a3e:	f00a fb69 	bl	800e114 <HAL_UART_Transmit>
	return ch;
 8003a42:	687b      	ldr	r3, [r7, #4]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000152c 	.word	0x2000152c

08003a50 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af04      	add	r7, sp, #16
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	4608      	mov	r0, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	72fb      	strb	r3, [r7, #11]
 8003a62:	460b      	mov	r3, r1
 8003a64:	813b      	strh	r3, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a6e:	7afb      	ldrb	r3, [r7, #11]
 8003a70:	b299      	uxth	r1, r3
 8003a72:	88f8      	ldrh	r0, [r7, #6]
 8003a74:	893a      	ldrh	r2, [r7, #8]
 8003a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a7a:	9302      	str	r3, [sp, #8]
 8003a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	4603      	mov	r3, r0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f005 fb7c 	bl	8009184 <HAL_I2C_Mem_Read>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f832 	bl	8003b04 <I2Cx_Error>
  }
  return status;
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	; 0x28
 8003aae:	af04      	add	r7, sp, #16
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	4608      	mov	r0, r1
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4603      	mov	r3, r0
 8003aba:	72fb      	strb	r3, [r7, #11]
 8003abc:	460b      	mov	r3, r1
 8003abe:	813b      	strh	r3, [r7, #8]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
 8003aca:	b299      	uxth	r1, r3
 8003acc:	88f8      	ldrh	r0, [r7, #6]
 8003ace:	893a      	ldrh	r2, [r7, #8]
 8003ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4603      	mov	r3, r0
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f005 fa3b 	bl	8008f5c <HAL_I2C_Mem_Write>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	4619      	mov	r1, r3
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f805 	bl	8003b04 <I2Cx_Error>
  }
  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f005 f9f3 	bl	8008efc <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f005 f960 	bl	8008ddc <HAL_I2C_Init>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	80bb      	strh	r3, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003b42:	89fb      	ldrh	r3, [r7, #14]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	b21a      	sxth	r2, r3
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	b21b      	sxth	r3, r3
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003b56:	88ba      	ldrh	r2, [r7, #4]
 8003b58:	79f9      	ldrb	r1, [r7, #7]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	1cbb      	adds	r3, r7, #2
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2302      	movs	r3, #2
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <AUDIO_I2C_Write+0x50>)
 8003b66:	f7ff ffa0 	bl	8003aaa <I2Cx_WriteMultiple>
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000fd8 	.word	0x20000fd8

08003b78 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460a      	mov	r2, r1
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	81bb      	strh	r3, [r7, #12]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003b90:	88ba      	ldrh	r2, [r7, #4]
 8003b92:	79f9      	ldrb	r1, [r7, #7]
 8003b94:	2302      	movs	r3, #2
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	480a      	ldr	r0, [pc, #40]	; (8003bcc <AUDIO_I2C_Read+0x54>)
 8003ba2:	f7ff ff55 	bl	8003a50 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003ba6:	89bb      	ldrh	r3, [r7, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003bac:	89bb      	ldrh	r3, [r7, #12]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b21b      	sxth	r3, r3
 8003bbc:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8003bc2:	89bb      	ldrh	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000fd8 	.word	0x20000fd8

08003bd0 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <LCD_Init+0x44>)
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d002      	beq.n	8003be2 <LCD_Init+0x12>
 8003bdc:	480e      	ldr	r0, [pc, #56]	; (8003c18 <LCD_Init+0x48>)
 8003bde:	f7fe fcf5 	bl	80025cc <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <LCD_Init+0x4c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	4619      	mov	r1, r3
 8003bea:	480a      	ldr	r0, [pc, #40]	; (8003c14 <LCD_Init+0x44>)
 8003bec:	f005 ffa6 	bl	8009b3c <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003bf0:	f000 f81a 	bl	8003c28 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003bf4:	480a      	ldr	r0, [pc, #40]	; (8003c20 <LCD_Init+0x50>)
 8003bf6:	f000 f87d 	bl	8003cf4 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bfe:	f000 f861 	bl	8003cc4 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003c02:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003c06:	f000 f82d 	bl	8003c64 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8003c0a:	4806      	ldr	r0, [pc, #24]	; (8003c24 <LCD_Init+0x54>)
 8003c0c:	f000 f842 	bl	8003c94 <LCD_SetFillColor>


}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	200013ec 	.word	0x200013ec
 8003c18:	08016454 	.word	0x08016454
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	2000001c 	.word	0x2000001c
 8003c24:	ffff0000 	.word	0xffff0000

08003c28 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <LCD_DisplayOn+0x30>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <LCD_DisplayOn+0x30>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c42:	4806      	ldr	r0, [pc, #24]	; (8003c5c <LCD_DisplayOn+0x34>)
 8003c44:	f003 fdee 	bl	8007824 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	4804      	ldr	r0, [pc, #16]	; (8003c60 <LCD_DisplayOn+0x38>)
 8003c4e:	f003 fde9 	bl	8007824 <HAL_GPIO_WritePin>
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200013ec 	.word	0x200013ec
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40022800 	.word	0x40022800

08003c64 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <LCD_SetStrokeColor+0x28>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <LCD_SetStrokeColor+0x28>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa2c 	bl	80040d4 <ARGB888ToRGB565>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <LCD_SetStrokeColor+0x2c>)
 8003c82:	601a      	str	r2, [r3, #0]
#endif
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000994 	.word	0x20000994
 8003c90:	200009a0 	.word	0x200009a0

08003c94 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <LCD_SetFillColor+0x28>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <LCD_SetFillColor+0x28>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fa14 	bl	80040d4 <ARGB888ToRGB565>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <LCD_SetFillColor+0x2c>)
 8003cb2:	601a      	str	r2, [r3, #0]
#endif
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000998 	.word	0x20000998
 8003cc0:	200009a4 	.word	0x200009a4

08003cc4 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8003ccc:	4a07      	ldr	r2, [pc, #28]	; (8003cec <LCD_SetBackColor+0x28>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <LCD_SetBackColor+0x28>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f9fc 	bl	80040d4 <ARGB888ToRGB565>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <LCD_SetBackColor+0x2c>)
 8003ce2:	601a      	str	r2, [r3, #0]
#endif
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2000099c 	.word	0x2000099c
 8003cf0:	200009a8 	.word	0x200009a8

08003cf4 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8003cfc:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <LCD_SetFont+0x1c>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	200009ac 	.word	0x200009ac

08003d14 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	80fb      	strh	r3, [r7, #6]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <LCD_ErasePixel+0x3c>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <LCD_ErasePixel+0x40>)
 8003d2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003d2c:	88ba      	ldrh	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	015b      	lsls	r3, r3, #5
 8003d36:	461a      	mov	r2, r3
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	b282      	uxth	r2, r0
 8003d42:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	200009a8 	.word	0x200009a8
 8003d54:	200013ec 	.word	0x200013ec

08003d58 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <LCD_Clear+0x28>)
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	4618      	mov	r0, r3
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <LCD_Clear+0x2c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003d70:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003d74:	f000 f976 	bl	8004064 <LL_FillBuffer>
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200013ec 	.word	0x200013ec
 8003d84:	2000099c 	.word	0x2000099c

08003d88 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	80fb      	strh	r3, [r7, #6]
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80bb      	strh	r3, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
 8003da2:	4613      	mov	r3, r2
 8003da4:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <LCD_DrawChar+0x5c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	3b20      	subs	r3, #32
 8003db0:	490c      	ldr	r1, [pc, #48]	; (8003de4 <LCD_DrawChar+0x5c>)
 8003db2:	6809      	ldr	r1, [r1, #0]
 8003db4:	88c9      	ldrh	r1, [r1, #6]
 8003db6:	fb01 f103 	mul.w	r1, r1, r3
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <LCD_DrawChar+0x5c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	3307      	adds	r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da00      	bge.n	8003dc8 <LCD_DrawChar+0x40>
 8003dc6:	3307      	adds	r3, #7
 8003dc8:	10db      	asrs	r3, r3, #3
 8003dca:	fb03 f301 	mul.w	r3, r3, r1
 8003dce:	441a      	add	r2, r3
 8003dd0:	78bb      	ldrb	r3, [r7, #2]
 8003dd2:	88b9      	ldrh	r1, [r7, #4]
 8003dd4:	88f8      	ldrh	r0, [r7, #6]
 8003dd6:	f000 f89d 	bl	8003f14 <DrawChar>

}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd90      	pop	{r4, r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200009ac 	.word	0x200009ac

08003de8 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	81fb      	strh	r3, [r7, #14]
 8003df6:	460b      	mov	r3, r1
 8003df8:	81bb      	strh	r3, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	83fb      	strh	r3, [r7, #30]
 8003e02:	2300      	movs	r3, #0
 8003e04:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8003e12:	e002      	b.n	8003e1a <LCD_DrawString+0x32>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	617a      	str	r2, [r7, #20]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f6      	bne.n	8003e14 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8003e26:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <LCD_DrawString+0x128>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	889b      	ldrh	r3, [r3, #4]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003e32:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d014      	beq.n	8003e68 <LCD_DrawString+0x80>
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	dc23      	bgt.n	8003e8a <LCD_DrawString+0xa2>
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d002      	beq.n	8003e4c <LCD_DrawString+0x64>
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d011      	beq.n	8003e6e <LCD_DrawString+0x86>
 8003e4a:	e01e      	b.n	8003e8a <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <LCD_DrawString+0x128>)
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	8892      	ldrh	r2, [r2, #4]
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	89fb      	ldrh	r3, [r7, #14]
 8003e62:	4413      	add	r3, r2
 8003e64:	83fb      	strh	r3, [r7, #30]
		break;
 8003e66:	e013      	b.n	8003e90 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	83fb      	strh	r3, [r7, #30]
		break;
 8003e6c:	e010      	b.n	8003e90 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <LCD_DrawString+0x128>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	889b      	ldrh	r3, [r3, #4]
 8003e7c:	fb12 f303 	smulbb	r3, r2, r3
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	83fb      	strh	r3, [r7, #30]
		break;
 8003e88:	e002      	b.n	8003e90 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	83fb      	strh	r3, [r7, #30]
		break;
 8003e8e:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8003e90:	8bfb      	ldrh	r3, [r7, #30]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <LCD_DrawString+0xb6>
 8003e96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da16      	bge.n	8003ecc <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8003ea2:	e013      	b.n	8003ecc <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eac:	89b9      	ldrh	r1, [r7, #12]
 8003eae:	8bf8      	ldrh	r0, [r7, #30]
 8003eb0:	f7ff ff6a 	bl	8003d88 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <LCD_DrawString+0x128>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	889a      	ldrh	r2, [r3, #4]
 8003eba:	8bfb      	ldrh	r3, [r7, #30]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
		i++;
 8003ec6:	8bbb      	ldrh	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	8bbb      	ldrh	r3, [r7, #28]
 8003edc:	490c      	ldr	r1, [pc, #48]	; (8003f10 <LCD_DrawString+0x128>)
 8003ede:	6809      	ldr	r1, [r1, #0]
 8003ee0:	8889      	ldrh	r1, [r1, #4]
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4908      	ldr	r1, [pc, #32]	; (8003f10 <LCD_DrawString+0x128>)
 8003eee:	6809      	ldr	r1, [r1, #0]
 8003ef0:	8889      	ldrh	r1, [r1, #4]
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	bfac      	ite	ge
 8003ef6:	2301      	movge	r3, #1
 8003ef8:	2300      	movlt	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4013      	ands	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1cf      	bne.n	8003ea4 <LCD_DrawString+0xbc>
	}
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200009ac 	.word	0x200009ac

08003f14 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b08b      	sub	sp, #44	; 0x2c
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60ba      	str	r2, [r7, #8]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	81fb      	strh	r3, [r7, #14]
 8003f22:	460b      	mov	r3, r1
 8003f24:	81bb      	strh	r3, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <DrawChar+0x144>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	88db      	ldrh	r3, [r3, #6]
 8003f38:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <DrawChar+0x144>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	889b      	ldrh	r3, [r3, #4]
 8003f40:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8003f42:	8b3b      	ldrh	r3, [r7, #24]
 8003f44:	3307      	adds	r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da00      	bge.n	8003f4c <DrawChar+0x38>
 8003f4a:	3307      	adds	r3, #7
 8003f4c:	10db      	asrs	r3, r3, #3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	8b3b      	ldrh	r3, [r7, #24]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f60:	e070      	b.n	8004044 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003f62:	8b3b      	ldrh	r3, [r7, #24]
 8003f64:	3307      	adds	r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da00      	bge.n	8003f6c <DrawChar+0x58>
 8003f6a:	3307      	adds	r3, #7
 8003f6c:	10db      	asrs	r3, r3, #3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	fb03 f302 	mul.w	r3, r3, r2
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4413      	add	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8003f7c:	8b3b      	ldrh	r3, [r7, #24]
 8003f7e:	3307      	adds	r3, #7
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	da00      	bge.n	8003f86 <DrawChar+0x72>
 8003f84:	3307      	adds	r3, #7
 8003f86:	10db      	asrs	r3, r3, #3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d002      	beq.n	8003f92 <DrawChar+0x7e>
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d004      	beq.n	8003f9a <DrawChar+0x86>
 8003f90:	e00c      	b.n	8003fac <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	61fb      	str	r3, [r7, #28]
			break;
 8003f98:	e016      	b.n	8003fc8 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	3201      	adds	r2, #1
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61fb      	str	r3, [r7, #28]
			break;
 8003faa:	e00d      	b.n	8003fc8 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	3202      	adds	r2, #2
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
			break;
 8003fc6:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	e030      	b.n	8004030 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8003fce:	8b3a      	ldrh	r2, [r7, #24]
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	1ad2      	subs	r2, r2, r3
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	2201      	movs	r2, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8003fea:	4b1c      	ldr	r3, [pc, #112]	; (800405c <DrawChar+0x148>)
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <DrawChar+0x14c>)
 8003ff0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003ff2:	89ba      	ldrh	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	461c      	mov	r4, r3
 8003ffe:	89fa      	ldrh	r2, [r7, #14]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	4413      	add	r3, r2
 8004004:	4423      	add	r3, r4
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	b282      	uxth	r2, r0
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	e00c      	b.n	800402a <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d109      	bne.n	800402a <DrawChar+0x116>
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	b29a      	uxth	r2, r3
 800401a:	89fb      	ldrh	r3, [r7, #14]
 800401c:	4413      	add	r3, r2
 800401e:	b29b      	uxth	r3, r3
 8004020:	89ba      	ldrh	r2, [r7, #12]
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fe75 	bl	8003d14 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	3301      	adds	r3, #1
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	8b3b      	ldrh	r3, [r7, #24]
 8004032:	6a3a      	ldr	r2, [r7, #32]
 8004034:	429a      	cmp	r2, r3
 8004036:	d3ca      	bcc.n	8003fce <DrawChar+0xba>
			}
		}
		Ypos++;
 8004038:	89bb      	ldrh	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	429a      	cmp	r2, r3
 800404a:	d38a      	bcc.n	8003f62 <DrawChar+0x4e>
	}

	__CleanDCache();
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	372c      	adds	r7, #44	; 0x2c
 8004052:	46bd      	mov	sp, r7
 8004054:	bd90      	pop	{r4, r7, pc}
 8004056:	bf00      	nop
 8004058:	200009ac 	.word	0x200009ac
 800405c:	200009a0 	.word	0x200009a0
 8004060:	200013ec 	.word	0x200013ec

08004064 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <LL_FillBuffer+0x68>)
 8004074:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004078:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <LL_FillBuffer+0x68>)
 800407c:	2202      	movs	r2, #2
 800407e:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <LL_FillBuffer+0x68>)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <LL_FillBuffer+0x68>)
 8004088:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <LL_FillBuffer+0x6c>)
 800408a:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800408c:	480f      	ldr	r0, [pc, #60]	; (80040cc <LL_FillBuffer+0x68>)
 800408e:	f002 fd75 	bl	8006b7c <HAL_DMA2D_Init>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d115      	bne.n	80040c4 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004098:	2100      	movs	r1, #0
 800409a:	480c      	ldr	r0, [pc, #48]	; (80040cc <LL_FillBuffer+0x68>)
 800409c:	f002 ffdc 	bl	8007058 <HAL_DMA2D_ConfigLayer>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	4806      	ldr	r0, [pc, #24]	; (80040cc <LL_FillBuffer+0x68>)
 80040b2:	f002 fdad 	bl	8006c10 <HAL_DMA2D_Start>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 80040bc:	210a      	movs	r1, #10
 80040be:	4803      	ldr	r0, [pc, #12]	; (80040cc <LL_FillBuffer+0x68>)
 80040c0:	f002 fdd1 	bl	8006c66 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20001700 	.word	0x20001700
 80040d0:	4002b000 	.word	0x4002b000

080040d4 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 80040ec:	7d7b      	ldrb	r3, [r7, #21]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 80040fa:	7dbb      	ldrb	r3, [r7, #22]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	015b      	lsls	r3, r3, #5
 8004102:	b29b      	uxth	r3, r3
 8004104:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004108:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	08db      	lsrs	r3, r3, #3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	02db      	lsls	r3, r3, #11
 8004112:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8004114:	89fa      	ldrh	r2, [r7, #14]
 8004116:	8a3b      	ldrh	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	b29a      	uxth	r2, r3
 800411c:	8a7b      	ldrh	r3, [r7, #18]
 800411e:	4313      	orrs	r3, r2
 8004120:	b29b      	uxth	r3, r3
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b090      	sub	sp, #64	; 0x40
 8004134:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800413a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800413c:	23eb      	movs	r3, #235	; 0xeb
 800413e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800414a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800414c:	2300      	movs	r3, #0
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004150:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004156:	230a      	movs	r3, #10
 8004158:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800415e:	2300      	movs	r3, #0
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004162:	2300      	movs	r3, #0
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800416e:	463a      	mov	r2, r7
 8004170:	f107 0308 	add.w	r3, r7, #8
 8004174:	4619      	mov	r1, r3
 8004176:	4806      	ldr	r0, [pc, #24]	; (8004190 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004178:	f006 fb5a 	bl	800a830 <HAL_QSPI_MemoryMapped>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3740      	adds	r7, #64	; 0x40
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	2000180c 	.word	0x2000180c

08004194 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b090      	sub	sp, #64	; 0x40
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800419c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80041a2:	2366      	movs	r3, #102	; 0x66
 80041a4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80041ba:	2300      	movs	r3, #0
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80041be:	2300      	movs	r3, #0
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f006 f921 	bl	800a414 <HAL_QSPI_Command>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e019      	b.n	8004210 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80041dc:	2399      	movs	r3, #153	; 0x99
 80041de:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041e0:	f107 0308 	add.w	r3, r7, #8
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f006 f912 	bl	800a414 <HAL_QSPI_Command>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00a      	b.n	8004210 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8c7 	bl	8004392 <QSPI_AutoPollingMemReady>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3740      	adds	r7, #64	; 0x40
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b094      	sub	sp, #80	; 0x50
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004226:	2385      	movs	r3, #133	; 0x85
 8004228:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800422a:	2300      	movs	r3, #0
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800422e:	2300      	movs	r3, #0
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800423c:	2301      	movs	r3, #1
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004240:	2300      	movs	r3, #0
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004244:	2300      	movs	r3, #0
 8004246:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004248:	2300      	movs	r3, #0
 800424a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f006 f8dc 	bl	800a414 <HAL_QSPI_Command>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e048      	b.n	80042f8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004266:	f107 030f 	add.w	r3, r7, #15
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f006 f9c4 	bl	800a5fe <HAL_QSPI_Receive>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e03b      	b.n	80042f8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f83d 	bl	8004300 <QSPI_WriteEnable>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e033      	b.n	80042f8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004290:	2381      	movs	r3, #129	; 0x81
 8004292:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	b25b      	sxtb	r3, r3
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	b25a      	sxtb	r2, r3
 800429e:	23f0      	movs	r3, #240	; 0xf0
 80042a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	230a      	movs	r3, #10
 80042b6:	408b      	lsls	r3, r1
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f006 f8a1 	bl	800a414 <HAL_QSPI_Command>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e00d      	b.n	80042f8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042dc:	f107 030f 	add.w	r3, r7, #15
 80042e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f006 f8f2 	bl	800a4d0 <HAL_QSPI_Transmit>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3750      	adds	r7, #80	; 0x50
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b096      	sub	sp, #88	; 0x58
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800430e:	2306      	movs	r3, #6
 8004310:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004312:	2300      	movs	r3, #0
 8004314:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004316:	2300      	movs	r3, #0
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800431a:	2300      	movs	r3, #0
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004322:	2300      	movs	r3, #0
 8004324:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004326:	2300      	movs	r3, #0
 8004328:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800432a:	2300      	movs	r3, #0
 800432c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800432e:	f107 0320 	add.w	r3, r7, #32
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f006 f86b 	bl	800a414 <HAL_QSPI_Command>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e020      	b.n	800438a <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004348:	2302      	movs	r3, #2
 800434a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 800434c:	2302      	movs	r3, #2
 800434e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004354:	2301      	movs	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004358:	2310      	movs	r3, #16
 800435a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800435c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004360:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004362:	2305      	movs	r3, #5
 8004364:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800436a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800436c:	f107 0208 	add.w	r2, r7, #8
 8004370:	f107 0120 	add.w	r1, r7, #32
 8004374:	f241 3388 	movw	r3, #5000	; 0x1388
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f006 f9e2 	bl	800a742 <HAL_QSPI_AutoPolling>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3758      	adds	r7, #88	; 0x58
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b096      	sub	sp, #88	; 0x58
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800439c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80043a2:	2305      	movs	r3, #5
 80043a4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80043ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80043bc:	2300      	movs	r3, #0
 80043be:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80043c0:	2300      	movs	r3, #0
 80043c2:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80043c8:	2301      	movs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80043d0:	2301      	movs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80043d4:	2310      	movs	r3, #16
 80043d6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80043d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043dc:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80043de:	f107 0208 	add.w	r2, r7, #8
 80043e2:	f107 0120 	add.w	r1, r7, #32
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f006 f9aa 	bl	800a742 <HAL_QSPI_AutoPolling>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3758      	adds	r7, #88	; 0x58
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004418:	d005      	beq.n	8004426 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d001      	beq.n	8004426 <start_Audio_Processing+0x22>
		Error_Handler();
 8004422:	f7fe f8f5 	bl	8002610 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <start_Audio_Processing+0xb4>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <start_Audio_Processing+0xb4>)
 800442c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004430:	6453      	str	r3, [r2, #68]	; 0x44
 8004432:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <start_Audio_Processing+0xb4>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 800443e:	2034      	movs	r0, #52	; 0x34
 8004440:	f000 ff8e 	bl	8005360 <wm8994_ReadID>
 8004444:	4603      	mov	r3, r0
 8004446:	f648 1294 	movw	r2, #35220	; 0x8994
 800444a:	4293      	cmp	r3, r2
 800444c:	d001      	beq.n	8004452 <start_Audio_Processing+0x4e>
 800444e:	f7fe f8df 	bl	8002610 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004452:	2034      	movs	r0, #52	; 0x34
 8004454:	f001 f906 	bl	8005664 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	b299      	uxth	r1, r3
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	2264      	movs	r2, #100	; 0x64
 8004464:	2034      	movs	r0, #52	; 0x34
 8004466:	f000 f8c1 	bl	80045ec <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004470:	d104      	bne.n	800447c <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8004472:	214b      	movs	r1, #75	; 0x4b
 8004474:	2034      	movs	r0, #52	; 0x34
 8004476:	f000 ff83 	bl	8005380 <wm8994_SetVolume>
 800447a:	e007      	b.n	800448c <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800447c:	887b      	ldrh	r3, [r7, #2]
 800447e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004482:	d103      	bne.n	800448c <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8004484:	21c8      	movs	r1, #200	; 0xc8
 8004486:	2034      	movs	r0, #52	; 0x34
 8004488:	f000 ff7a 	bl	8005380 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 800448c:	2100      	movs	r1, #0
 800448e:	2034      	movs	r0, #52	; 0x34
 8004490:	f001 f89a 	bl	80055c8 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	b29b      	uxth	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4807      	ldr	r0, [pc, #28]	; (80044bc <start_Audio_Processing+0xb8>)
 800449e:	f008 fd27 	bl	800cef0 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	68f9      	ldr	r1, [r7, #12]
 80044aa:	4805      	ldr	r0, [pc, #20]	; (80044c0 <start_Audio_Processing+0xbc>)
 80044ac:	f008 fc70 	bl	800cd90 <HAL_SAI_Transmit_DMA>

}
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	20000f54 	.word	0x20000f54
 80044c0:	2000117c 	.word	0x2000117c

080044c4 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <HAL_SAI_ErrorCallback+0x30>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d103      	bne.n	8004504 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 80044fc:	4808      	ldr	r0, [pc, #32]	; (8004520 <HAL_SAI_ErrorCallback+0x34>)
 80044fe:	f00f f81d 	bl	801353c <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004502:	e006      	b.n	8004512 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <HAL_SAI_ErrorCallback+0x38>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d102      	bne.n	8004512 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 800450c:	4806      	ldr	r0, [pc, #24]	; (8004528 <HAL_SAI_ErrorCallback+0x3c>)
 800450e:	f00f f815 	bl	801353c <puts>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	2000117c 	.word	0x2000117c
 8004520:	080164a4 	.word	0x080164a4
 8004524:	20000f54 	.word	0x20000f54
 8004528:	080164b4 	.word	0x080164b4

0800452c <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004538:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004540:	2210      	movs	r2, #16
 8004542:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004546:	2201      	movs	r2, #1
 8004548:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800454c:	2200      	movs	r2, #0
 800454e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004554:	4923      	ldr	r1, [pc, #140]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004556:	4824      	ldr	r0, [pc, #144]	; (80045e8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004558:	f008 fea9 	bl	800d2ae <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800455c:	2001      	movs	r0, #1
 800455e:	f001 f90f 	bl	8005780 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004564:	2202      	movs	r2, #2
 8004566:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004568:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800456a:	2210      	movs	r2, #16
 800456c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004570:	2201      	movs	r2, #1
 8004572:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800457a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800457e:	4919      	ldr	r1, [pc, #100]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004580:	4819      	ldr	r0, [pc, #100]	; (80045e8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004582:	f008 fe94 	bl	800d2ae <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004586:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004588:	2203      	movs	r2, #3
 800458a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800458e:	2210      	movs	r2, #16
 8004590:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004594:	2208      	movs	r2, #8
 8004596:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800459a:	2200      	movs	r2, #0
 800459c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800459e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a2:	4910      	ldr	r1, [pc, #64]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80045a4:	4810      	ldr	r0, [pc, #64]	; (80045e8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80045a6:	f008 fe82 	bl	800d2ae <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80045aa:	f44f 7308 	mov.w	r3, #544	; 0x220
 80045ae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80045b2:	2204      	movs	r2, #4
 80045b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80045b8:	2210      	movs	r2, #16
 80045ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80045be:	2201      	movs	r2, #1
 80045c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a07      	ldr	r2, [pc, #28]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80045c6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80045c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045cc:	4905      	ldr	r1, [pc, #20]	; (80045e4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80045d0:	f008 fe6d 	bl	800d2ae <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4804      	ldr	r0, [pc, #16]	; (80045e8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80045d8:	f008 fe94 	bl	800d304 <HAL_SDRAM_ProgramRefreshRate>
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200009b0 	.word	0x200009b0
 80045e8:	200017d8 	.word	0x200017d8

080045ec <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	4603      	mov	r3, r0
 80045f6:	81fb      	strh	r3, [r7, #14]
 80045f8:	460b      	mov	r3, r1
 80045fa:	81bb      	strh	r3, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004604:	89bb      	ldrh	r3, [r7, #12]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800460a:	89bb      	ldrh	r3, [r7, #12]
 800460c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004610:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2203      	movs	r2, #3
 800461c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f83f 	bl	80056a4 <CODEC_IO_Write>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2200      	movs	r2, #0
 8004636:	f640 0117 	movw	r1, #2071	; 0x817
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f832 	bl	80056a4 <CODEC_IO_Write>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2200      	movs	r2, #0
 8004650:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f825 	bl	80056a4 <CODEC_IO_Write>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	226c      	movs	r2, #108	; 0x6c
 800466a:	2139      	movs	r1, #57	; 0x39
 800466c:	4618      	mov	r0, r3
 800466e:	f001 f819 	bl	80056a4 <CODEC_IO_Write>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800467c:	8afb      	ldrh	r3, [r7, #22]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2213      	movs	r2, #19
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f001 f80a 	bl	80056a4 <CODEC_IO_Write>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e00b      	b.n	80046b4 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2203      	movs	r2, #3
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fffd 	bl	80056a4 <CODEC_IO_Write>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 80046b4:	2032      	movs	r0, #50	; 0x32
 80046b6:	f001 f863 	bl	8005780 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80046ba:	8b3b      	ldrh	r3, [r7, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 815f 	beq.w	8004980 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 80046c2:	4bae      	ldr	r3, [pc, #696]	; (800497c <wm8994_Init+0x390>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80046c8:	8b3b      	ldrh	r3, [r7, #24]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	f000 808c 	beq.w	80047e8 <wm8994_Init+0x1fc>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	f300 8111 	bgt.w	80048f8 <wm8994_Init+0x30c>
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d002      	beq.n	80046e0 <wm8994_Init+0xf4>
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d042      	beq.n	8004764 <wm8994_Init+0x178>
 80046de:	e10b      	b.n	80048f8 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80046e0:	89fb      	ldrh	r3, [r7, #14]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80046e8:	2105      	movs	r1, #5
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 ffda 	bl	80056a4 <CODEC_IO_Write>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80046fa:	89fb      	ldrh	r3, [r7, #14]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2200      	movs	r2, #0
 8004700:	f240 6101 	movw	r1, #1537	; 0x601
 8004704:	4618      	mov	r0, r3
 8004706:	f000 ffcd 	bl	80056a4 <CODEC_IO_Write>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004714:	89fb      	ldrh	r3, [r7, #14]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2200      	movs	r2, #0
 800471a:	f240 6102 	movw	r1, #1538	; 0x602
 800471e:	4618      	mov	r0, r3
 8004720:	f000 ffc0 	bl	80056a4 <CODEC_IO_Write>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800472e:	89fb      	ldrh	r3, [r7, #14]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2202      	movs	r2, #2
 8004734:	f240 6104 	movw	r1, #1540	; 0x604
 8004738:	4618      	mov	r0, r3
 800473a:	f000 ffb3 	bl	80056a4 <CODEC_IO_Write>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2202      	movs	r2, #2
 800474e:	f240 6105 	movw	r1, #1541	; 0x605
 8004752:	4618      	mov	r0, r3
 8004754:	f000 ffa6 	bl	80056a4 <CODEC_IO_Write>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]
      break;
 8004762:	e110      	b.n	8004986 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f240 3203 	movw	r2, #771	; 0x303
 800476c:	2105      	movs	r1, #5
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ff98 	bl	80056a4 <CODEC_IO_Write>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800477e:	89fb      	ldrh	r3, [r7, #14]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2201      	movs	r2, #1
 8004784:	f240 6101 	movw	r1, #1537	; 0x601
 8004788:	4618      	mov	r0, r3
 800478a:	f000 ff8b 	bl	80056a4 <CODEC_IO_Write>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2201      	movs	r2, #1
 800479e:	f240 6102 	movw	r1, #1538	; 0x602
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 ff7e 	bl	80056a4 <CODEC_IO_Write>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461a      	mov	r2, r3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2200      	movs	r2, #0
 80047b8:	f240 6104 	movw	r1, #1540	; 0x604
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 ff71 	bl	80056a4 <CODEC_IO_Write>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2200      	movs	r2, #0
 80047d2:	f240 6105 	movw	r1, #1541	; 0x605
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ff64 	bl	80056a4 <CODEC_IO_Write>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]
      break;
 80047e6:	e0ce      	b.n	8004986 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80047e8:	8afb      	ldrh	r3, [r7, #22]
 80047ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ee:	d141      	bne.n	8004874 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80047f0:	89fb      	ldrh	r3, [r7, #14]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80047f8:	2105      	movs	r1, #5
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 ff52 	bl	80056a4 <CODEC_IO_Write>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800480a:	89fb      	ldrh	r3, [r7, #14]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2203      	movs	r2, #3
 8004810:	f240 6101 	movw	r1, #1537	; 0x601
 8004814:	4618      	mov	r0, r3
 8004816:	f000 ff45 	bl	80056a4 <CODEC_IO_Write>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2203      	movs	r2, #3
 800482a:	f240 6102 	movw	r1, #1538	; 0x602
 800482e:	4618      	mov	r0, r3
 8004830:	f000 ff38 	bl	80056a4 <CODEC_IO_Write>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800483e:	89fb      	ldrh	r3, [r7, #14]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2203      	movs	r2, #3
 8004844:	f240 6104 	movw	r1, #1540	; 0x604
 8004848:	4618      	mov	r0, r3
 800484a:	f000 ff2b 	bl	80056a4 <CODEC_IO_Write>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2203      	movs	r2, #3
 800485e:	f240 6105 	movw	r1, #1541	; 0x605
 8004862:	4618      	mov	r0, r3
 8004864:	f000 ff1e 	bl	80056a4 <CODEC_IO_Write>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 8004872:	e088      	b.n	8004986 <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004874:	89fb      	ldrh	r3, [r7, #14]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f640 720f 	movw	r2, #3855	; 0xf0f
 800487c:	2105      	movs	r1, #5
 800487e:	4618      	mov	r0, r3
 8004880:	f000 ff10 	bl	80056a4 <CODEC_IO_Write>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2201      	movs	r2, #1
 8004894:	f240 6101 	movw	r1, #1537	; 0x601
 8004898:	4618      	mov	r0, r3
 800489a:	f000 ff03 	bl	80056a4 <CODEC_IO_Write>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80048a8:	89fb      	ldrh	r3, [r7, #14]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2201      	movs	r2, #1
 80048ae:	f240 6102 	movw	r1, #1538	; 0x602
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fef6 	bl	80056a4 <CODEC_IO_Write>
 80048b8:	4603      	mov	r3, r0
 80048ba:	461a      	mov	r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80048c2:	89fb      	ldrh	r3, [r7, #14]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2202      	movs	r2, #2
 80048c8:	f240 6104 	movw	r1, #1540	; 0x604
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fee9 	bl	80056a4 <CODEC_IO_Write>
 80048d2:	4603      	mov	r3, r0
 80048d4:	461a      	mov	r2, r3
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80048dc:	89fb      	ldrh	r3, [r7, #14]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2202      	movs	r2, #2
 80048e2:	f240 6105 	movw	r1, #1541	; 0x605
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fedc 	bl	80056a4 <CODEC_IO_Write>
 80048ec:	4603      	mov	r3, r0
 80048ee:	461a      	mov	r2, r3
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	61fb      	str	r3, [r7, #28]
      break;
 80048f6:	e046      	b.n	8004986 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80048f8:	89fb      	ldrh	r3, [r7, #14]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f240 3203 	movw	r2, #771	; 0x303
 8004900:	2105      	movs	r1, #5
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fece 	bl	80056a4 <CODEC_IO_Write>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2201      	movs	r2, #1
 8004918:	f240 6101 	movw	r1, #1537	; 0x601
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fec1 	bl	80056a4 <CODEC_IO_Write>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800492c:	89fb      	ldrh	r3, [r7, #14]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2201      	movs	r2, #1
 8004932:	f240 6102 	movw	r1, #1538	; 0x602
 8004936:	4618      	mov	r0, r3
 8004938:	f000 feb4 	bl	80056a4 <CODEC_IO_Write>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004946:	89fb      	ldrh	r3, [r7, #14]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2200      	movs	r2, #0
 800494c:	f240 6104 	movw	r1, #1540	; 0x604
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fea7 	bl	80056a4 <CODEC_IO_Write>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004960:	89fb      	ldrh	r3, [r7, #14]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2200      	movs	r2, #0
 8004966:	f240 6105 	movw	r1, #1541	; 0x605
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fe9a 	bl	80056a4 <CODEC_IO_Write>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]
      break;
 800497a:	e004      	b.n	8004986 <wm8994_Init+0x39a>
 800497c:	200009c0 	.word	0x200009c0
    }
  }
  else
  {
    outputEnabled = 0;
 8004980:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <wm8994_Init+0x5fc>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004986:	8afb      	ldrh	r3, [r7, #22]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 81ab 	beq.w	8004ce4 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 800498e:	4b97      	ldr	r3, [pc, #604]	; (8004bec <wm8994_Init+0x600>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004994:	8afb      	ldrh	r3, [r7, #22]
 8004996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499a:	f000 8129 	beq.w	8004bf0 <wm8994_Init+0x604>
 800499e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a2:	f300 819b 	bgt.w	8004cdc <wm8994_Init+0x6f0>
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d05a      	beq.n	8004a62 <wm8994_Init+0x476>
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	f300 8194 	bgt.w	8004cdc <wm8994_Init+0x6f0>
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	f000 80c6 	beq.w	8004b48 <wm8994_Init+0x55c>
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c0:	f040 818c 	bne.w	8004cdc <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80049c4:	89fb      	ldrh	r3, [r7, #14]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80049cc:	2104      	movs	r1, #4
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fe68 	bl	80056a4 <CODEC_IO_Write>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	22db      	movs	r2, #219	; 0xdb
 80049e4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fe5b 	bl	80056a4 <CODEC_IO_Write>
 80049ee:	4603      	mov	r3, r0
 80049f0:	461a      	mov	r2, r3
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80049f8:	89fb      	ldrh	r3, [r7, #14]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fe4e 	bl	80056a4 <CODEC_IO_Write>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004a12:	89fb      	ldrh	r3, [r7, #14]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2202      	movs	r2, #2
 8004a18:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fe41 	bl	80056a4 <CODEC_IO_Write>
 8004a22:	4603      	mov	r3, r0
 8004a24:	461a      	mov	r2, r3
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004a2c:	89fb      	ldrh	r3, [r7, #14]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2202      	movs	r2, #2
 8004a32:	f240 6109 	movw	r1, #1545	; 0x609
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe34 	bl	80056a4 <CODEC_IO_Write>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8004a46:	89fb      	ldrh	r3, [r7, #14]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	220e      	movs	r2, #14
 8004a4c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fe27 	bl	80056a4 <CODEC_IO_Write>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
      break;
 8004a60:	e143      	b.n	8004cea <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8004a62:	89fb      	ldrh	r3, [r7, #14]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2211      	movs	r2, #17
 8004a68:	2128      	movs	r1, #40	; 0x28
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fe1a 	bl	80056a4 <CODEC_IO_Write>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8004a7a:	89fb      	ldrh	r3, [r7, #14]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2220      	movs	r2, #32
 8004a80:	2129      	movs	r1, #41	; 0x29
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fe0e 	bl	80056a4 <CODEC_IO_Write>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2220      	movs	r2, #32
 8004a98:	212a      	movs	r1, #42	; 0x2a
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fe02 	bl	80056a4 <CODEC_IO_Write>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8004aaa:	89fb      	ldrh	r3, [r7, #14]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f240 3203 	movw	r2, #771	; 0x303
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fdf5 	bl	80056a4 <CODEC_IO_Write>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004ac4:	89fb      	ldrh	r3, [r7, #14]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	22db      	movs	r2, #219	; 0xdb
 8004aca:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fde8 	bl	80056a4 <CODEC_IO_Write>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f246 3250 	movw	r2, #25424	; 0x6350
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fddb 	bl	80056a4 <CODEC_IO_Write>
 8004aee:	4603      	mov	r3, r0
 8004af0:	461a      	mov	r2, r3
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004af8:	89fb      	ldrh	r3, [r7, #14]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2202      	movs	r2, #2
 8004afe:	f240 6106 	movw	r1, #1542	; 0x606
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fdce 	bl	80056a4 <CODEC_IO_Write>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2202      	movs	r2, #2
 8004b18:	f240 6107 	movw	r1, #1543	; 0x607
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fdc1 	bl	80056a4 <CODEC_IO_Write>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	220d      	movs	r2, #13
 8004b32:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fdb4 	bl	80056a4 <CODEC_IO_Write>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	61fb      	str	r3, [r7, #28]
      break;
 8004b46:	e0d0      	b.n	8004cea <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004b50:	2104      	movs	r1, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fda6 	bl	80056a4 <CODEC_IO_Write>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004b62:	89fb      	ldrh	r3, [r7, #14]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	22db      	movs	r2, #219	; 0xdb
 8004b68:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fd99 	bl	80056a4 <CODEC_IO_Write>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f246 3250 	movw	r2, #25424	; 0x6350
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd8c 	bl	80056a4 <CODEC_IO_Write>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004b96:	89fb      	ldrh	r3, [r7, #14]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f240 6106 	movw	r1, #1542	; 0x606
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd7f 	bl	80056a4 <CODEC_IO_Write>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f240 6107 	movw	r1, #1543	; 0x607
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fd72 	bl	80056a4 <CODEC_IO_Write>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	220d      	movs	r2, #13
 8004bd0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fd65 	bl	80056a4 <CODEC_IO_Write>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
      break;
 8004be4:	e081      	b.n	8004cea <wm8994_Init+0x6fe>
 8004be6:	bf00      	nop
 8004be8:	200009c0 	.word	0x200009c0
 8004bec:	200009c4 	.word	0x200009c4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f640 723c 	movw	r2, #3900	; 0xf3c
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fd52 	bl	80056a4 <CODEC_IO_Write>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	22db      	movs	r2, #219	; 0xdb
 8004c10:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd45 	bl	80056a4 <CODEC_IO_Write>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	22db      	movs	r2, #219	; 0xdb
 8004c2a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fd38 	bl	80056a4 <CODEC_IO_Write>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8004c3e:	89fb      	ldrh	r3, [r7, #14]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fd2b 	bl	80056a4 <CODEC_IO_Write>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f240 6106 	movw	r1, #1542	; 0x606
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd1e 	bl	80056a4 <CODEC_IO_Write>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2202      	movs	r2, #2
 8004c78:	f240 6107 	movw	r1, #1543	; 0x607
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fd11 	bl	80056a4 <CODEC_IO_Write>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461a      	mov	r2, r3
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004c8c:	89fb      	ldrh	r3, [r7, #14]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2202      	movs	r2, #2
 8004c92:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fd04 	bl	80056a4 <CODEC_IO_Write>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2202      	movs	r2, #2
 8004cac:	f240 6109 	movw	r1, #1545	; 0x609
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fcf7 	bl	80056a4 <CODEC_IO_Write>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	220d      	movs	r2, #13
 8004cc6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fcea 	bl	80056a4 <CODEC_IO_Write>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61fb      	str	r3, [r7, #28]
      break;
 8004cda:	e006      	b.n	8004cea <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      break;
 8004ce2:	e002      	b.n	8004cea <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8004ce4:	4ba4      	ldr	r3, [pc, #656]	; (8004f78 <wm8994_Init+0x98c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4aa3      	ldr	r2, [pc, #652]	; (8004f7c <wm8994_Init+0x990>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d079      	beq.n	8004de6 <wm8994_Init+0x7fa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4aa1      	ldr	r2, [pc, #644]	; (8004f7c <wm8994_Init+0x990>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	f200 80ad 	bhi.w	8004e56 <wm8994_Init+0x86a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d061      	beq.n	8004dca <wm8994_Init+0x7de>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	f200 80a2 	bhi.w	8004e56 <wm8994_Init+0x86a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	f000 808e 	beq.w	8004e3a <wm8994_Init+0x84e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004d24:	4293      	cmp	r3, r2
 8004d26:	f200 8096 	bhi.w	8004e56 <wm8994_Init+0x86a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004d30:	d03d      	beq.n	8004dae <wm8994_Init+0x7c2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004d38:	f200 808d 	bhi.w	8004e56 <wm8994_Init+0x86a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f245 6222 	movw	r2, #22050	; 0x5622
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d06b      	beq.n	8004e1e <wm8994_Init+0x832>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f245 6222 	movw	r2, #22050	; 0x5622
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	f200 8082 	bhi.w	8004e56 <wm8994_Init+0x86a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004d58:	d01b      	beq.n	8004d92 <wm8994_Init+0x7a6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004d60:	d879      	bhi.n	8004e56 <wm8994_Init+0x86a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004d68:	d005      	beq.n	8004d76 <wm8994_Init+0x78a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d046      	beq.n	8004e02 <wm8994_Init+0x816>
 8004d74:	e06f      	b.n	8004e56 <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004d76:	89fb      	ldrh	r3, [r7, #14]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fc8f 	bl	80056a4 <CODEC_IO_Write>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]
    break;
 8004d90:	e06f      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004d92:	89fb      	ldrh	r3, [r7, #14]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2233      	movs	r2, #51	; 0x33
 8004d98:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fc81 	bl	80056a4 <CODEC_IO_Write>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]
    break;
 8004dac:	e061      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004dae:	89fb      	ldrh	r3, [r7, #14]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2263      	movs	r2, #99	; 0x63
 8004db4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fc73 	bl	80056a4 <CODEC_IO_Write>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
    break;
 8004dc8:	e053      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2283      	movs	r2, #131	; 0x83
 8004dd0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc65 	bl	80056a4 <CODEC_IO_Write>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]
    break;
 8004de4:	e045      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	22a3      	movs	r2, #163	; 0xa3
 8004dec:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fc57 	bl	80056a4 <CODEC_IO_Write>
 8004df6:	4603      	mov	r3, r0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
    break;
 8004e00:	e037      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004e02:	89fb      	ldrh	r3, [r7, #14]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2213      	movs	r2, #19
 8004e08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fc49 	bl	80056a4 <CODEC_IO_Write>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	61fb      	str	r3, [r7, #28]
    break;
 8004e1c:	e029      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2243      	movs	r2, #67	; 0x43
 8004e24:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fc3b 	bl	80056a4 <CODEC_IO_Write>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
    break;
 8004e38:	e01b      	b.n	8004e72 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2273      	movs	r2, #115	; 0x73
 8004e40:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fc2d 	bl	80056a4 <CODEC_IO_Write>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
    break;
 8004e54:	e00d      	b.n	8004e72 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2283      	movs	r2, #131	; 0x83
 8004e5c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fc1f 	bl	80056a4 <CODEC_IO_Write>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	61fb      	str	r3, [r7, #28]
    break;
 8004e70:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004e72:	8afb      	ldrh	r3, [r7, #22]
 8004e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e78:	d10e      	bne.n	8004e98 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 8004e7a:	89fb      	ldrh	r3, [r7, #14]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f244 0218 	movw	r2, #16408	; 0x4018
 8004e82:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fc0c 	bl	80056a4 <CODEC_IO_Write>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e00d      	b.n	8004eb4 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004e98:	89fb      	ldrh	r3, [r7, #14]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f244 0210 	movw	r2, #16400	; 0x4010
 8004ea0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fbfd 	bl	80056a4 <CODEC_IO_Write>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f240 3102 	movw	r1, #770	; 0x302
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fbf0 	bl	80056a4 <CODEC_IO_Write>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004ece:	89fb      	ldrh	r3, [r7, #14]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fbe3 	bl	80056a4 <CODEC_IO_Write>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004ee8:	89fb      	ldrh	r3, [r7, #14]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2201      	movs	r2, #1
 8004eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fbd6 	bl	80056a4 <CODEC_IO_Write>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004f02:	8b3b      	ldrh	r3, [r7, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 817b 	beq.w	8005200 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8004f0a:	8b3b      	ldrh	r3, [r7, #24]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d157      	bne.n	8004fc0 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004f10:	89fb      	ldrh	r3, [r7, #14]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f18:	212d      	movs	r1, #45	; 0x2d
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fbc2 	bl	80056a4 <CODEC_IO_Write>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f32:	212e      	movs	r1, #46	; 0x2e
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fbb5 	bl	80056a4 <CODEC_IO_Write>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <wm8994_Init+0x994>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8004f4c:	89fb      	ldrh	r3, [r7, #14]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004f54:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fba3 	bl	80056a4 <CODEC_IO_Write>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461a      	mov	r2, r3
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <wm8994_Init+0x994>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8004f6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f72:	f000 fc05 	bl	8005780 <HAL_Delay>
 8004f76:	e016      	b.n	8004fa6 <wm8994_Init+0x9ba>
 8004f78:	200009c4 	.word	0x200009c4
 8004f7c:	00017700 	.word	0x00017700
 8004f80:	20000010 	.word	0x20000010
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f248 1208 	movw	r2, #33032	; 0x8108
 8004f8c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb87 	bl	80056a4 <CODEC_IO_Write>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8004fa0:	2032      	movs	r0, #50	; 0x32
 8004fa2:	f000 fbed 	bl	8005780 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004fa6:	89fb      	ldrh	r3, [r7, #14]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2200      	movs	r2, #0
 8004fac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fb77 	bl	80056a4 <CODEC_IO_Write>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004fc0:	89fb      	ldrh	r3, [r7, #14]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004fc8:	2103      	movs	r1, #3
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fb6a 	bl	80056a4 <CODEC_IO_Write>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004fda:	89fb      	ldrh	r3, [r7, #14]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2122      	movs	r1, #34	; 0x22
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fb5e 	bl	80056a4 <CODEC_IO_Write>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004ff2:	89fb      	ldrh	r3, [r7, #14]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2123      	movs	r1, #35	; 0x23
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fb52 	bl	80056a4 <CODEC_IO_Write>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005012:	2136      	movs	r1, #54	; 0x36
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fb45 	bl	80056a4 <CODEC_IO_Write>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f243 0203 	movw	r2, #12291	; 0x3003
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fb38 	bl	80056a4 <CODEC_IO_Write>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800503e:	8afb      	ldrh	r3, [r7, #22]
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d10d      	bne.n	8005062 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8005046:	89fb      	ldrh	r3, [r7, #14]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f240 2205 	movw	r2, #517	; 0x205
 800504e:	2151      	movs	r1, #81	; 0x51
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fb27 	bl	80056a4 <CODEC_IO_Write>
 8005056:	4603      	mov	r3, r0
 8005058:	461a      	mov	r2, r3
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e00b      	b.n	800507a <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2205      	movs	r2, #5
 8005068:	2151      	movs	r1, #81	; 0x51
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb1a 	bl	80056a4 <CODEC_IO_Write>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800507a:	8b7b      	ldrh	r3, [r7, #26]
 800507c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005080:	f043 0303 	orr.w	r3, r3, #3
 8005084:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005086:	89fb      	ldrh	r3, [r7, #14]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	8b7a      	ldrh	r2, [r7, #26]
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fb08 	bl	80056a4 <CODEC_IO_Write>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800509e:	89fb      	ldrh	r3, [r7, #14]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2222      	movs	r2, #34	; 0x22
 80050a4:	2160      	movs	r1, #96	; 0x60
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fafc 	bl	80056a4 <CODEC_IO_Write>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f649 7225 	movw	r2, #40741	; 0x9f25
 80050be:	214c      	movs	r1, #76	; 0x4c
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 faef 	bl	80056a4 <CODEC_IO_Write>
 80050c6:	4603      	mov	r3, r0
 80050c8:	461a      	mov	r2, r3
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 80050d0:	200f      	movs	r0, #15
 80050d2:	f000 fb55 	bl	8005780 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2201      	movs	r2, #1
 80050dc:	212d      	movs	r1, #45	; 0x2d
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fae0 	bl	80056a4 <CODEC_IO_Write>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2201      	movs	r2, #1
 80050f4:	212e      	movs	r1, #46	; 0x2e
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fad4 	bl	80056a4 <CODEC_IO_Write>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800510e:	2103      	movs	r1, #3
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fac7 	bl	80056a4 <CODEC_IO_Write>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8005120:	89fb      	ldrh	r3, [r7, #14]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2233      	movs	r2, #51	; 0x33
 8005126:	2154      	movs	r1, #84	; 0x54
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fabb 	bl	80056a4 <CODEC_IO_Write>
 800512e:	4603      	mov	r3, r0
 8005130:	461a      	mov	r2, r3
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 8005138:	f240 1001 	movw	r0, #257	; 0x101
 800513c:	f000 fb20 	bl	8005780 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8005140:	89fb      	ldrh	r3, [r7, #14]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	22ee      	movs	r2, #238	; 0xee
 8005146:	2160      	movs	r1, #96	; 0x60
 8005148:	4618      	mov	r0, r3
 800514a:	f000 faab 	bl	80056a4 <CODEC_IO_Write>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	22c0      	movs	r2, #192	; 0xc0
 800515e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fa9e 	bl	80056a4 <CODEC_IO_Write>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	22c0      	movs	r2, #192	; 0xc0
 8005178:	f240 6111 	movw	r1, #1553	; 0x611
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fa91 	bl	80056a4 <CODEC_IO_Write>
 8005182:	4603      	mov	r3, r0
 8005184:	461a      	mov	r2, r3
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800518c:	89fb      	ldrh	r3, [r7, #14]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2210      	movs	r2, #16
 8005192:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fa84 	bl	80056a4 <CODEC_IO_Write>
 800519c:	4603      	mov	r3, r0
 800519e:	461a      	mov	r2, r3
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	22c0      	movs	r2, #192	; 0xc0
 80051ac:	f240 6112 	movw	r1, #1554	; 0x612
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fa77 	bl	80056a4 <CODEC_IO_Write>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	22c0      	movs	r2, #192	; 0xc0
 80051c6:	f240 6113 	movw	r1, #1555	; 0x613
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fa6a 	bl	80056a4 <CODEC_IO_Write>
 80051d0:	4603      	mov	r3, r0
 80051d2:	461a      	mov	r2, r3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80051da:	89fb      	ldrh	r3, [r7, #14]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2210      	movs	r2, #16
 80051e0:	f240 4122 	movw	r1, #1058	; 0x422
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fa5d 	bl	80056a4 <CODEC_IO_Write>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80051f4:	7afa      	ldrb	r2, [r7, #11]
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f8c0 	bl	8005380 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005200:	8afb      	ldrh	r3, [r7, #22]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80a6 	beq.w	8005354 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005208:	8afb      	ldrh	r3, [r7, #22]
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	d003      	beq.n	8005218 <wm8994_Init+0xc2c>
 8005210:	8afb      	ldrh	r3, [r7, #22]
 8005212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005216:	d12b      	bne.n	8005270 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005218:	8b7b      	ldrh	r3, [r7, #26]
 800521a:	f043 0313 	orr.w	r3, r3, #19
 800521e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	8b7a      	ldrh	r2, [r7, #26]
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fa3b 	bl	80056a4 <CODEC_IO_Write>
 800522e:	4603      	mov	r3, r0
 8005230:	461a      	mov	r2, r3
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2202      	movs	r2, #2
 800523e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fa2e 	bl	80056a4 <CODEC_IO_Write>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8005252:	89fb      	ldrh	r3, [r7, #14]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800525a:	f240 4111 	movw	r1, #1041	; 0x411
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fa20 	bl	80056a4 <CODEC_IO_Write>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e06b      	b.n	8005348 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005270:	8afb      	ldrh	r3, [r7, #22]
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d139      	bne.n	80052ec <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005278:	8b7b      	ldrh	r3, [r7, #26]
 800527a:	f043 0313 	orr.w	r3, r3, #19
 800527e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	8b7a      	ldrh	r2, [r7, #26]
 8005286:	2101      	movs	r1, #1
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fa0b 	bl	80056a4 <CODEC_IO_Write>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2202      	movs	r2, #2
 800529e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f9fe 	bl	80056a4 <CODEC_IO_Write>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80052ba:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f9f0 	bl	80056a4 <CODEC_IO_Write>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80052d6:	f240 4111 	movw	r1, #1041	; 0x411
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f9e2 	bl	80056a4 <CODEC_IO_Write>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e02d      	b.n	8005348 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80052ec:	8afb      	ldrh	r3, [r7, #22]
 80052ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f2:	d003      	beq.n	80052fc <wm8994_Init+0xd10>
 80052f4:	8afb      	ldrh	r3, [r7, #22]
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fa:	d125      	bne.n	8005348 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80052fc:	89fb      	ldrh	r3, [r7, #14]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	220b      	movs	r2, #11
 8005302:	2118      	movs	r1, #24
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f9cd 	bl	80056a4 <CODEC_IO_Write>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005314:	89fb      	ldrh	r3, [r7, #14]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	220b      	movs	r2, #11
 800531a:	211a      	movs	r1, #26
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f9c1 	bl	80056a4 <CODEC_IO_Write>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005334:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f9b3 	bl	80056a4 <CODEC_IO_Write>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005348:	7afa      	ldrb	r2, [r7, #11]
 800534a:	89fb      	ldrh	r3, [r7, #14]
 800534c:	4611      	mov	r1, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f816 	bl	8005380 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005354:	69fb      	ldr	r3, [r7, #28]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop

08005360 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe fc01 	bl	8003b78 <AUDIO_I2C_Read>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	460a      	mov	r2, r1
 800538a:	80fb      	strh	r3, [r7, #6]
 800538c:	4613      	mov	r3, r2
 800538e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005394:	797b      	ldrb	r3, [r7, #5]
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d80b      	bhi.n	80053b2 <wm8994_SetVolume+0x32>
 800539a:	797a      	ldrb	r2, [r7, #5]
 800539c:	4613      	mov	r3, r2
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	4a86      	ldr	r2, [pc, #536]	; (80055bc <wm8994_SetVolume+0x23c>)
 80053a4:	fb82 1203 	smull	r1, r2, r2, r3
 80053a8:	1152      	asrs	r2, r2, #5
 80053aa:	17db      	asrs	r3, r3, #31
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	e000      	b.n	80053b4 <wm8994_SetVolume+0x34>
 80053b2:	2364      	movs	r3, #100	; 0x64
 80053b4:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80053b6:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <wm8994_SetVolume+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 809b 	beq.w	80054f6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80053c0:	7afb      	ldrb	r3, [r7, #11]
 80053c2:	2b3e      	cmp	r3, #62	; 0x3e
 80053c4:	d93d      	bls.n	8005442 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f8fc 	bl	80055c8 <wm8994_SetMute>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f240 127f 	movw	r2, #383	; 0x17f
 80053e0:	211c      	movs	r1, #28
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f95e 	bl	80056a4 <CODEC_IO_Write>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f240 127f 	movw	r2, #383	; 0x17f
 80053fa:	211d      	movs	r1, #29
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f951 	bl	80056a4 <CODEC_IO_Write>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f240 127f 	movw	r2, #383	; 0x17f
 8005414:	2126      	movs	r1, #38	; 0x26
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f944 	bl	80056a4 <CODEC_IO_Write>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f240 127f 	movw	r2, #383	; 0x17f
 800542e:	2127      	movs	r1, #39	; 0x27
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f937 	bl	80056a4 <CODEC_IO_Write>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e059      	b.n	80054f6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8005442:	797b      	ldrb	r3, [r7, #5]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f8bb 	bl	80055c8 <wm8994_SetMute>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e04c      	b.n	80054f6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2100      	movs	r1, #0
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f8b1 	bl	80055c8 <wm8994_SetMute>
 8005466:	4602      	mov	r2, r0
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	b2d8      	uxtb	r0, r3
 8005472:	7afb      	ldrb	r3, [r7, #11]
 8005474:	b21b      	sxth	r3, r3
 8005476:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800547a:	b21b      	sxth	r3, r3
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	211c      	movs	r1, #28
 8005482:	f000 f90f 	bl	80056a4 <CODEC_IO_Write>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	b2d8      	uxtb	r0, r3
 8005494:	7afb      	ldrb	r3, [r7, #11]
 8005496:	b21b      	sxth	r3, r3
 8005498:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800549c:	b21b      	sxth	r3, r3
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	211d      	movs	r1, #29
 80054a4:	f000 f8fe 	bl	80056a4 <CODEC_IO_Write>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	b2d8      	uxtb	r0, r3
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	b21b      	sxth	r3, r3
 80054ba:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80054be:	b21b      	sxth	r3, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	2126      	movs	r1, #38	; 0x26
 80054c6:	f000 f8ed 	bl	80056a4 <CODEC_IO_Write>
 80054ca:	4603      	mov	r3, r0
 80054cc:	461a      	mov	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	b2d8      	uxtb	r0, r3
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	b21b      	sxth	r3, r3
 80054dc:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	2127      	movs	r1, #39	; 0x27
 80054e8:	f000 f8dc 	bl	80056a4 <CODEC_IO_Write>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <wm8994_SetVolume+0x244>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d059      	beq.n	80055b2 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80054fe:	797b      	ldrb	r3, [r7, #5]
 8005500:	2b63      	cmp	r3, #99	; 0x63
 8005502:	d80c      	bhi.n	800551e <wm8994_SetVolume+0x19e>
 8005504:	797a      	ldrb	r2, [r7, #5]
 8005506:	4613      	mov	r3, r2
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4a2b      	ldr	r2, [pc, #172]	; (80055bc <wm8994_SetVolume+0x23c>)
 8005510:	fb82 1203 	smull	r1, r2, r2, r3
 8005514:	1152      	asrs	r2, r2, #5
 8005516:	17db      	asrs	r3, r3, #31
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e000      	b.n	8005520 <wm8994_SetVolume+0x1a0>
 800551e:	23ef      	movs	r3, #239	; 0xef
 8005520:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	b2d8      	uxtb	r0, r3
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	b21b      	sxth	r3, r3
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	b21b      	sxth	r3, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005538:	f000 f8b4 	bl	80056a4 <CODEC_IO_Write>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	b2d8      	uxtb	r0, r3
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	b21b      	sxth	r3, r3
 800554e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005552:	b21b      	sxth	r3, r3
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	f240 4101 	movw	r1, #1025	; 0x401
 800555c:	f000 f8a2 	bl	80056a4 <CODEC_IO_Write>
 8005560:	4603      	mov	r3, r0
 8005562:	461a      	mov	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	b2d8      	uxtb	r0, r3
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	b21b      	sxth	r3, r3
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	b21b      	sxth	r3, r3
 8005578:	b29b      	uxth	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	f240 4104 	movw	r1, #1028	; 0x404
 8005580:	f000 f890 	bl	80056a4 <CODEC_IO_Write>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	b2d8      	uxtb	r0, r3
 8005592:	7afb      	ldrb	r3, [r7, #11]
 8005594:	b21b      	sxth	r3, r3
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	b21b      	sxth	r3, r3
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	f240 4105 	movw	r1, #1029	; 0x405
 80055a4:	f000 f87e 	bl	80056a4 <CODEC_IO_Write>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	51eb851f 	.word	0x51eb851f
 80055c0:	200009c0 	.word	0x200009c0
 80055c4:	200009c4 	.word	0x200009c4

080055c8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80055d8:	4b21      	ldr	r3, [pc, #132]	; (8005660 <wm8994_SetMute+0x98>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d039      	beq.n	8005654 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d11c      	bne.n	8005620 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ee:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f856 	bl	80056a4 <CODEC_IO_Write>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560a:	f240 4122 	movw	r1, #1058	; 0x422
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f848 	bl	80056a4 <CODEC_IO_Write>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e019      	b.n	8005654 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2210      	movs	r2, #16
 8005626:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f83a 	bl	80056a4 <CODEC_IO_Write>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2210      	movs	r2, #16
 8005640:	f240 4122 	movw	r1, #1058	; 0x422
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f82d 	bl	80056a4 <CODEC_IO_Write>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005654:	68fb      	ldr	r3, [r7, #12]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200009c0 	.word	0x200009c0

08005664 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2200      	movs	r2, #0
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f812 	bl	80056a4 <CODEC_IO_Write>
 8005680:	4603      	mov	r3, r0
 8005682:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <wm8994_Reset+0x38>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <wm8994_Reset+0x3c>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

  return counter;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200009c0 	.word	0x200009c0
 80056a0:	200009c4 	.word	0x200009c4

080056a4 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
 80056ae:	460b      	mov	r3, r1
 80056b0:	80bb      	strh	r3, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 80056ba:	887a      	ldrh	r2, [r7, #2]
 80056bc:	88b9      	ldrh	r1, [r7, #4]
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fa2f 	bl	8003b24 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	b2db      	uxtb	r3, r3
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800570c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056d8:	480d      	ldr	r0, [pc, #52]	; (8005710 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056da:	490e      	ldr	r1, [pc, #56]	; (8005714 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056dc:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056e0:	e002      	b.n	80056e8 <LoopCopyDataInit>

080056e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056e6:	3304      	adds	r3, #4

080056e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056ec:	d3f9      	bcc.n	80056e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056ee:	4a0b      	ldr	r2, [pc, #44]	; (800571c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056f0:	4c0b      	ldr	r4, [pc, #44]	; (8005720 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056f4:	e001      	b.n	80056fa <LoopFillZerobss>

080056f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056f8:	3204      	adds	r2, #4

080056fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056fc:	d3fb      	bcc.n	80056f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056fe:	f7fe f89b 	bl	8003838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005702:	f00d f929 	bl	8012958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005706:	f7fb ff9b 	bl	8001640 <main>
  bx  lr    
 800570a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800570c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005714:	20000954 	.word	0x20000954
  ldr r2, =_sidata
 8005718:	0801b920 	.word	0x0801b920
  ldr r2, =_sbss
 800571c:	20000958 	.word	0x20000958
  ldr r4, =_ebss
 8005720:	200417bc 	.word	0x200417bc

08005724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005724:	e7fe      	b.n	8005724 <ADC_IRQHandler>

08005726 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800572a:	2003      	movs	r0, #3
 800572c:	f000 fba5 	bl	8005e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005730:	2000      	movs	r0, #0
 8005732:	f7fd feeb 	bl	800350c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005736:	f7fc ff73 	bl	8002620 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_IncTick+0x20>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_IncTick+0x24>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4413      	add	r3, r2
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <HAL_IncTick+0x24>)
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000028 	.word	0x20000028
 8005764:	200414a4 	.word	0x200414a4

08005768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return uwTick;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <HAL_GetTick+0x14>)
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	200414a4 	.word	0x200414a4

08005780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005788:	f7ff ffee 	bl	8005768 <HAL_GetTick>
 800578c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005798:	d005      	beq.n	80057a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <HAL_Delay+0x44>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057a6:	bf00      	nop
 80057a8:	f7ff ffde 	bl	8005768 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d8f7      	bhi.n	80057a8 <HAL_Delay+0x28>
  {
  }
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000028 	.word	0x20000028

080057c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e031      	b.n	8005842 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc ff42 	bl	8002670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	d116      	bne.n	8005834 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <HAL_ADC_Init+0x84>)
 800580c:	4013      	ands	r3, r2
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f964 	bl	8005ae4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	f043 0201 	orr.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
 8005832:	e001      	b.n	8005838 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	ffffeefd 	.word	0xffffeefd

08005850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_ADC_ConfigChannel+0x1c>
 8005868:	2302      	movs	r3, #2
 800586a:	e12a      	b.n	8005ac2 <HAL_ADC_ConfigChannel+0x272>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d93a      	bls.n	80058f2 <HAL_ADC_ConfigChannel+0xa2>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005884:	d035      	beq.n	80058f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68d9      	ldr	r1, [r3, #12]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	4613      	mov	r3, r2
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	4413      	add	r3, r2
 800589a:	3b1e      	subs	r3, #30
 800589c:	2207      	movs	r2, #7
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	400a      	ands	r2, r1
 80058aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a87      	ldr	r2, [pc, #540]	; (8005ad0 <HAL_ADC_ConfigChannel+0x280>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10a      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68d9      	ldr	r1, [r3, #12]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	061a      	lsls	r2, r3, #24
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058ca:	e035      	b.n	8005938 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4618      	mov	r0, r3
 80058de:	4603      	mov	r3, r0
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4403      	add	r3, r0
 80058e4:	3b1e      	subs	r3, #30
 80058e6:	409a      	lsls	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f0:	e022      	b.n	8005938 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6919      	ldr	r1, [r3, #16]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	4613      	mov	r3, r2
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	2207      	movs	r2, #7
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43da      	mvns	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	400a      	ands	r2, r1
 8005914:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6919      	ldr	r1, [r3, #16]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	4618      	mov	r0, r3
 8005928:	4603      	mov	r3, r0
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4403      	add	r3, r0
 800592e:	409a      	lsls	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b06      	cmp	r3, #6
 800593e:	d824      	bhi.n	800598a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	3b05      	subs	r3, #5
 8005952:	221f      	movs	r2, #31
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43da      	mvns	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	400a      	ands	r2, r1
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	4618      	mov	r0, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	3b05      	subs	r3, #5
 800597c:	fa00 f203 	lsl.w	r2, r0, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	635a      	str	r2, [r3, #52]	; 0x34
 8005988:	e04c      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d824      	bhi.n	80059dc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	3b23      	subs	r3, #35	; 0x23
 80059a4:	221f      	movs	r2, #31
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43da      	mvns	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	400a      	ands	r2, r1
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4618      	mov	r0, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	3b23      	subs	r3, #35	; 0x23
 80059ce:	fa00 f203 	lsl.w	r2, r0, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
 80059da:	e023      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	3b41      	subs	r3, #65	; 0x41
 80059ee:	221f      	movs	r2, #31
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43da      	mvns	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	400a      	ands	r2, r1
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	3b41      	subs	r3, #65	; 0x41
 8005a18:	fa00 f203 	lsl.w	r2, r0, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <HAL_ADC_ConfigChannel+0x284>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10a      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x1f4>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a36:	d105      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <HAL_ADC_ConfigChannel+0x288>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <HAL_ADC_ConfigChannel+0x288>)
 8005a3e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005a42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <HAL_ADC_ConfigChannel+0x284>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d109      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x212>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b12      	cmp	r3, #18
 8005a54:	d105      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <HAL_ADC_ConfigChannel+0x288>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <HAL_ADC_ConfigChannel+0x288>)
 8005a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a60:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <HAL_ADC_ConfigChannel+0x284>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d125      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x268>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <HAL_ADC_ConfigChannel+0x280>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <HAL_ADC_ConfigChannel+0x22e>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b11      	cmp	r3, #17
 8005a7c:	d11c      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005a7e:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_ADC_ConfigChannel+0x288>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_ADC_ConfigChannel+0x288>)
 8005a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a88:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <HAL_ADC_ConfigChannel+0x280>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d111      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_ADC_ConfigChannel+0x28c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <HAL_ADC_ConfigChannel+0x290>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	0c9a      	lsrs	r2, r3, #18
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005aaa:	e002      	b.n	8005ab2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f9      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	10000012 	.word	0x10000012
 8005ad4:	40012000 	.word	0x40012000
 8005ad8:	40012300 	.word	0x40012300
 8005adc:	20000008 	.word	0x20000008
 8005ae0:	431bde83 	.word	0x431bde83

08005ae4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005aec:	4b78      	ldr	r3, [pc, #480]	; (8005cd0 <ADC_Init+0x1ec>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a77      	ldr	r2, [pc, #476]	; (8005cd0 <ADC_Init+0x1ec>)
 8005af2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005af6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005af8:	4b75      	ldr	r3, [pc, #468]	; (8005cd0 <ADC_Init+0x1ec>)
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4973      	ldr	r1, [pc, #460]	; (8005cd0 <ADC_Init+0x1ec>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6859      	ldr	r1, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	021a      	lsls	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6859      	ldr	r1, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	4a58      	ldr	r2, [pc, #352]	; (8005cd4 <ADC_Init+0x1f0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6899      	ldr	r1, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6899      	ldr	r1, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	e00f      	b.n	8005bde <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0202 	bic.w	r2, r2, #2
 8005bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6899      	ldr	r1, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	005a      	lsls	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	3b01      	subs	r3, #1
 8005c38:	035a      	lsls	r2, r3, #13
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e007      	b.n	8005c54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	051a      	lsls	r2, r3, #20
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6899      	ldr	r1, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c96:	025a      	lsls	r2, r3, #9
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	029a      	lsls	r2, r3, #10
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	609a      	str	r2, [r3, #8]
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40012300 	.word	0x40012300
 8005cd4:	0f000001 	.word	0x0f000001

08005cd8 <__NVIC_SetPriorityGrouping>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <__NVIC_SetPriorityGrouping+0x40>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <__NVIC_SetPriorityGrouping+0x44>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d06:	4a04      	ldr	r2, [pc, #16]	; (8005d18 <__NVIC_SetPriorityGrouping+0x40>)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	60d3      	str	r3, [r2, #12]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	e000ed00 	.word	0xe000ed00
 8005d1c:	05fa0000 	.word	0x05fa0000

08005d20 <__NVIC_GetPriorityGrouping>:
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <__NVIC_GetPriorityGrouping+0x18>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	f003 0307 	and.w	r3, r3, #7
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <__NVIC_EnableIRQ>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	db0b      	blt.n	8005d66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	f003 021f 	and.w	r2, r3, #31
 8005d54:	4907      	ldr	r1, [pc, #28]	; (8005d74 <__NVIC_EnableIRQ+0x38>)
 8005d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	e000e100 	.word	0xe000e100

08005d78 <__NVIC_DisableIRQ>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db12      	blt.n	8005db0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	f003 021f 	and.w	r2, r3, #31
 8005d90:	490a      	ldr	r1, [pc, #40]	; (8005dbc <__NVIC_DisableIRQ+0x44>)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2001      	movs	r0, #1
 8005d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d9e:	3320      	adds	r3, #32
 8005da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005da4:	f3bf 8f4f 	dsb	sy
}
 8005da8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005daa:	f3bf 8f6f 	isb	sy
}
 8005dae:	bf00      	nop
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000e100 	.word	0xe000e100

08005dc0 <__NVIC_SetPriority>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	6039      	str	r1, [r7, #0]
 8005dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db0a      	blt.n	8005dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	490c      	ldr	r1, [pc, #48]	; (8005e0c <__NVIC_SetPriority+0x4c>)
 8005dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dde:	0112      	lsls	r2, r2, #4
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	440b      	add	r3, r1
 8005de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005de8:	e00a      	b.n	8005e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	4908      	ldr	r1, [pc, #32]	; (8005e10 <__NVIC_SetPriority+0x50>)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	3b04      	subs	r3, #4
 8005df8:	0112      	lsls	r2, r2, #4
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	761a      	strb	r2, [r3, #24]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	e000e100 	.word	0xe000e100
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <NVIC_EncodePriority>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	; 0x24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f1c3 0307 	rsb	r3, r3, #7
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	bf28      	it	cs
 8005e32:	2304      	movcs	r3, #4
 8005e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d902      	bls.n	8005e44 <NVIC_EncodePriority+0x30>
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3b03      	subs	r3, #3
 8005e42:	e000      	b.n	8005e46 <NVIC_EncodePriority+0x32>
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43da      	mvns	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	401a      	ands	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	43d9      	mvns	r1, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e6c:	4313      	orrs	r3, r2
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff ff28 	bl	8005cd8 <__NVIC_SetPriorityGrouping>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ea2:	f7ff ff3d 	bl	8005d20 <__NVIC_GetPriorityGrouping>
 8005ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	6978      	ldr	r0, [r7, #20]
 8005eae:	f7ff ffb1 	bl	8005e14 <NVIC_EncodePriority>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ff80 	bl	8005dc0 <__NVIC_SetPriority>
}
 8005ec0:	bf00      	nop
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ff30 	bl	8005d3c <__NVIC_EnableIRQ>
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff ff40 	bl	8005d78 <__NVIC_DisableIRQ>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e054      	b.n	8005fbc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7f5b      	ldrb	r3, [r3, #29]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fc fbfe 	bl	8002724 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10c      	bne.n	8005f50 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a22      	ldr	r2, [pc, #136]	; (8005fc4 <HAL_CRC_Init+0xc4>)
 8005f3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0218 	bic.w	r2, r2, #24
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	e00c      	b.n	8005f6a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6899      	ldr	r1, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f834 	bl	8005fc8 <HAL_CRCEx_Polynomial_Set>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e028      	b.n	8005fbc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	795b      	ldrb	r3, [r3, #5]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f7a:	611a      	str	r2, [r3, #16]
 8005f7c:	e004      	b.n	8005f88 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6912      	ldr	r2, [r2, #16]
 8005f86:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	04c11db7 	.word	0x04c11db7

08005fc8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005fd8:	231f      	movs	r3, #31
 8005fda:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005fdc:	bf00      	nop
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	613a      	str	r2, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <HAL_CRCEx_Polynomial_Set+0x34>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <HAL_CRCEx_Polynomial_Set+0x16>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b18      	cmp	r3, #24
 8006000:	d846      	bhi.n	8006090 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006097 	.word	0x08006097
 800600c:	08006091 	.word	0x08006091
 8006010:	08006091 	.word	0x08006091
 8006014:	08006091 	.word	0x08006091
 8006018:	08006091 	.word	0x08006091
 800601c:	08006091 	.word	0x08006091
 8006020:	08006091 	.word	0x08006091
 8006024:	08006091 	.word	0x08006091
 8006028:	08006085 	.word	0x08006085
 800602c:	08006091 	.word	0x08006091
 8006030:	08006091 	.word	0x08006091
 8006034:	08006091 	.word	0x08006091
 8006038:	08006091 	.word	0x08006091
 800603c:	08006091 	.word	0x08006091
 8006040:	08006091 	.word	0x08006091
 8006044:	08006091 	.word	0x08006091
 8006048:	08006079 	.word	0x08006079
 800604c:	08006091 	.word	0x08006091
 8006050:	08006091 	.word	0x08006091
 8006054:	08006091 	.word	0x08006091
 8006058:	08006091 	.word	0x08006091
 800605c:	08006091 	.word	0x08006091
 8006060:	08006091 	.word	0x08006091
 8006064:	08006091 	.word	0x08006091
 8006068:	0800606d 	.word	0x0800606d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b06      	cmp	r3, #6
 8006070:	d913      	bls.n	800609a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006076:	e010      	b.n	800609a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b07      	cmp	r3, #7
 800607c:	d90f      	bls.n	800609e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006082:	e00c      	b.n	800609e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d90b      	bls.n	80060a2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800608e:	e008      	b.n	80060a2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
      break;
 8006094:	e006      	b.n	80060a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006096:	bf00      	nop
 8006098:	e004      	b.n	80060a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80060a2:	bf00      	nop
  }
  if (status == HAL_OK)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10d      	bne.n	80060c6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f023 0118 	bic.w	r1, r3, #24
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e069      	b.n	80061ba <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fc fb36 	bl	8002764 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <HAL_DCMI_Init+0xf0>)
 800611a:	400b      	ands	r3, r1
 800611c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006132:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800613e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800614a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006156:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006162:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b10      	cmp	r3, #16
 8006172:	d112      	bne.n	800619a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7f1b      	ldrb	r3, [r3, #28]
 8006178:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7f5b      	ldrb	r3, [r3, #29]
 800617e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006180:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	7f9b      	ldrb	r3, [r3, #30]
 8006186:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006188:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	7fdb      	ldrb	r3, [r3, #31]
 8006190:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006196:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006198:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 021e 	orr.w	r2, r2, #30
 80061a8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	ffe0f007 	.word	0xffe0f007

080061c8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2204      	movs	r2, #4
 80061e8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	f043 0202 	orr.w	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2204      	movs	r2, #4
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	4a35      	ldr	r2, [pc, #212]	; (80062d8 <HAL_DCMI_IRQHandler+0x110>)
 8006204:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fa2a 	bl	8006664 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01e      	beq.n	8006258 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2202      	movs	r2, #2
 8006220:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2204      	movs	r2, #4
 8006232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623a:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <HAL_DCMI_IRQHandler+0x110>)
 800623c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fa0e 	bl	8006664 <HAL_DMA_Abort_IT>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f86a 	bl	800632c <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	d006      	beq.n	8006270 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2210      	movs	r2, #16
 8006268:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f840 	bl	80062f0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2208      	movs	r2, #8
 8006280:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f83e 	bl	8006304 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01d      	beq.n	80062ce <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d107      	bne.n	80062b0 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 021e 	bic.w	r2, r2, #30
 80062ae:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f825 	bl	8006318 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	0800632d 	.word	0x0800632d

080062dc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	2b02      	cmp	r3, #2
 8006342:	d009      	beq.n	8006358 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ffbf 	bl	80062dc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006374:	f7ff f9f8 	bl	8005768 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e099      	b.n	80064b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a4:	e00f      	b.n	80063c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063a6:	f7ff f9df 	bl	8005768 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b05      	cmp	r3, #5
 80063b2:	d908      	bls.n	80063c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e078      	b.n	80064b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e8      	bne.n	80063a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <HAL_DMA_Init+0x158>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800640a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2b04      	cmp	r3, #4
 800641e:	d107      	bne.n	8006430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	4313      	orrs	r3, r2
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	2b04      	cmp	r3, #4
 8006458:	d117      	bne.n	800648a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00e      	beq.n	800648a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fb09 	bl	8006a84 <DMA_CheckFifoParam>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006486:	2301      	movs	r3, #1
 8006488:	e016      	b.n	80064b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fac0 	bl	8006a18 <DMA_CalcBaseAndBitshift>
 8006498:	4603      	mov	r3, r0
 800649a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	223f      	movs	r2, #63	; 0x3f
 80064a2:	409a      	lsls	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	f010803f 	.word	0xf010803f

080064c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_DMA_Start_IT+0x26>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e048      	b.n	800657c <HAL_DMA_Start_IT+0xb8>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d137      	bne.n	800656e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fa52 	bl	80069bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	223f      	movs	r2, #63	; 0x3f
 800651e:	409a      	lsls	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0216 	orr.w	r2, r2, #22
 8006532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006542:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0208 	orr.w	r2, r2, #8
 800655a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e005      	b.n	800657a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006592:	f7ff f8e9 	bl	8005768 <HAL_GetTick>
 8006596:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d008      	beq.n	80065b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2280      	movs	r2, #128	; 0x80
 80065a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e052      	b.n	800665c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0216 	bic.w	r2, r2, #22
 80065c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <HAL_DMA_Abort+0x62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0208 	bic.w	r2, r2, #8
 80065f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006606:	e013      	b.n	8006630 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006608:	f7ff f8ae 	bl	8005768 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b05      	cmp	r3, #5
 8006614:	d90c      	bls.n	8006630 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2203      	movs	r2, #3
 8006628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e015      	b.n	800665c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e4      	bne.n	8006608 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006642:	223f      	movs	r2, #63	; 0x3f
 8006644:	409a      	lsls	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d004      	beq.n	8006682 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2280      	movs	r2, #128	; 0x80
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e00c      	b.n	800669c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2205      	movs	r2, #5
 8006686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0201 	bic.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80066b4:	4b92      	ldr	r3, [pc, #584]	; (8006900 <HAL_DMA_IRQHandler+0x258>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a92      	ldr	r2, [pc, #584]	; (8006904 <HAL_DMA_IRQHandler+0x25c>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	0a9b      	lsrs	r3, r3, #10
 80066c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	2208      	movs	r2, #8
 80066d4:	409a      	lsls	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4013      	ands	r3, r2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01a      	beq.n	8006714 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d013      	beq.n	8006714 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	2208      	movs	r2, #8
 8006702:	409a      	lsls	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006718:	2201      	movs	r2, #1
 800671a:	409a      	lsls	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d012      	beq.n	800674a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	2201      	movs	r2, #1
 8006738:	409a      	lsls	r2, r3
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006742:	f043 0202 	orr.w	r2, r3, #2
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	2204      	movs	r2, #4
 8006750:	409a      	lsls	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4013      	ands	r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d012      	beq.n	8006780 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	2204      	movs	r2, #4
 800676e:	409a      	lsls	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	f043 0204 	orr.w	r2, r3, #4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	2210      	movs	r2, #16
 8006786:	409a      	lsls	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d043      	beq.n	8006818 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d03c      	beq.n	8006818 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	2210      	movs	r2, #16
 80067a4:	409a      	lsls	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d018      	beq.n	80067ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d108      	bne.n	80067d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d024      	beq.n	8006818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
 80067d6:	e01f      	b.n	8006818 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
 80067e8:	e016      	b.n	8006818 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d107      	bne.n	8006808 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0208 	bic.w	r2, r2, #8
 8006806:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681c:	2220      	movs	r2, #32
 800681e:	409a      	lsls	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 808e 	beq.w	8006946 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8086 	beq.w	8006946 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	2220      	movs	r2, #32
 8006840:	409a      	lsls	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b05      	cmp	r3, #5
 8006850:	d136      	bne.n	80068c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0216 	bic.w	r2, r2, #22
 8006860:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695a      	ldr	r2, [r3, #20]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006870:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <HAL_DMA_IRQHandler+0x1da>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0208 	bic.w	r2, r2, #8
 8006890:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006896:	223f      	movs	r2, #63	; 0x3f
 8006898:	409a      	lsls	r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d07d      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
        }
        return;
 80068be:	e078      	b.n	80069b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01c      	beq.n	8006908 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d108      	bne.n	80068ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d030      	beq.n	8006946 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
 80068ec:	e02b      	b.n	8006946 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d027      	beq.n	8006946 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
 80068fe:	e022      	b.n	8006946 <HAL_DMA_IRQHandler+0x29e>
 8006900:	20000008 	.word	0x20000008
 8006904:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0210 	bic.w	r2, r2, #16
 8006924:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	2b00      	cmp	r3, #0
 800694c:	d032      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d022      	beq.n	80069a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2205      	movs	r2, #5
 800695e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	3301      	adds	r3, #1
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	429a      	cmp	r2, r3
 800697c:	d307      	bcc.n	800698e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f2      	bne.n	8006972 <HAL_DMA_IRQHandler+0x2ca>
 800698c:	e000      	b.n	8006990 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800698e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	4798      	blx	r3
 80069b0:	e000      	b.n	80069b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80069b2:	bf00      	nop
    }
  }
}
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d108      	bne.n	80069fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80069fa:	e007      	b.n	8006a0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	60da      	str	r2, [r3, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	3b10      	subs	r3, #16
 8006a28:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <DMA_CalcBaseAndBitshift+0x60>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	091b      	lsrs	r3, r3, #4
 8006a30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a32:	4a12      	ldr	r2, [pc, #72]	; (8006a7c <DMA_CalcBaseAndBitshift+0x64>)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d908      	bls.n	8006a58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <DMA_CalcBaseAndBitshift+0x68>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	1d1a      	adds	r2, r3, #4
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	659a      	str	r2, [r3, #88]	; 0x58
 8006a56:	e006      	b.n	8006a66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <DMA_CalcBaseAndBitshift+0x68>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	aaaaaaab 	.word	0xaaaaaaab
 8006a7c:	0801840c 	.word	0x0801840c
 8006a80:	fffffc00 	.word	0xfffffc00

08006a84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11f      	bne.n	8006ade <DMA_CheckFifoParam+0x5a>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d856      	bhi.n	8006b52 <DMA_CheckFifoParam+0xce>
 8006aa4:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <DMA_CheckFifoParam+0x28>)
 8006aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aaa:	bf00      	nop
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006acf 	.word	0x08006acf
 8006ab4:	08006abd 	.word	0x08006abd
 8006ab8:	08006b53 	.word	0x08006b53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d046      	beq.n	8006b56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006acc:	e043      	b.n	8006b56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ad6:	d140      	bne.n	8006b5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006adc:	e03d      	b.n	8006b5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae6:	d121      	bne.n	8006b2c <DMA_CheckFifoParam+0xa8>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d837      	bhi.n	8006b5e <DMA_CheckFifoParam+0xda>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <DMA_CheckFifoParam+0x70>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b0b 	.word	0x08006b0b
 8006afc:	08006b05 	.word	0x08006b05
 8006b00:	08006b1d 	.word	0x08006b1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
      break;
 8006b08:	e030      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d025      	beq.n	8006b62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b1a:	e022      	b.n	8006b62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b24:	d11f      	bne.n	8006b66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b2a:	e01c      	b.n	8006b66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d903      	bls.n	8006b3a <DMA_CheckFifoParam+0xb6>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d003      	beq.n	8006b40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006b38:	e018      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3e:	e015      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b50:	e00b      	b.n	8006b6a <DMA_CheckFifoParam+0xe6>
      break;
 8006b52:	bf00      	nop
 8006b54:	e00a      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      break;
 8006b56:	bf00      	nop
 8006b58:	e008      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e006      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e004      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      break;
 8006b62:	bf00      	nop
 8006b64:	e002      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      break;   
 8006b66:	bf00      	nop
 8006b68:	e000      	b.n	8006b6c <DMA_CheckFifoParam+0xe8>
      break;
 8006b6a:	bf00      	nop
    }
  } 
  
  return status; 
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop

08006b7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e039      	b.n	8006c02 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb fed8 	bl	8002958 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	f023 0107 	bic.w	r1, r3, #7
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <HAL_DMA2D_Init+0x90>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	68d1      	ldr	r1, [r2, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	ffffc000 	.word	0xffffc000

08006c10 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_DMA2D_Start+0x1c>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e018      	b.n	8006c5e <HAL_DMA2D_Start+0x4e>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fa98 	bl	800717c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d056      	beq.n	8006d30 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c82:	f7fe fd71 	bl	8005768 <HAL_GetTick>
 8006c86:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006c88:	e04b      	b.n	8006d22 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d023      	beq.n	8006ce4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006caa:	f043 0202 	orr.w	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	f043 0201 	orr.w	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2221      	movs	r2, #33	; 0x21
 8006cce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0a5      	b.n	8006e30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cea:	d01a      	beq.n	8006d22 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cec:	f7fe fd3c 	bl	8005768 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <HAL_DMA2D_PollForTransfer+0x9c>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10f      	bne.n	8006d22 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2203      	movs	r2, #3
 8006d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e086      	b.n	8006e30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0ac      	beq.n	8006c8a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d061      	beq.n	8006e16 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d52:	f7fe fd09 	bl	8005768 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006d58:	e056      	b.n	8006e08 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d02e      	beq.n	8006dca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	f043 0204 	orr.w	r2, r3, #4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	f043 0202 	orr.w	r2, r3, #2
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	f043 0201 	orr.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2229      	movs	r2, #41	; 0x29
 8006db4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e032      	b.n	8006e30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dd0:	d01a      	beq.n	8006e08 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fe fcc9 	bl	8005768 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <HAL_DMA2D_PollForTransfer+0x182>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10f      	bne.n	8006e08 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2203      	movs	r2, #3
 8006df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e013      	b.n	8006e30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0a1      	beq.n	8006d5a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2212      	movs	r2, #18
 8006e1c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d026      	beq.n	8006ea8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d021      	beq.n	8006ea8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e72:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e78:	f043 0201 	orr.w	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d026      	beq.n	8006f00 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d021      	beq.n	8006f00 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed8:	f043 0202 	orr.w	r2, r3, #2
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d026      	beq.n	8006f58 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d021      	beq.n	8006f58 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f22:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	f043 0204 	orr.w	r2, r3, #4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2204      	movs	r2, #4
 8006f82:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f853 	bl	8007030 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d024      	beq.n	8006fde <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01f      	beq.n	8006fde <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01f      	beq.n	8007028 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01a      	beq.n	8007028 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007000:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2210      	movs	r2, #16
 8007008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f80e 	bl	8007044 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_DMA2D_ConfigLayer+0x20>
 8007074:	2302      	movs	r3, #2
 8007076:	e079      	b.n	800716c <HAL_DMA2D_ConfigLayer+0x114>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	3318      	adds	r3, #24
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80070a2:	4b35      	ldr	r3, [pc, #212]	; (8007178 <HAL_DMA2D_ConfigLayer+0x120>)
 80070a4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b0a      	cmp	r3, #10
 80070ac:	d003      	beq.n	80070b6 <HAL_DMA2D_ConfigLayer+0x5e>
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d107      	bne.n	80070c6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e005      	b.n	80070d2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d120      	bne.n	800711a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	ea02 0103 	and.w	r1, r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b0a      	cmp	r3, #10
 8007100:	d003      	beq.n	800710a <HAL_DMA2D_ConfigLayer+0xb2>
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b09      	cmp	r3, #9
 8007108:	d127      	bne.n	800715a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
 8007118:	e01f      	b.n	800715a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69da      	ldr	r2, [r3, #28]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	43db      	mvns	r3, r3
 8007124:	ea02 0103 	and.w	r1, r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	430a      	orrs	r2, r1
 8007130:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	6812      	ldr	r2, [r2, #0]
 800713a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b0a      	cmp	r3, #10
 8007142:	d003      	beq.n	800714c <HAL_DMA2D_ConfigLayer+0xf4>
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b09      	cmp	r3, #9
 800714a:	d106      	bne.n	800715a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007158:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	ff03000f 	.word	0xff03000f

0800717c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800717c:	b480      	push	{r7}
 800717e:	b08b      	sub	sp, #44	; 0x2c
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	041a      	lsls	r2, r3, #16
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	431a      	orrs	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071b4:	d174      	bne.n	80072a0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071bc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071c4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071cc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d108      	bne.n	80071ee <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	431a      	orrs	r2, r3
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
 80071ec:	e053      	b.n	8007296 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d106      	bne.n	8007204 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	e048      	b.n	8007296 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d111      	bne.n	8007230 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	0cdb      	lsrs	r3, r3, #19
 8007210:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	0a9b      	lsrs	r3, r3, #10
 8007216:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	08db      	lsrs	r3, r3, #3
 800721c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	02db      	lsls	r3, r3, #11
 8007226:	4313      	orrs	r3, r2
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	e032      	b.n	8007296 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d117      	bne.n	8007268 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	0fdb      	lsrs	r3, r3, #31
 800723c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	0cdb      	lsrs	r3, r3, #19
 8007242:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	0adb      	lsrs	r3, r3, #11
 8007248:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	08db      	lsrs	r3, r3, #3
 800724e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	431a      	orrs	r2, r3
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	03db      	lsls	r3, r3, #15
 800725e:	4313      	orrs	r3, r2
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	e016      	b.n	8007296 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	0f1b      	lsrs	r3, r3, #28
 800726c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	0d1b      	lsrs	r3, r3, #20
 8007272:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	0b1b      	lsrs	r3, r3, #12
 8007278:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	011a      	lsls	r2, r3, #4
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	431a      	orrs	r2, r3
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	031b      	lsls	r3, r3, #12
 800728e:	4313      	orrs	r3, r2
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800729e:	e003      	b.n	80072a8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	60da      	str	r2, [r3, #12]
}
 80072a8:	bf00      	nop
 80072aa:	372c      	adds	r7, #44	; 0x2c
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b089      	sub	sp, #36	; 0x24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
 80072d2:	e175      	b.n	80075c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80072d4:	2201      	movs	r2, #1
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	4013      	ands	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	f040 8164 	bne.w	80075ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d00b      	beq.n	8007312 <HAL_GPIO_Init+0x5e>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d007      	beq.n	8007312 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007306:	2b11      	cmp	r3, #17
 8007308:	d003      	beq.n	8007312 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b12      	cmp	r3, #18
 8007310:	d130      	bne.n	8007374 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	2203      	movs	r2, #3
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	43db      	mvns	r3, r3
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	4013      	ands	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	fa02 f303 	lsl.w	r3, r2, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007348:	2201      	movs	r2, #1
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	091b      	lsrs	r3, r3, #4
 800735e:	f003 0201 	and.w	r2, r3, #1
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	2203      	movs	r2, #3
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	43db      	mvns	r3, r3
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	4013      	ands	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4313      	orrs	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d003      	beq.n	80073b4 <HAL_GPIO_Init+0x100>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b12      	cmp	r3, #18
 80073b2:	d123      	bne.n	80073fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	08da      	lsrs	r2, r3, #3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3208      	adds	r2, #8
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	220f      	movs	r2, #15
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	08da      	lsrs	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3208      	adds	r2, #8
 80073f6:	69b9      	ldr	r1, [r7, #24]
 80073f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	2203      	movs	r2, #3
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	43db      	mvns	r3, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4013      	ands	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f003 0203 	and.w	r2, r3, #3
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	4313      	orrs	r3, r2
 8007428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80be 	beq.w	80075ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800743e:	4b66      	ldr	r3, [pc, #408]	; (80075d8 <HAL_GPIO_Init+0x324>)
 8007440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007442:	4a65      	ldr	r2, [pc, #404]	; (80075d8 <HAL_GPIO_Init+0x324>)
 8007444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007448:	6453      	str	r3, [r2, #68]	; 0x44
 800744a:	4b63      	ldr	r3, [pc, #396]	; (80075d8 <HAL_GPIO_Init+0x324>)
 800744c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007456:	4a61      	ldr	r2, [pc, #388]	; (80075dc <HAL_GPIO_Init+0x328>)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	089b      	lsrs	r3, r3, #2
 800745c:	3302      	adds	r3, #2
 800745e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007462:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	220f      	movs	r2, #15
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	43db      	mvns	r3, r3
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	4013      	ands	r3, r2
 8007478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a58      	ldr	r2, [pc, #352]	; (80075e0 <HAL_GPIO_Init+0x32c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d037      	beq.n	80074f2 <HAL_GPIO_Init+0x23e>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a57      	ldr	r2, [pc, #348]	; (80075e4 <HAL_GPIO_Init+0x330>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d031      	beq.n	80074ee <HAL_GPIO_Init+0x23a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a56      	ldr	r2, [pc, #344]	; (80075e8 <HAL_GPIO_Init+0x334>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d02b      	beq.n	80074ea <HAL_GPIO_Init+0x236>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a55      	ldr	r2, [pc, #340]	; (80075ec <HAL_GPIO_Init+0x338>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d025      	beq.n	80074e6 <HAL_GPIO_Init+0x232>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a54      	ldr	r2, [pc, #336]	; (80075f0 <HAL_GPIO_Init+0x33c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01f      	beq.n	80074e2 <HAL_GPIO_Init+0x22e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a53      	ldr	r2, [pc, #332]	; (80075f4 <HAL_GPIO_Init+0x340>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d019      	beq.n	80074de <HAL_GPIO_Init+0x22a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a52      	ldr	r2, [pc, #328]	; (80075f8 <HAL_GPIO_Init+0x344>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <HAL_GPIO_Init+0x226>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a51      	ldr	r2, [pc, #324]	; (80075fc <HAL_GPIO_Init+0x348>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00d      	beq.n	80074d6 <HAL_GPIO_Init+0x222>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a50      	ldr	r2, [pc, #320]	; (8007600 <HAL_GPIO_Init+0x34c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <HAL_GPIO_Init+0x21e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a4f      	ldr	r2, [pc, #316]	; (8007604 <HAL_GPIO_Init+0x350>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d101      	bne.n	80074ce <HAL_GPIO_Init+0x21a>
 80074ca:	2309      	movs	r3, #9
 80074cc:	e012      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074ce:	230a      	movs	r3, #10
 80074d0:	e010      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074d2:	2308      	movs	r3, #8
 80074d4:	e00e      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074d6:	2307      	movs	r3, #7
 80074d8:	e00c      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074da:	2306      	movs	r3, #6
 80074dc:	e00a      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074de:	2305      	movs	r3, #5
 80074e0:	e008      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074e2:	2304      	movs	r3, #4
 80074e4:	e006      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074e6:	2303      	movs	r3, #3
 80074e8:	e004      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e002      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <HAL_GPIO_Init+0x240>
 80074f2:	2300      	movs	r3, #0
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	f002 0203 	and.w	r2, r2, #3
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	4093      	lsls	r3, r2
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4313      	orrs	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007504:	4935      	ldr	r1, [pc, #212]	; (80075dc <HAL_GPIO_Init+0x328>)
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	089b      	lsrs	r3, r3, #2
 800750a:	3302      	adds	r3, #2
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007512:	4b3d      	ldr	r3, [pc, #244]	; (8007608 <HAL_GPIO_Init+0x354>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	43db      	mvns	r3, r3
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	4013      	ands	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007536:	4a34      	ldr	r2, [pc, #208]	; (8007608 <HAL_GPIO_Init+0x354>)
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_GPIO_Init+0x354>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	43db      	mvns	r3, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4013      	ands	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007560:	4a29      	ldr	r2, [pc, #164]	; (8007608 <HAL_GPIO_Init+0x354>)
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007566:	4b28      	ldr	r3, [pc, #160]	; (8007608 <HAL_GPIO_Init+0x354>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	43db      	mvns	r3, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	4013      	ands	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800758a:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_GPIO_Init+0x354>)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007590:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <HAL_GPIO_Init+0x354>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	43db      	mvns	r3, r3
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	4013      	ands	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075b4:	4a14      	ldr	r2, [pc, #80]	; (8007608 <HAL_GPIO_Init+0x354>)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	3301      	adds	r3, #1
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	2b0f      	cmp	r3, #15
 80075c4:	f67f ae86 	bls.w	80072d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	3724      	adds	r7, #36	; 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40013800 	.word	0x40013800
 80075e0:	40020000 	.word	0x40020000
 80075e4:	40020400 	.word	0x40020400
 80075e8:	40020800 	.word	0x40020800
 80075ec:	40020c00 	.word	0x40020c00
 80075f0:	40021000 	.word	0x40021000
 80075f4:	40021400 	.word	0x40021400
 80075f8:	40021800 	.word	0x40021800
 80075fc:	40021c00 	.word	0x40021c00
 8007600:	40022000 	.word	0x40022000
 8007604:	40022400 	.word	0x40022400
 8007608:	40013c00 	.word	0x40013c00

0800760c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	e0d9      	b.n	80077dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007628:	2201      	movs	r2, #1
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4013      	ands	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	f040 80c9 	bne.w	80077d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007644:	4a6b      	ldr	r2, [pc, #428]	; (80077f4 <HAL_GPIO_DeInit+0x1e8>)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	089b      	lsrs	r3, r3, #2
 800764a:	3302      	adds	r3, #2
 800764c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007650:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	220f      	movs	r2, #15
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a63      	ldr	r2, [pc, #396]	; (80077f8 <HAL_GPIO_DeInit+0x1ec>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d037      	beq.n	80076de <HAL_GPIO_DeInit+0xd2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a62      	ldr	r2, [pc, #392]	; (80077fc <HAL_GPIO_DeInit+0x1f0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d031      	beq.n	80076da <HAL_GPIO_DeInit+0xce>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a61      	ldr	r2, [pc, #388]	; (8007800 <HAL_GPIO_DeInit+0x1f4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d02b      	beq.n	80076d6 <HAL_GPIO_DeInit+0xca>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a60      	ldr	r2, [pc, #384]	; (8007804 <HAL_GPIO_DeInit+0x1f8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d025      	beq.n	80076d2 <HAL_GPIO_DeInit+0xc6>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a5f      	ldr	r2, [pc, #380]	; (8007808 <HAL_GPIO_DeInit+0x1fc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01f      	beq.n	80076ce <HAL_GPIO_DeInit+0xc2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a5e      	ldr	r2, [pc, #376]	; (800780c <HAL_GPIO_DeInit+0x200>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d019      	beq.n	80076ca <HAL_GPIO_DeInit+0xbe>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a5d      	ldr	r2, [pc, #372]	; (8007810 <HAL_GPIO_DeInit+0x204>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d013      	beq.n	80076c6 <HAL_GPIO_DeInit+0xba>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a5c      	ldr	r2, [pc, #368]	; (8007814 <HAL_GPIO_DeInit+0x208>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00d      	beq.n	80076c2 <HAL_GPIO_DeInit+0xb6>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a5b      	ldr	r2, [pc, #364]	; (8007818 <HAL_GPIO_DeInit+0x20c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <HAL_GPIO_DeInit+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a5a      	ldr	r2, [pc, #360]	; (800781c <HAL_GPIO_DeInit+0x210>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d101      	bne.n	80076ba <HAL_GPIO_DeInit+0xae>
 80076b6:	2309      	movs	r3, #9
 80076b8:	e012      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076ba:	230a      	movs	r3, #10
 80076bc:	e010      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076be:	2308      	movs	r3, #8
 80076c0:	e00e      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076c2:	2307      	movs	r3, #7
 80076c4:	e00c      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076c6:	2306      	movs	r3, #6
 80076c8:	e00a      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076ca:	2305      	movs	r3, #5
 80076cc:	e008      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076ce:	2304      	movs	r3, #4
 80076d0:	e006      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076d2:	2303      	movs	r3, #3
 80076d4:	e004      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e002      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <HAL_GPIO_DeInit+0xd4>
 80076de:	2300      	movs	r3, #0
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	f002 0203 	and.w	r2, r2, #3
 80076e6:	0092      	lsls	r2, r2, #2
 80076e8:	4093      	lsls	r3, r2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d132      	bne.n	8007756 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80076f0:	4b4b      	ldr	r3, [pc, #300]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	43db      	mvns	r3, r3
 80076f8:	4949      	ldr	r1, [pc, #292]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80076fe:	4b48      	ldr	r3, [pc, #288]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	43db      	mvns	r3, r3
 8007706:	4946      	ldr	r1, [pc, #280]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 8007708:	4013      	ands	r3, r2
 800770a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800770c:	4b44      	ldr	r3, [pc, #272]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	43db      	mvns	r3, r3
 8007714:	4942      	ldr	r1, [pc, #264]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 8007716:	4013      	ands	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800771a:	4b41      	ldr	r3, [pc, #260]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	43db      	mvns	r3, r3
 8007722:	493f      	ldr	r1, [pc, #252]	; (8007820 <HAL_GPIO_DeInit+0x214>)
 8007724:	4013      	ands	r3, r2
 8007726:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	220f      	movs	r2, #15
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007738:	4a2e      	ldr	r2, [pc, #184]	; (80077f4 <HAL_GPIO_DeInit+0x1e8>)
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	089b      	lsrs	r3, r3, #2
 800773e:	3302      	adds	r3, #2
 8007740:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	43da      	mvns	r2, r3
 8007748:	482a      	ldr	r0, [pc, #168]	; (80077f4 <HAL_GPIO_DeInit+0x1e8>)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	089b      	lsrs	r3, r3, #2
 800774e:	400a      	ands	r2, r1
 8007750:	3302      	adds	r3, #2
 8007752:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	2103      	movs	r1, #3
 8007760:	fa01 f303 	lsl.w	r3, r1, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	08da      	lsrs	r2, r3, #3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3208      	adds	r2, #8
 8007774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	220f      	movs	r2, #15
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	43db      	mvns	r3, r3
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	08d2      	lsrs	r2, r2, #3
 800778c:	4019      	ands	r1, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3208      	adds	r2, #8
 8007792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	2103      	movs	r1, #3
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	43db      	mvns	r3, r3
 80077a6:	401a      	ands	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	2101      	movs	r1, #1
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	43db      	mvns	r3, r3
 80077ba:	401a      	ands	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	2103      	movs	r1, #3
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	401a      	ands	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	3301      	adds	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b0f      	cmp	r3, #15
 80077e0:	f67f af22 	bls.w	8007628 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40013800 	.word	0x40013800
 80077f8:	40020000 	.word	0x40020000
 80077fc:	40020400 	.word	0x40020400
 8007800:	40020800 	.word	0x40020800
 8007804:	40020c00 	.word	0x40020c00
 8007808:	40021000 	.word	0x40021000
 800780c:	40021400 	.word	0x40021400
 8007810:	40021800 	.word	0x40021800
 8007814:	40021c00 	.word	0x40021c00
 8007818:	40022000 	.word	0x40022000
 800781c:	40022400 	.word	0x40022400
 8007820:	40013c00 	.word	0x40013c00

08007824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	807b      	strh	r3, [r7, #2]
 8007830:	4613      	mov	r3, r2
 8007832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007834:	787b      	ldrb	r3, [r7, #1]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800783a:	887a      	ldrh	r2, [r7, #2]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007840:	e003      	b.n	800784a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007842:	887b      	ldrh	r3, [r7, #2]
 8007844:	041a      	lsls	r2, r3, #16
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	619a      	str	r2, [r3, #24]
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007868:	887a      	ldrh	r2, [r7, #2]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4013      	ands	r3, r2
 800786e:	041a      	lsls	r2, r3, #16
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	43d9      	mvns	r1, r3
 8007874:	887b      	ldrh	r3, [r7, #2]
 8007876:	400b      	ands	r3, r1
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	619a      	str	r2, [r3, #24]
}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007898:	695a      	ldr	r2, [r3, #20]
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	4013      	ands	r3, r2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d006      	beq.n	80078b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078a2:	4a05      	ldr	r2, [pc, #20]	; (80078b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 f806 	bl	80078bc <HAL_GPIO_EXTI_Callback>
  }
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40013c00 	.word	0x40013c00

080078bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f007 fa2b 	bl	800ed44 <USB_GetMode>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	f040 80ef 	bne.w	8007ad4 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f007 fa0f 	bl	800ed1e <USB_ReadInterrupts>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80e5 	beq.w	8007ad2 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f007 fa06 	bl	800ed1e <USB_ReadInterrupts>
 8007912:	4603      	mov	r3, r0
 8007914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800791c:	d104      	bne.n	8007928 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007926:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f007 f9f6 	bl	800ed1e <USB_ReadInterrupts>
 8007932:	4603      	mov	r3, r0
 8007934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793c:	d104      	bne.n	8007948 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007946:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f007 f9e6 	bl	800ed1e <USB_ReadInterrupts>
 8007952:	4603      	mov	r3, r0
 8007954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800795c:	d104      	bne.n	8007968 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007966:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f007 f9d6 	bl	800ed1e <USB_ReadInterrupts>
 8007972:	4603      	mov	r3, r0
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b02      	cmp	r3, #2
 800797a:	d103      	bne.n	8007984 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2202      	movs	r2, #2
 8007982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4618      	mov	r0, r3
 800798a:	f007 f9c8 	bl	800ed1e <USB_ReadInterrupts>
 800798e:	4603      	mov	r3, r0
 8007990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007998:	d115      	bne.n	80079c6 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80079a2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d108      	bne.n	80079c6 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f007 fe97 	bl	800f6e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2101      	movs	r1, #1
 80079c0:	4618      	mov	r0, r3
 80079c2:	f007 f9cd 	bl	800ed60 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f007 f9a7 	bl	800ed1e <USB_ReadInterrupts>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079da:	d102      	bne.n	80079e2 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f98a 	bl	8008cf6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f007 f999 	bl	800ed1e <USB_ReadInterrupts>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d106      	bne.n	8007a04 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f007 fe5a 	bl	800f6b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2208      	movs	r2, #8
 8007a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f007 f988 	bl	800ed1e <USB_ReadInterrupts>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b10      	cmp	r3, #16
 8007a16:	d101      	bne.n	8007a1c <HAL_HCD_IRQHandler+0x14a>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <HAL_HCD_IRQHandler+0x14c>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d012      	beq.n	8007a48 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0210 	bic.w	r2, r2, #16
 8007a30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 f88d 	bl	8008b52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0210 	orr.w	r2, r2, #16
 8007a46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f007 f966 	bl	800ed1e <USB_ReadInterrupts>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a5c:	d13a      	bne.n	8007ad4 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f007 f9b6 	bl	800edd4 <USB_HC_ReadInterrupt>
 8007a68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	e025      	b.n	8007abc <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d018      	beq.n	8007ab6 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a9a:	d106      	bne.n	8007aaa <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f836 	bl	8007b14 <HCD_HC_IN_IRQHandler>
 8007aa8:	e005      	b.n	8007ab6 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fc51 	bl	8008358 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d3d4      	bcc.n	8007a70 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ace:	615a      	str	r2, [r3, #20]
 8007ad0:	e000      	b.n	8007ad4 <HAL_HCD_IRQHandler+0x202>
      return;
 8007ad2:	bf00      	nop
    }
  }
}
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_HCD_Stop+0x16>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e00d      	b.n	8007b0c <HAL_HCD_Stop+0x32>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f007 fa96 	bl	800f02e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d119      	bne.n	8007b78 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b50:	461a      	mov	r2, r3
 8007b52:	2304      	movs	r3, #4
 8007b54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b70:	f043 0302 	orr.w	r3, r3, #2
 8007b74:	60d3      	str	r3, [r2, #12]
 8007b76:	e101      	b.n	8007d7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8e:	d12b      	bne.n	8007be8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ba2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	212c      	movs	r1, #44	; 0x2c
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	4413      	add	r3, r2
 8007bb0:	3361      	adds	r3, #97	; 0x61
 8007bb2:	2207      	movs	r2, #7
 8007bb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	4611      	mov	r1, r2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f007 f908 	bl	800edf6 <USB_HC_Halt>
 8007be6:	e0c9      	b.n	8007d7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d109      	bne.n	8007c12 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	6093      	str	r3, [r2, #8]
 8007c10:	e0b4      	b.n	8007d7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0308 	and.w	r3, r3, #8
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d133      	bne.n	8007c90 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c42:	f043 0302 	orr.w	r3, r3, #2
 8007c46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	3361      	adds	r3, #97	; 0x61
 8007c56:	2205      	movs	r2, #5
 8007c58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c66:	461a      	mov	r2, r3
 8007c68:	2310      	movs	r3, #16
 8007c6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	b2d2      	uxtb	r2, r2
 8007c86:	4611      	mov	r1, r2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f007 f8b4 	bl	800edf6 <USB_HC_Halt>
 8007c8e:	e075      	b.n	8007d7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca6:	d134      	bne.n	8007d12 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cc2:	f043 0302 	orr.w	r3, r3, #2
 8007cc6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	212c      	movs	r1, #44	; 0x2c
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	3361      	adds	r3, #97	; 0x61
 8007cd6:	2208      	movs	r2, #8
 8007cd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2310      	movs	r3, #16
 8007cea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cfe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f007 f873 	bl	800edf6 <USB_HC_Halt>
 8007d10:	e034      	b.n	8007d7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b80      	cmp	r3, #128	; 0x80
 8007d26:	d129      	bne.n	8007d7c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d42:	f043 0302 	orr.w	r3, r3, #2
 8007d46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	212c      	movs	r1, #44	; 0x2c
 8007d4e:	fb01 f303 	mul.w	r3, r1, r3
 8007d52:	4413      	add	r3, r2
 8007d54:	3361      	adds	r3, #97	; 0x61
 8007d56:	2206      	movs	r2, #6
 8007d58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f007 f846 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d76:	461a      	mov	r2, r3
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d92:	d122      	bne.n	8007dda <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dae:	f043 0302 	orr.w	r3, r3, #2
 8007db2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f007 f819 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007dd8:	e2ba      	b.n	8008350 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	f040 811b 	bne.w	8008028 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d019      	beq.n	8007e2e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	212c      	movs	r1, #44	; 0x2c
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	3348      	adds	r3, #72	; 0x48
 8007e08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	0159      	lsls	r1, r3, #5
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	440b      	add	r3, r1
 8007e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007e1c:	1ad2      	subs	r2, r2, r3
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	202c      	movs	r0, #44	; 0x2c
 8007e24:	fb00 f303 	mul.w	r3, r0, r3
 8007e28:	440b      	add	r3, r1
 8007e2a:	3350      	adds	r3, #80	; 0x50
 8007e2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	212c      	movs	r1, #44	; 0x2c
 8007e34:	fb01 f303 	mul.w	r3, r1, r3
 8007e38:	4413      	add	r3, r2
 8007e3a:	3361      	adds	r3, #97	; 0x61
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	212c      	movs	r1, #44	; 0x2c
 8007e46:	fb01 f303 	mul.w	r3, r1, r3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	335c      	adds	r3, #92	; 0x5c
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2301      	movs	r3, #1
 8007e62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	212c      	movs	r1, #44	; 0x2c
 8007e6a:	fb01 f303 	mul.w	r3, r1, r3
 8007e6e:	4413      	add	r3, r2
 8007e70:	333f      	adds	r3, #63	; 0x3f
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d009      	beq.n	8007e8c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	212c      	movs	r1, #44	; 0x2c
 8007e7e:	fb01 f303 	mul.w	r3, r1, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	333f      	adds	r3, #63	; 0x3f
 8007e86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d121      	bne.n	8007ed0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f006 ff9d 	bl	800edf6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2310      	movs	r3, #16
 8007ecc:	6093      	str	r3, [r2, #8]
 8007ece:	e066      	b.n	8007f9e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	212c      	movs	r1, #44	; 0x2c
 8007ed6:	fb01 f303 	mul.w	r3, r1, r3
 8007eda:	4413      	add	r3, r2
 8007edc:	333f      	adds	r3, #63	; 0x3f
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d127      	bne.n	8007f34 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	212c      	movs	r1, #44	; 0x2c
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	4413      	add	r3, r2
 8007f10:	3360      	adds	r3, #96	; 0x60
 8007f12:	2201      	movs	r2, #1
 8007f14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	b2d9      	uxtb	r1, r3
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	202c      	movs	r0, #44	; 0x2c
 8007f20:	fb00 f303 	mul.w	r3, r0, r3
 8007f24:	4413      	add	r3, r2
 8007f26:	3360      	adds	r3, #96	; 0x60
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f007 fbe9 	bl	800f704 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007f32:	e034      	b.n	8007f9e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	212c      	movs	r1, #44	; 0x2c
 8007f3a:	fb01 f303 	mul.w	r3, r1, r3
 8007f3e:	4413      	add	r3, r2
 8007f40:	333f      	adds	r3, #63	; 0x3f
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d12a      	bne.n	8007f9e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	212c      	movs	r1, #44	; 0x2c
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	3360      	adds	r3, #96	; 0x60
 8007f56:	2201      	movs	r2, #1
 8007f58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	212c      	movs	r1, #44	; 0x2c
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	4413      	add	r3, r2
 8007f66:	3354      	adds	r3, #84	; 0x54
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f083 0301 	eor.w	r3, r3, #1
 8007f6e:	b2d8      	uxtb	r0, r3
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	212c      	movs	r1, #44	; 0x2c
 8007f76:	fb01 f303 	mul.w	r3, r1, r3
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3354      	adds	r3, #84	; 0x54
 8007f7e:	4602      	mov	r2, r0
 8007f80:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	b2d9      	uxtb	r1, r3
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	202c      	movs	r0, #44	; 0x2c
 8007f8c:	fb00 f303 	mul.w	r3, r0, r3
 8007f90:	4413      	add	r3, r2
 8007f92:	3360      	adds	r3, #96	; 0x60
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f007 fbb3 	bl	800f704 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d12b      	bne.n	8007ffe <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	212c      	movs	r1, #44	; 0x2c
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3348      	adds	r3, #72	; 0x48
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	202c      	movs	r0, #44	; 0x2c
 8007fbc:	fb00 f202 	mul.w	r2, r0, r2
 8007fc0:	440a      	add	r2, r1
 8007fc2:	3240      	adds	r2, #64	; 0x40
 8007fc4:	8812      	ldrh	r2, [r2, #0]
 8007fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 81be 	beq.w	8008350 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	212c      	movs	r1, #44	; 0x2c
 8007fda:	fb01 f303 	mul.w	r3, r1, r3
 8007fde:	4413      	add	r3, r2
 8007fe0:	3354      	adds	r3, #84	; 0x54
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f083 0301 	eor.w	r3, r3, #1
 8007fe8:	b2d8      	uxtb	r0, r3
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	212c      	movs	r1, #44	; 0x2c
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	3354      	adds	r3, #84	; 0x54
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	701a      	strb	r2, [r3, #0]
}
 8007ffc:	e1a8      	b.n	8008350 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	212c      	movs	r1, #44	; 0x2c
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	4413      	add	r3, r2
 800800a:	3354      	adds	r3, #84	; 0x54
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f083 0301 	eor.w	r3, r3, #1
 8008012:	b2d8      	uxtb	r0, r3
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	212c      	movs	r1, #44	; 0x2c
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	4413      	add	r3, r2
 8008020:	3354      	adds	r3, #84	; 0x54
 8008022:	4602      	mov	r2, r0
 8008024:	701a      	strb	r2, [r3, #0]
}
 8008026:	e193      	b.n	8008350 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b02      	cmp	r3, #2
 800803c:	f040 8106 	bne.w	800824c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	440a      	add	r2, r1
 8008056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800805a:	f023 0302 	bic.w	r3, r3, #2
 800805e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	212c      	movs	r1, #44	; 0x2c
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	4413      	add	r3, r2
 800806c:	3361      	adds	r3, #97	; 0x61
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d109      	bne.n	8008088 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	212c      	movs	r1, #44	; 0x2c
 800807a:	fb01 f303 	mul.w	r3, r1, r3
 800807e:	4413      	add	r3, r2
 8008080:	3360      	adds	r3, #96	; 0x60
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e0c9      	b.n	800821c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	212c      	movs	r1, #44	; 0x2c
 800808e:	fb01 f303 	mul.w	r3, r1, r3
 8008092:	4413      	add	r3, r2
 8008094:	3361      	adds	r3, #97	; 0x61
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b05      	cmp	r3, #5
 800809a:	d109      	bne.n	80080b0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	212c      	movs	r1, #44	; 0x2c
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	4413      	add	r3, r2
 80080a8:	3360      	adds	r3, #96	; 0x60
 80080aa:	2205      	movs	r2, #5
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e0b5      	b.n	800821c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	212c      	movs	r1, #44	; 0x2c
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	4413      	add	r3, r2
 80080bc:	3361      	adds	r3, #97	; 0x61
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b06      	cmp	r3, #6
 80080c2:	d009      	beq.n	80080d8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	212c      	movs	r1, #44	; 0x2c
 80080ca:	fb01 f303 	mul.w	r3, r1, r3
 80080ce:	4413      	add	r3, r2
 80080d0:	3361      	adds	r3, #97	; 0x61
 80080d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d150      	bne.n	800817a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	212c      	movs	r1, #44	; 0x2c
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	335c      	adds	r3, #92	; 0x5c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	202c      	movs	r0, #44	; 0x2c
 80080f0:	fb00 f303 	mul.w	r3, r0, r3
 80080f4:	440b      	add	r3, r1
 80080f6:	335c      	adds	r3, #92	; 0x5c
 80080f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	212c      	movs	r1, #44	; 0x2c
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	4413      	add	r3, r2
 8008106:	335c      	adds	r3, #92	; 0x5c
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d912      	bls.n	8008134 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	212c      	movs	r1, #44	; 0x2c
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	4413      	add	r3, r2
 800811a:	335c      	adds	r3, #92	; 0x5c
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	212c      	movs	r1, #44	; 0x2c
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	3360      	adds	r3, #96	; 0x60
 800812e:	2204      	movs	r2, #4
 8008130:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008132:	e073      	b.n	800821c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	212c      	movs	r1, #44	; 0x2c
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	4413      	add	r3, r2
 8008140:	3360      	adds	r3, #96	; 0x60
 8008142:	2202      	movs	r2, #2
 8008144:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800815c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008164:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	461a      	mov	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008178:	e050      	b.n	800821c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	212c      	movs	r1, #44	; 0x2c
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	4413      	add	r3, r2
 8008186:	3361      	adds	r3, #97	; 0x61
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d122      	bne.n	80081d4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	212c      	movs	r1, #44	; 0x2c
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	4413      	add	r3, r2
 800819a:	3360      	adds	r3, #96	; 0x60
 800819c:	2202      	movs	r2, #2
 800819e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081cc:	461a      	mov	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	e023      	b.n	800821c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	212c      	movs	r1, #44	; 0x2c
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	4413      	add	r3, r2
 80081e0:	3361      	adds	r3, #97	; 0x61
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b07      	cmp	r3, #7
 80081e6:	d119      	bne.n	800821c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	212c      	movs	r1, #44	; 0x2c
 80081ee:	fb01 f303 	mul.w	r3, r1, r3
 80081f2:	4413      	add	r3, r2
 80081f4:	335c      	adds	r3, #92	; 0x5c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	202c      	movs	r0, #44	; 0x2c
 8008200:	fb00 f303 	mul.w	r3, r0, r3
 8008204:	440b      	add	r3, r1
 8008206:	335c      	adds	r3, #92	; 0x5c
 8008208:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	212c      	movs	r1, #44	; 0x2c
 8008210:	fb01 f303 	mul.w	r3, r1, r3
 8008214:	4413      	add	r3, r2
 8008216:	3360      	adds	r3, #96	; 0x60
 8008218:	2204      	movs	r2, #4
 800821a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008228:	461a      	mov	r2, r3
 800822a:	2302      	movs	r3, #2
 800822c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	b2d9      	uxtb	r1, r3
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	202c      	movs	r0, #44	; 0x2c
 8008238:	fb00 f303 	mul.w	r3, r0, r3
 800823c:	4413      	add	r3, r2
 800823e:	3360      	adds	r3, #96	; 0x60
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f007 fa5d 	bl	800f704 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800824a:	e081      	b.n	8008350 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0310 	and.w	r3, r3, #16
 800825e:	2b10      	cmp	r3, #16
 8008260:	d176      	bne.n	8008350 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	212c      	movs	r1, #44	; 0x2c
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	4413      	add	r3, r2
 800826e:	333f      	adds	r3, #63	; 0x3f
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b03      	cmp	r3, #3
 8008274:	d121      	bne.n	80082ba <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	212c      	movs	r1, #44	; 0x2c
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	4413      	add	r3, r2
 8008282:	335c      	adds	r3, #92	; 0x5c
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a2:	f043 0302 	orr.w	r3, r3, #2
 80082a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f006 fd9f 	bl	800edf6 <USB_HC_Halt>
 80082b8:	e041      	b.n	800833e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	212c      	movs	r1, #44	; 0x2c
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	333f      	adds	r3, #63	; 0x3f
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	212c      	movs	r1, #44	; 0x2c
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	4413      	add	r3, r2
 80082da:	333f      	adds	r3, #63	; 0x3f
 80082dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d12d      	bne.n	800833e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	212c      	movs	r1, #44	; 0x2c
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	4413      	add	r3, r2
 80082ee:	335c      	adds	r3, #92	; 0x5c
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d120      	bne.n	800833e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	212c      	movs	r1, #44	; 0x2c
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	4413      	add	r3, r2
 8008308:	3361      	adds	r3, #97	; 0x61
 800830a:	2203      	movs	r2, #3
 800830c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	0151      	lsls	r1, r2, #5
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	440a      	add	r2, r1
 8008324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008328:	f043 0302 	orr.w	r3, r3, #2
 800832c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f006 fd5c 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4413      	add	r3, r2
 8008346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834a:	461a      	mov	r2, r3
 800834c:	2310      	movs	r3, #16
 800834e:	6093      	str	r3, [r2, #8]
}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	4413      	add	r3, r2
 800837a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b04      	cmp	r3, #4
 8008386:	d119      	bne.n	80083bc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	461a      	mov	r2, r3
 8008396:	2304      	movs	r3, #4
 8008398:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80083ba:	e3c6      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d13e      	bne.n	8008450 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083de:	461a      	mov	r2, r3
 80083e0:	2320      	movs	r3, #32
 80083e2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	212c      	movs	r1, #44	; 0x2c
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	4413      	add	r3, r2
 80083f0:	333d      	adds	r3, #61	; 0x3d
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	f040 83a8 	bne.w	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	212c      	movs	r1, #44	; 0x2c
 8008400:	fb01 f303 	mul.w	r3, r1, r3
 8008404:	4413      	add	r3, r2
 8008406:	333d      	adds	r3, #61	; 0x3d
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	212c      	movs	r1, #44	; 0x2c
 8008412:	fb01 f303 	mul.w	r3, r1, r3
 8008416:	4413      	add	r3, r2
 8008418:	3360      	adds	r3, #96	; 0x60
 800841a:	2202      	movs	r2, #2
 800841c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	4413      	add	r3, r2
 8008426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	440a      	add	r2, r1
 8008434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008438:	f043 0302 	orr.w	r3, r3, #2
 800843c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f006 fcd4 	bl	800edf6 <USB_HC_Halt>
}
 800844e:	e37c      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008466:	d122      	bne.n	80084ae <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	4413      	add	r3, r2
 8008470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	440a      	add	r2, r1
 800847e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008482:	f043 0302 	orr.w	r3, r3, #2
 8008486:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f006 fcaf 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a4:	461a      	mov	r2, r3
 80084a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084aa:	6093      	str	r3, [r2, #8]
}
 80084ac:	e34d      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d150      	bne.n	8008566 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	212c      	movs	r1, #44	; 0x2c
 80084ca:	fb01 f303 	mul.w	r3, r1, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	335c      	adds	r3, #92	; 0x5c
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e8:	2b40      	cmp	r3, #64	; 0x40
 80084ea:	d111      	bne.n	8008510 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	212c      	movs	r1, #44	; 0x2c
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	333d      	adds	r3, #61	; 0x3d
 80084fa:	2201      	movs	r2, #1
 80084fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	4413      	add	r3, r2
 8008506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850a:	461a      	mov	r2, r3
 800850c:	2340      	movs	r3, #64	; 0x40
 800850e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	4413      	add	r3, r2
 8008518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	440a      	add	r2, r1
 8008526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800852a:	f043 0302 	orr.w	r3, r3, #2
 800852e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f006 fc5b 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854c:	461a      	mov	r2, r3
 800854e:	2301      	movs	r3, #1
 8008550:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	212c      	movs	r1, #44	; 0x2c
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	4413      	add	r3, r2
 800855e:	3361      	adds	r3, #97	; 0x61
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
}
 8008564:	e2f1      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b40      	cmp	r3, #64	; 0x40
 800857a:	d13c      	bne.n	80085f6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	212c      	movs	r1, #44	; 0x2c
 8008582:	fb01 f303 	mul.w	r3, r1, r3
 8008586:	4413      	add	r3, r2
 8008588:	3361      	adds	r3, #97	; 0x61
 800858a:	2204      	movs	r2, #4
 800858c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	212c      	movs	r1, #44	; 0x2c
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	4413      	add	r3, r2
 800859a:	333d      	adds	r3, #61	; 0x3d
 800859c:	2201      	movs	r2, #1
 800859e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	212c      	movs	r1, #44	; 0x2c
 80085a6:	fb01 f303 	mul.w	r3, r1, r3
 80085aa:	4413      	add	r3, r2
 80085ac:	335c      	adds	r3, #92	; 0x5c
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085cc:	f043 0302 	orr.w	r3, r3, #2
 80085d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f006 fc0a 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ee:	461a      	mov	r2, r3
 80085f0:	2340      	movs	r3, #64	; 0x40
 80085f2:	6093      	str	r3, [r2, #8]
}
 80085f4:	e2a9      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d12a      	bne.n	8008662 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008618:	461a      	mov	r2, r3
 800861a:	2308      	movs	r3, #8
 800861c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	4413      	add	r3, r2
 8008626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	0151      	lsls	r1, r2, #5
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	440a      	add	r2, r1
 8008634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008638:	f043 0302 	orr.w	r3, r3, #2
 800863c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f006 fbd4 	bl	800edf6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	212c      	movs	r1, #44	; 0x2c
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	3361      	adds	r3, #97	; 0x61
 800865c:	2205      	movs	r2, #5
 800865e:	701a      	strb	r2, [r3, #0]
}
 8008660:	e273      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	4413      	add	r3, r2
 800866a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 0310 	and.w	r3, r3, #16
 8008674:	2b10      	cmp	r3, #16
 8008676:	d150      	bne.n	800871a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	212c      	movs	r1, #44	; 0x2c
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	335c      	adds	r3, #92	; 0x5c
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	212c      	movs	r1, #44	; 0x2c
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	4413      	add	r3, r2
 8008696:	3361      	adds	r3, #97	; 0x61
 8008698:	2203      	movs	r2, #3
 800869a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	212c      	movs	r1, #44	; 0x2c
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	4413      	add	r3, r2
 80086a8:	333d      	adds	r3, #61	; 0x3d
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d112      	bne.n	80086d6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	212c      	movs	r1, #44	; 0x2c
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	333c      	adds	r3, #60	; 0x3c
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d108      	bne.n	80086d6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	212c      	movs	r1, #44	; 0x2c
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	4413      	add	r3, r2
 80086d0:	333d      	adds	r3, #61	; 0x3d
 80086d2:	2201      	movs	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	0151      	lsls	r1, r2, #5
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	440a      	add	r2, r1
 80086ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f0:	f043 0302 	orr.w	r3, r3, #2
 80086f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f006 fb78 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008712:	461a      	mov	r2, r3
 8008714:	2310      	movs	r3, #16
 8008716:	6093      	str	r3, [r2, #8]
}
 8008718:	e217      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872c:	2b80      	cmp	r3, #128	; 0x80
 800872e:	d174      	bne.n	800881a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d121      	bne.n	800877c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	212c      	movs	r1, #44	; 0x2c
 800873e:	fb01 f303 	mul.w	r3, r1, r3
 8008742:	4413      	add	r3, r2
 8008744:	3361      	adds	r3, #97	; 0x61
 8008746:	2206      	movs	r2, #6
 8008748:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	4413      	add	r3, r2
 8008752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	440a      	add	r2, r1
 8008760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008764:	f043 0302 	orr.w	r3, r3, #2
 8008768:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f006 fb3e 	bl	800edf6 <USB_HC_Halt>
 800877a:	e044      	b.n	8008806 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	212c      	movs	r1, #44	; 0x2c
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	335c      	adds	r3, #92	; 0x5c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	202c      	movs	r0, #44	; 0x2c
 8008794:	fb00 f303 	mul.w	r3, r0, r3
 8008798:	440b      	add	r3, r1
 800879a:	335c      	adds	r3, #92	; 0x5c
 800879c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	212c      	movs	r1, #44	; 0x2c
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	335c      	adds	r3, #92	; 0x5c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d920      	bls.n	80087f4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	212c      	movs	r1, #44	; 0x2c
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	335c      	adds	r3, #92	; 0x5c
 80087c0:	2200      	movs	r2, #0
 80087c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	212c      	movs	r1, #44	; 0x2c
 80087ca:	fb01 f303 	mul.w	r3, r1, r3
 80087ce:	4413      	add	r3, r2
 80087d0:	3360      	adds	r3, #96	; 0x60
 80087d2:	2204      	movs	r2, #4
 80087d4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	b2d9      	uxtb	r1, r3
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	202c      	movs	r0, #44	; 0x2c
 80087e0:	fb00 f303 	mul.w	r3, r0, r3
 80087e4:	4413      	add	r3, r2
 80087e6:	3360      	adds	r3, #96	; 0x60
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f006 ff89 	bl	800f704 <HAL_HCD_HC_NotifyURBChange_Callback>
 80087f2:	e008      	b.n	8008806 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	212c      	movs	r1, #44	; 0x2c
 80087fa:	fb01 f303 	mul.w	r3, r1, r3
 80087fe:	4413      	add	r3, r2
 8008800:	3360      	adds	r3, #96	; 0x60
 8008802:	2202      	movs	r2, #2
 8008804:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	4413      	add	r3, r2
 800880e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008812:	461a      	mov	r2, r3
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	6093      	str	r3, [r2, #8]
}
 8008818:	e197      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008830:	d134      	bne.n	800889c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	4413      	add	r3, r2
 800883a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	0151      	lsls	r1, r2, #5
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	440a      	add	r2, r1
 8008848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	4611      	mov	r1, r2
 800885c:	4618      	mov	r0, r3
 800885e:	f006 faca 	bl	800edf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886e:	461a      	mov	r2, r3
 8008870:	2310      	movs	r3, #16
 8008872:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	4413      	add	r3, r2
 800887c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008880:	461a      	mov	r2, r3
 8008882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008886:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	212c      	movs	r1, #44	; 0x2c
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	4413      	add	r3, r2
 8008894:	3361      	adds	r3, #97	; 0x61
 8008896:	2208      	movs	r2, #8
 8008898:	701a      	strb	r2, [r3, #0]
}
 800889a:	e156      	b.n	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	f040 814b 	bne.w	8008b4a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ce:	f023 0302 	bic.w	r3, r3, #2
 80088d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	212c      	movs	r1, #44	; 0x2c
 80088da:	fb01 f303 	mul.w	r3, r1, r3
 80088de:	4413      	add	r3, r2
 80088e0:	3361      	adds	r3, #97	; 0x61
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d179      	bne.n	80089dc <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	212c      	movs	r1, #44	; 0x2c
 80088ee:	fb01 f303 	mul.w	r3, r1, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	3360      	adds	r3, #96	; 0x60
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	212c      	movs	r1, #44	; 0x2c
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	4413      	add	r3, r2
 8008906:	333f      	adds	r3, #63	; 0x3f
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d00a      	beq.n	8008924 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	212c      	movs	r1, #44	; 0x2c
 8008914:	fb01 f303 	mul.w	r3, r1, r3
 8008918:	4413      	add	r3, r2
 800891a:	333f      	adds	r3, #63	; 0x3f
 800891c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800891e:	2b03      	cmp	r3, #3
 8008920:	f040 80fc 	bne.w	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d142      	bne.n	80089b2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	212c      	movs	r1, #44	; 0x2c
 8008932:	fb01 f303 	mul.w	r3, r1, r3
 8008936:	4413      	add	r3, r2
 8008938:	334c      	adds	r3, #76	; 0x4c
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 80ed 	beq.w	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	212c      	movs	r1, #44	; 0x2c
 8008948:	fb01 f303 	mul.w	r3, r1, r3
 800894c:	4413      	add	r3, r2
 800894e:	334c      	adds	r3, #76	; 0x4c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	202c      	movs	r0, #44	; 0x2c
 8008958:	fb00 f202 	mul.w	r2, r0, r2
 800895c:	440a      	add	r2, r1
 800895e:	3240      	adds	r2, #64	; 0x40
 8008960:	8812      	ldrh	r2, [r2, #0]
 8008962:	4413      	add	r3, r2
 8008964:	3b01      	subs	r3, #1
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	202c      	movs	r0, #44	; 0x2c
 800896c:	fb00 f202 	mul.w	r2, r0, r2
 8008970:	440a      	add	r2, r1
 8008972:	3240      	adds	r2, #64	; 0x40
 8008974:	8812      	ldrh	r2, [r2, #0]
 8008976:	fbb3 f3f2 	udiv	r3, r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80ca 	beq.w	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	212c      	movs	r1, #44	; 0x2c
 800898e:	fb01 f303 	mul.w	r3, r1, r3
 8008992:	4413      	add	r3, r2
 8008994:	3355      	adds	r3, #85	; 0x55
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f083 0301 	eor.w	r3, r3, #1
 800899c:	b2d8      	uxtb	r0, r3
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	212c      	movs	r1, #44	; 0x2c
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	4413      	add	r3, r2
 80089aa:	3355      	adds	r3, #85	; 0x55
 80089ac:	4602      	mov	r2, r0
 80089ae:	701a      	strb	r2, [r3, #0]
 80089b0:	e0b4      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	212c      	movs	r1, #44	; 0x2c
 80089b8:	fb01 f303 	mul.w	r3, r1, r3
 80089bc:	4413      	add	r3, r2
 80089be:	3355      	adds	r3, #85	; 0x55
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f083 0301 	eor.w	r3, r3, #1
 80089c6:	b2d8      	uxtb	r0, r3
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	212c      	movs	r1, #44	; 0x2c
 80089ce:	fb01 f303 	mul.w	r3, r1, r3
 80089d2:	4413      	add	r3, r2
 80089d4:	3355      	adds	r3, #85	; 0x55
 80089d6:	4602      	mov	r2, r0
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	e09f      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	212c      	movs	r1, #44	; 0x2c
 80089e2:	fb01 f303 	mul.w	r3, r1, r3
 80089e6:	4413      	add	r3, r2
 80089e8:	3361      	adds	r3, #97	; 0x61
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d109      	bne.n	8008a04 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	212c      	movs	r1, #44	; 0x2c
 80089f6:	fb01 f303 	mul.w	r3, r1, r3
 80089fa:	4413      	add	r3, r2
 80089fc:	3360      	adds	r3, #96	; 0x60
 80089fe:	2202      	movs	r2, #2
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e08b      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	212c      	movs	r1, #44	; 0x2c
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	3361      	adds	r3, #97	; 0x61
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d109      	bne.n	8008a2c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	212c      	movs	r1, #44	; 0x2c
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	3360      	adds	r3, #96	; 0x60
 8008a26:	2202      	movs	r2, #2
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	e077      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	212c      	movs	r1, #44	; 0x2c
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	3361      	adds	r3, #97	; 0x61
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b05      	cmp	r3, #5
 8008a3e:	d109      	bne.n	8008a54 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	212c      	movs	r1, #44	; 0x2c
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	4413      	add	r3, r2
 8008a4c:	3360      	adds	r3, #96	; 0x60
 8008a4e:	2205      	movs	r2, #5
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	e063      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	212c      	movs	r1, #44	; 0x2c
 8008a5a:	fb01 f303 	mul.w	r3, r1, r3
 8008a5e:	4413      	add	r3, r2
 8008a60:	3361      	adds	r3, #97	; 0x61
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d009      	beq.n	8008a7c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	212c      	movs	r1, #44	; 0x2c
 8008a6e:	fb01 f303 	mul.w	r3, r1, r3
 8008a72:	4413      	add	r3, r2
 8008a74:	3361      	adds	r3, #97	; 0x61
 8008a76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d14f      	bne.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	212c      	movs	r1, #44	; 0x2c
 8008a82:	fb01 f303 	mul.w	r3, r1, r3
 8008a86:	4413      	add	r3, r2
 8008a88:	335c      	adds	r3, #92	; 0x5c
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	202c      	movs	r0, #44	; 0x2c
 8008a94:	fb00 f303 	mul.w	r3, r0, r3
 8008a98:	440b      	add	r3, r1
 8008a9a:	335c      	adds	r3, #92	; 0x5c
 8008a9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	212c      	movs	r1, #44	; 0x2c
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	4413      	add	r3, r2
 8008aaa:	335c      	adds	r3, #92	; 0x5c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d912      	bls.n	8008ad8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	212c      	movs	r1, #44	; 0x2c
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	335c      	adds	r3, #92	; 0x5c
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	3360      	adds	r3, #96	; 0x60
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e021      	b.n	8008b1c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	212c      	movs	r1, #44	; 0x2c
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3360      	adds	r3, #96	; 0x60
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b16:	461a      	mov	r2, r3
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	b2d9      	uxtb	r1, r3
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	202c      	movs	r0, #44	; 0x2c
 8008b38:	fb00 f303 	mul.w	r3, r0, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	3360      	adds	r3, #96	; 0x60
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f006 fddd 	bl	800f704 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008b4a:	bf00      	nop
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b08a      	sub	sp, #40	; 0x28
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	0c5b      	lsrs	r3, r3, #17
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	091b      	lsrs	r3, r3, #4
 8008b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d004      	beq.n	8008b98 <HCD_RXQLVL_IRQHandler+0x46>
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b05      	cmp	r3, #5
 8008b92:	f000 80a9 	beq.w	8008ce8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008b96:	e0aa      	b.n	8008cee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 80a6 	beq.w	8008cec <HCD_RXQLVL_IRQHandler+0x19a>
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	212c      	movs	r1, #44	; 0x2c
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	3344      	adds	r3, #68	; 0x44
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 809b 	beq.w	8008cec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	212c      	movs	r1, #44	; 0x2c
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3350      	adds	r3, #80	; 0x50
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	441a      	add	r2, r3
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	202c      	movs	r0, #44	; 0x2c
 8008bd0:	fb00 f303 	mul.w	r3, r0, r3
 8008bd4:	440b      	add	r3, r1
 8008bd6:	334c      	adds	r3, #76	; 0x4c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d87a      	bhi.n	8008cd4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	212c      	movs	r1, #44	; 0x2c
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	3344      	adds	r3, #68	; 0x44
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	b292      	uxth	r2, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	f006 f868 	bl	800eccc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	212c      	movs	r1, #44	; 0x2c
 8008c02:	fb01 f303 	mul.w	r3, r1, r3
 8008c06:	4413      	add	r3, r2
 8008c08:	3344      	adds	r3, #68	; 0x44
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	441a      	add	r2, r3
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	202c      	movs	r0, #44	; 0x2c
 8008c16:	fb00 f303 	mul.w	r3, r0, r3
 8008c1a:	440b      	add	r3, r1
 8008c1c:	3344      	adds	r3, #68	; 0x44
 8008c1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	212c      	movs	r1, #44	; 0x2c
 8008c26:	fb01 f303 	mul.w	r3, r1, r3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3350      	adds	r3, #80	; 0x50
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	441a      	add	r2, r3
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	202c      	movs	r0, #44	; 0x2c
 8008c3a:	fb00 f303 	mul.w	r3, r0, r3
 8008c3e:	440b      	add	r3, r1
 8008c40:	3350      	adds	r3, #80	; 0x50
 8008c42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	0cdb      	lsrs	r3, r3, #19
 8008c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	212c      	movs	r1, #44	; 0x2c
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	4413      	add	r3, r2
 8008c66:	3340      	adds	r3, #64	; 0x40
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d13c      	bne.n	8008cec <HCD_RXQLVL_IRQHandler+0x19a>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d039      	beq.n	8008cec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	212c      	movs	r1, #44	; 0x2c
 8008cb0:	fb01 f303 	mul.w	r3, r1, r3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3354      	adds	r3, #84	; 0x54
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	f083 0301 	eor.w	r3, r3, #1
 8008cbe:	b2d8      	uxtb	r0, r3
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	212c      	movs	r1, #44	; 0x2c
 8008cc6:	fb01 f303 	mul.w	r3, r1, r3
 8008cca:	4413      	add	r3, r2
 8008ccc:	3354      	adds	r3, #84	; 0x54
 8008cce:	4602      	mov	r2, r0
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e00b      	b.n	8008cec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	212c      	movs	r1, #44	; 0x2c
 8008cda:	fb01 f303 	mul.w	r3, r1, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	3360      	adds	r3, #96	; 0x60
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	e001      	b.n	8008cec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8008ce8:	bf00      	nop
 8008cea:	e000      	b.n	8008cee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8008cec:	bf00      	nop
  }
}
 8008cee:	bf00      	nop
 8008cf0:	3728      	adds	r7, #40	; 0x28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d10b      	bne.n	8008d46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d102      	bne.n	8008d3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f006 fcc7 	bl	800f6cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f043 0302 	orr.w	r3, r3, #2
 8008d44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d132      	bne.n	8008db6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f043 0308 	orr.w	r3, r3, #8
 8008d56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d126      	bne.n	8008db0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d113      	bne.n	8008d92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008d70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d74:	d106      	bne.n	8008d84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2102      	movs	r1, #2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f005 ffef 	bl	800ed60 <USB_InitFSLSPClkSel>
 8008d82:	e011      	b.n	8008da8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2101      	movs	r1, #1
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f005 ffe8 	bl	800ed60 <USB_InitFSLSPClkSel>
 8008d90:	e00a      	b.n	8008da8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d106      	bne.n	8008da8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008da0:	461a      	mov	r2, r3
 8008da2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008da6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f006 fcb9 	bl	800f720 <HAL_HCD_PortEnabled_Callback>
 8008dae:	e002      	b.n	8008db6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f006 fcc3 	bl	800f73c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b20      	cmp	r3, #32
 8008dbe:	d103      	bne.n	8008dc8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f043 0320 	orr.w	r3, r3, #32
 8008dc6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6013      	str	r3, [r2, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e07f      	b.n	8008eee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7f9 fdce 	bl	80029a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2224      	movs	r2, #36	; 0x24
 8008e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0201 	bic.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d107      	bne.n	8008e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e52:	609a      	str	r2, [r3, #8]
 8008e54:	e006      	b.n	8008e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d104      	bne.n	8008e76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6859      	ldr	r1, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	4b1d      	ldr	r3, [pc, #116]	; (8008ef8 <HAL_I2C_Init+0x11c>)
 8008e82:	430b      	orrs	r3, r1
 8008e84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	ea42 0103 	orr.w	r1, r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	021a      	lsls	r2, r3, #8
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	69d9      	ldr	r1, [r3, #28]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1a      	ldr	r2, [r3, #32]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	02008000 	.word	0x02008000

08008efc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e021      	b.n	8008f52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2224      	movs	r2, #36	; 0x24
 8008f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0201 	bic.w	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f9 fdb4 	bl	8002a94 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	817b      	strh	r3, [r7, #10]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	813b      	strh	r3, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	f040 80f9 	bne.w	8009176 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <HAL_I2C_Mem_Write+0x34>
 8008f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d105      	bne.n	8008f9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e0ed      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d101      	bne.n	8008faa <HAL_I2C_Mem_Write+0x4e>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e0e6      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fb2:	f7fc fbd9 	bl	8005768 <HAL_GetTick>
 8008fb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	2319      	movs	r3, #25
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fac3 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0d1      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2221      	movs	r2, #33	; 0x21
 8008fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2240      	movs	r2, #64	; 0x40
 8008fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a3a      	ldr	r2, [r7, #32]
 8008fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ffc:	88f8      	ldrh	r0, [r7, #6]
 8008ffe:	893a      	ldrh	r2, [r7, #8]
 8009000:	8979      	ldrh	r1, [r7, #10]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	4603      	mov	r3, r0
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f9d3 	bl	80093b8 <I2C_RequestMemoryWrite>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0a9      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009028:	b29b      	uxth	r3, r3
 800902a:	2bff      	cmp	r3, #255	; 0xff
 800902c:	d90e      	bls.n	800904c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	22ff      	movs	r2, #255	; 0xff
 8009032:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009038:	b2da      	uxtb	r2, r3
 800903a:	8979      	ldrh	r1, [r7, #10]
 800903c:	2300      	movs	r3, #0
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fba5 	bl	8009794 <I2C_TransferConfig>
 800904a:	e00f      	b.n	800906c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905a:	b2da      	uxtb	r2, r3
 800905c:	8979      	ldrh	r1, [r7, #10]
 800905e:	2300      	movs	r3, #0
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 fb94 	bl	8009794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 faad 	bl	80095d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e07b      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	781a      	ldrb	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d034      	beq.n	8009124 <HAL_I2C_Mem_Write+0x1c8>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d130      	bne.n	8009124 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	2200      	movs	r2, #0
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 fa3f 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e04d      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2bff      	cmp	r3, #255	; 0xff
 80090e4:	d90e      	bls.n	8009104 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	22ff      	movs	r2, #255	; 0xff
 80090ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	8979      	ldrh	r1, [r7, #10]
 80090f4:	2300      	movs	r3, #0
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 fb49 	bl	8009794 <I2C_TransferConfig>
 8009102:	e00f      	b.n	8009124 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009112:	b2da      	uxtb	r2, r3
 8009114:	8979      	ldrh	r1, [r7, #10]
 8009116:	2300      	movs	r3, #0
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 fb38 	bl	8009794 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d19e      	bne.n	800906c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fa8c 	bl	8009650 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e01a      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2220      	movs	r2, #32
 8009148:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6859      	ldr	r1, [r3, #4]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HAL_I2C_Mem_Write+0x224>)
 8009156:	400b      	ands	r3, r1
 8009158:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	e000      	b.n	8009178 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009176:	2302      	movs	r3, #2
  }
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	fe00e800 	.word	0xfe00e800

08009184 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	4608      	mov	r0, r1
 800918e:	4611      	mov	r1, r2
 8009190:	461a      	mov	r2, r3
 8009192:	4603      	mov	r3, r0
 8009194:	817b      	strh	r3, [r7, #10]
 8009196:	460b      	mov	r3, r1
 8009198:	813b      	strh	r3, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b20      	cmp	r3, #32
 80091a8:	f040 80fd 	bne.w	80093a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <HAL_I2C_Mem_Read+0x34>
 80091b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d105      	bne.n	80091c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e0f1      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <HAL_I2C_Mem_Read+0x4e>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e0ea      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091da:	f7fc fac5 	bl	8005768 <HAL_GetTick>
 80091de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2319      	movs	r3, #25
 80091e6:	2201      	movs	r2, #1
 80091e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f9af 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e0d5      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2222      	movs	r2, #34	; 0x22
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2240      	movs	r2, #64	; 0x40
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a3a      	ldr	r2, [r7, #32]
 8009216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800921c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009224:	88f8      	ldrh	r0, [r7, #6]
 8009226:	893a      	ldrh	r2, [r7, #8]
 8009228:	8979      	ldrh	r1, [r7, #10]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4603      	mov	r3, r0
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f913 	bl	8009460 <I2C_RequestMemoryRead>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e0ad      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009250:	b29b      	uxth	r3, r3
 8009252:	2bff      	cmp	r3, #255	; 0xff
 8009254:	d90e      	bls.n	8009274 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	22ff      	movs	r2, #255	; 0xff
 800925a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009260:	b2da      	uxtb	r2, r3
 8009262:	8979      	ldrh	r1, [r7, #10]
 8009264:	4b52      	ldr	r3, [pc, #328]	; (80093b0 <HAL_I2C_Mem_Read+0x22c>)
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fa91 	bl	8009794 <I2C_TransferConfig>
 8009272:	e00f      	b.n	8009294 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009278:	b29a      	uxth	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009282:	b2da      	uxtb	r2, r3
 8009284:	8979      	ldrh	r1, [r7, #10]
 8009286:	4b4a      	ldr	r3, [pc, #296]	; (80093b0 <HAL_I2C_Mem_Read+0x22c>)
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fa80 	bl	8009794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	2200      	movs	r2, #0
 800929c:	2104      	movs	r1, #4
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 f956 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e07c      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d034      	beq.n	8009354 <HAL_I2C_Mem_Read+0x1d0>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d130      	bne.n	8009354 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	2200      	movs	r2, #0
 80092fa:	2180      	movs	r1, #128	; 0x80
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f927 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e04d      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009310:	b29b      	uxth	r3, r3
 8009312:	2bff      	cmp	r3, #255	; 0xff
 8009314:	d90e      	bls.n	8009334 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	22ff      	movs	r2, #255	; 0xff
 800931a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009320:	b2da      	uxtb	r2, r3
 8009322:	8979      	ldrh	r1, [r7, #10]
 8009324:	2300      	movs	r3, #0
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fa31 	bl	8009794 <I2C_TransferConfig>
 8009332:	e00f      	b.n	8009354 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009342:	b2da      	uxtb	r2, r3
 8009344:	8979      	ldrh	r1, [r7, #10]
 8009346:	2300      	movs	r3, #0
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fa20 	bl	8009794 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d19a      	bne.n	8009294 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f974 	bl	8009650 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e01a      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2220      	movs	r2, #32
 8009378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6859      	ldr	r1, [r3, #4]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <HAL_I2C_Mem_Read+0x230>)
 8009386:	400b      	ands	r3, r1
 8009388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e000      	b.n	80093a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80093a6:	2302      	movs	r3, #2
  }
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	80002400 	.word	0x80002400
 80093b4:	fe00e800 	.word	0xfe00e800

080093b8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	4608      	mov	r0, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	461a      	mov	r2, r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	817b      	strh	r3, [r7, #10]
 80093ca:	460b      	mov	r3, r1
 80093cc:	813b      	strh	r3, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80093d2:	88fb      	ldrh	r3, [r7, #6]
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	8979      	ldrh	r1, [r7, #10]
 80093d8:	4b20      	ldr	r3, [pc, #128]	; (800945c <I2C_RequestMemoryWrite+0xa4>)
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f9d7 	bl	8009794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	69b9      	ldr	r1, [r7, #24]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f8f0 	bl	80095d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e02c      	b.n	8009454 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d105      	bne.n	800940c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009400:	893b      	ldrh	r3, [r7, #8]
 8009402:	b2da      	uxtb	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	629a      	str	r2, [r3, #40]	; 0x28
 800940a:	e015      	b.n	8009438 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800940c:	893b      	ldrh	r3, [r7, #8]
 800940e:	0a1b      	lsrs	r3, r3, #8
 8009410:	b29b      	uxth	r3, r3
 8009412:	b2da      	uxtb	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800941a:	69fa      	ldr	r2, [r7, #28]
 800941c:	69b9      	ldr	r1, [r7, #24]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 f8d6 	bl	80095d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e012      	b.n	8009454 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800942e:	893b      	ldrh	r3, [r7, #8]
 8009430:	b2da      	uxtb	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2200      	movs	r2, #0
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 f884 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	80002000 	.word	0x80002000

08009460 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af02      	add	r7, sp, #8
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	4608      	mov	r0, r1
 800946a:	4611      	mov	r1, r2
 800946c:	461a      	mov	r2, r3
 800946e:	4603      	mov	r3, r0
 8009470:	817b      	strh	r3, [r7, #10]
 8009472:	460b      	mov	r3, r1
 8009474:	813b      	strh	r3, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800947a:	88fb      	ldrh	r3, [r7, #6]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	8979      	ldrh	r1, [r7, #10]
 8009480:	4b20      	ldr	r3, [pc, #128]	; (8009504 <I2C_RequestMemoryRead+0xa4>)
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2300      	movs	r3, #0
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 f984 	bl	8009794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	69b9      	ldr	r1, [r7, #24]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f89d 	bl	80095d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e02c      	b.n	80094fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d105      	bne.n	80094b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094a6:	893b      	ldrh	r3, [r7, #8]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	629a      	str	r2, [r3, #40]	; 0x28
 80094b0:	e015      	b.n	80094de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094b2:	893b      	ldrh	r3, [r7, #8]
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094c0:	69fa      	ldr	r2, [r7, #28]
 80094c2:	69b9      	ldr	r1, [r7, #24]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f883 	bl	80095d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e012      	b.n	80094fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094d4:	893b      	ldrh	r3, [r7, #8]
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	2200      	movs	r2, #0
 80094e6:	2140      	movs	r1, #64	; 0x40
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 f831 	bl	8009550 <I2C_WaitOnFlagUntilTimeout>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	80002000 	.word	0x80002000

08009508 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b02      	cmp	r3, #2
 800951c:	d103      	bne.n	8009526 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b01      	cmp	r3, #1
 8009532:	d007      	beq.n	8009544 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699a      	ldr	r2, [r3, #24]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	619a      	str	r2, [r3, #24]
  }
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	4613      	mov	r3, r2
 800955e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009560:	e022      	b.n	80095a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009568:	d01e      	beq.n	80095a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800956a:	f7fc f8fd 	bl	8005768 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d302      	bcc.n	8009580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d113      	bne.n	80095a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009584:	f043 0220 	orr.w	r2, r3, #32
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e00f      	b.n	80095c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	699a      	ldr	r2, [r3, #24]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4013      	ands	r3, r2
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	bf0c      	ite	eq
 80095b8:	2301      	moveq	r3, #1
 80095ba:	2300      	movne	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	461a      	mov	r2, r3
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d0cd      	beq.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095dc:	e02c      	b.n	8009638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 f870 	bl	80096c8 <I2C_IsAcknowledgeFailed>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e02a      	b.n	8009648 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095f8:	d01e      	beq.n	8009638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7fc f8b5 	bl	8005768 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d113      	bne.n	8009638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009614:	f043 0220 	orr.w	r2, r3, #32
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e007      	b.n	8009648 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b02      	cmp	r3, #2
 8009644:	d1cb      	bne.n	80095de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800965c:	e028      	b.n	80096b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 f830 	bl	80096c8 <I2C_IsAcknowledgeFailed>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e026      	b.n	80096c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009672:	f7fc f879 	bl	8005768 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	d302      	bcc.n	8009688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d113      	bne.n	80096b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968c:	f043 0220 	orr.w	r2, r3, #32
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e007      	b.n	80096c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d1cf      	bne.n	800965e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	f003 0310 	and.w	r3, r3, #16
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d151      	bne.n	8009786 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096e2:	e022      	b.n	800972a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ea:	d01e      	beq.n	800972a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ec:	f7fc f83c 	bl	8005768 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d302      	bcc.n	8009702 <I2C_IsAcknowledgeFailed+0x3a>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d113      	bne.n	800972a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009706:	f043 0220 	orr.w	r2, r3, #32
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e02e      	b.n	8009788 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b20      	cmp	r3, #32
 8009736:	d1d5      	bne.n	80096e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2210      	movs	r2, #16
 800973e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2220      	movs	r2, #32
 8009746:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff fedd 	bl	8009508 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6859      	ldr	r1, [r3, #4]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <I2C_IsAcknowledgeFailed+0xc8>)
 800975a:	400b      	ands	r3, r1
 800975c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009762:	f043 0204 	orr.w	r2, r3, #4
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	fe00e800 	.word	0xfe00e800

08009794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	607b      	str	r3, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	817b      	strh	r3, [r7, #10]
 80097a2:	4613      	mov	r3, r2
 80097a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	0d5b      	lsrs	r3, r3, #21
 80097b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80097b4:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <I2C_TransferConfig+0x58>)
 80097b6:	430b      	orrs	r3, r1
 80097b8:	43db      	mvns	r3, r3
 80097ba:	ea02 0103 	and.w	r1, r2, r3
 80097be:	897b      	ldrh	r3, [r7, #10]
 80097c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80097c4:	7a7b      	ldrb	r3, [r7, #9]
 80097c6:	041b      	lsls	r3, r3, #16
 80097c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	431a      	orrs	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	03ff63ff 	.word	0x03ff63ff

080097f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b20      	cmp	r3, #32
 8009804:	d138      	bne.n	8009878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009810:	2302      	movs	r3, #2
 8009812:	e032      	b.n	800987a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2224      	movs	r2, #36	; 0x24
 8009820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0201 	bic.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0201 	orr.w	r2, r2, #1
 8009862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2220      	movs	r2, #32
 8009868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009878:	2302      	movs	r3, #2
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b20      	cmp	r3, #32
 800989a:	d139      	bne.n	8009910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e033      	b.n	8009912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2224      	movs	r2, #36	; 0x24
 80098b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80098d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e000      	b.n	8009912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009910:	2302      	movs	r3, #2
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e0bf      	b.n	8009ab2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7f9 f8e0 	bl	8002b0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009962:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6999      	ldr	r1, [r3, #24]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009978:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6899      	ldr	r1, [r3, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	4b4a      	ldr	r3, [pc, #296]	; (8009abc <HAL_LTDC_Init+0x19c>)
 8009994:	400b      	ands	r3, r1
 8009996:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6899      	ldr	r1, [r3, #8]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699a      	ldr	r2, [r3, #24]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68d9      	ldr	r1, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	4b3e      	ldr	r3, [pc, #248]	; (8009abc <HAL_LTDC_Init+0x19c>)
 80099c2:	400b      	ands	r3, r1
 80099c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	041b      	lsls	r3, r3, #16
 80099cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68d9      	ldr	r1, [r3, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1a      	ldr	r2, [r3, #32]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6919      	ldr	r1, [r3, #16]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b33      	ldr	r3, [pc, #204]	; (8009abc <HAL_LTDC_Init+0x19c>)
 80099f0:	400b      	ands	r3, r1
 80099f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	041b      	lsls	r3, r3, #16
 80099fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6919      	ldr	r1, [r3, #16]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6959      	ldr	r1, [r3, #20]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	4b27      	ldr	r3, [pc, #156]	; (8009abc <HAL_LTDC_Init+0x19c>)
 8009a1e:	400b      	ands	r3, r1
 8009a20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	041b      	lsls	r3, r3, #16
 8009a28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6959      	ldr	r1, [r3, #20]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a46:	021b      	lsls	r3, r3, #8
 8009a48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0206 	orr.w	r2, r2, #6
 8009a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	f000f800 	.word	0xf000f800

08009ac0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009ac0:	b5b0      	push	{r4, r5, r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d101      	bne.n	8009ada <HAL_LTDC_ConfigLayer+0x1a>
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e02c      	b.n	8009b34 <HAL_LTDC_ConfigLayer+0x74>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2134      	movs	r1, #52	; 0x34
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4614      	mov	r4, r2
 8009afe:	461d      	mov	r5, r3
 8009b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 f847 	bl	8009ba8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bdb0      	pop	{r4, r5, r7, pc}

08009b3c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <HAL_LTDC_SetAddress+0x1a>
 8009b52:	2302      	movs	r3, #2
 8009b54:	e024      	b.n	8009ba0 <HAL_LTDC_SetAddress+0x64>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2202      	movs	r2, #2
 8009b62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2234      	movs	r2, #52	; 0x34
 8009b6a:	fb02 f303 	mul.w	r3, r2, r3
 8009b6e:	3338      	adds	r3, #56	; 0x38
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6979      	ldr	r1, [r7, #20]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 f811 	bl	8009ba8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b089      	sub	sp, #36	; 0x24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	0c1b      	lsrs	r3, r3, #16
 8009bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bc4:	4413      	add	r3, r2
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	01db      	lsls	r3, r3, #7
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3384      	adds	r3, #132	; 0x84
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	6812      	ldr	r2, [r2, #0]
 8009bde:	4611      	mov	r1, r2
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	01d2      	lsls	r2, r2, #7
 8009be4:	440a      	add	r2, r1
 8009be6:	3284      	adds	r2, #132	; 0x84
 8009be8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009bec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	0c1b      	lsrs	r3, r3, #16
 8009bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bfe:	4413      	add	r3, r2
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4619      	mov	r1, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	01db      	lsls	r3, r3, #7
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3384      	adds	r3, #132	; 0x84
 8009c10:	4619      	mov	r1, r3
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c26:	4413      	add	r3, r2
 8009c28:	041b      	lsls	r3, r3, #16
 8009c2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	01db      	lsls	r3, r3, #7
 8009c36:	4413      	add	r3, r2
 8009c38:	3384      	adds	r3, #132	; 0x84
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	6812      	ldr	r2, [r2, #0]
 8009c40:	4611      	mov	r1, r2
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	01d2      	lsls	r2, r2, #7
 8009c46:	440a      	add	r2, r1
 8009c48:	3284      	adds	r2, #132	; 0x84
 8009c4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009c4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c5e:	4413      	add	r3, r2
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4619      	mov	r1, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	01db      	lsls	r3, r3, #7
 8009c6c:	440b      	add	r3, r1
 8009c6e:	3384      	adds	r3, #132	; 0x84
 8009c70:	4619      	mov	r1, r3
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	01db      	lsls	r3, r3, #7
 8009c82:	4413      	add	r3, r2
 8009c84:	3384      	adds	r3, #132	; 0x84
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	01d2      	lsls	r2, r2, #7
 8009c92:	440a      	add	r2, r1
 8009c94:	3284      	adds	r2, #132	; 0x84
 8009c96:	f023 0307 	bic.w	r3, r3, #7
 8009c9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	01db      	lsls	r3, r3, #7
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3384      	adds	r3, #132	; 0x84
 8009caa:	461a      	mov	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009cc2:	041b      	lsls	r3, r3, #16
 8009cc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	061b      	lsls	r3, r3, #24
 8009ccc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	01db      	lsls	r3, r3, #7
 8009cd8:	4413      	add	r3, r2
 8009cda:	3384      	adds	r3, #132	; 0x84
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	01db      	lsls	r3, r3, #7
 8009ce8:	4413      	add	r3, r2
 8009cea:	3384      	adds	r3, #132	; 0x84
 8009cec:	461a      	mov	r2, r3
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	431a      	orrs	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	01db      	lsls	r3, r3, #7
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3384      	adds	r3, #132	; 0x84
 8009d10:	4619      	mov	r1, r3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	01db      	lsls	r3, r3, #7
 8009d22:	4413      	add	r3, r2
 8009d24:	3384      	adds	r3, #132	; 0x84
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	01d2      	lsls	r2, r2, #7
 8009d32:	440a      	add	r2, r1
 8009d34:	3284      	adds	r2, #132	; 0x84
 8009d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	461a      	mov	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	01db      	lsls	r3, r3, #7
 8009d46:	4413      	add	r3, r2
 8009d48:	3384      	adds	r3, #132	; 0x84
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	01db      	lsls	r3, r3, #7
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3384      	adds	r3, #132	; 0x84
 8009d60:	69da      	ldr	r2, [r3, #28]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4619      	mov	r1, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	01db      	lsls	r3, r3, #7
 8009d6c:	440b      	add	r3, r1
 8009d6e:	3384      	adds	r3, #132	; 0x84
 8009d70:	4619      	mov	r1, r3
 8009d72:	4b58      	ldr	r3, [pc, #352]	; (8009ed4 <LTDC_SetConfig+0x32c>)
 8009d74:	4013      	ands	r3, r2
 8009d76:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	68f9      	ldr	r1, [r7, #12]
 8009d82:	6809      	ldr	r1, [r1, #0]
 8009d84:	4608      	mov	r0, r1
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	01c9      	lsls	r1, r1, #7
 8009d8a:	4401      	add	r1, r0
 8009d8c:	3184      	adds	r1, #132	; 0x84
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	01db      	lsls	r3, r3, #7
 8009d9c:	4413      	add	r3, r2
 8009d9e:	3384      	adds	r3, #132	; 0x84
 8009da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	01db      	lsls	r3, r3, #7
 8009dac:	4413      	add	r3, r2
 8009dae:	3384      	adds	r3, #132	; 0x84
 8009db0:	461a      	mov	r2, r3
 8009db2:	2300      	movs	r3, #0
 8009db4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	01db      	lsls	r3, r3, #7
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3384      	adds	r3, #132	; 0x84
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009dd4:	2304      	movs	r3, #4
 8009dd6:	61fb      	str	r3, [r7, #28]
 8009dd8:	e01b      	b.n	8009e12 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d102      	bne.n	8009de8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009de2:	2303      	movs	r3, #3
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	e014      	b.n	8009e12 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	d00b      	beq.n	8009e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d007      	beq.n	8009e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d003      	beq.n	8009e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e04:	2b07      	cmp	r3, #7
 8009e06:	d102      	bne.n	8009e0e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	e001      	b.n	8009e12 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	01db      	lsls	r3, r3, #7
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3384      	adds	r3, #132	; 0x84
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	4611      	mov	r1, r2
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	01d2      	lsls	r2, r2, #7
 8009e2c:	440a      	add	r2, r1
 8009e2e:	3284      	adds	r2, #132	; 0x84
 8009e30:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009e34:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	fb02 f303 	mul.w	r3, r2, r3
 8009e40:	041a      	lsls	r2, r3, #16
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6859      	ldr	r1, [r3, #4]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	1acb      	subs	r3, r1, r3
 8009e4c:	69f9      	ldr	r1, [r7, #28]
 8009e4e:	fb01 f303 	mul.w	r3, r1, r3
 8009e52:	3303      	adds	r3, #3
 8009e54:	68f9      	ldr	r1, [r7, #12]
 8009e56:	6809      	ldr	r1, [r1, #0]
 8009e58:	4608      	mov	r0, r1
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	01c9      	lsls	r1, r1, #7
 8009e5e:	4401      	add	r1, r0
 8009e60:	3184      	adds	r1, #132	; 0x84
 8009e62:	4313      	orrs	r3, r2
 8009e64:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	01db      	lsls	r3, r3, #7
 8009e70:	4413      	add	r3, r2
 8009e72:	3384      	adds	r3, #132	; 0x84
 8009e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	01db      	lsls	r3, r3, #7
 8009e80:	440b      	add	r3, r1
 8009e82:	3384      	adds	r3, #132	; 0x84
 8009e84:	4619      	mov	r1, r3
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <LTDC_SetConfig+0x330>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	01db      	lsls	r3, r3, #7
 8009e96:	4413      	add	r3, r2
 8009e98:	3384      	adds	r3, #132	; 0x84
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	01db      	lsls	r3, r3, #7
 8009eac:	4413      	add	r3, r2
 8009eae:	3384      	adds	r3, #132	; 0x84
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	6812      	ldr	r2, [r2, #0]
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	01d2      	lsls	r2, r2, #7
 8009ebc:	440a      	add	r2, r1
 8009ebe:	3284      	adds	r2, #132	; 0x84
 8009ec0:	f043 0301 	orr.w	r3, r3, #1
 8009ec4:	6013      	str	r3, [r2, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	3724      	adds	r7, #36	; 0x24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	fffff8f8 	.word	0xfffff8f8
 8009ed8:	fffff800 	.word	0xfffff800

08009edc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eea:	6013      	str	r3, [r2, #0]
}
 8009eec:	bf00      	nop
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	40007000 	.word	0x40007000

08009efc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009f06:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8009f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0a:	4a22      	ldr	r2, [pc, #136]	; (8009f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8009f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f10:	6413      	str	r3, [r2, #64]	; 0x40
 8009f12:	4b20      	ldr	r3, [pc, #128]	; (8009f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1d      	ldr	r2, [pc, #116]	; (8009f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f2a:	f7fb fc1d 	bl	8005768 <HAL_GetTick>
 8009f2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f30:	e009      	b.n	8009f46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f32:	f7fb fc19 	bl	8005768 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f40:	d901      	bls.n	8009f46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e022      	b.n	8009f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f52:	d1ee      	bne.n	8009f32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009f54:	4b10      	ldr	r3, [pc, #64]	; (8009f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a0f      	ldr	r2, [pc, #60]	; (8009f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f60:	f7fb fc02 	bl	8005768 <HAL_GetTick>
 8009f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f66:	e009      	b.n	8009f7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f68:	f7fb fbfe 	bl	8005768 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f76:	d901      	bls.n	8009f7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e007      	b.n	8009f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f88:	d1ee      	bne.n	8009f68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	40023800 	.word	0x40023800
 8009f98:	40007000 	.word	0x40007000

08009f9c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009fa4:	f7fb fbe0 	bl	8005768 <HAL_GetTick>
 8009fa8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e067      	b.n	800a084 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10b      	bne.n	8009fd8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7f8 fe5f 	bl	8002c8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009fce:	f241 3188 	movw	r1, #5000	; 0x1388
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fda8 	bl	800ab28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	021a      	lsls	r2, r3, #8
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2120      	movs	r1, #32
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fdd3 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d135      	bne.n	800a07a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <HAL_QSPI_Init+0xf0>)
 800a016:	4013      	ands	r3, r2
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6852      	ldr	r2, [r2, #4]
 800a01c:	0611      	lsls	r1, r2, #24
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68d2      	ldr	r2, [r2, #12]
 800a022:	4311      	orrs	r1, r2
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	69d2      	ldr	r2, [r2, #28]
 800a028:	4311      	orrs	r1, r2
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	6a12      	ldr	r2, [r2, #32]
 800a02e:	4311      	orrs	r1, r2
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	6812      	ldr	r2, [r2, #0]
 800a034:	430b      	orrs	r3, r1
 800a036:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	4b14      	ldr	r3, [pc, #80]	; (800a090 <HAL_QSPI_Init+0xf4>)
 800a040:	4013      	ands	r3, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	6912      	ldr	r2, [r2, #16]
 800a046:	0411      	lsls	r1, r2, #16
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	6952      	ldr	r2, [r2, #20]
 800a04c:	4311      	orrs	r1, r2
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	6992      	ldr	r2, [r2, #24]
 800a052:	4311      	orrs	r1, r2
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	6812      	ldr	r2, [r2, #0]
 800a058:	430b      	orrs	r3, r1
 800a05a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a082:	7afb      	ldrb	r3, [r7, #11]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	00ffff2f 	.word	0x00ffff2f
 800a090:	ffe0f8fe 	.word	0xffe0f8fe

0800a094 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d064      	beq.n	800a180 <HAL_QSPI_IRQHandler+0xec>
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d05f      	beq.n	800a180 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3320      	adds	r3, #32
 800a0c6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b12      	cmp	r3, #18
 800a0d2:	d125      	bne.n	800a120 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a0d4:	e01c      	b.n	800a110 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00f      	beq.n	800a0fe <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	1e5a      	subs	r2, r3, #1
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0fc:	e008      	b.n	800a110 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a10c:	601a      	str	r2, [r3, #0]
          break;
 800a10e:	e033      	b.n	800a178 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1db      	bne.n	800a0d6 <HAL_QSPI_IRQHandler+0x42>
 800a11e:	e02b      	b.n	800a178 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b22      	cmp	r3, #34	; 0x22
 800a12a:	d125      	bne.n	800a178 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a12c:	e01d      	b.n	800a16a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	d010      	beq.n	800a158 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	1e5a      	subs	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	639a      	str	r2, [r3, #56]	; 0x38
 800a156:	e008      	b.n	800a16a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a166:	601a      	str	r2, [r3, #0]
          break;
 800a168:	e006      	b.n	800a178 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1da      	bne.n	800a12e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fbed 	bl	800a958 <HAL_QSPI_FifoThresholdCallback>
 800a17e:	e142      	b.n	800a406 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80b6 	beq.w	800a2f8 <HAL_QSPI_IRQHandler+0x264>
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80b0 	beq.w	800a2f8 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2202      	movs	r2, #2
 800a19e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a1ae:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b12      	cmp	r3, #18
 800a1ba:	d123      	bne.n	800a204 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d011      	beq.n	800a1ee <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0204 	bic.w	r2, r2, #4
 800a1d8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0201 	bic.w	r2, r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fc3e 	bl	800aa70 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fba1 	bl	800a944 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a202:	e0fd      	b.n	800a400 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b22      	cmp	r3, #34	; 0x22
 800a20e:	d146      	bne.n	800a29e <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d012      	beq.n	800a244 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0204 	bic.w	r2, r2, #4
 800a22c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0201 	bic.w	r2, r2, #1
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	e021      	b.n	800a288 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3320      	adds	r3, #32
 800a24a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a24c:	e013      	b.n	800a276 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	2b00      	cmp	r3, #0
 800a254:	d017      	beq.n	800a286 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	7812      	ldrb	r2, [r2, #0]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	1e5a      	subs	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e4      	bne.n	800a24e <HAL_QSPI_IRQHandler+0x1ba>
 800a284:	e000      	b.n	800a288 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800a286:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fbf1 	bl	800aa70 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fb4a 	bl	800a930 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a29c:	e0b0      	b.n	800a400 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d107      	bne.n	800a2ba <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fb32 	bl	800a91c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a2b8:	e0a2      	b.n	800a400 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	f040 809c 	bne.w	800a400 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	695a      	ldr	r2, [r3, #20]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a2d6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d103      	bne.n	800a2f0 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fb0d 	bl	800a908 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a2ee:	e087      	b.n	800a400 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 faff 	bl	800a8f4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a2f6:	e083      	b.n	800a400 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f003 0308 	and.w	r3, r3, #8
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d01f      	beq.n	800a342 <HAL_QSPI_IRQHandler+0x2ae>
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01a      	beq.n	800a342 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2208      	movs	r2, #8
 800a312:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00b      	beq.n	800a33a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a330:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fb16 	bl	800a96c <HAL_QSPI_StatusMatchCallback>
 800a340:	e061      	b.n	800a406 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d047      	beq.n	800a3dc <HAL_QSPI_IRQHandler+0x348>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d042      	beq.n	800a3dc <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800a36c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a372:	f043 0202 	orr.w	r2, r3, #2
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d021      	beq.n	800a3cc <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0204 	bic.w	r2, r2, #4
 800a396:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39c:	4a1c      	ldr	r2, [pc, #112]	; (800a410 <HAL_QSPI_IRQHandler+0x37c>)
 800a39e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fc f95d 	bl	8006664 <HAL_DMA_Abort_IT>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d029      	beq.n	800a404 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b4:	f043 0204 	orr.w	r2, r3, #4
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa95 	bl	800a8f4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a3ca:	e01b      	b.n	800a404 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fa8d 	bl	800a8f4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a3da:	e013      	b.n	800a404 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00f      	beq.n	800a406 <HAL_QSPI_IRQHandler+0x372>
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2210      	movs	r2, #16
 800a3f6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fac1 	bl	800a980 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800a3fe:	e002      	b.n	800a406 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a400:	bf00      	nop
 800a402:	e000      	b.n	800a406 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a404:	bf00      	nop
}
 800a406:	bf00      	nop
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	0800ab45 	.word	0x0800ab45

0800a414 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a420:	f7fb f9a2 	bl	8005768 <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d101      	bne.n	800a436 <HAL_QSPI_Command+0x22>
 800a432:	2302      	movs	r3, #2
 800a434:	e048      	b.n	800a4c8 <HAL_QSPI_Command+0xb4>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b01      	cmp	r3, #1
 800a448:	d137      	bne.n	800a4ba <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2202      	movs	r2, #2
 800a454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2200      	movs	r2, #0
 800a460:	2120      	movs	r1, #32
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fba1 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d125      	bne.n	800a4be <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a472:	2200      	movs	r2, #0
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 fbce 	bl	800ac18 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d115      	bne.n	800a4b0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2201      	movs	r2, #1
 800a48c:	2102      	movs	r1, #2
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fb8b 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10f      	bne.n	800a4be <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4ae:	e006      	b.n	800a4be <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4b8:	e001      	b.n	800a4be <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a4e0:	f7fb f942 	bl	8005768 <HAL_GetTick>
 800a4e4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3320      	adds	r3, #32
 800a4ec:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_QSPI_Transmit+0x2e>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e07b      	b.n	800a5f6 <HAL_QSPI_Transmit+0x126>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d16a      	bne.n	800a5e8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d05b      	beq.n	800a5d6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2212      	movs	r2, #18
 800a522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	695a      	ldr	r2, [r3, #20]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a552:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a554:	e01b      	b.n	800a58e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	2201      	movs	r2, #1
 800a55e:	2104      	movs	r1, #4
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 fb22 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a566:	4603      	mov	r3, r0
 800a568:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a56a:	7ffb      	ldrb	r3, [r7, #31]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	781a      	ldrb	r2, [r3, #0]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	1e5a      	subs	r2, r3, #1
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1df      	bne.n	800a556 <HAL_QSPI_Transmit+0x86>
 800a596:	e000      	b.n	800a59a <HAL_QSPI_Transmit+0xca>
          break;
 800a598:	bf00      	nop
      }

      if (status == HAL_OK)
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d115      	bne.n	800a5cc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fafd 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a5b4:	7ffb      	ldrb	r3, [r7, #31]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d108      	bne.n	800a5cc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f9e6 	bl	800a994 <HAL_QSPI_Abort>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5d4:	e00a      	b.n	800a5ec <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5da:	f043 0208 	orr.w	r2, r3, #8
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	77fb      	strb	r3, [r7, #31]
 800a5e6:	e001      	b.n	800a5ec <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a5f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3720      	adds	r7, #32
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b08a      	sub	sp, #40	; 0x28
 800a602:	af02      	add	r7, sp, #8
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a60e:	f7fb f8ab 	bl	8005768 <HAL_GetTick>
 800a612:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3320      	adds	r3, #32
 800a622:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_QSPI_Receive+0x36>
 800a630:	2302      	movs	r3, #2
 800a632:	e082      	b.n	800a73a <HAL_QSPI_Receive+0x13c>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b01      	cmp	r3, #1
 800a646:	d171      	bne.n	800a72c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d062      	beq.n	800a71a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2222      	movs	r2, #34	; 0x22
 800a658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a68c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800a696:	e01c      	b.n	800a6d2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	2106      	movs	r1, #6
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 fa81 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800a6ac:	7ffb      	ldrb	r3, [r7, #31]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d114      	bne.n	800a6dc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	7812      	ldrb	r2, [r2, #0]
 800a6ba:	b2d2      	uxtb	r2, r2
 800a6bc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	1e5a      	subs	r2, r3, #1
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1de      	bne.n	800a698 <HAL_QSPI_Receive+0x9a>
 800a6da:	e000      	b.n	800a6de <HAL_QSPI_Receive+0xe0>
          break;
 800a6dc:	bf00      	nop
      }

      if (status == HAL_OK)
 800a6de:	7ffb      	ldrb	r3, [r7, #31]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d115      	bne.n	800a710 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	2102      	movs	r1, #2
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 fa5b 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800a6f8:	7ffb      	ldrb	r3, [r7, #31]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d108      	bne.n	800a710 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2202      	movs	r2, #2
 800a704:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 f944 	bl	800a994 <HAL_QSPI_Abort>
 800a70c:	4603      	mov	r3, r0
 800a70e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a718:	e00a      	b.n	800a730 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71e:	f043 0208 	orr.w	r2, r3, #8
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e001      	b.n	800a730 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a72c:	2302      	movs	r3, #2
 800a72e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a738:	7ffb      	ldrb	r3, [r7, #31]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b088      	sub	sp, #32
 800a746:	af02      	add	r7, sp, #8
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	60b9      	str	r1, [r7, #8]
 800a74c:	607a      	str	r2, [r7, #4]
 800a74e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a750:	f7fb f80a 	bl	8005768 <HAL_GetTick>
 800a754:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d101      	bne.n	800a766 <HAL_QSPI_AutoPolling+0x24>
 800a762:	2302      	movs	r3, #2
 800a764:	e060      	b.n	800a828 <HAL_QSPI_AutoPolling+0xe6>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b01      	cmp	r3, #1
 800a778:	d14f      	bne.n	800a81a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2242      	movs	r2, #66	; 0x42
 800a784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2200      	movs	r2, #0
 800a790:	2120      	movs	r1, #32
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fa09 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d13d      	bne.n	800a81e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6852      	ldr	r2, [r2, #4]
 800a7b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6892      	ldr	r2, [r2, #8]
 800a7be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a7d8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a7e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 fa15 	bl	800ac18 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	2108      	movs	r1, #8
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f9d6 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a7fe:	4603      	mov	r3, r0
 800a800:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2208      	movs	r2, #8
 800a80e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a818:	e001      	b.n	800a81e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a81a:	2302      	movs	r3, #2
 800a81c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a83c:	f7fa ff94 	bl	8005768 <HAL_GetTick>
 800a840:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d101      	bne.n	800a852 <HAL_QSPI_MemoryMapped+0x22>
 800a84e:	2302      	movs	r3, #2
 800a850:	e04c      	b.n	800a8ec <HAL_QSPI_MemoryMapped+0xbc>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b01      	cmp	r3, #1
 800a864:	d13b      	bne.n	800a8de <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2282      	movs	r2, #130	; 0x82
 800a870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2200      	movs	r2, #0
 800a87e:	2120      	movs	r1, #32
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f992 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d128      	bne.n	800a8e2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f023 0108 	bic.w	r1, r3, #8
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2b08      	cmp	r3, #8
 800a8ac:	d110      	bne.n	800a8d0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6812      	ldr	r2, [r2, #0]
 800a8b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2210      	movs	r2, #16
 800a8be:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a8ce:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a8d0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f99e 	bl	800ac18 <QSPI_Config>
 800a8dc:	e001      	b.n	800a8e2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af02      	add	r7, sp, #8
 800a99a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a9a0:	f7fa fee2 	bl	8005768 <HAL_GetTick>
 800a9a4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d056      	beq.n	800aa64 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d017      	beq.n	800a9fc <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0204 	bic.w	r2, r2, #4
 800a9da:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fb fdcf 	bl	8006584 <HAL_DMA_Abort>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d005      	beq.n	800a9fc <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f4:	f043 0204 	orr.w	r2, r3, #4
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0202 	orr.w	r2, r2, #2
 800aa0a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2201      	movs	r2, #1
 800aa16:	2102      	movs	r1, #2
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f8c6 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10e      	bne.n	800aa46 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2120      	movs	r1, #32
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f8b4 	bl	800abaa <QSPI_WaitFlagStateUntilTimeout>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10b      	bne.n	800aa64 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	695a      	ldr	r2, [r3, #20]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800aa5a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0302 	and.w	r3, r3, #2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d046      	beq.n	800ab1a <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2208      	movs	r2, #8
 800aa98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800aaaa:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01b      	beq.n	800aaf2 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0204 	bic.w	r2, r2, #4
 800aac8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aace:	4a15      	ldr	r2, [pc, #84]	; (800ab24 <HAL_QSPI_Abort_IT+0xb4>)
 800aad0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fb fdc4 	bl	8006664 <HAL_DMA_Abort_IT>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01b      	beq.n	800ab1a <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7ff ff0c 	bl	800a908 <HAL_QSPI_AbortCpltCallback>
 800aaf0:	e013      	b.n	800ab1a <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ab08:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f042 0202 	orr.w	r2, r2, #2
 800ab18:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	0800ab45 	.word	0x0800ab45

0800ab28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab50:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b08      	cmp	r3, #8
 800ab68:	d114      	bne.n	800ab94 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ab80:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f042 0202 	orr.w	r2, r2, #2
 800ab90:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800ab92:	e006      	b.n	800aba2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff fea9 	bl	800a8f4 <HAL_QSPI_ErrorCallback>
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	4613      	mov	r3, r2
 800abb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800abba:	e01a      	b.n	800abf2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc2:	d016      	beq.n	800abf2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abc4:	f7fa fdd0 	bl	8005768 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d302      	bcc.n	800abda <QSPI_WaitFlagStateUntilTimeout+0x30>
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2204      	movs	r2, #4
 800abde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe6:	f043 0201 	orr.w	r2, r3, #1
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e00e      	b.n	800ac10 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4013      	ands	r3, r2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bf14      	ite	ne
 800ac00:	2301      	movne	r3, #1
 800ac02:	2300      	moveq	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	79fb      	ldrb	r3, [r7, #7]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d1d6      	bne.n	800abbc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d009      	beq.n	800ac40 <QSPI_Config+0x28>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ac32:	d005      	beq.n	800ac40 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3a01      	subs	r2, #1
 800ac3e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80b9 	beq.w	800adbc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d05f      	beq.n	800ad12 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	6892      	ldr	r2, [r2, #8]
 800ac5a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	69db      	ldr	r3, [r3, #28]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d031      	beq.n	800acc8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	431a      	orrs	r2, r3
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	049b      	lsls	r3, r3, #18
 800ac80:	431a      	orrs	r2, r3
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	431a      	orrs	r2, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	431a      	orrs	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	ea42 0103 	orr.w	r1, r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	430a      	orrs	r2, r1
 800acb0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800acb8:	f000 812e 	beq.w	800af18 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	6852      	ldr	r2, [r2, #4]
 800acc4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800acc6:	e127      	b.n	800af18 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd0:	431a      	orrs	r2, r3
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd6:	431a      	orrs	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	431a      	orrs	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	049b      	lsls	r3, r3, #18
 800ace4:	431a      	orrs	r2, r3
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	431a      	orrs	r2, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	431a      	orrs	r2, r3
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	431a      	orrs	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	431a      	orrs	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	ea42 0103 	orr.w	r1, r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	615a      	str	r2, [r3, #20]
}
 800ad10:	e102      	b.n	800af18 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d02e      	beq.n	800ad78 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad22:	431a      	orrs	r2, r3
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	049b      	lsls	r3, r3, #18
 800ad36:	431a      	orrs	r2, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	431a      	orrs	r2, r3
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	ea42 0103 	orr.w	r1, r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ad68:	f000 80d6 	beq.w	800af18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	6852      	ldr	r2, [r2, #4]
 800ad74:	619a      	str	r2, [r3, #24]
}
 800ad76:	e0cf      	b.n	800af18 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad80:	431a      	orrs	r2, r3
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad86:	431a      	orrs	r2, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	431a      	orrs	r2, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	049b      	lsls	r3, r3, #18
 800ad94:	431a      	orrs	r2, r3
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	431a      	orrs	r2, r3
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	431a      	orrs	r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	ea42 0103 	orr.w	r1, r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	615a      	str	r2, [r3, #20]
}
 800adba:	e0ad      	b.n	800af18 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d058      	beq.n	800ae76 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	6892      	ldr	r2, [r2, #8]
 800adcc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d02d      	beq.n	800ae32 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	431a      	orrs	r2, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade4:	431a      	orrs	r2, r3
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	431a      	orrs	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	049b      	lsls	r3, r3, #18
 800adf2:	431a      	orrs	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	431a      	orrs	r2, r3
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	431a      	orrs	r2, r3
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	69db      	ldr	r3, [r3, #28]
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	ea42 0103 	orr.w	r1, r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae24:	d078      	beq.n	800af18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	6852      	ldr	r2, [r2, #4]
 800ae2e:	619a      	str	r2, [r3, #24]
}
 800ae30:	e072      	b.n	800af18 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	431a      	orrs	r2, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	049b      	lsls	r3, r3, #18
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	431a      	orrs	r2, r3
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	ea42 0103 	orr.w	r1, r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	615a      	str	r2, [r3, #20]
}
 800ae74:	e050      	b.n	800af18 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d02a      	beq.n	800aed4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae86:	431a      	orrs	r2, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae92:	431a      	orrs	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	049b      	lsls	r3, r3, #18
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	431a      	orrs	r2, r3
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	431a      	orrs	r2, r3
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	431a      	orrs	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	ea42 0103 	orr.w	r1, r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aec6:	d027      	beq.n	800af18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	6852      	ldr	r2, [r2, #4]
 800aed0:	619a      	str	r2, [r3, #24]
}
 800aed2:	e021      	b.n	800af18 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01d      	beq.n	800af18 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	431a      	orrs	r2, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeea:	431a      	orrs	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	431a      	orrs	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	049b      	lsls	r3, r3, #18
 800aef8:	431a      	orrs	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	431a      	orrs	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	431a      	orrs	r2, r3
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	ea42 0103 	orr.w	r1, r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	430a      	orrs	r2, r1
 800af16:	615a      	str	r2, [r3, #20]
}
 800af18:	bf00      	nop
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800af2c:	2300      	movs	r3, #0
 800af2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e291      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 8087 	beq.w	800b056 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800af48:	4b96      	ldr	r3, [pc, #600]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f003 030c 	and.w	r3, r3, #12
 800af50:	2b04      	cmp	r3, #4
 800af52:	d00c      	beq.n	800af6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af54:	4b93      	ldr	r3, [pc, #588]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 030c 	and.w	r3, r3, #12
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d112      	bne.n	800af86 <HAL_RCC_OscConfig+0x62>
 800af60:	4b90      	ldr	r3, [pc, #576]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af6c:	d10b      	bne.n	800af86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af6e:	4b8d      	ldr	r3, [pc, #564]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d06c      	beq.n	800b054 <HAL_RCC_OscConfig+0x130>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d168      	bne.n	800b054 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e26b      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af8e:	d106      	bne.n	800af9e <HAL_RCC_OscConfig+0x7a>
 800af90:	4b84      	ldr	r3, [pc, #528]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a83      	ldr	r2, [pc, #524]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800af96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	e02e      	b.n	800affc <HAL_RCC_OscConfig+0xd8>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10c      	bne.n	800afc0 <HAL_RCC_OscConfig+0x9c>
 800afa6:	4b7f      	ldr	r3, [pc, #508]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a7e      	ldr	r2, [pc, #504]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	4b7c      	ldr	r3, [pc, #496]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a7b      	ldr	r2, [pc, #492]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afbc:	6013      	str	r3, [r2, #0]
 800afbe:	e01d      	b.n	800affc <HAL_RCC_OscConfig+0xd8>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afc8:	d10c      	bne.n	800afe4 <HAL_RCC_OscConfig+0xc0>
 800afca:	4b76      	ldr	r3, [pc, #472]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a75      	ldr	r2, [pc, #468]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	4b73      	ldr	r3, [pc, #460]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a72      	ldr	r2, [pc, #456]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	e00b      	b.n	800affc <HAL_RCC_OscConfig+0xd8>
 800afe4:	4b6f      	ldr	r3, [pc, #444]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a6e      	ldr	r2, [pc, #440]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800afea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	4b6c      	ldr	r3, [pc, #432]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a6b      	ldr	r2, [pc, #428]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800aff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800affa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d013      	beq.n	800b02c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b004:	f7fa fbb0 	bl	8005768 <HAL_GetTick>
 800b008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b00a:	e008      	b.n	800b01e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b00c:	f7fa fbac 	bl	8005768 <HAL_GetTick>
 800b010:	4602      	mov	r2, r0
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	2b64      	cmp	r3, #100	; 0x64
 800b018:	d901      	bls.n	800b01e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e21f      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b01e:	4b61      	ldr	r3, [pc, #388]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0f0      	beq.n	800b00c <HAL_RCC_OscConfig+0xe8>
 800b02a:	e014      	b.n	800b056 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02c:	f7fa fb9c 	bl	8005768 <HAL_GetTick>
 800b030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b034:	f7fa fb98 	bl	8005768 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b64      	cmp	r3, #100	; 0x64
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e20b      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b046:	4b57      	ldr	r3, [pc, #348]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1f0      	bne.n	800b034 <HAL_RCC_OscConfig+0x110>
 800b052:	e000      	b.n	800b056 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d069      	beq.n	800b136 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b062:	4b50      	ldr	r3, [pc, #320]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 030c 	and.w	r3, r3, #12
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00b      	beq.n	800b086 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b06e:	4b4d      	ldr	r3, [pc, #308]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f003 030c 	and.w	r3, r3, #12
 800b076:	2b08      	cmp	r3, #8
 800b078:	d11c      	bne.n	800b0b4 <HAL_RCC_OscConfig+0x190>
 800b07a:	4b4a      	ldr	r3, [pc, #296]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d116      	bne.n	800b0b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b086:	4b47      	ldr	r3, [pc, #284]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <HAL_RCC_OscConfig+0x17a>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d001      	beq.n	800b09e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e1df      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b09e:	4b41      	ldr	r3, [pc, #260]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	493d      	ldr	r1, [pc, #244]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0b2:	e040      	b.n	800b136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d023      	beq.n	800b104 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0bc:	4b39      	ldr	r3, [pc, #228]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a38      	ldr	r2, [pc, #224]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c8:	f7fa fb4e 	bl	8005768 <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0d0:	f7fa fb4a 	bl	8005768 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e1bd      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0e2:	4b30      	ldr	r3, [pc, #192]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0f0      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0ee:	4b2d      	ldr	r3, [pc, #180]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	4929      	ldr	r1, [pc, #164]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	600b      	str	r3, [r1, #0]
 800b102:	e018      	b.n	800b136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b104:	4b27      	ldr	r3, [pc, #156]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a26      	ldr	r2, [pc, #152]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b10a:	f023 0301 	bic.w	r3, r3, #1
 800b10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b110:	f7fa fb2a 	bl	8005768 <HAL_GetTick>
 800b114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b118:	f7fa fb26 	bl	8005768 <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b02      	cmp	r3, #2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e199      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b12a:	4b1e      	ldr	r3, [pc, #120]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f0      	bne.n	800b118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 0308 	and.w	r3, r3, #8
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d038      	beq.n	800b1b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d019      	beq.n	800b17e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b14a:	4b16      	ldr	r3, [pc, #88]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b14e:	4a15      	ldr	r2, [pc, #84]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b150:	f043 0301 	orr.w	r3, r3, #1
 800b154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b156:	f7fa fb07 	bl	8005768 <HAL_GetTick>
 800b15a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b15c:	e008      	b.n	800b170 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b15e:	f7fa fb03 	bl	8005768 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d901      	bls.n	800b170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e176      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b170:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0f0      	beq.n	800b15e <HAL_RCC_OscConfig+0x23a>
 800b17c:	e01a      	b.n	800b1b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b17e:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b182:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <HAL_RCC_OscConfig+0x280>)
 800b184:	f023 0301 	bic.w	r3, r3, #1
 800b188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b18a:	f7fa faed 	bl	8005768 <HAL_GetTick>
 800b18e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b190:	e00a      	b.n	800b1a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b192:	f7fa fae9 	bl	8005768 <HAL_GetTick>
 800b196:	4602      	mov	r2, r0
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d903      	bls.n	800b1a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e15c      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
 800b1a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1a8:	4b91      	ldr	r3, [pc, #580]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1ee      	bne.n	800b192 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 80a4 	beq.w	800b30a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1c2:	4b8b      	ldr	r3, [pc, #556]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10d      	bne.n	800b1ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1ce:	4b88      	ldr	r3, [pc, #544]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	4a87      	ldr	r2, [pc, #540]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b1d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b1da:	4b85      	ldr	r3, [pc, #532]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e2:	60bb      	str	r3, [r7, #8]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1ea:	4b82      	ldr	r3, [pc, #520]	; (800b3f4 <HAL_RCC_OscConfig+0x4d0>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d118      	bne.n	800b228 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b1f6:	4b7f      	ldr	r3, [pc, #508]	; (800b3f4 <HAL_RCC_OscConfig+0x4d0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a7e      	ldr	r2, [pc, #504]	; (800b3f4 <HAL_RCC_OscConfig+0x4d0>)
 800b1fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b202:	f7fa fab1 	bl	8005768 <HAL_GetTick>
 800b206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b208:	e008      	b.n	800b21c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b20a:	f7fa faad 	bl	8005768 <HAL_GetTick>
 800b20e:	4602      	mov	r2, r0
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	2b64      	cmp	r3, #100	; 0x64
 800b216:	d901      	bls.n	800b21c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e120      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b21c:	4b75      	ldr	r3, [pc, #468]	; (800b3f4 <HAL_RCC_OscConfig+0x4d0>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0f0      	beq.n	800b20a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d106      	bne.n	800b23e <HAL_RCC_OscConfig+0x31a>
 800b230:	4b6f      	ldr	r3, [pc, #444]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b234:	4a6e      	ldr	r2, [pc, #440]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	6713      	str	r3, [r2, #112]	; 0x70
 800b23c:	e02d      	b.n	800b29a <HAL_RCC_OscConfig+0x376>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10c      	bne.n	800b260 <HAL_RCC_OscConfig+0x33c>
 800b246:	4b6a      	ldr	r3, [pc, #424]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24a:	4a69      	ldr	r2, [pc, #420]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b24c:	f023 0301 	bic.w	r3, r3, #1
 800b250:	6713      	str	r3, [r2, #112]	; 0x70
 800b252:	4b67      	ldr	r3, [pc, #412]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b256:	4a66      	ldr	r2, [pc, #408]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b258:	f023 0304 	bic.w	r3, r3, #4
 800b25c:	6713      	str	r3, [r2, #112]	; 0x70
 800b25e:	e01c      	b.n	800b29a <HAL_RCC_OscConfig+0x376>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	2b05      	cmp	r3, #5
 800b266:	d10c      	bne.n	800b282 <HAL_RCC_OscConfig+0x35e>
 800b268:	4b61      	ldr	r3, [pc, #388]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26c:	4a60      	ldr	r2, [pc, #384]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b26e:	f043 0304 	orr.w	r3, r3, #4
 800b272:	6713      	str	r3, [r2, #112]	; 0x70
 800b274:	4b5e      	ldr	r3, [pc, #376]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b278:	4a5d      	ldr	r2, [pc, #372]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b27a:	f043 0301 	orr.w	r3, r3, #1
 800b27e:	6713      	str	r3, [r2, #112]	; 0x70
 800b280:	e00b      	b.n	800b29a <HAL_RCC_OscConfig+0x376>
 800b282:	4b5b      	ldr	r3, [pc, #364]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	4a5a      	ldr	r2, [pc, #360]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b288:	f023 0301 	bic.w	r3, r3, #1
 800b28c:	6713      	str	r3, [r2, #112]	; 0x70
 800b28e:	4b58      	ldr	r3, [pc, #352]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	4a57      	ldr	r2, [pc, #348]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b294:	f023 0304 	bic.w	r3, r3, #4
 800b298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d015      	beq.n	800b2ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2a2:	f7fa fa61 	bl	8005768 <HAL_GetTick>
 800b2a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2a8:	e00a      	b.n	800b2c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2aa:	f7fa fa5d 	bl	8005768 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d901      	bls.n	800b2c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e0ce      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2c0:	4b4b      	ldr	r3, [pc, #300]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0ee      	beq.n	800b2aa <HAL_RCC_OscConfig+0x386>
 800b2cc:	e014      	b.n	800b2f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ce:	f7fa fa4b 	bl	8005768 <HAL_GetTick>
 800b2d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2d4:	e00a      	b.n	800b2ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2d6:	f7fa fa47 	bl	8005768 <HAL_GetTick>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d901      	bls.n	800b2ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e0b8      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2ec:	4b40      	ldr	r3, [pc, #256]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f0:	f003 0302 	and.w	r3, r3, #2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1ee      	bne.n	800b2d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d105      	bne.n	800b30a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2fe:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	4a3b      	ldr	r2, [pc, #236]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b308:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80a4 	beq.w	800b45c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b314:	4b36      	ldr	r3, [pc, #216]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f003 030c 	and.w	r3, r3, #12
 800b31c:	2b08      	cmp	r3, #8
 800b31e:	d06b      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d149      	bne.n	800b3bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b328:	4b31      	ldr	r3, [pc, #196]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a30      	ldr	r2, [pc, #192]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b32e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b334:	f7fa fa18 	bl	8005768 <HAL_GetTick>
 800b338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b33a:	e008      	b.n	800b34e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b33c:	f7fa fa14 	bl	8005768 <HAL_GetTick>
 800b340:	4602      	mov	r2, r0
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	2b02      	cmp	r3, #2
 800b348:	d901      	bls.n	800b34e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e087      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b34e:	4b28      	ldr	r3, [pc, #160]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1f0      	bne.n	800b33c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	69da      	ldr	r2, [r3, #28]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	431a      	orrs	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	019b      	lsls	r3, r3, #6
 800b36a:	431a      	orrs	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b370:	085b      	lsrs	r3, r3, #1
 800b372:	3b01      	subs	r3, #1
 800b374:	041b      	lsls	r3, r3, #16
 800b376:	431a      	orrs	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	061b      	lsls	r3, r3, #24
 800b37e:	4313      	orrs	r3, r2
 800b380:	4a1b      	ldr	r2, [pc, #108]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b386:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b388:	4b19      	ldr	r3, [pc, #100]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a18      	ldr	r2, [pc, #96]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b38e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b394:	f7fa f9e8 	bl	8005768 <HAL_GetTick>
 800b398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b39a:	e008      	b.n	800b3ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b39c:	f7fa f9e4 	bl	8005768 <HAL_GetTick>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d901      	bls.n	800b3ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e057      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3ae:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0f0      	beq.n	800b39c <HAL_RCC_OscConfig+0x478>
 800b3ba:	e04f      	b.n	800b45c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3bc:	4b0c      	ldr	r3, [pc, #48]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a0b      	ldr	r2, [pc, #44]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b3c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3c8:	f7fa f9ce 	bl	8005768 <HAL_GetTick>
 800b3cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3ce:	e008      	b.n	800b3e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3d0:	f7fa f9ca 	bl	8005768 <HAL_GetTick>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d901      	bls.n	800b3e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e03d      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3e2:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <HAL_RCC_OscConfig+0x4cc>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1f0      	bne.n	800b3d0 <HAL_RCC_OscConfig+0x4ac>
 800b3ee:	e035      	b.n	800b45c <HAL_RCC_OscConfig+0x538>
 800b3f0:	40023800 	.word	0x40023800
 800b3f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b3f8:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <HAL_RCC_OscConfig+0x544>)
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d028      	beq.n	800b458 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b410:	429a      	cmp	r2, r3
 800b412:	d121      	bne.n	800b458 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b41e:	429a      	cmp	r2, r3
 800b420:	d11a      	bne.n	800b458 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b428:	4013      	ands	r3, r2
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b42e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b430:	4293      	cmp	r3, r2
 800b432:	d111      	bne.n	800b458 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43e:	085b      	lsrs	r3, r3, #1
 800b440:	3b01      	subs	r3, #1
 800b442:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b444:	429a      	cmp	r2, r3
 800b446:	d107      	bne.n	800b458 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b454:	429a      	cmp	r2, r3
 800b456:	d001      	beq.n	800b45c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	40023800 	.word	0x40023800

0800b46c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e0d0      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b484:	4b6a      	ldr	r3, [pc, #424]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 030f 	and.w	r3, r3, #15
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d910      	bls.n	800b4b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b492:	4b67      	ldr	r3, [pc, #412]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f023 020f 	bic.w	r2, r3, #15
 800b49a:	4965      	ldr	r1, [pc, #404]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a2:	4b63      	ldr	r3, [pc, #396]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d001      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e0b8      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d020      	beq.n	800b502 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0304 	and.w	r3, r3, #4
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4cc:	4b59      	ldr	r3, [pc, #356]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	4a58      	ldr	r2, [pc, #352]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b4d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4e4:	4b53      	ldr	r3, [pc, #332]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	4a52      	ldr	r2, [pc, #328]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b4ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4f0:	4b50      	ldr	r3, [pc, #320]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	494d      	ldr	r1, [pc, #308]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d040      	beq.n	800b590 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d107      	bne.n	800b526 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b516:	4b47      	ldr	r3, [pc, #284]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d115      	bne.n	800b54e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e07f      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d107      	bne.n	800b53e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b52e:	4b41      	ldr	r3, [pc, #260]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e073      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b53e:	4b3d      	ldr	r3, [pc, #244]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e06b      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b54e:	4b39      	ldr	r3, [pc, #228]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f023 0203 	bic.w	r2, r3, #3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	4936      	ldr	r1, [pc, #216]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b560:	f7fa f902 	bl	8005768 <HAL_GetTick>
 800b564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b566:	e00a      	b.n	800b57e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b568:	f7fa f8fe 	bl	8005768 <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	f241 3288 	movw	r2, #5000	; 0x1388
 800b576:	4293      	cmp	r3, r2
 800b578:	d901      	bls.n	800b57e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e053      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b57e:	4b2d      	ldr	r3, [pc, #180]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f003 020c 	and.w	r2, r3, #12
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d1eb      	bne.n	800b568 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b590:	4b27      	ldr	r3, [pc, #156]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 030f 	and.w	r3, r3, #15
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d210      	bcs.n	800b5c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b59e:	4b24      	ldr	r3, [pc, #144]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f023 020f 	bic.w	r2, r3, #15
 800b5a6:	4922      	ldr	r1, [pc, #136]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ae:	4b20      	ldr	r3, [pc, #128]	; (800b630 <HAL_RCC_ClockConfig+0x1c4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 030f 	and.w	r3, r3, #15
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d001      	beq.n	800b5c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e032      	b.n	800b626 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d008      	beq.n	800b5de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5cc:	4b19      	ldr	r3, [pc, #100]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	4916      	ldr	r1, [pc, #88]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0308 	and.w	r3, r3, #8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b5ea:	4b12      	ldr	r3, [pc, #72]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	490e      	ldr	r1, [pc, #56]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b5fe:	f000 f821 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800b602:	4602      	mov	r2, r0
 800b604:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <HAL_RCC_ClockConfig+0x1c8>)
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	091b      	lsrs	r3, r3, #4
 800b60a:	f003 030f 	and.w	r3, r3, #15
 800b60e:	490a      	ldr	r1, [pc, #40]	; (800b638 <HAL_RCC_ClockConfig+0x1cc>)
 800b610:	5ccb      	ldrb	r3, [r1, r3]
 800b612:	fa22 f303 	lsr.w	r3, r2, r3
 800b616:	4a09      	ldr	r2, [pc, #36]	; (800b63c <HAL_RCC_ClockConfig+0x1d0>)
 800b618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b61a:	4b09      	ldr	r3, [pc, #36]	; (800b640 <HAL_RCC_ClockConfig+0x1d4>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7f7 ff74 	bl	800350c <HAL_InitTick>

  return HAL_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	40023c00 	.word	0x40023c00
 800b634:	40023800 	.word	0x40023800
 800b638:	080164c8 	.word	0x080164c8
 800b63c:	20000008 	.word	0x20000008
 800b640:	20000024 	.word	0x20000024

0800b644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b644:	b5b0      	push	{r4, r5, r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b64a:	2100      	movs	r1, #0
 800b64c:	6079      	str	r1, [r7, #4]
 800b64e:	2100      	movs	r1, #0
 800b650:	60f9      	str	r1, [r7, #12]
 800b652:	2100      	movs	r1, #0
 800b654:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b656:	2100      	movs	r1, #0
 800b658:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b65a:	4952      	ldr	r1, [pc, #328]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b65c:	6889      	ldr	r1, [r1, #8]
 800b65e:	f001 010c 	and.w	r1, r1, #12
 800b662:	2908      	cmp	r1, #8
 800b664:	d00d      	beq.n	800b682 <HAL_RCC_GetSysClockFreq+0x3e>
 800b666:	2908      	cmp	r1, #8
 800b668:	f200 8094 	bhi.w	800b794 <HAL_RCC_GetSysClockFreq+0x150>
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d002      	beq.n	800b676 <HAL_RCC_GetSysClockFreq+0x32>
 800b670:	2904      	cmp	r1, #4
 800b672:	d003      	beq.n	800b67c <HAL_RCC_GetSysClockFreq+0x38>
 800b674:	e08e      	b.n	800b794 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b676:	4b4c      	ldr	r3, [pc, #304]	; (800b7a8 <HAL_RCC_GetSysClockFreq+0x164>)
 800b678:	60bb      	str	r3, [r7, #8]
      break;
 800b67a:	e08e      	b.n	800b79a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b67c:	4b4b      	ldr	r3, [pc, #300]	; (800b7ac <HAL_RCC_GetSysClockFreq+0x168>)
 800b67e:	60bb      	str	r3, [r7, #8]
      break;
 800b680:	e08b      	b.n	800b79a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b682:	4948      	ldr	r1, [pc, #288]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b684:	6849      	ldr	r1, [r1, #4]
 800b686:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b68a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b68c:	4945      	ldr	r1, [pc, #276]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b68e:	6849      	ldr	r1, [r1, #4]
 800b690:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b694:	2900      	cmp	r1, #0
 800b696:	d024      	beq.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b698:	4942      	ldr	r1, [pc, #264]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b69a:	6849      	ldr	r1, [r1, #4]
 800b69c:	0989      	lsrs	r1, r1, #6
 800b69e:	4608      	mov	r0, r1
 800b6a0:	f04f 0100 	mov.w	r1, #0
 800b6a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b6a8:	f04f 0500 	mov.w	r5, #0
 800b6ac:	ea00 0204 	and.w	r2, r0, r4
 800b6b0:	ea01 0305 	and.w	r3, r1, r5
 800b6b4:	493d      	ldr	r1, [pc, #244]	; (800b7ac <HAL_RCC_GetSysClockFreq+0x168>)
 800b6b6:	fb01 f003 	mul.w	r0, r1, r3
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	fb01 f102 	mul.w	r1, r1, r2
 800b6c0:	1844      	adds	r4, r0, r1
 800b6c2:	493a      	ldr	r1, [pc, #232]	; (800b7ac <HAL_RCC_GetSysClockFreq+0x168>)
 800b6c4:	fba2 0101 	umull	r0, r1, r2, r1
 800b6c8:	1863      	adds	r3, r4, r1
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f04f 0300 	mov.w	r3, #0
 800b6d4:	f7f5 fa88 	bl	8000be8 <__aeabi_uldivmod>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4613      	mov	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	e04a      	b.n	800b778 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6e2:	4b30      	ldr	r3, [pc, #192]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	099b      	lsrs	r3, r3, #6
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f04f 0300 	mov.w	r3, #0
 800b6ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b6f2:	f04f 0100 	mov.w	r1, #0
 800b6f6:	ea02 0400 	and.w	r4, r2, r0
 800b6fa:	ea03 0501 	and.w	r5, r3, r1
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	f04f 0200 	mov.w	r2, #0
 800b706:	f04f 0300 	mov.w	r3, #0
 800b70a:	014b      	lsls	r3, r1, #5
 800b70c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b710:	0142      	lsls	r2, r0, #5
 800b712:	4610      	mov	r0, r2
 800b714:	4619      	mov	r1, r3
 800b716:	1b00      	subs	r0, r0, r4
 800b718:	eb61 0105 	sbc.w	r1, r1, r5
 800b71c:	f04f 0200 	mov.w	r2, #0
 800b720:	f04f 0300 	mov.w	r3, #0
 800b724:	018b      	lsls	r3, r1, #6
 800b726:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b72a:	0182      	lsls	r2, r0, #6
 800b72c:	1a12      	subs	r2, r2, r0
 800b72e:	eb63 0301 	sbc.w	r3, r3, r1
 800b732:	f04f 0000 	mov.w	r0, #0
 800b736:	f04f 0100 	mov.w	r1, #0
 800b73a:	00d9      	lsls	r1, r3, #3
 800b73c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b740:	00d0      	lsls	r0, r2, #3
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	1912      	adds	r2, r2, r4
 800b748:	eb45 0303 	adc.w	r3, r5, r3
 800b74c:	f04f 0000 	mov.w	r0, #0
 800b750:	f04f 0100 	mov.w	r1, #0
 800b754:	0299      	lsls	r1, r3, #10
 800b756:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b75a:	0290      	lsls	r0, r2, #10
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4610      	mov	r0, r2
 800b762:	4619      	mov	r1, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	461a      	mov	r2, r3
 800b768:	f04f 0300 	mov.w	r3, #0
 800b76c:	f7f5 fa3c 	bl	8000be8 <__aeabi_uldivmod>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4613      	mov	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	0c1b      	lsrs	r3, r3, #16
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	3301      	adds	r3, #1
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b790:	60bb      	str	r3, [r7, #8]
      break;
 800b792:	e002      	b.n	800b79a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b794:	4b04      	ldr	r3, [pc, #16]	; (800b7a8 <HAL_RCC_GetSysClockFreq+0x164>)
 800b796:	60bb      	str	r3, [r7, #8]
      break;
 800b798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b79a:	68bb      	ldr	r3, [r7, #8]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b7a4:	40023800 	.word	0x40023800
 800b7a8:	00f42400 	.word	0x00f42400
 800b7ac:	017d7840 	.word	0x017d7840

0800b7b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7b4:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20000008 	.word	0x20000008

0800b7c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b7cc:	f7ff fff0 	bl	800b7b0 <HAL_RCC_GetHCLKFreq>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	4b05      	ldr	r3, [pc, #20]	; (800b7e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	0a9b      	lsrs	r3, r3, #10
 800b7d8:	f003 0307 	and.w	r3, r3, #7
 800b7dc:	4903      	ldr	r1, [pc, #12]	; (800b7ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7de:	5ccb      	ldrb	r3, [r1, r3]
 800b7e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	40023800 	.word	0x40023800
 800b7ec:	080164d8 	.word	0x080164d8

0800b7f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b7f4:	f7ff ffdc 	bl	800b7b0 <HAL_RCC_GetHCLKFreq>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	4b05      	ldr	r3, [pc, #20]	; (800b810 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	0b5b      	lsrs	r3, r3, #13
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	4903      	ldr	r1, [pc, #12]	; (800b814 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b806:	5ccb      	ldrb	r3, [r1, r3]
 800b808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	40023800 	.word	0x40023800
 800b814:	080164d8 	.word	0x080164d8

0800b818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	220f      	movs	r2, #15
 800b826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b828:	4b12      	ldr	r3, [pc, #72]	; (800b874 <HAL_RCC_GetClockConfig+0x5c>)
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f003 0203 	and.w	r2, r3, #3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b834:	4b0f      	ldr	r3, [pc, #60]	; (800b874 <HAL_RCC_GetClockConfig+0x5c>)
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b840:	4b0c      	ldr	r3, [pc, #48]	; (800b874 <HAL_RCC_GetClockConfig+0x5c>)
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b84c:	4b09      	ldr	r3, [pc, #36]	; (800b874 <HAL_RCC_GetClockConfig+0x5c>)
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	08db      	lsrs	r3, r3, #3
 800b852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b85a:	4b07      	ldr	r3, [pc, #28]	; (800b878 <HAL_RCC_GetClockConfig+0x60>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 020f 	and.w	r2, r3, #15
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	601a      	str	r2, [r3, #0]
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	40023800 	.word	0x40023800
 800b878:	40023c00 	.word	0x40023c00

0800b87c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d012      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b8a4:	4b69      	ldr	r3, [pc, #420]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	4a68      	ldr	r2, [pc, #416]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b8ae:	6093      	str	r3, [r2, #8]
 800b8b0:	4b66      	ldr	r3, [pc, #408]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8b2:	689a      	ldr	r2, [r3, #8]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b8:	4964      	ldr	r1, [pc, #400]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d017      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8d6:	4b5d      	ldr	r3, [pc, #372]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e4:	4959      	ldr	r1, [pc, #356]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8f4:	d101      	bne.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b902:	2301      	movs	r3, #1
 800b904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d017      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b912:	4b4e      	ldr	r3, [pc, #312]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b920:	494a      	ldr	r1, [pc, #296]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b922:	4313      	orrs	r3, r2
 800b924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b930:	d101      	bne.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b932:	2301      	movs	r3, #1
 800b934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b93e:	2301      	movs	r3, #1
 800b940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b94e:	2301      	movs	r3, #1
 800b950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0320 	and.w	r3, r3, #32
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 808b 	beq.w	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b960:	4b3a      	ldr	r3, [pc, #232]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b964:	4a39      	ldr	r2, [pc, #228]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b96a:	6413      	str	r3, [r2, #64]	; 0x40
 800b96c:	4b37      	ldr	r3, [pc, #220]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b974:	60bb      	str	r3, [r7, #8]
 800b976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b978:	4b35      	ldr	r3, [pc, #212]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a34      	ldr	r2, [pc, #208]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b97e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b984:	f7f9 fef0 	bl	8005768 <HAL_GetTick>
 800b988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b98a:	e008      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b98c:	f7f9 feec 	bl	8005768 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	2b64      	cmp	r3, #100	; 0x64
 800b998:	d901      	bls.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e357      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b99e:	4b2c      	ldr	r3, [pc, #176]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f0      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b9aa:	4b28      	ldr	r3, [pc, #160]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d035      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d02e      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b9c8:	4b20      	ldr	r3, [pc, #128]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b9d2:	4b1e      	ldr	r3, [pc, #120]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d6:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b9de:	4b1b      	ldr	r3, [pc, #108]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e2:	4a1a      	ldr	r2, [pc, #104]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b9ea:	4a18      	ldr	r2, [pc, #96]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b9f0:	4b16      	ldr	r3, [pc, #88]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d114      	bne.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9fc:	f7f9 feb4 	bl	8005768 <HAL_GetTick>
 800ba00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba02:	e00a      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba04:	f7f9 feb0 	bl	8005768 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d901      	bls.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e319      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba1a:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0ee      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba32:	d111      	bne.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ba34:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ba42:	400b      	ands	r3, r1
 800ba44:	4901      	ldr	r1, [pc, #4]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	608b      	str	r3, [r1, #8]
 800ba4a:	e00b      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ba4c:	40023800 	.word	0x40023800
 800ba50:	40007000 	.word	0x40007000
 800ba54:	0ffffcff 	.word	0x0ffffcff
 800ba58:	4bb1      	ldr	r3, [pc, #708]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	4ab0      	ldr	r2, [pc, #704]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ba62:	6093      	str	r3, [r2, #8]
 800ba64:	4bae      	ldr	r3, [pc, #696]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba70:	49ab      	ldr	r1, [pc, #684]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0310 	and.w	r3, r3, #16
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d010      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba82:	4ba7      	ldr	r3, [pc, #668]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba88:	4aa5      	ldr	r2, [pc, #660]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ba92:	4ba3      	ldr	r3, [pc, #652]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9c:	49a0      	ldr	r1, [pc, #640]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bab0:	4b9b      	ldr	r3, [pc, #620]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800babe:	4998      	ldr	r1, [pc, #608]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bac0:	4313      	orrs	r3, r2
 800bac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bad2:	4b93      	ldr	r3, [pc, #588]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bae0:	498f      	ldr	r1, [pc, #572]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00a      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800baf4:	4b8a      	ldr	r3, [pc, #552]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800baf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb02:	4987      	ldr	r1, [pc, #540]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb04:	4313      	orrs	r3, r2
 800bb06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb16:	4b82      	ldr	r3, [pc, #520]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb24:	497e      	ldr	r1, [pc, #504]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00a      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb38:	4b79      	ldr	r3, [pc, #484]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb3e:	f023 0203 	bic.w	r2, r3, #3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb46:	4976      	ldr	r1, [pc, #472]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00a      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb5a:	4b71      	ldr	r3, [pc, #452]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb60:	f023 020c 	bic.w	r2, r3, #12
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb68:	496d      	ldr	r1, [pc, #436]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00a      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb7c:	4b68      	ldr	r3, [pc, #416]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb8a:	4965      	ldr	r1, [pc, #404]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bb9e:	4b60      	ldr	r3, [pc, #384]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbac:	495c      	ldr	r1, [pc, #368]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00a      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bbc0:	4b57      	ldr	r3, [pc, #348]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bbc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbce:	4954      	ldr	r1, [pc, #336]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bbe2:	4b4f      	ldr	r3, [pc, #316]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf0:	494b      	ldr	r1, [pc, #300]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00a      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bc04:	4b46      	ldr	r3, [pc, #280]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc12:	4943      	ldr	r1, [pc, #268]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc14:	4313      	orrs	r3, r2
 800bc16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bc26:	4b3e      	ldr	r3, [pc, #248]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc34:	493a      	ldr	r1, [pc, #232]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00a      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc48:	4b35      	ldr	r3, [pc, #212]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc56:	4932      	ldr	r1, [pc, #200]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d011      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bc6a:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc78:	4929      	ldr	r1, [pc, #164]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc88:	d101      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 0308 	and.w	r3, r3, #8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb8:	4919      	ldr	r1, [pc, #100]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bccc:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcdc:	4910      	ldr	r1, [pc, #64]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcde:	4313      	orrs	r3, r2
 800bce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d006      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80d9 	beq.w	800beaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bcf8:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a08      	ldr	r2, [pc, #32]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd04:	f7f9 fd30 	bl	8005768 <HAL_GetTick>
 800bd08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd0a:	e00b      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bd0c:	f7f9 fd2c 	bl	8005768 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	2b64      	cmp	r3, #100	; 0x64
 800bd18:	d904      	bls.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e197      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bd1e:	bf00      	nop
 800bd20:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd24:	4b6c      	ldr	r3, [pc, #432]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1ed      	bne.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d021      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11d      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bd44:	4b64      	ldr	r3, [pc, #400]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd4a:	0c1b      	lsrs	r3, r3, #16
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bd52:	4b61      	ldr	r3, [pc, #388]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd58:	0e1b      	lsrs	r3, r3, #24
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	019a      	lsls	r2, r3, #6
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	041b      	lsls	r3, r3, #16
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	061b      	lsls	r3, r3, #24
 800bd70:	431a      	orrs	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	071b      	lsls	r3, r3, #28
 800bd78:	4957      	ldr	r1, [pc, #348]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd94:	d00a      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d02e      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdaa:	d129      	bne.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bdac:	4b4a      	ldr	r3, [pc, #296]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdb2:	0c1b      	lsrs	r3, r3, #16
 800bdb4:	f003 0303 	and.w	r3, r3, #3
 800bdb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bdba:	4b47      	ldr	r3, [pc, #284]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc0:	0f1b      	lsrs	r3, r3, #28
 800bdc2:	f003 0307 	and.w	r3, r3, #7
 800bdc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	019a      	lsls	r2, r3, #6
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	041b      	lsls	r3, r3, #16
 800bdd2:	431a      	orrs	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	061b      	lsls	r3, r3, #24
 800bdda:	431a      	orrs	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	071b      	lsls	r3, r3, #28
 800bde0:	493d      	ldr	r1, [pc, #244]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bde8:	4b3b      	ldr	r3, [pc, #236]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdee:	f023 021f 	bic.w	r2, r3, #31
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	4937      	ldr	r1, [pc, #220]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01d      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800be0c:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be12:	0e1b      	lsrs	r3, r3, #24
 800be14:	f003 030f 	and.w	r3, r3, #15
 800be18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800be1a:	4b2f      	ldr	r3, [pc, #188]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be20:	0f1b      	lsrs	r3, r3, #28
 800be22:	f003 0307 	and.w	r3, r3, #7
 800be26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	019a      	lsls	r2, r3, #6
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	431a      	orrs	r2, r3
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	061b      	lsls	r3, r3, #24
 800be3a:	431a      	orrs	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	071b      	lsls	r3, r3, #28
 800be40:	4925      	ldr	r1, [pc, #148]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be42:	4313      	orrs	r3, r2
 800be44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d011      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	019a      	lsls	r2, r3, #6
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	041b      	lsls	r3, r3, #16
 800be60:	431a      	orrs	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	061b      	lsls	r3, r3, #24
 800be68:	431a      	orrs	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	071b      	lsls	r3, r3, #28
 800be70:	4919      	ldr	r1, [pc, #100]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be72:	4313      	orrs	r3, r2
 800be74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be78:	4b17      	ldr	r3, [pc, #92]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a16      	ldr	r2, [pc, #88]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800be7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be84:	f7f9 fc70 	bl	8005768 <HAL_GetTick>
 800be88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be8a:	e008      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800be8c:	f7f9 fc6c 	bl	8005768 <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	2b64      	cmp	r3, #100	; 0x64
 800be98:	d901      	bls.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e0d7      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be9e:	4b0e      	ldr	r3, [pc, #56]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d0f0      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	2b01      	cmp	r3, #1
 800beae:	f040 80cd 	bne.w	800c04c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800beb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bebe:	f7f9 fc53 	bl	8005768 <HAL_GetTick>
 800bec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bec4:	e00a      	b.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bec6:	f7f9 fc4f 	bl	8005768 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	2b64      	cmp	r3, #100	; 0x64
 800bed2:	d903      	bls.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e0ba      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bed8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bedc:	4b5e      	ldr	r3, [pc, #376]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bee8:	d0ed      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d009      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d02e      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d12a      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bf12:	4b51      	ldr	r3, [pc, #324]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf18:	0c1b      	lsrs	r3, r3, #16
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf20:	4b4d      	ldr	r3, [pc, #308]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf26:	0f1b      	lsrs	r3, r3, #28
 800bf28:	f003 0307 	and.w	r3, r3, #7
 800bf2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	019a      	lsls	r2, r3, #6
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	041b      	lsls	r3, r3, #16
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	061b      	lsls	r3, r3, #24
 800bf40:	431a      	orrs	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	071b      	lsls	r3, r3, #28
 800bf46:	4944      	ldr	r1, [pc, #272]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bf4e:	4b42      	ldr	r3, [pc, #264]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	021b      	lsls	r3, r3, #8
 800bf60:	493d      	ldr	r1, [pc, #244]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d022      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf7c:	d11d      	bne.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf7e:	4b36      	ldr	r3, [pc, #216]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf84:	0e1b      	lsrs	r3, r3, #24
 800bf86:	f003 030f 	and.w	r3, r3, #15
 800bf8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bf8c:	4b32      	ldr	r3, [pc, #200]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bf8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf92:	0f1b      	lsrs	r3, r3, #28
 800bf94:	f003 0307 	and.w	r3, r3, #7
 800bf98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	019a      	lsls	r2, r3, #6
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a1b      	ldr	r3, [r3, #32]
 800bfa4:	041b      	lsls	r3, r3, #16
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	061b      	lsls	r3, r3, #24
 800bfac:	431a      	orrs	r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	071b      	lsls	r3, r3, #28
 800bfb2:	4929      	ldr	r1, [pc, #164]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f003 0308 	and.w	r3, r3, #8
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d028      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bfc6:	4b24      	ldr	r3, [pc, #144]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfcc:	0e1b      	lsrs	r3, r3, #24
 800bfce:	f003 030f 	and.w	r3, r3, #15
 800bfd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bfd4:	4b20      	ldr	r3, [pc, #128]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	f003 0303 	and.w	r3, r3, #3
 800bfe0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	019a      	lsls	r2, r3, #6
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	041b      	lsls	r3, r3, #16
 800bfec:	431a      	orrs	r2, r3
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	061b      	lsls	r3, r3, #24
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	69db      	ldr	r3, [r3, #28]
 800bff8:	071b      	lsls	r3, r3, #28
 800bffa:	4917      	ldr	r1, [pc, #92]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bffc:	4313      	orrs	r3, r2
 800bffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c002:	4b15      	ldr	r3, [pc, #84]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	4911      	ldr	r1, [pc, #68]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c012:	4313      	orrs	r3, r2
 800c014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c018:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a0e      	ldr	r2, [pc, #56]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c01e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c024:	f7f9 fba0 	bl	8005768 <HAL_GetTick>
 800c028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c02a:	e008      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c02c:	f7f9 fb9c 	bl	8005768 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b64      	cmp	r3, #100	; 0x64
 800c038:	d901      	bls.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e007      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c03e:	4b06      	ldr	r3, [pc, #24]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c04a:	d1ef      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3720      	adds	r7, #32
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	40023800 	.word	0x40023800

0800c05c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c07a:	f040 808c 	bne.w	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c07e:	4b95      	ldr	r3, [pc, #596]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c084:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c08c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c094:	d07c      	beq.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c09c:	d87d      	bhi.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0aa:	d039      	beq.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c0ac:	e075      	b.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c0ae:	4b89      	ldr	r3, [pc, #548]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d108      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c0ba:	4b86      	ldr	r3, [pc, #536]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0c2:	4a85      	ldr	r2, [pc, #532]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c8:	613b      	str	r3, [r7, #16]
 800c0ca:	e007      	b.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c0cc:	4b81      	ldr	r3, [pc, #516]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0d4:	4a81      	ldr	r2, [pc, #516]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0da:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c0dc:	4b7d      	ldr	r3, [pc, #500]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e2:	0e1b      	lsrs	r3, r3, #24
 800c0e4:	f003 030f 	and.w	r3, r3, #15
 800c0e8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c0ea:	4b7a      	ldr	r3, [pc, #488]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f0:	099b      	lsrs	r3, r3, #6
 800c0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	fb02 f203 	mul.w	r2, r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c102:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c104:	4b73      	ldr	r3, [pc, #460]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c10a:	0a1b      	lsrs	r3, r3, #8
 800c10c:	f003 031f 	and.w	r3, r3, #31
 800c110:	3301      	adds	r3, #1
 800c112:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11c:	617b      	str	r3, [r7, #20]
        break;
 800c11e:	e03d      	b.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c120:	4b6c      	ldr	r3, [pc, #432]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d108      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c12c:	4b69      	ldr	r3, [pc, #420]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c134:	4a68      	ldr	r2, [pc, #416]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c136:	fbb2 f3f3 	udiv	r3, r2, r3
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	e007      	b.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c13e:	4b65      	ldr	r3, [pc, #404]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c146:	4a65      	ldr	r2, [pc, #404]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c148:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c14e:	4b61      	ldr	r3, [pc, #388]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c154:	0e1b      	lsrs	r3, r3, #24
 800c156:	f003 030f 	and.w	r3, r3, #15
 800c15a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c15c:	4b5d      	ldr	r3, [pc, #372]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c162:	099b      	lsrs	r3, r3, #6
 800c164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	fb02 f203 	mul.w	r2, r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	fbb2 f3f3 	udiv	r3, r2, r3
 800c174:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c176:	4b57      	ldr	r3, [pc, #348]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c17c:	f003 031f 	and.w	r3, r3, #31
 800c180:	3301      	adds	r3, #1
 800c182:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	fbb2 f3f3 	udiv	r3, r2, r3
 800c18c:	617b      	str	r3, [r7, #20]
        break;
 800c18e:	e005      	b.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c190:	4b53      	ldr	r3, [pc, #332]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c192:	617b      	str	r3, [r7, #20]
        break;
 800c194:	e002      	b.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800c196:	bf00      	nop
 800c198:	e000      	b.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800c19a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1a2:	f040 808c 	bne.w	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c1a6:	4b4b      	ldr	r3, [pc, #300]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c1b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1bc:	d07c      	beq.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1c4:	d87d      	bhi.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d004      	beq.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1d2:	d039      	beq.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c1d4:	e075      	b.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c1d6:	4b3f      	ldr	r3, [pc, #252]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d108      	bne.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c1e2:	4b3c      	ldr	r3, [pc, #240]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1ea:	4a3b      	ldr	r2, [pc, #236]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f0:	613b      	str	r3, [r7, #16]
 800c1f2:	e007      	b.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c1f4:	4b37      	ldr	r3, [pc, #220]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1fc:	4a37      	ldr	r2, [pc, #220]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c202:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c204:	4b33      	ldr	r3, [pc, #204]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c20a:	0e1b      	lsrs	r3, r3, #24
 800c20c:	f003 030f 	and.w	r3, r3, #15
 800c210:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c212:	4b30      	ldr	r3, [pc, #192]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c218:	099b      	lsrs	r3, r3, #6
 800c21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	fb02 f203 	mul.w	r2, r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c22c:	4b29      	ldr	r3, [pc, #164]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	f003 031f 	and.w	r3, r3, #31
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	fbb2 f3f3 	udiv	r3, r2, r3
 800c244:	617b      	str	r3, [r7, #20]
        break;
 800c246:	e03d      	b.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c248:	4b22      	ldr	r3, [pc, #136]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d108      	bne.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c254:	4b1f      	ldr	r3, [pc, #124]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c25c:	4a1e      	ldr	r2, [pc, #120]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	e007      	b.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c266:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c26e:	4a1b      	ldr	r2, [pc, #108]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c270:	fbb2 f3f3 	udiv	r3, r2, r3
 800c274:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c276:	4b17      	ldr	r3, [pc, #92]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c27c:	0e1b      	lsrs	r3, r3, #24
 800c27e:	f003 030f 	and.w	r3, r3, #15
 800c282:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c284:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c28a:	099b      	lsrs	r3, r3, #6
 800c28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	fb02 f203 	mul.w	r2, r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	fbb2 f3f3 	udiv	r3, r2, r3
 800c29c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c29e:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a4:	f003 031f 	and.w	r3, r3, #31
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c2ac:	697a      	ldr	r2, [r7, #20]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2b4:	617b      	str	r3, [r7, #20]
        break;
 800c2b6:	e005      	b.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2b8:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c2ba:	617b      	str	r3, [r7, #20]
        break;
 800c2bc:	e002      	b.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800c2be:	bf00      	nop
 800c2c0:	e000      	b.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800c2c2:	bf00      	nop

  return frequency;
 800c2c4:	697b      	ldr	r3, [r7, #20]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	40023800 	.word	0x40023800
 800c2d8:	00f42400 	.word	0x00f42400
 800c2dc:	017d7840 	.word	0x017d7840
 800c2e0:	00bb8000 	.word	0x00bb8000

0800c2e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e081      	b.n	800c3fa <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7f5b      	ldrb	r3, [r3, #29]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d105      	bne.n	800c30c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7f6 fd58 	bl	8002dbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	22ca      	movs	r2, #202	; 0xca
 800c318:	625a      	str	r2, [r3, #36]	; 0x24
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2253      	movs	r2, #83	; 0x53
 800c320:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fb16 	bl	800c954 <RTC_EnterInitMode>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d008      	beq.n	800c340 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	22ff      	movs	r2, #255	; 0xff
 800c334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2204      	movs	r2, #4
 800c33a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e05c      	b.n	800c3fa <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6899      	ldr	r1, [r3, #8]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b2e      	ldr	r3, [pc, #184]	; (800c404 <HAL_RTC_Init+0x120>)
 800c34c:	400b      	ands	r3, r1
 800c34e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6899      	ldr	r1, [r3, #8]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	431a      	orrs	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	431a      	orrs	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	430a      	orrs	r2, r1
 800c36c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	68d2      	ldr	r2, [r2, #12]
 800c376:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6919      	ldr	r1, [r3, #16]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	041a      	lsls	r2, r3, #16
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68da      	ldr	r2, [r3, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c39a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10e      	bne.n	800c3c8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 faaa 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d008      	beq.n	800c3c8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	22ff      	movs	r2, #255	; 0xff
 800c3bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2204      	movs	r2, #4
 800c3c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e018      	b.n	800c3fa <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f022 0208 	bic.w	r2, r2, #8
 800c3d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	699a      	ldr	r2, [r3, #24]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	22ff      	movs	r2, #255	; 0xff
 800c3f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
  }
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	ff8fffbf 	.word	0xff8fffbf

0800c408 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c408:	b590      	push	{r4, r7, lr}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	7f1b      	ldrb	r3, [r3, #28]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d101      	bne.n	800c424 <HAL_RTC_SetTime+0x1c>
 800c420:	2302      	movs	r3, #2
 800c422:	e0a8      	b.n	800c576 <HAL_RTC_SetTime+0x16e>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2202      	movs	r2, #2
 800c42e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d126      	bne.n	800c484 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c440:	2b00      	cmp	r3, #0
 800c442:	d102      	bne.n	800c44a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2200      	movs	r2, #0
 800c448:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 faac 	bl	800c9ac <RTC_ByteToBcd2>
 800c454:	4603      	mov	r3, r0
 800c456:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	785b      	ldrb	r3, [r3, #1]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 faa5 	bl	800c9ac <RTC_ByteToBcd2>
 800c462:	4603      	mov	r3, r0
 800c464:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c466:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	789b      	ldrb	r3, [r3, #2]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fa9d 	bl	800c9ac <RTC_ByteToBcd2>
 800c472:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c474:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	7b1b      	ldrb	r3, [r3, #12]
 800c47c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c47e:	4313      	orrs	r3, r2
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e018      	b.n	800c4b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2200      	movs	r2, #0
 800c496:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	785b      	ldrb	r3, [r3, #1]
 800c4a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c4a4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c4aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	7b1b      	ldrb	r3, [r3, #12]
 800c4b0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	22ca      	movs	r2, #202	; 0xca
 800c4bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2253      	movs	r2, #83	; 0x53
 800c4c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 fa44 	bl	800c954 <RTC_EnterInitMode>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00b      	beq.n	800c4ea <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	22ff      	movs	r2, #255	; 0xff
 800c4d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2204      	movs	r2, #4
 800c4de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e045      	b.n	800c576 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	6979      	ldr	r1, [r7, #20]
 800c4f0:	4b23      	ldr	r3, [pc, #140]	; (800c580 <HAL_RTC_SetTime+0x178>)
 800c4f2:	400b      	ands	r3, r1
 800c4f4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c504:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6899      	ldr	r1, [r3, #8]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	691a      	ldr	r2, [r3, #16]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	695b      	ldr	r3, [r3, #20]
 800c514:	431a      	orrs	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	430a      	orrs	r2, r1
 800c51c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68da      	ldr	r2, [r3, #12]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c52c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f003 0320 	and.w	r3, r3, #32
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d111      	bne.n	800c560 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 f9e1 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00b      	beq.n	800c560 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	22ff      	movs	r2, #255	; 0xff
 800c54e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2204      	movs	r2, #4
 800c554:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e00a      	b.n	800c576 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	22ff      	movs	r2, #255	; 0xff
 800c566:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2201      	movs	r2, #1
 800c56c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c574:	2300      	movs	r3, #0
  }
}
 800c576:	4618      	mov	r0, r3
 800c578:	371c      	adds	r7, #28
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd90      	pop	{r4, r7, pc}
 800c57e:	bf00      	nop
 800c580:	007f7f7f 	.word	0x007f7f7f

0800c584 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	7f1b      	ldrb	r3, [r3, #28]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d101      	bne.n	800c5a0 <HAL_RTC_SetDate+0x1c>
 800c59c:	2302      	movs	r3, #2
 800c59e:	e092      	b.n	800c6c6 <HAL_RTC_SetDate+0x142>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10e      	bne.n	800c5d0 <HAL_RTC_SetDate+0x4c>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	f003 0310 	and.w	r3, r3, #16
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d008      	beq.n	800c5d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	f023 0310 	bic.w	r3, r3, #16
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	330a      	adds	r3, #10
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d11c      	bne.n	800c610 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	78db      	ldrb	r3, [r3, #3]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 f9e6 	bl	800c9ac <RTC_ByteToBcd2>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	785b      	ldrb	r3, [r3, #1]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f9df 	bl	800c9ac <RTC_ByteToBcd2>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c5f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	789b      	ldrb	r3, [r3, #2]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 f9d7 	bl	800c9ac <RTC_ByteToBcd2>
 800c5fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c600:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c60a:	4313      	orrs	r3, r2
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	e00e      	b.n	800c62e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	78db      	ldrb	r3, [r3, #3]
 800c614:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c61c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800c622:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	22ca      	movs	r2, #202	; 0xca
 800c634:	625a      	str	r2, [r3, #36]	; 0x24
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2253      	movs	r2, #83	; 0x53
 800c63c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 f988 	bl	800c954 <RTC_EnterInitMode>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00b      	beq.n	800c662 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	22ff      	movs	r2, #255	; 0xff
 800c650:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2204      	movs	r2, #4
 800c656:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e031      	b.n	800c6c6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	6979      	ldr	r1, [r7, #20]
 800c668:	4b19      	ldr	r3, [pc, #100]	; (800c6d0 <HAL_RTC_SetDate+0x14c>)
 800c66a:	400b      	ands	r3, r1
 800c66c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68da      	ldr	r2, [r3, #12]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c67c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f003 0320 	and.w	r3, r3, #32
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d111      	bne.n	800c6b0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 f939 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00b      	beq.n	800c6b0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	22ff      	movs	r2, #255	; 0xff
 800c69e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2204      	movs	r2, #4
 800c6a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e00a      	b.n	800c6c6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	22ff      	movs	r2, #255	; 0xff
 800c6b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
  }
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	371c      	adds	r7, #28
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd90      	pop	{r4, r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	00ffff3f 	.word	0x00ffff3f

0800c6d4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c6d4:	b590      	push	{r4, r7, lr}
 800c6d6:	b089      	sub	sp, #36	; 0x24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61fb      	str	r3, [r7, #28]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	7f1b      	ldrb	r3, [r3, #28]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d101      	bne.n	800c6f8 <HAL_RTC_SetAlarm+0x24>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e101      	b.n	800c8fc <HAL_RTC_SetAlarm+0x228>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2202      	movs	r2, #2
 800c702:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d137      	bne.n	800c77a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c714:	2b00      	cmp	r3, #0
 800c716:	d102      	bne.n	800c71e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2200      	movs	r2, #0
 800c71c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	4618      	mov	r0, r3
 800c724:	f000 f942 	bl	800c9ac <RTC_ByteToBcd2>
 800c728:	4603      	mov	r3, r0
 800c72a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	785b      	ldrb	r3, [r3, #1]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 f93b 	bl	800c9ac <RTC_ByteToBcd2>
 800c736:	4603      	mov	r3, r0
 800c738:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800c73a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	789b      	ldrb	r3, [r3, #2]
 800c740:	4618      	mov	r0, r3
 800c742:	f000 f933 	bl	800c9ac <RTC_ByteToBcd2>
 800c746:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c748:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	7b1b      	ldrb	r3, [r3, #12]
 800c750:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c752:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 f925 	bl	800c9ac <RTC_ByteToBcd2>
 800c762:	4603      	mov	r3, r0
 800c764:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c766:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800c76e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800c774:	4313      	orrs	r3, r2
 800c776:	61fb      	str	r3, [r7, #28]
 800c778:	e023      	b.n	800c7c2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2200      	movs	r2, #0
 800c78c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800c79a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800c7a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	7b1b      	ldrb	r3, [r3, #12]
 800c7a6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c7a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c7b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800c7b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	22ca      	movs	r2, #202	; 0xca
 800c7d4:	625a      	str	r2, [r3, #36]	; 0x24
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2253      	movs	r2, #83	; 0x53
 800c7dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7e6:	d13f      	bne.n	800c868 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	689a      	ldr	r2, [r3, #8]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	689a      	ldr	r2, [r3, #8]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c806:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c808:	f7f8 ffae 	bl	8005768 <HAL_GetTick>
 800c80c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800c80e:	e013      	b.n	800c838 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c810:	f7f8 ffaa 	bl	8005768 <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c81e:	d90b      	bls.n	800c838 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	22ff      	movs	r2, #255	; 0xff
 800c826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2203      	movs	r2, #3
 800c82c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e061      	b.n	800c8fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0e4      	beq.n	800c810 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c864:	609a      	str	r2, [r3, #8]
 800c866:	e03e      	b.n	800c8e6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c876:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	689a      	ldr	r2, [r3, #8]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c886:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c888:	f7f8 ff6e 	bl	8005768 <HAL_GetTick>
 800c88c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800c88e:	e013      	b.n	800c8b8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c890:	f7f8 ff6a 	bl	8005768 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c89e:	d90b      	bls.n	800c8b8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	22ff      	movs	r2, #255	; 0xff
 800c8a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2203      	movs	r2, #3
 800c8ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e021      	b.n	800c8fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	f003 0302 	and.w	r3, r3, #2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0e4      	beq.n	800c890 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	22ff      	movs	r2, #255	; 0xff
 800c8ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3724      	adds	r7, #36	; 0x24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd90      	pop	{r4, r7, pc}

0800c904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68da      	ldr	r2, [r3, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c91e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c920:	f7f8 ff22 	bl	8005768 <HAL_GetTick>
 800c924:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c926:	e009      	b.n	800c93c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c928:	f7f8 ff1e 	bl	8005768 <HAL_GetTick>
 800c92c:	4602      	mov	r2, r0
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c936:	d901      	bls.n	800c93c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e007      	b.n	800c94c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f003 0320 	and.w	r3, r3, #32
 800c946:	2b00      	cmp	r3, #0
 800c948:	d0ee      	beq.n	800c928 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d119      	bne.n	800c9a2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c976:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c978:	f7f8 fef6 	bl	8005768 <HAL_GetTick>
 800c97c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c97e:	e009      	b.n	800c994 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c980:	f7f8 fef2 	bl	8005768 <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c98e:	d901      	bls.n	800c994 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	e007      	b.n	800c9a4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0ee      	beq.n	800c980 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800c9ba:	e005      	b.n	800c9c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	3b0a      	subs	r3, #10
 800c9c6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800c9c8:	79fb      	ldrb	r3, [r7, #7]
 800c9ca:	2b09      	cmp	r3, #9
 800c9cc:	d8f6      	bhi.n	800c9bc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	79fb      	ldrb	r3, [r7, #7]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b2db      	uxtb	r3, r3
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	7f1b      	ldrb	r3, [r3, #28]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d101      	bne.n	800ca04 <HAL_RTCEx_SetTimeStamp+0x1c>
 800ca00:	2302      	movs	r3, #2
 800ca02:	e03e      	b.n	800ca82 <HAL_RTCEx_SetTimeStamp+0x9a>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2201      	movs	r2, #1
 800ca08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2202      	movs	r2, #2
 800ca0e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689a      	ldr	r2, [r3, #8]
 800ca16:	4b1e      	ldr	r3, [pc, #120]	; (800ca90 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800ca18:	4013      	ands	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800ca1c:	697a      	ldr	r2, [r7, #20]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	22ca      	movs	r2, #202	; 0xca
 800ca2a:	625a      	str	r2, [r3, #36]	; 0x24
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2253      	movs	r2, #83	; 0x53
 800ca32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0206 	bic.w	r2, r2, #6
 800ca42:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	430a      	orrs	r2, r1
 800ca52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689a      	ldr	r2, [r3, #8]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca6a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	22ff      	movs	r2, #255	; 0xff
 800ca72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	371c      	adds	r7, #28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	fffff7f7 	.word	0xfffff7f7

0800ca94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e156      	b.n	800cd60 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d106      	bne.n	800cacc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7f6 fc26 	bl	8003318 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2202      	movs	r2, #2
 800cad0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 facf 	bl	800d078 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d00c      	beq.n	800cafc <HAL_SAI_Init+0x68>
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d80d      	bhi.n	800cb02 <HAL_SAI_Init+0x6e>
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d002      	beq.n	800caf0 <HAL_SAI_Init+0x5c>
 800caea:	2b01      	cmp	r3, #1
 800caec:	d003      	beq.n	800caf6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800caee:	e008      	b.n	800cb02 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	61fb      	str	r3, [r7, #28]
      break;
 800caf4:	e006      	b.n	800cb04 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800caf6:	2310      	movs	r3, #16
 800caf8:	61fb      	str	r3, [r7, #28]
      break;
 800cafa:	e003      	b.n	800cb04 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cafc:	2320      	movs	r3, #32
 800cafe:	61fb      	str	r3, [r7, #28]
      break;
 800cb00:	e000      	b.n	800cb04 <HAL_SAI_Init+0x70>
      break;
 800cb02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d81e      	bhi.n	800cb4a <HAL_SAI_Init+0xb6>
 800cb0c:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <HAL_SAI_Init+0x80>)
 800cb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb12:	bf00      	nop
 800cb14:	0800cb25 	.word	0x0800cb25
 800cb18:	0800cb2b 	.word	0x0800cb2b
 800cb1c:	0800cb33 	.word	0x0800cb33
 800cb20:	0800cb3b 	.word	0x0800cb3b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	617b      	str	r3, [r7, #20]
    }
    break;
 800cb28:	e010      	b.n	800cb4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800cb2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb2e:	617b      	str	r3, [r7, #20]
    }
    break;
 800cb30:	e00c      	b.n	800cb4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cb32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb36:	617b      	str	r3, [r7, #20]
    }
    break;
 800cb38:	e008      	b.n	800cb4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800cb3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb3e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f043 0301 	orr.w	r3, r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
    }
    break;
 800cb48:	e000      	b.n	800cb4c <HAL_SAI_Init+0xb8>
    default:
      break;
 800cb4a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a85      	ldr	r2, [pc, #532]	; (800cd68 <HAL_SAI_Init+0x2d4>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d004      	beq.n	800cb60 <HAL_SAI_Init+0xcc>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a84      	ldr	r2, [pc, #528]	; (800cd6c <HAL_SAI_Init+0x2d8>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d103      	bne.n	800cb68 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800cb60:	4a83      	ldr	r2, [pc, #524]	; (800cd70 <HAL_SAI_Init+0x2dc>)
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	e002      	b.n	800cb6e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800cb68:	4a82      	ldr	r2, [pc, #520]	; (800cd74 <HAL_SAI_Init+0x2e0>)
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	69db      	ldr	r3, [r3, #28]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d04c      	beq.n	800cc10 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a7a      	ldr	r2, [pc, #488]	; (800cd68 <HAL_SAI_Init+0x2d4>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d004      	beq.n	800cb8e <HAL_SAI_Init+0xfa>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a78      	ldr	r2, [pc, #480]	; (800cd6c <HAL_SAI_Init+0x2d8>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d104      	bne.n	800cb98 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800cb8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cb92:	f7ff fa63 	bl	800c05c <HAL_RCCEx_GetPeriphCLKFreq>
 800cb96:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a76      	ldr	r2, [pc, #472]	; (800cd78 <HAL_SAI_Init+0x2e4>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d004      	beq.n	800cbac <HAL_SAI_Init+0x118>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a75      	ldr	r2, [pc, #468]	; (800cd7c <HAL_SAI_Init+0x2e8>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d104      	bne.n	800cbb6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800cbac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cbb0:	f7ff fa54 	bl	800c05c <HAL_RCCEx_GetPeriphCLKFreq>
 800cbb4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	69db      	ldr	r3, [r3, #28]
 800cbc6:	025b      	lsls	r3, r3, #9
 800cbc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbcc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4a6b      	ldr	r2, [pc, #428]	; (800cd80 <HAL_SAI_Init+0x2ec>)
 800cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd6:	08da      	lsrs	r2, r3, #3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800cbdc:	68f9      	ldr	r1, [r7, #12]
 800cbde:	4b68      	ldr	r3, [pc, #416]	; (800cd80 <HAL_SAI_Init+0x2ec>)
 800cbe0:	fba3 2301 	umull	r2, r3, r3, r1
 800cbe4:	08da      	lsrs	r2, r3, #3
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4413      	add	r3, r2
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	1aca      	subs	r2, r1, r3
 800cbf0:	2a08      	cmp	r2, #8
 800cbf2:	d904      	bls.n	800cbfe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d104      	bne.n	800cc10 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	085a      	lsrs	r2, r3, #1
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d003      	beq.n	800cc20 <HAL_SAI_Init+0x18c>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d109      	bne.n	800cc34 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d101      	bne.n	800cc2c <HAL_SAI_Init+0x198>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e001      	b.n	800cc30 <HAL_SAI_Init+0x19c>
 800cc2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc30:	61bb      	str	r3, [r7, #24]
 800cc32:	e008      	b.n	800cc46 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d102      	bne.n	800cc42 <HAL_SAI_Init+0x1ae>
 800cc3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc40:	e000      	b.n	800cc44 <HAL_SAI_Init+0x1b0>
 800cc42:	2300      	movs	r3, #0
 800cc44:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6819      	ldr	r1, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	4b4c      	ldr	r3, [pc, #304]	; (800cd84 <HAL_SAI_Init+0x2f0>)
 800cc52:	400b      	ands	r3, r1
 800cc54:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6819      	ldr	r1, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc64:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cc6a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc70:	431a      	orrs	r2, r3
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800cc7e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cc8a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a1b      	ldr	r3, [r3, #32]
 800cc90:	051b      	lsls	r3, r3, #20
 800cc92:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6859      	ldr	r1, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	4b38      	ldr	r3, [pc, #224]	; (800cd88 <HAL_SAI_Init+0x2f4>)
 800cca8:	400b      	ands	r3, r1
 800ccaa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6859      	ldr	r1, [r3, #4]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	699a      	ldr	r2, [r3, #24]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc0:	431a      	orrs	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6899      	ldr	r1, [r3, #8]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	4b2d      	ldr	r3, [pc, #180]	; (800cd8c <HAL_SAI_Init+0x2f8>)
 800ccd6:	400b      	ands	r3, r1
 800ccd8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6899      	ldr	r1, [r3, #8]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ccea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ccf0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ccf6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800cd00:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	430a      	orrs	r2, r1
 800cd08:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68d9      	ldr	r1, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	f24f 0320 	movw	r3, #61472	; 0xf020
 800cd18:	400b      	ands	r3, r1
 800cd1a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68d9      	ldr	r1, [r3, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd2a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd30:	041b      	lsls	r3, r3, #16
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	021b      	lsls	r3, r3, #8
 800cd3c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	40015804 	.word	0x40015804
 800cd6c:	40015824 	.word	0x40015824
 800cd70:	40015800 	.word	0x40015800
 800cd74:	40015c00 	.word	0x40015c00
 800cd78:	40015c04 	.word	0x40015c04
 800cd7c:	40015c24 	.word	0x40015c24
 800cd80:	cccccccd 	.word	0xcccccccd
 800cd84:	ff05c010 	.word	0xff05c010
 800cd88:	ffff1ff0 	.word	0xffff1ff0
 800cd8c:	fff88000 	.word	0xfff88000

0800cd90 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800cd9e:	f7f8 fce3 	bl	8005768 <HAL_GetTick>
 800cda2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <HAL_SAI_Transmit_DMA+0x20>
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e093      	b.n	800cedc <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	f040 808c 	bne.w	800ceda <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d101      	bne.n	800cdd0 <HAL_SAI_Transmit_DMA+0x40>
 800cdcc:	2302      	movs	r3, #2
 800cdce:	e085      	b.n	800cedc <HAL_SAI_Transmit_DMA+0x14c>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	88fa      	ldrh	r2, [r7, #6]
 800cde2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	88fa      	ldrh	r2, [r7, #6]
 800cdea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2212      	movs	r2, #18
 800cdfa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce02:	4a38      	ldr	r2, [pc, #224]	; (800cee4 <HAL_SAI_Transmit_DMA+0x154>)
 800ce04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce0a:	4a37      	ldr	r2, [pc, #220]	; (800cee8 <HAL_SAI_Transmit_DMA+0x158>)
 800ce0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce12:	4a36      	ldr	r2, [pc, #216]	; (800ceec <HAL_SAI_Transmit_DMA+0x15c>)
 800ce14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce26:	4619      	mov	r1, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	331c      	adds	r3, #28
 800ce2e:	461a      	mov	r2, r3
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce36:	f7f9 fb45 	bl	80064c4 <HAL_DMA_Start_IT>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d005      	beq.n	800ce4c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e047      	b.n	800cedc <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f000 f8dc 	bl	800d00c <SAI_InterruptFlag>
 800ce54:	4601      	mov	r1, r0
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	691a      	ldr	r2, [r3, #16]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	430a      	orrs	r2, r1
 800ce62:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ce72:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ce74:	e015      	b.n	800cea2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800ce76:	f7f8 fc77 	bl	8005768 <HAL_GetTick>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce84:	d90d      	bls.n	800cea2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e01c      	b.n	800cedc <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0e2      	beq.n	800ce76 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d107      	bne.n	800cece <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cecc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	e000      	b.n	800cedc <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800ceda:	2302      	movs	r3, #2
  }
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	0800d149 	.word	0x0800d149
 800cee8:	0800d0e9 	.word	0x0800d0e9
 800ceec:	0800d1e1 	.word	0x0800d1e1

0800cef0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	4613      	mov	r3, r2
 800cefc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <HAL_SAI_Receive_DMA+0x1a>
 800cf04:	88fb      	ldrh	r3, [r7, #6]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e074      	b.n	800cff8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d16d      	bne.n	800cff6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d101      	bne.n	800cf28 <HAL_SAI_Receive_DMA+0x38>
 800cf24:	2302      	movs	r3, #2
 800cf26:	e067      	b.n	800cff8 <HAL_SAI_Receive_DMA+0x108>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	88fa      	ldrh	r2, [r7, #6]
 800cf3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	88fa      	ldrh	r2, [r7, #6]
 800cf42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2222      	movs	r2, #34	; 0x22
 800cf52:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5a:	4a29      	ldr	r2, [pc, #164]	; (800d000 <HAL_SAI_Receive_DMA+0x110>)
 800cf5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf62:	4a28      	ldr	r2, [pc, #160]	; (800d004 <HAL_SAI_Receive_DMA+0x114>)
 800cf64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6a:	4a27      	ldr	r2, [pc, #156]	; (800d008 <HAL_SAI_Receive_DMA+0x118>)
 800cf6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf72:	2200      	movs	r2, #0
 800cf74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	331c      	adds	r3, #28
 800cf80:	4619      	mov	r1, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf86:	461a      	mov	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cf8e:	f7f9 fa99 	bl	80064c4 <HAL_DMA_Start_IT>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d005      	beq.n	800cfa4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e029      	b.n	800cff8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 f830 	bl	800d00c <SAI_InterruptFlag>
 800cfac:	4601      	mov	r1, r0
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	691a      	ldr	r2, [r3, #16]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	430a      	orrs	r2, r1
 800cfba:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cfca:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d107      	bne.n	800cfea <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cfe8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	e000      	b.n	800cff8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800cff6:	2302      	movs	r3, #2
  }
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	0800d1c5 	.word	0x0800d1c5
 800d004:	0800d165 	.word	0x0800d165
 800d008:	0800d1e1 	.word	0x0800d1e1

0800d00c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d016:	2301      	movs	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d103      	bne.n	800d028 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f043 0308 	orr.w	r3, r3, #8
 800d026:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d10b      	bne.n	800d048 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d034:	2b03      	cmp	r3, #3
 800d036:	d003      	beq.n	800d040 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d103      	bne.n	800d048 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f043 0310 	orr.w	r3, r3, #16
 800d046:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	2b03      	cmp	r3, #3
 800d04e:	d003      	beq.n	800d058 <SAI_InterruptFlag+0x4c>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d104      	bne.n	800d062 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e003      	b.n	800d06a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f043 0304 	orr.w	r3, r3, #4
 800d068:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d06a:	68fb      	ldr	r3, [r7, #12]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3714      	adds	r7, #20
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d080:	4b17      	ldr	r3, [pc, #92]	; (800d0e0 <SAI_Disable+0x68>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a17      	ldr	r2, [pc, #92]	; (800d0e4 <SAI_Disable+0x6c>)
 800d086:	fba2 2303 	umull	r2, r3, r2, r3
 800d08a:	0b1b      	lsrs	r3, r3, #12
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d0a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	1e5a      	subs	r2, r3, #1
 800d0a8:	60fa      	str	r2, [r7, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10a      	bne.n	800d0c4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d0be:	2303      	movs	r3, #3
 800d0c0:	72fb      	strb	r3, [r7, #11]
      break;
 800d0c2:	e006      	b.n	800d0d2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1e8      	bne.n	800d0a4 <SAI_Disable+0x2c>

  return status;
 800d0d2:	7afb      	ldrb	r3, [r7, #11]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20000008 	.word	0x20000008
 800d0e4:	95cbec1b 	.word	0x95cbec1b

0800d0e8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0fe:	d01c      	beq.n	800d13a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d116:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d118:	2100      	movs	r1, #0
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f7ff ff76 	bl	800d00c <SAI_InterruptFlag>
 800d120:	4603      	mov	r3, r0
 800d122:	43d9      	mvns	r1, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	400a      	ands	r2, r1
 800d130:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7f7 f9c2 	bl	80044c4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d140:	bf00      	nop
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f7f7 f9be 	bl	80044d8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d15c:	bf00      	nop
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d170:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d17a:	d01c      	beq.n	800d1b6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d18a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d194:	2100      	movs	r1, #0
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7ff ff38 	bl	800d00c <SAI_InterruptFlag>
 800d19c:	4603      	mov	r3, r0
 800d19e:	43d9      	mvns	r1, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	691a      	ldr	r2, [r3, #16]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	400a      	ands	r2, r1
 800d1ac:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7f4 f916 	bl	80013e8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d1bc:	bf00      	nop
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7f4 f918 	bl	8001408 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d1d8:	bf00      	nop
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ec:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d204:	2b01      	cmp	r3, #1
 800d206:	d004      	beq.n	800d212 <SAI_DMAError+0x32>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d112      	bne.n	800d238 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d220:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f7ff ff28 	bl	800d078 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7f7 f957 	bl	80044ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d246:	b580      	push	{r7, lr}
 800d248:	b082      	sub	sp, #8
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d101      	bne.n	800d25a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e025      	b.n	800d2a6 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d260:	b2db      	uxtb	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7f6 f848 	bl	8003304 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3304      	adds	r3, #4
 800d284:	4619      	mov	r1, r3
 800d286:	4610      	mov	r0, r2
 800d288:	f001 fb8c 	bl	800e9a4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	461a      	mov	r2, r3
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	f001 fbf6 	bl	800ea88 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d101      	bne.n	800d2ca <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	e018      	b.n	800d2fc <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2202      	movs	r2, #2
 800d2ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f001 fc54 	bl	800eb88 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d104      	bne.n	800d2f2 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2205      	movs	r2, #5
 800d2ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d2f0:	e003      	b.n	800d2fa <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b02      	cmp	r3, #2
 800d318:	d101      	bne.n	800d31e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d31a:	2302      	movs	r3, #2
 800d31c:	e00e      	b.n	800d33c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2202      	movs	r2, #2
 800d322:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f001 fc4f 	bl	800ebd0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2201      	movs	r2, #1
 800d336:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	e049      	b.n	800d3ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d106      	bne.n	800d370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7f5 fd40 	bl	8002df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2202      	movs	r2, #2
 800d374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	3304      	adds	r3, #4
 800d380:	4619      	mov	r1, r3
 800d382:	4610      	mov	r0, r2
 800d384:	f000 fb5c 	bl	800da40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
	...

0800d3f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b01      	cmp	r3, #1
 800d406:	d001      	beq.n	800d40c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	e054      	b.n	800d4b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2202      	movs	r2, #2
 800d410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68da      	ldr	r2, [r3, #12]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f042 0201 	orr.w	r2, r2, #1
 800d422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a26      	ldr	r2, [pc, #152]	; (800d4c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d022      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d436:	d01d      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a22      	ldr	r2, [pc, #136]	; (800d4c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d018      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a21      	ldr	r2, [pc, #132]	; (800d4cc <HAL_TIM_Base_Start_IT+0xd8>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d013      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a1f      	ldr	r2, [pc, #124]	; (800d4d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d00e      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a1e      	ldr	r2, [pc, #120]	; (800d4d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d009      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a1c      	ldr	r2, [pc, #112]	; (800d4d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d004      	beq.n	800d474 <HAL_TIM_Base_Start_IT+0x80>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a1b      	ldr	r2, [pc, #108]	; (800d4dc <HAL_TIM_Base_Start_IT+0xe8>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d115      	bne.n	800d4a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	689a      	ldr	r2, [r3, #8]
 800d47a:	4b19      	ldr	r3, [pc, #100]	; (800d4e0 <HAL_TIM_Base_Start_IT+0xec>)
 800d47c:	4013      	ands	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2b06      	cmp	r3, #6
 800d484:	d015      	beq.n	800d4b2 <HAL_TIM_Base_Start_IT+0xbe>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d48c:	d011      	beq.n	800d4b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f042 0201 	orr.w	r2, r2, #1
 800d49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d49e:	e008      	b.n	800d4b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f042 0201 	orr.w	r2, r2, #1
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	e000      	b.n	800d4b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	40010000 	.word	0x40010000
 800d4c8:	40000400 	.word	0x40000400
 800d4cc:	40000800 	.word	0x40000800
 800d4d0:	40000c00 	.word	0x40000c00
 800d4d4:	40010400 	.word	0x40010400
 800d4d8:	40014000 	.word	0x40014000
 800d4dc:	40001800 	.word	0x40001800
 800d4e0:	00010007 	.word	0x00010007

0800d4e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e049      	b.n	800d58a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7f5 fcde 	bl	8002ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3304      	adds	r3, #4
 800d520:	4619      	mov	r1, r3
 800d522:	4610      	mov	r0, r2
 800d524:	f000 fa8c 	bl	800da40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b082      	sub	sp, #8
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0302 	and.w	r3, r3, #2
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d122      	bne.n	800d5ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	f003 0302 	and.w	r3, r3, #2
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d11b      	bne.n	800d5ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f06f 0202 	mvn.w	r2, #2
 800d5be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fa15 	bl	800da04 <HAL_TIM_IC_CaptureCallback>
 800d5da:	e005      	b.n	800d5e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fa07 	bl	800d9f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fa18 	bl	800da18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	f003 0304 	and.w	r3, r3, #4
 800d5f8:	2b04      	cmp	r3, #4
 800d5fa:	d122      	bne.n	800d642 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	f003 0304 	and.w	r3, r3, #4
 800d606:	2b04      	cmp	r3, #4
 800d608:	d11b      	bne.n	800d642 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f06f 0204 	mvn.w	r2, #4
 800d612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2202      	movs	r2, #2
 800d618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f9eb 	bl	800da04 <HAL_TIM_IC_CaptureCallback>
 800d62e:	e005      	b.n	800d63c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f9dd 	bl	800d9f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f9ee 	bl	800da18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	f003 0308 	and.w	r3, r3, #8
 800d64c:	2b08      	cmp	r3, #8
 800d64e:	d122      	bne.n	800d696 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f003 0308 	and.w	r3, r3, #8
 800d65a:	2b08      	cmp	r3, #8
 800d65c:	d11b      	bne.n	800d696 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f06f 0208 	mvn.w	r2, #8
 800d666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2204      	movs	r2, #4
 800d66c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	f003 0303 	and.w	r3, r3, #3
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f9c1 	bl	800da04 <HAL_TIM_IC_CaptureCallback>
 800d682:	e005      	b.n	800d690 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f9b3 	bl	800d9f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f9c4 	bl	800da18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	f003 0310 	and.w	r3, r3, #16
 800d6a0:	2b10      	cmp	r3, #16
 800d6a2:	d122      	bne.n	800d6ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f003 0310 	and.w	r3, r3, #16
 800d6ae:	2b10      	cmp	r3, #16
 800d6b0:	d11b      	bne.n	800d6ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f06f 0210 	mvn.w	r2, #16
 800d6ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2208      	movs	r2, #8
 800d6c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f997 	bl	800da04 <HAL_TIM_IC_CaptureCallback>
 800d6d6:	e005      	b.n	800d6e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f989 	bl	800d9f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f99a 	bl	800da18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d10e      	bne.n	800d716 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	2b01      	cmp	r3, #1
 800d704:	d107      	bne.n	800d716 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f06f 0201 	mvn.w	r2, #1
 800d70e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7f4 ff6b 	bl	80025ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d720:	2b80      	cmp	r3, #128	; 0x80
 800d722:	d10e      	bne.n	800d742 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d72e:	2b80      	cmp	r3, #128	; 0x80
 800d730:	d107      	bne.n	800d742 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d73a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fc87 	bl	800e050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d74c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d750:	d10e      	bne.n	800d770 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d75c:	2b80      	cmp	r3, #128	; 0x80
 800d75e:	d107      	bne.n	800d770 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fc7a 	bl	800e064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77a:	2b40      	cmp	r3, #64	; 0x40
 800d77c:	d10e      	bne.n	800d79c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d788:	2b40      	cmp	r3, #64	; 0x40
 800d78a:	d107      	bne.n	800d79c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f948 	bl	800da2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d10e      	bne.n	800d7c8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b20      	cmp	r3, #32
 800d7b6:	d107      	bne.n	800d7c8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f06f 0220 	mvn.w	r2, #32
 800d7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fc3a 	bl	800e03c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7c8:	bf00      	nop
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d101      	bne.n	800d7ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	e0fd      	b.n	800d9e6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2b14      	cmp	r3, #20
 800d7f6:	f200 80f0 	bhi.w	800d9da <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d7fa:	a201      	add	r2, pc, #4	; (adr r2, 800d800 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d800:	0800d855 	.word	0x0800d855
 800d804:	0800d9db 	.word	0x0800d9db
 800d808:	0800d9db 	.word	0x0800d9db
 800d80c:	0800d9db 	.word	0x0800d9db
 800d810:	0800d895 	.word	0x0800d895
 800d814:	0800d9db 	.word	0x0800d9db
 800d818:	0800d9db 	.word	0x0800d9db
 800d81c:	0800d9db 	.word	0x0800d9db
 800d820:	0800d8d7 	.word	0x0800d8d7
 800d824:	0800d9db 	.word	0x0800d9db
 800d828:	0800d9db 	.word	0x0800d9db
 800d82c:	0800d9db 	.word	0x0800d9db
 800d830:	0800d917 	.word	0x0800d917
 800d834:	0800d9db 	.word	0x0800d9db
 800d838:	0800d9db 	.word	0x0800d9db
 800d83c:	0800d9db 	.word	0x0800d9db
 800d840:	0800d959 	.word	0x0800d959
 800d844:	0800d9db 	.word	0x0800d9db
 800d848:	0800d9db 	.word	0x0800d9db
 800d84c:	0800d9db 	.word	0x0800d9db
 800d850:	0800d999 	.word	0x0800d999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68b9      	ldr	r1, [r7, #8]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f990 	bl	800db80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	699a      	ldr	r2, [r3, #24]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f042 0208 	orr.w	r2, r2, #8
 800d86e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	699a      	ldr	r2, [r3, #24]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f022 0204 	bic.w	r2, r2, #4
 800d87e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6999      	ldr	r1, [r3, #24]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	691a      	ldr	r2, [r3, #16]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	430a      	orrs	r2, r1
 800d890:	619a      	str	r2, [r3, #24]
      break;
 800d892:	e0a3      	b.n	800d9dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68b9      	ldr	r1, [r7, #8]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f9e2 	bl	800dc64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699a      	ldr	r2, [r3, #24]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	699a      	ldr	r2, [r3, #24]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	6999      	ldr	r1, [r3, #24]
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	021a      	lsls	r2, r3, #8
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	619a      	str	r2, [r3, #24]
      break;
 800d8d4:	e082      	b.n	800d9dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 fa39 	bl	800dd54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	69da      	ldr	r2, [r3, #28]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f042 0208 	orr.w	r2, r2, #8
 800d8f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	69da      	ldr	r2, [r3, #28]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f022 0204 	bic.w	r2, r2, #4
 800d900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	69d9      	ldr	r1, [r3, #28]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	691a      	ldr	r2, [r3, #16]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	430a      	orrs	r2, r1
 800d912:	61da      	str	r2, [r3, #28]
      break;
 800d914:	e062      	b.n	800d9dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68b9      	ldr	r1, [r7, #8]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fa8f 	bl	800de40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	69da      	ldr	r2, [r3, #28]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	69da      	ldr	r2, [r3, #28]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	69d9      	ldr	r1, [r3, #28]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	021a      	lsls	r2, r3, #8
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	430a      	orrs	r2, r1
 800d954:	61da      	str	r2, [r3, #28]
      break;
 800d956:	e041      	b.n	800d9dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68b9      	ldr	r1, [r7, #8]
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 fac6 	bl	800def0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f042 0208 	orr.w	r2, r2, #8
 800d972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f022 0204 	bic.w	r2, r2, #4
 800d982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	691a      	ldr	r2, [r3, #16]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	430a      	orrs	r2, r1
 800d994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d996:	e021      	b.n	800d9dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68b9      	ldr	r1, [r7, #8]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 faf8 	bl	800df94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	021a      	lsls	r2, r3, #8
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	430a      	orrs	r2, r1
 800d9d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9d8:	e000      	b.n	800d9dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d9da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop

0800d9f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9f8:	bf00      	nop
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4a40      	ldr	r2, [pc, #256]	; (800db54 <TIM_Base_SetConfig+0x114>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d013      	beq.n	800da80 <TIM_Base_SetConfig+0x40>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da5e:	d00f      	beq.n	800da80 <TIM_Base_SetConfig+0x40>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a3d      	ldr	r2, [pc, #244]	; (800db58 <TIM_Base_SetConfig+0x118>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d00b      	beq.n	800da80 <TIM_Base_SetConfig+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	4a3c      	ldr	r2, [pc, #240]	; (800db5c <TIM_Base_SetConfig+0x11c>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d007      	beq.n	800da80 <TIM_Base_SetConfig+0x40>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a3b      	ldr	r2, [pc, #236]	; (800db60 <TIM_Base_SetConfig+0x120>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d003      	beq.n	800da80 <TIM_Base_SetConfig+0x40>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a3a      	ldr	r2, [pc, #232]	; (800db64 <TIM_Base_SetConfig+0x124>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d108      	bne.n	800da92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	4313      	orrs	r3, r2
 800da90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a2f      	ldr	r2, [pc, #188]	; (800db54 <TIM_Base_SetConfig+0x114>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d02b      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daa0:	d027      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a2c      	ldr	r2, [pc, #176]	; (800db58 <TIM_Base_SetConfig+0x118>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d023      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a2b      	ldr	r2, [pc, #172]	; (800db5c <TIM_Base_SetConfig+0x11c>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d01f      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a2a      	ldr	r2, [pc, #168]	; (800db60 <TIM_Base_SetConfig+0x120>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d01b      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a29      	ldr	r2, [pc, #164]	; (800db64 <TIM_Base_SetConfig+0x124>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d017      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a28      	ldr	r2, [pc, #160]	; (800db68 <TIM_Base_SetConfig+0x128>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d013      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a27      	ldr	r2, [pc, #156]	; (800db6c <TIM_Base_SetConfig+0x12c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d00f      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a26      	ldr	r2, [pc, #152]	; (800db70 <TIM_Base_SetConfig+0x130>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d00b      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a25      	ldr	r2, [pc, #148]	; (800db74 <TIM_Base_SetConfig+0x134>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d007      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a24      	ldr	r2, [pc, #144]	; (800db78 <TIM_Base_SetConfig+0x138>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d003      	beq.n	800daf2 <TIM_Base_SetConfig+0xb2>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4a23      	ldr	r2, [pc, #140]	; (800db7c <TIM_Base_SetConfig+0x13c>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d108      	bne.n	800db04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	4313      	orrs	r3, r2
 800db02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	4313      	orrs	r3, r2
 800db10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	689a      	ldr	r2, [r3, #8]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a0a      	ldr	r2, [pc, #40]	; (800db54 <TIM_Base_SetConfig+0x114>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d003      	beq.n	800db38 <TIM_Base_SetConfig+0xf8>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a0c      	ldr	r2, [pc, #48]	; (800db64 <TIM_Base_SetConfig+0x124>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d103      	bne.n	800db40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	691a      	ldr	r2, [r3, #16]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	615a      	str	r2, [r3, #20]
}
 800db46:	bf00      	nop
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	40010000 	.word	0x40010000
 800db58:	40000400 	.word	0x40000400
 800db5c:	40000800 	.word	0x40000800
 800db60:	40000c00 	.word	0x40000c00
 800db64:	40010400 	.word	0x40010400
 800db68:	40014000 	.word	0x40014000
 800db6c:	40014400 	.word	0x40014400
 800db70:	40014800 	.word	0x40014800
 800db74:	40001800 	.word	0x40001800
 800db78:	40001c00 	.word	0x40001c00
 800db7c:	40002000 	.word	0x40002000

0800db80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db80:	b480      	push	{r7}
 800db82:	b087      	sub	sp, #28
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	f023 0201 	bic.w	r2, r3, #1
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	4b2b      	ldr	r3, [pc, #172]	; (800dc58 <TIM_OC1_SetConfig+0xd8>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f023 0303 	bic.w	r3, r3, #3
 800dbb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	f023 0302 	bic.w	r3, r3, #2
 800dbc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a21      	ldr	r2, [pc, #132]	; (800dc5c <TIM_OC1_SetConfig+0xdc>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d003      	beq.n	800dbe4 <TIM_OC1_SetConfig+0x64>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a20      	ldr	r2, [pc, #128]	; (800dc60 <TIM_OC1_SetConfig+0xe0>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d10c      	bne.n	800dbfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f023 0308 	bic.w	r3, r3, #8
 800dbea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	697a      	ldr	r2, [r7, #20]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f023 0304 	bic.w	r3, r3, #4
 800dbfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a16      	ldr	r2, [pc, #88]	; (800dc5c <TIM_OC1_SetConfig+0xdc>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d003      	beq.n	800dc0e <TIM_OC1_SetConfig+0x8e>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a15      	ldr	r2, [pc, #84]	; (800dc60 <TIM_OC1_SetConfig+0xe0>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d111      	bne.n	800dc32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	693a      	ldr	r2, [r7, #16]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	693a      	ldr	r2, [r7, #16]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	693a      	ldr	r2, [r7, #16]
 800dc36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	621a      	str	r2, [r3, #32]
}
 800dc4c:	bf00      	nop
 800dc4e:	371c      	adds	r7, #28
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	fffeff8f 	.word	0xfffeff8f
 800dc5c:	40010000 	.word	0x40010000
 800dc60:	40010400 	.word	0x40010400

0800dc64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b087      	sub	sp, #28
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a1b      	ldr	r3, [r3, #32]
 800dc72:	f023 0210 	bic.w	r2, r3, #16
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	4b2e      	ldr	r3, [pc, #184]	; (800dd48 <TIM_OC2_SetConfig+0xe4>)
 800dc90:	4013      	ands	r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	021b      	lsls	r3, r3, #8
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	f023 0320 	bic.w	r3, r3, #32
 800dcae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	011b      	lsls	r3, r3, #4
 800dcb6:	697a      	ldr	r2, [r7, #20]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	4a23      	ldr	r2, [pc, #140]	; (800dd4c <TIM_OC2_SetConfig+0xe8>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d003      	beq.n	800dccc <TIM_OC2_SetConfig+0x68>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a22      	ldr	r2, [pc, #136]	; (800dd50 <TIM_OC2_SetConfig+0xec>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d10d      	bne.n	800dce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	011b      	lsls	r3, r3, #4
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a18      	ldr	r2, [pc, #96]	; (800dd4c <TIM_OC2_SetConfig+0xe8>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d003      	beq.n	800dcf8 <TIM_OC2_SetConfig+0x94>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a17      	ldr	r2, [pc, #92]	; (800dd50 <TIM_OC2_SetConfig+0xec>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d113      	bne.n	800dd20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	693a      	ldr	r2, [r7, #16]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	621a      	str	r2, [r3, #32]
}
 800dd3a:	bf00      	nop
 800dd3c:	371c      	adds	r7, #28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	feff8fff 	.word	0xfeff8fff
 800dd4c:	40010000 	.word	0x40010000
 800dd50:	40010400 	.word	0x40010400

0800dd54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b087      	sub	sp, #28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a1b      	ldr	r3, [r3, #32]
 800dd6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4b2d      	ldr	r3, [pc, #180]	; (800de34 <TIM_OC3_SetConfig+0xe0>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f023 0303 	bic.w	r3, r3, #3
 800dd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dd9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	021b      	lsls	r3, r3, #8
 800dda4:	697a      	ldr	r2, [r7, #20]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a22      	ldr	r2, [pc, #136]	; (800de38 <TIM_OC3_SetConfig+0xe4>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d003      	beq.n	800ddba <TIM_OC3_SetConfig+0x66>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a21      	ldr	r2, [pc, #132]	; (800de3c <TIM_OC3_SetConfig+0xe8>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d10d      	bne.n	800ddd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	021b      	lsls	r3, r3, #8
 800ddc8:	697a      	ldr	r2, [r7, #20]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ddd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4a17      	ldr	r2, [pc, #92]	; (800de38 <TIM_OC3_SetConfig+0xe4>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d003      	beq.n	800dde6 <TIM_OC3_SetConfig+0x92>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4a16      	ldr	r2, [pc, #88]	; (800de3c <TIM_OC3_SetConfig+0xe8>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d113      	bne.n	800de0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ddf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	011b      	lsls	r3, r3, #4
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	699b      	ldr	r3, [r3, #24]
 800de06:	011b      	lsls	r3, r3, #4
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	621a      	str	r2, [r3, #32]
}
 800de28:	bf00      	nop
 800de2a:	371c      	adds	r7, #28
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr
 800de34:	fffeff8f 	.word	0xfffeff8f
 800de38:	40010000 	.word	0x40010000
 800de3c:	40010400 	.word	0x40010400

0800de40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de40:	b480      	push	{r7}
 800de42:	b087      	sub	sp, #28
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a1b      	ldr	r3, [r3, #32]
 800de5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	69db      	ldr	r3, [r3, #28]
 800de66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4b1e      	ldr	r3, [pc, #120]	; (800dee4 <TIM_OC4_SetConfig+0xa4>)
 800de6c:	4013      	ands	r3, r2
 800de6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	021b      	lsls	r3, r3, #8
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4313      	orrs	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	031b      	lsls	r3, r3, #12
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	4313      	orrs	r3, r2
 800de96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	4a13      	ldr	r2, [pc, #76]	; (800dee8 <TIM_OC4_SetConfig+0xa8>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d003      	beq.n	800dea8 <TIM_OC4_SetConfig+0x68>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a12      	ldr	r2, [pc, #72]	; (800deec <TIM_OC4_SetConfig+0xac>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d109      	bne.n	800debc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800deae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	695b      	ldr	r3, [r3, #20]
 800deb4:	019b      	lsls	r3, r3, #6
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	4313      	orrs	r3, r2
 800deba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	693a      	ldr	r2, [r7, #16]
 800ded4:	621a      	str	r2, [r3, #32]
}
 800ded6:	bf00      	nop
 800ded8:	371c      	adds	r7, #28
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	feff8fff 	.word	0xfeff8fff
 800dee8:	40010000 	.word	0x40010000
 800deec:	40010400 	.word	0x40010400

0800def0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800def0:	b480      	push	{r7}
 800def2:	b087      	sub	sp, #28
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a1b      	ldr	r3, [r3, #32]
 800defe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <TIM_OC5_SetConfig+0x98>)
 800df1c:	4013      	ands	r3, r2
 800df1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	4313      	orrs	r3, r2
 800df28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800df30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	041b      	lsls	r3, r3, #16
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a12      	ldr	r2, [pc, #72]	; (800df8c <TIM_OC5_SetConfig+0x9c>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d003      	beq.n	800df4e <TIM_OC5_SetConfig+0x5e>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a11      	ldr	r2, [pc, #68]	; (800df90 <TIM_OC5_SetConfig+0xa0>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d109      	bne.n	800df62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	021b      	lsls	r3, r3, #8
 800df5c:	697a      	ldr	r2, [r7, #20]
 800df5e:	4313      	orrs	r3, r2
 800df60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	697a      	ldr	r2, [r7, #20]
 800df66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	685a      	ldr	r2, [r3, #4]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	621a      	str	r2, [r3, #32]
}
 800df7c:	bf00      	nop
 800df7e:	371c      	adds	r7, #28
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr
 800df88:	fffeff8f 	.word	0xfffeff8f
 800df8c:	40010000 	.word	0x40010000
 800df90:	40010400 	.word	0x40010400

0800df94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800df94:	b480      	push	{r7}
 800df96:	b087      	sub	sp, #28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	4b1c      	ldr	r3, [pc, #112]	; (800e030 <TIM_OC6_SetConfig+0x9c>)
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	021b      	lsls	r3, r3, #8
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dfd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	051b      	lsls	r3, r3, #20
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a13      	ldr	r2, [pc, #76]	; (800e034 <TIM_OC6_SetConfig+0xa0>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d003      	beq.n	800dff4 <TIM_OC6_SetConfig+0x60>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a12      	ldr	r2, [pc, #72]	; (800e038 <TIM_OC6_SetConfig+0xa4>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d109      	bne.n	800e008 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	695b      	ldr	r3, [r3, #20]
 800e000:	029b      	lsls	r3, r3, #10
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	4313      	orrs	r3, r2
 800e006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	621a      	str	r2, [r3, #32]
}
 800e022:	bf00      	nop
 800e024:	371c      	adds	r7, #28
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	feff8fff 	.word	0xfeff8fff
 800e034:	40010000 	.word	0x40010000
 800e038:	40010400 	.word	0x40010400

0800e03c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e044:	bf00      	nop
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e040      	b.n	800e10c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d106      	bne.n	800e0a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7f5 f804 	bl	80030a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2224      	movs	r2, #36	; 0x24
 800e0a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f022 0201 	bic.w	r2, r2, #1
 800e0b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f8c0 	bl	800e23c <UART_SetConfig>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d101      	bne.n	800e0c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e022      	b.n	800e10c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fb16 	bl	800e700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	689a      	ldr	r2, [r3, #8]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f042 0201 	orr.w	r2, r2, #1
 800e102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fb9d 	bl	800e844 <UART_CheckIdleState>
 800e10a:	4603      	mov	r3, r0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	; 0x28
 800e118:	af02      	add	r7, sp, #8
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	4613      	mov	r3, r2
 800e122:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e128:	2b20      	cmp	r3, #32
 800e12a:	f040 8081 	bne.w	800e230 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <HAL_UART_Transmit+0x26>
 800e134:	88fb      	ldrh	r3, [r7, #6]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e079      	b.n	800e232 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e144:	2b01      	cmp	r3, #1
 800e146:	d101      	bne.n	800e14c <HAL_UART_Transmit+0x38>
 800e148:	2302      	movs	r3, #2
 800e14a:	e072      	b.n	800e232 <HAL_UART_Transmit+0x11e>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2221      	movs	r2, #33	; 0x21
 800e160:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e162:	f7f7 fb01 	bl	8005768 <HAL_GetTick>
 800e166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	88fa      	ldrh	r2, [r7, #6]
 800e16c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	88fa      	ldrh	r2, [r7, #6]
 800e174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e180:	d108      	bne.n	800e194 <HAL_UART_Transmit+0x80>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d104      	bne.n	800e194 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	e003      	b.n	800e19c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e198:	2300      	movs	r3, #0
 800e19a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800e1a4:	e02c      	b.n	800e200 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	2180      	movs	r1, #128	; 0x80
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f000 fb7a 	bl	800e8aa <UART_WaitOnFlagUntilTimeout>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d001      	beq.n	800e1c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e038      	b.n	800e232 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10b      	bne.n	800e1de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	3302      	adds	r3, #2
 800e1da:	61bb      	str	r3, [r7, #24]
 800e1dc:	e007      	b.n	800e1ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	781a      	ldrb	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e206:	b29b      	uxth	r3, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1cc      	bne.n	800e1a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2200      	movs	r2, #0
 800e214:	2140      	movs	r1, #64	; 0x40
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f000 fb47 	bl	800e8aa <UART_WaitOnFlagUntilTimeout>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800e222:	2303      	movs	r3, #3
 800e224:	e005      	b.n	800e232 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2220      	movs	r2, #32
 800e22a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	e000      	b.n	800e232 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800e230:	2302      	movs	r3, #2
  }
}
 800e232:	4618      	mov	r0, r3
 800e234:	3720      	adds	r7, #32
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
	...

0800e23c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	431a      	orrs	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	431a      	orrs	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	69db      	ldr	r3, [r3, #28]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	4ba7      	ldr	r3, [pc, #668]	; (800e504 <UART_SetConfig+0x2c8>)
 800e268:	4013      	ands	r3, r2
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	6812      	ldr	r2, [r2, #0]
 800e26e:	6979      	ldr	r1, [r7, #20]
 800e270:	430b      	orrs	r3, r1
 800e272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68da      	ldr	r2, [r3, #12]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	430a      	orrs	r2, r1
 800e288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	697a      	ldr	r2, [r7, #20]
 800e296:	4313      	orrs	r3, r2
 800e298:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	430a      	orrs	r2, r1
 800e2ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a95      	ldr	r2, [pc, #596]	; (800e508 <UART_SetConfig+0x2cc>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d120      	bne.n	800e2fa <UART_SetConfig+0xbe>
 800e2b8:	4b94      	ldr	r3, [pc, #592]	; (800e50c <UART_SetConfig+0x2d0>)
 800e2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	2b03      	cmp	r3, #3
 800e2c4:	d816      	bhi.n	800e2f4 <UART_SetConfig+0xb8>
 800e2c6:	a201      	add	r2, pc, #4	; (adr r2, 800e2cc <UART_SetConfig+0x90>)
 800e2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2cc:	0800e2dd 	.word	0x0800e2dd
 800e2d0:	0800e2e9 	.word	0x0800e2e9
 800e2d4:	0800e2e3 	.word	0x0800e2e3
 800e2d8:	0800e2ef 	.word	0x0800e2ef
 800e2dc:	2301      	movs	r3, #1
 800e2de:	77fb      	strb	r3, [r7, #31]
 800e2e0:	e14f      	b.n	800e582 <UART_SetConfig+0x346>
 800e2e2:	2302      	movs	r3, #2
 800e2e4:	77fb      	strb	r3, [r7, #31]
 800e2e6:	e14c      	b.n	800e582 <UART_SetConfig+0x346>
 800e2e8:	2304      	movs	r3, #4
 800e2ea:	77fb      	strb	r3, [r7, #31]
 800e2ec:	e149      	b.n	800e582 <UART_SetConfig+0x346>
 800e2ee:	2308      	movs	r3, #8
 800e2f0:	77fb      	strb	r3, [r7, #31]
 800e2f2:	e146      	b.n	800e582 <UART_SetConfig+0x346>
 800e2f4:	2310      	movs	r3, #16
 800e2f6:	77fb      	strb	r3, [r7, #31]
 800e2f8:	e143      	b.n	800e582 <UART_SetConfig+0x346>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a84      	ldr	r2, [pc, #528]	; (800e510 <UART_SetConfig+0x2d4>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d132      	bne.n	800e36a <UART_SetConfig+0x12e>
 800e304:	4b81      	ldr	r3, [pc, #516]	; (800e50c <UART_SetConfig+0x2d0>)
 800e306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e30a:	f003 030c 	and.w	r3, r3, #12
 800e30e:	2b0c      	cmp	r3, #12
 800e310:	d828      	bhi.n	800e364 <UART_SetConfig+0x128>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <UART_SetConfig+0xdc>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e34d 	.word	0x0800e34d
 800e31c:	0800e365 	.word	0x0800e365
 800e320:	0800e365 	.word	0x0800e365
 800e324:	0800e365 	.word	0x0800e365
 800e328:	0800e359 	.word	0x0800e359
 800e32c:	0800e365 	.word	0x0800e365
 800e330:	0800e365 	.word	0x0800e365
 800e334:	0800e365 	.word	0x0800e365
 800e338:	0800e353 	.word	0x0800e353
 800e33c:	0800e365 	.word	0x0800e365
 800e340:	0800e365 	.word	0x0800e365
 800e344:	0800e365 	.word	0x0800e365
 800e348:	0800e35f 	.word	0x0800e35f
 800e34c:	2300      	movs	r3, #0
 800e34e:	77fb      	strb	r3, [r7, #31]
 800e350:	e117      	b.n	800e582 <UART_SetConfig+0x346>
 800e352:	2302      	movs	r3, #2
 800e354:	77fb      	strb	r3, [r7, #31]
 800e356:	e114      	b.n	800e582 <UART_SetConfig+0x346>
 800e358:	2304      	movs	r3, #4
 800e35a:	77fb      	strb	r3, [r7, #31]
 800e35c:	e111      	b.n	800e582 <UART_SetConfig+0x346>
 800e35e:	2308      	movs	r3, #8
 800e360:	77fb      	strb	r3, [r7, #31]
 800e362:	e10e      	b.n	800e582 <UART_SetConfig+0x346>
 800e364:	2310      	movs	r3, #16
 800e366:	77fb      	strb	r3, [r7, #31]
 800e368:	e10b      	b.n	800e582 <UART_SetConfig+0x346>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a69      	ldr	r2, [pc, #420]	; (800e514 <UART_SetConfig+0x2d8>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d120      	bne.n	800e3b6 <UART_SetConfig+0x17a>
 800e374:	4b65      	ldr	r3, [pc, #404]	; (800e50c <UART_SetConfig+0x2d0>)
 800e376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e37a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e37e:	2b30      	cmp	r3, #48	; 0x30
 800e380:	d013      	beq.n	800e3aa <UART_SetConfig+0x16e>
 800e382:	2b30      	cmp	r3, #48	; 0x30
 800e384:	d814      	bhi.n	800e3b0 <UART_SetConfig+0x174>
 800e386:	2b20      	cmp	r3, #32
 800e388:	d009      	beq.n	800e39e <UART_SetConfig+0x162>
 800e38a:	2b20      	cmp	r3, #32
 800e38c:	d810      	bhi.n	800e3b0 <UART_SetConfig+0x174>
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d002      	beq.n	800e398 <UART_SetConfig+0x15c>
 800e392:	2b10      	cmp	r3, #16
 800e394:	d006      	beq.n	800e3a4 <UART_SetConfig+0x168>
 800e396:	e00b      	b.n	800e3b0 <UART_SetConfig+0x174>
 800e398:	2300      	movs	r3, #0
 800e39a:	77fb      	strb	r3, [r7, #31]
 800e39c:	e0f1      	b.n	800e582 <UART_SetConfig+0x346>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	77fb      	strb	r3, [r7, #31]
 800e3a2:	e0ee      	b.n	800e582 <UART_SetConfig+0x346>
 800e3a4:	2304      	movs	r3, #4
 800e3a6:	77fb      	strb	r3, [r7, #31]
 800e3a8:	e0eb      	b.n	800e582 <UART_SetConfig+0x346>
 800e3aa:	2308      	movs	r3, #8
 800e3ac:	77fb      	strb	r3, [r7, #31]
 800e3ae:	e0e8      	b.n	800e582 <UART_SetConfig+0x346>
 800e3b0:	2310      	movs	r3, #16
 800e3b2:	77fb      	strb	r3, [r7, #31]
 800e3b4:	e0e5      	b.n	800e582 <UART_SetConfig+0x346>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a57      	ldr	r2, [pc, #348]	; (800e518 <UART_SetConfig+0x2dc>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d120      	bne.n	800e402 <UART_SetConfig+0x1c6>
 800e3c0:	4b52      	ldr	r3, [pc, #328]	; (800e50c <UART_SetConfig+0x2d0>)
 800e3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e3ca:	2bc0      	cmp	r3, #192	; 0xc0
 800e3cc:	d013      	beq.n	800e3f6 <UART_SetConfig+0x1ba>
 800e3ce:	2bc0      	cmp	r3, #192	; 0xc0
 800e3d0:	d814      	bhi.n	800e3fc <UART_SetConfig+0x1c0>
 800e3d2:	2b80      	cmp	r3, #128	; 0x80
 800e3d4:	d009      	beq.n	800e3ea <UART_SetConfig+0x1ae>
 800e3d6:	2b80      	cmp	r3, #128	; 0x80
 800e3d8:	d810      	bhi.n	800e3fc <UART_SetConfig+0x1c0>
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d002      	beq.n	800e3e4 <UART_SetConfig+0x1a8>
 800e3de:	2b40      	cmp	r3, #64	; 0x40
 800e3e0:	d006      	beq.n	800e3f0 <UART_SetConfig+0x1b4>
 800e3e2:	e00b      	b.n	800e3fc <UART_SetConfig+0x1c0>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	77fb      	strb	r3, [r7, #31]
 800e3e8:	e0cb      	b.n	800e582 <UART_SetConfig+0x346>
 800e3ea:	2302      	movs	r3, #2
 800e3ec:	77fb      	strb	r3, [r7, #31]
 800e3ee:	e0c8      	b.n	800e582 <UART_SetConfig+0x346>
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	77fb      	strb	r3, [r7, #31]
 800e3f4:	e0c5      	b.n	800e582 <UART_SetConfig+0x346>
 800e3f6:	2308      	movs	r3, #8
 800e3f8:	77fb      	strb	r3, [r7, #31]
 800e3fa:	e0c2      	b.n	800e582 <UART_SetConfig+0x346>
 800e3fc:	2310      	movs	r3, #16
 800e3fe:	77fb      	strb	r3, [r7, #31]
 800e400:	e0bf      	b.n	800e582 <UART_SetConfig+0x346>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a45      	ldr	r2, [pc, #276]	; (800e51c <UART_SetConfig+0x2e0>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d125      	bne.n	800e458 <UART_SetConfig+0x21c>
 800e40c:	4b3f      	ldr	r3, [pc, #252]	; (800e50c <UART_SetConfig+0x2d0>)
 800e40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e41a:	d017      	beq.n	800e44c <UART_SetConfig+0x210>
 800e41c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e420:	d817      	bhi.n	800e452 <UART_SetConfig+0x216>
 800e422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e426:	d00b      	beq.n	800e440 <UART_SetConfig+0x204>
 800e428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e42c:	d811      	bhi.n	800e452 <UART_SetConfig+0x216>
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <UART_SetConfig+0x1fe>
 800e432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e436:	d006      	beq.n	800e446 <UART_SetConfig+0x20a>
 800e438:	e00b      	b.n	800e452 <UART_SetConfig+0x216>
 800e43a:	2300      	movs	r3, #0
 800e43c:	77fb      	strb	r3, [r7, #31]
 800e43e:	e0a0      	b.n	800e582 <UART_SetConfig+0x346>
 800e440:	2302      	movs	r3, #2
 800e442:	77fb      	strb	r3, [r7, #31]
 800e444:	e09d      	b.n	800e582 <UART_SetConfig+0x346>
 800e446:	2304      	movs	r3, #4
 800e448:	77fb      	strb	r3, [r7, #31]
 800e44a:	e09a      	b.n	800e582 <UART_SetConfig+0x346>
 800e44c:	2308      	movs	r3, #8
 800e44e:	77fb      	strb	r3, [r7, #31]
 800e450:	e097      	b.n	800e582 <UART_SetConfig+0x346>
 800e452:	2310      	movs	r3, #16
 800e454:	77fb      	strb	r3, [r7, #31]
 800e456:	e094      	b.n	800e582 <UART_SetConfig+0x346>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a30      	ldr	r2, [pc, #192]	; (800e520 <UART_SetConfig+0x2e4>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d125      	bne.n	800e4ae <UART_SetConfig+0x272>
 800e462:	4b2a      	ldr	r3, [pc, #168]	; (800e50c <UART_SetConfig+0x2d0>)
 800e464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e468:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e46c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e470:	d017      	beq.n	800e4a2 <UART_SetConfig+0x266>
 800e472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e476:	d817      	bhi.n	800e4a8 <UART_SetConfig+0x26c>
 800e478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e47c:	d00b      	beq.n	800e496 <UART_SetConfig+0x25a>
 800e47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e482:	d811      	bhi.n	800e4a8 <UART_SetConfig+0x26c>
 800e484:	2b00      	cmp	r3, #0
 800e486:	d003      	beq.n	800e490 <UART_SetConfig+0x254>
 800e488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e48c:	d006      	beq.n	800e49c <UART_SetConfig+0x260>
 800e48e:	e00b      	b.n	800e4a8 <UART_SetConfig+0x26c>
 800e490:	2301      	movs	r3, #1
 800e492:	77fb      	strb	r3, [r7, #31]
 800e494:	e075      	b.n	800e582 <UART_SetConfig+0x346>
 800e496:	2302      	movs	r3, #2
 800e498:	77fb      	strb	r3, [r7, #31]
 800e49a:	e072      	b.n	800e582 <UART_SetConfig+0x346>
 800e49c:	2304      	movs	r3, #4
 800e49e:	77fb      	strb	r3, [r7, #31]
 800e4a0:	e06f      	b.n	800e582 <UART_SetConfig+0x346>
 800e4a2:	2308      	movs	r3, #8
 800e4a4:	77fb      	strb	r3, [r7, #31]
 800e4a6:	e06c      	b.n	800e582 <UART_SetConfig+0x346>
 800e4a8:	2310      	movs	r3, #16
 800e4aa:	77fb      	strb	r3, [r7, #31]
 800e4ac:	e069      	b.n	800e582 <UART_SetConfig+0x346>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a1c      	ldr	r2, [pc, #112]	; (800e524 <UART_SetConfig+0x2e8>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d137      	bne.n	800e528 <UART_SetConfig+0x2ec>
 800e4b8:	4b14      	ldr	r3, [pc, #80]	; (800e50c <UART_SetConfig+0x2d0>)
 800e4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e4c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e4c6:	d017      	beq.n	800e4f8 <UART_SetConfig+0x2bc>
 800e4c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e4cc:	d817      	bhi.n	800e4fe <UART_SetConfig+0x2c2>
 800e4ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4d2:	d00b      	beq.n	800e4ec <UART_SetConfig+0x2b0>
 800e4d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4d8:	d811      	bhi.n	800e4fe <UART_SetConfig+0x2c2>
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <UART_SetConfig+0x2aa>
 800e4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4e2:	d006      	beq.n	800e4f2 <UART_SetConfig+0x2b6>
 800e4e4:	e00b      	b.n	800e4fe <UART_SetConfig+0x2c2>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	77fb      	strb	r3, [r7, #31]
 800e4ea:	e04a      	b.n	800e582 <UART_SetConfig+0x346>
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	77fb      	strb	r3, [r7, #31]
 800e4f0:	e047      	b.n	800e582 <UART_SetConfig+0x346>
 800e4f2:	2304      	movs	r3, #4
 800e4f4:	77fb      	strb	r3, [r7, #31]
 800e4f6:	e044      	b.n	800e582 <UART_SetConfig+0x346>
 800e4f8:	2308      	movs	r3, #8
 800e4fa:	77fb      	strb	r3, [r7, #31]
 800e4fc:	e041      	b.n	800e582 <UART_SetConfig+0x346>
 800e4fe:	2310      	movs	r3, #16
 800e500:	77fb      	strb	r3, [r7, #31]
 800e502:	e03e      	b.n	800e582 <UART_SetConfig+0x346>
 800e504:	efff69f3 	.word	0xefff69f3
 800e508:	40011000 	.word	0x40011000
 800e50c:	40023800 	.word	0x40023800
 800e510:	40004400 	.word	0x40004400
 800e514:	40004800 	.word	0x40004800
 800e518:	40004c00 	.word	0x40004c00
 800e51c:	40005000 	.word	0x40005000
 800e520:	40011400 	.word	0x40011400
 800e524:	40007800 	.word	0x40007800
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a71      	ldr	r2, [pc, #452]	; (800e6f4 <UART_SetConfig+0x4b8>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d125      	bne.n	800e57e <UART_SetConfig+0x342>
 800e532:	4b71      	ldr	r3, [pc, #452]	; (800e6f8 <UART_SetConfig+0x4bc>)
 800e534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e53c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e540:	d017      	beq.n	800e572 <UART_SetConfig+0x336>
 800e542:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e546:	d817      	bhi.n	800e578 <UART_SetConfig+0x33c>
 800e548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e54c:	d00b      	beq.n	800e566 <UART_SetConfig+0x32a>
 800e54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e552:	d811      	bhi.n	800e578 <UART_SetConfig+0x33c>
 800e554:	2b00      	cmp	r3, #0
 800e556:	d003      	beq.n	800e560 <UART_SetConfig+0x324>
 800e558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e55c:	d006      	beq.n	800e56c <UART_SetConfig+0x330>
 800e55e:	e00b      	b.n	800e578 <UART_SetConfig+0x33c>
 800e560:	2300      	movs	r3, #0
 800e562:	77fb      	strb	r3, [r7, #31]
 800e564:	e00d      	b.n	800e582 <UART_SetConfig+0x346>
 800e566:	2302      	movs	r3, #2
 800e568:	77fb      	strb	r3, [r7, #31]
 800e56a:	e00a      	b.n	800e582 <UART_SetConfig+0x346>
 800e56c:	2304      	movs	r3, #4
 800e56e:	77fb      	strb	r3, [r7, #31]
 800e570:	e007      	b.n	800e582 <UART_SetConfig+0x346>
 800e572:	2308      	movs	r3, #8
 800e574:	77fb      	strb	r3, [r7, #31]
 800e576:	e004      	b.n	800e582 <UART_SetConfig+0x346>
 800e578:	2310      	movs	r3, #16
 800e57a:	77fb      	strb	r3, [r7, #31]
 800e57c:	e001      	b.n	800e582 <UART_SetConfig+0x346>
 800e57e:	2310      	movs	r3, #16
 800e580:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	69db      	ldr	r3, [r3, #28]
 800e586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e58a:	d15b      	bne.n	800e644 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800e58c:	7ffb      	ldrb	r3, [r7, #31]
 800e58e:	2b08      	cmp	r3, #8
 800e590:	d827      	bhi.n	800e5e2 <UART_SetConfig+0x3a6>
 800e592:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <UART_SetConfig+0x35c>)
 800e594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e598:	0800e5bd 	.word	0x0800e5bd
 800e59c:	0800e5c5 	.word	0x0800e5c5
 800e5a0:	0800e5cd 	.word	0x0800e5cd
 800e5a4:	0800e5e3 	.word	0x0800e5e3
 800e5a8:	0800e5d3 	.word	0x0800e5d3
 800e5ac:	0800e5e3 	.word	0x0800e5e3
 800e5b0:	0800e5e3 	.word	0x0800e5e3
 800e5b4:	0800e5e3 	.word	0x0800e5e3
 800e5b8:	0800e5db 	.word	0x0800e5db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5bc:	f7fd f904 	bl	800b7c8 <HAL_RCC_GetPCLK1Freq>
 800e5c0:	61b8      	str	r0, [r7, #24]
        break;
 800e5c2:	e013      	b.n	800e5ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5c4:	f7fd f914 	bl	800b7f0 <HAL_RCC_GetPCLK2Freq>
 800e5c8:	61b8      	str	r0, [r7, #24]
        break;
 800e5ca:	e00f      	b.n	800e5ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5cc:	4b4b      	ldr	r3, [pc, #300]	; (800e6fc <UART_SetConfig+0x4c0>)
 800e5ce:	61bb      	str	r3, [r7, #24]
        break;
 800e5d0:	e00c      	b.n	800e5ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5d2:	f7fd f837 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800e5d6:	61b8      	str	r0, [r7, #24]
        break;
 800e5d8:	e008      	b.n	800e5ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5de:	61bb      	str	r3, [r7, #24]
        break;
 800e5e0:	e004      	b.n	800e5ec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	77bb      	strb	r3, [r7, #30]
        break;
 800e5ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d074      	beq.n	800e6dc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	005a      	lsls	r2, r3, #1
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	085b      	lsrs	r3, r3, #1
 800e5fc:	441a      	add	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	fbb2 f3f3 	udiv	r3, r2, r3
 800e606:	b29b      	uxth	r3, r3
 800e608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	2b0f      	cmp	r3, #15
 800e60e:	d916      	bls.n	800e63e <UART_SetConfig+0x402>
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e616:	d212      	bcs.n	800e63e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	f023 030f 	bic.w	r3, r3, #15
 800e620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	085b      	lsrs	r3, r3, #1
 800e626:	b29b      	uxth	r3, r3
 800e628:	f003 0307 	and.w	r3, r3, #7
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	89fb      	ldrh	r3, [r7, #14]
 800e630:	4313      	orrs	r3, r2
 800e632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	89fa      	ldrh	r2, [r7, #14]
 800e63a:	60da      	str	r2, [r3, #12]
 800e63c:	e04e      	b.n	800e6dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	77bb      	strb	r3, [r7, #30]
 800e642:	e04b      	b.n	800e6dc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e644:	7ffb      	ldrb	r3, [r7, #31]
 800e646:	2b08      	cmp	r3, #8
 800e648:	d827      	bhi.n	800e69a <UART_SetConfig+0x45e>
 800e64a:	a201      	add	r2, pc, #4	; (adr r2, 800e650 <UART_SetConfig+0x414>)
 800e64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e650:	0800e675 	.word	0x0800e675
 800e654:	0800e67d 	.word	0x0800e67d
 800e658:	0800e685 	.word	0x0800e685
 800e65c:	0800e69b 	.word	0x0800e69b
 800e660:	0800e68b 	.word	0x0800e68b
 800e664:	0800e69b 	.word	0x0800e69b
 800e668:	0800e69b 	.word	0x0800e69b
 800e66c:	0800e69b 	.word	0x0800e69b
 800e670:	0800e693 	.word	0x0800e693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e674:	f7fd f8a8 	bl	800b7c8 <HAL_RCC_GetPCLK1Freq>
 800e678:	61b8      	str	r0, [r7, #24]
        break;
 800e67a:	e013      	b.n	800e6a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e67c:	f7fd f8b8 	bl	800b7f0 <HAL_RCC_GetPCLK2Freq>
 800e680:	61b8      	str	r0, [r7, #24]
        break;
 800e682:	e00f      	b.n	800e6a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e684:	4b1d      	ldr	r3, [pc, #116]	; (800e6fc <UART_SetConfig+0x4c0>)
 800e686:	61bb      	str	r3, [r7, #24]
        break;
 800e688:	e00c      	b.n	800e6a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e68a:	f7fc ffdb 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800e68e:	61b8      	str	r0, [r7, #24]
        break;
 800e690:	e008      	b.n	800e6a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e696:	61bb      	str	r3, [r7, #24]
        break;
 800e698:	e004      	b.n	800e6a4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800e69a:	2300      	movs	r3, #0
 800e69c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	77bb      	strb	r3, [r7, #30]
        break;
 800e6a2:	bf00      	nop
    }

    if (pclk != 0U)
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d018      	beq.n	800e6dc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	085a      	lsrs	r2, r3, #1
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	441a      	add	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	2b0f      	cmp	r3, #15
 800e6c4:	d908      	bls.n	800e6d8 <UART_SetConfig+0x49c>
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6cc:	d204      	bcs.n	800e6d8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	60da      	str	r2, [r3, #12]
 800e6d6:	e001      	b.n	800e6dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e6e8:	7fbb      	ldrb	r3, [r7, #30]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	40007c00 	.word	0x40007c00
 800e6f8:	40023800 	.word	0x40023800
 800e6fc:	00f42400 	.word	0x00f42400

0800e700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	f003 0301 	and.w	r3, r3, #1
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00a      	beq.n	800e72a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	430a      	orrs	r2, r1
 800e728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00a      	beq.n	800e74c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	430a      	orrs	r2, r1
 800e74a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e750:	f003 0304 	and.w	r3, r3, #4
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00a      	beq.n	800e76e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e772:	f003 0308 	and.w	r3, r3, #8
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00a      	beq.n	800e790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	430a      	orrs	r2, r1
 800e78e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	f003 0310 	and.w	r3, r3, #16
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d00a      	beq.n	800e7b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	430a      	orrs	r2, r1
 800e7b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b6:	f003 0320 	and.w	r3, r3, #32
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00a      	beq.n	800e7d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	430a      	orrs	r2, r1
 800e7d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d01a      	beq.n	800e816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	430a      	orrs	r2, r1
 800e7f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7fe:	d10a      	bne.n	800e816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	430a      	orrs	r2, r1
 800e814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00a      	beq.n	800e838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	430a      	orrs	r2, r1
 800e836:	605a      	str	r2, [r3, #4]
  }
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af02      	add	r7, sp, #8
 800e84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e854:	f7f6 ff88 	bl	8005768 <HAL_GetTick>
 800e858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f003 0308 	and.w	r3, r3, #8
 800e864:	2b08      	cmp	r3, #8
 800e866:	d10e      	bne.n	800e886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f817 	bl	800e8aa <UART_WaitOnFlagUntilTimeout>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e882:	2303      	movs	r3, #3
 800e884:	e00d      	b.n	800e8a2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2220      	movs	r2, #32
 800e88a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2220      	movs	r2, #32
 800e890:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	603b      	str	r3, [r7, #0]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8ba:	e05e      	b.n	800e97a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8c2:	d05a      	beq.n	800e97a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8c4:	f7f6 ff50 	bl	8005768 <HAL_GetTick>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	69ba      	ldr	r2, [r7, #24]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d302      	bcc.n	800e8da <UART_WaitOnFlagUntilTimeout+0x30>
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d11b      	bne.n	800e912 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e8e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	689a      	ldr	r2, [r3, #8]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f022 0201 	bic.w	r2, r2, #1
 800e8f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2220      	movs	r2, #32
 800e8fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2220      	movs	r2, #32
 800e904:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e90e:	2303      	movs	r3, #3
 800e910:	e043      	b.n	800e99a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d02c      	beq.n	800e97a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	69db      	ldr	r3, [r3, #28]
 800e926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e92a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e92e:	d124      	bne.n	800e97a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e948:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	689a      	ldr	r2, [r3, #8]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f022 0201 	bic.w	r2, r2, #1
 800e958:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2220      	movs	r2, #32
 800e95e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2220      	movs	r2, #32
 800e964:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2220      	movs	r2, #32
 800e96a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e976:	2303      	movs	r3, #3
 800e978:	e00f      	b.n	800e99a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	69da      	ldr	r2, [r3, #28]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	4013      	ands	r3, r2
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	429a      	cmp	r2, r3
 800e988:	bf0c      	ite	eq
 800e98a:	2301      	moveq	r3, #1
 800e98c:	2300      	movne	r3, #0
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	461a      	mov	r2, r3
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	429a      	cmp	r2, r3
 800e996:	d091      	beq.n	800e8bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d027      	beq.n	800ea0e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ea84 <FMC_SDRAM_Init+0xe0>)
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e9d4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800e9da:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800e9e0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800e9e6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800e9ec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800e9f2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800e9f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e9fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	601a      	str	r2, [r3, #0]
 800ea0c:	e032      	b.n	800ea74 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ea1a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ea24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ea2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <FMC_SDRAM_Init+0xe0>)
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ea48:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ea4e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ea54:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ea5a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ea60:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	ffff8000 	.word	0xffff8000

0800ea88 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b087      	sub	sp, #28
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d02e      	beq.n	800eb00 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eaae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	3b01      	subs	r3, #1
 800eabc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eabe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800eac8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	3b01      	subs	r3, #1
 800ead0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ead2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	3b01      	subs	r3, #1
 800eada:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800eadc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	695b      	ldr	r3, [r3, #20]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800eae6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	3b01      	subs	r3, #1
 800eaee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	697a      	ldr	r2, [r7, #20]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	609a      	str	r2, [r3, #8]
 800eafe:	e039      	b.n	800eb74 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	4b1e      	ldr	r3, [pc, #120]	; (800eb84 <FMC_SDRAM_Timing_Init+0xfc>)
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	695b      	ldr	r3, [r3, #20]
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eb32:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eb42:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800eb4c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800eb56:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800eb60:	4313      	orrs	r3, r2
 800eb62:	693a      	ldr	r2, [r7, #16]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	697a      	ldr	r2, [r7, #20]
 800eb6c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	693a      	ldr	r2, [r7, #16]
 800eb72:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	371c      	adds	r7, #28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	ff0f0fff 	.word	0xff0f0fff

0800eb88 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	691a      	ldr	r2, [r3, #16]
 800eb98:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <FMC_SDRAM_SendCommand+0x44>)
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	6811      	ldr	r1, [r2, #0]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	6852      	ldr	r2, [r2, #4]
 800eba4:	4311      	orrs	r1, r2
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	6892      	ldr	r2, [r2, #8]
 800ebaa:	3a01      	subs	r2, #1
 800ebac:	0152      	lsls	r2, r2, #5
 800ebae:	4311      	orrs	r1, r2
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	68d2      	ldr	r2, [r2, #12]
 800ebb4:	0252      	lsls	r2, r2, #9
 800ebb6:	430a      	orrs	r2, r1
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3714      	adds	r7, #20
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	ffc00000 	.word	0xffc00000

0800ebd0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	695a      	ldr	r2, [r3, #20]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	431a      	orrs	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebf6:	b480      	push	{r7}
 800ebf8:	b083      	sub	sp, #12
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	f043 0201 	orr.w	r2, r3, #1
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ec0a:	2300      	movs	r3, #0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	f023 0201 	bic.w	r2, r3, #1
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ec46:	2300      	movs	r3, #0
 800ec48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	019b      	lsls	r3, r3, #6
 800ec4e:	f043 0220 	orr.w	r2, r3, #32
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4a09      	ldr	r2, [pc, #36]	; (800ec84 <USB_FlushTxFifo+0x48>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d901      	bls.n	800ec68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ec64:	2303      	movs	r3, #3
 800ec66:	e006      	b.n	800ec76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	691b      	ldr	r3, [r3, #16]
 800ec6c:	f003 0320 	and.w	r3, r3, #32
 800ec70:	2b20      	cmp	r3, #32
 800ec72:	d0f0      	beq.n	800ec56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3714      	adds	r7, #20
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop
 800ec84:	00030d40 	.word	0x00030d40

0800ec88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2210      	movs	r2, #16
 800ec98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	60fb      	str	r3, [r7, #12]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a09      	ldr	r2, [pc, #36]	; (800ecc8 <USB_FlushRxFifo+0x40>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d901      	bls.n	800ecac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	e006      	b.n	800ecba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	2b10      	cmp	r3, #16
 800ecb6:	d0f0      	beq.n	800ec9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	00030d40 	.word	0x00030d40

0800eccc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b089      	sub	sp, #36	; 0x24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ece2:	88fb      	ldrh	r3, [r7, #6]
 800ece4:	3303      	adds	r3, #3
 800ece6:	089b      	lsrs	r3, r3, #2
 800ece8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ecea:	2300      	movs	r3, #0
 800ecec:	61bb      	str	r3, [r7, #24]
 800ecee:	e00b      	b.n	800ed08 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	601a      	str	r2, [r3, #0]
    pDest++;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	3301      	adds	r3, #1
 800ed06:	61bb      	str	r3, [r7, #24]
 800ed08:	69ba      	ldr	r2, [r7, #24]
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d3ef      	bcc.n	800ecf0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ed10:	69fb      	ldr	r3, [r7, #28]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3724      	adds	r7, #36	; 0x24
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr

0800ed1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ed1e:	b480      	push	{r7}
 800ed20:	b085      	sub	sp, #20
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	695b      	ldr	r3, [r3, #20]
 800ed2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	699b      	ldr	r3, [r3, #24]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	4013      	ands	r3, r2
 800ed34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ed36:	68fb      	ldr	r3, [r7, #12]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3714      	adds	r7, #20
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695b      	ldr	r3, [r3, #20]
 800ed50:	f003 0301 	and.w	r3, r3, #1
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed7e:	f023 0303 	bic.w	r3, r3, #3
 800ed82:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	78fb      	ldrb	r3, [r7, #3]
 800ed8e:	f003 0303 	and.w	r3, r3, #3
 800ed92:	68f9      	ldr	r1, [r7, #12]
 800ed94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ed9c:	78fb      	ldrb	r3, [r7, #3]
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d107      	bne.n	800edb2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eda8:	461a      	mov	r2, r3
 800edaa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800edae:	6053      	str	r3, [r2, #4]
 800edb0:	e009      	b.n	800edc6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d106      	bne.n	800edc6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800edbe:	461a      	mov	r2, r3
 800edc0:	f241 7370 	movw	r3, #6000	; 0x1770
 800edc4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3714      	adds	r7, #20
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	b29b      	uxth	r3, r3
}
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b089      	sub	sp, #36	; 0x24
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	460b      	mov	r3, r1
 800ee00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800ee06:	78fb      	ldrb	r3, [r7, #3]
 800ee08:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	015a      	lsls	r2, r3, #5
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	4413      	add	r3, r2
 800ee16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	0c9b      	lsrs	r3, r3, #18
 800ee1e:	f003 0303 	and.w	r3, r3, #3
 800ee22:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	015a      	lsls	r2, r3, #5
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	0fdb      	lsrs	r3, r3, #31
 800ee34:	f003 0301 	and.w	r3, r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	689b      	ldr	r3, [r3, #8]
 800ee3e:	f003 0320 	and.w	r3, r3, #32
 800ee42:	2b20      	cmp	r3, #32
 800ee44:	d104      	bne.n	800ee50 <USB_HC_Halt+0x5a>
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	e0e8      	b.n	800f022 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d002      	beq.n	800ee5c <USB_HC_Halt+0x66>
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d173      	bne.n	800ef44 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	015a      	lsls	r2, r3, #5
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	4413      	add	r3, r2
 800ee64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	0151      	lsls	r1, r2, #5
 800ee6e:	69ba      	ldr	r2, [r7, #24]
 800ee70:	440a      	add	r2, r1
 800ee72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ee76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee7a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	f003 0320 	and.w	r3, r3, #32
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f040 80cb 	bne.w	800f020 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d143      	bne.n	800ef1e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	015a      	lsls	r2, r3, #5
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	0151      	lsls	r1, r2, #5
 800eea8:	69ba      	ldr	r2, [r7, #24]
 800eeaa:	440a      	add	r2, r1
 800eeac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eeb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eeb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	015a      	lsls	r2, r3, #5
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	4413      	add	r3, r2
 800eebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	0151      	lsls	r1, r2, #5
 800eec8:	69ba      	ldr	r2, [r7, #24]
 800eeca:	440a      	add	r2, r1
 800eecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eed4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	015a      	lsls	r2, r3, #5
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	4413      	add	r3, r2
 800eede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	697a      	ldr	r2, [r7, #20]
 800eee6:	0151      	lsls	r1, r2, #5
 800eee8:	69ba      	ldr	r2, [r7, #24]
 800eeea:	440a      	add	r2, r1
 800eeec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eef4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	3301      	adds	r3, #1
 800eefa:	61fb      	str	r3, [r7, #28]
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef02:	d81d      	bhi.n	800ef40 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	015a      	lsls	r2, r3, #5
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef1a:	d0ec      	beq.n	800eef6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ef1c:	e080      	b.n	800f020 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	015a      	lsls	r2, r3, #5
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	4413      	add	r3, r2
 800ef26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	0151      	lsls	r1, r2, #5
 800ef30:	69ba      	ldr	r2, [r7, #24]
 800ef32:	440a      	add	r2, r1
 800ef34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef3c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ef3e:	e06f      	b.n	800f020 <USB_HC_Halt+0x22a>
            break;
 800ef40:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ef42:	e06d      	b.n	800f020 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	015a      	lsls	r2, r3, #5
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	0151      	lsls	r1, r2, #5
 800ef56:	69ba      	ldr	r2, [r7, #24]
 800ef58:	440a      	add	r2, r1
 800ef5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef62:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d143      	bne.n	800effc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	015a      	lsls	r2, r3, #5
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	697a      	ldr	r2, [r7, #20]
 800ef84:	0151      	lsls	r1, r2, #5
 800ef86:	69ba      	ldr	r2, [r7, #24]
 800ef88:	440a      	add	r2, r1
 800ef8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	015a      	lsls	r2, r3, #5
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	697a      	ldr	r2, [r7, #20]
 800efa4:	0151      	lsls	r1, r2, #5
 800efa6:	69ba      	ldr	r2, [r7, #24]
 800efa8:	440a      	add	r2, r1
 800efaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800efae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800efb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	015a      	lsls	r2, r3, #5
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	4413      	add	r3, r2
 800efbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	0151      	lsls	r1, r2, #5
 800efc6:	69ba      	ldr	r2, [r7, #24]
 800efc8:	440a      	add	r2, r1
 800efca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800efce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800efd2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	3301      	adds	r3, #1
 800efd8:	61fb      	str	r3, [r7, #28]
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efe0:	d81d      	bhi.n	800f01e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eff8:	d0ec      	beq.n	800efd4 <USB_HC_Halt+0x1de>
 800effa:	e011      	b.n	800f020 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	015a      	lsls	r2, r3, #5
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	4413      	add	r3, r2
 800f004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	697a      	ldr	r2, [r7, #20]
 800f00c:	0151      	lsls	r1, r2, #5
 800f00e:	69ba      	ldr	r2, [r7, #24]
 800f010:	440a      	add	r2, r1
 800f012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	e000      	b.n	800f020 <USB_HC_Halt+0x22a>
          break;
 800f01e:	bf00      	nop
    }
  }

  return HAL_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3724      	adds	r7, #36	; 0x24
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b086      	sub	sp, #24
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f03a:	2300      	movs	r3, #0
 800f03c:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7ff fdea 	bl	800ec18 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800f044:	2110      	movs	r1, #16
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff fdf8 	bl	800ec3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff fe1b 	bl	800ec88 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f052:	2300      	movs	r3, #0
 800f054:	613b      	str	r3, [r7, #16]
 800f056:	e01f      	b.n	800f098 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	015a      	lsls	r2, r3, #5
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	4413      	add	r3, r2
 800f060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f06e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f076:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f07e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	015a      	lsls	r2, r3, #5
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	4413      	add	r3, r2
 800f088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f08c:	461a      	mov	r2, r3
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	3301      	adds	r3, #1
 800f096:	613b      	str	r3, [r7, #16]
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	2b0f      	cmp	r3, #15
 800f09c:	d9dc      	bls.n	800f058 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f09e:	2300      	movs	r3, #0
 800f0a0:	613b      	str	r3, [r7, #16]
 800f0a2:	e034      	b.n	800f10e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	015a      	lsls	r2, r3, #5
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0ba:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f0c2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f0ca:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	015a      	lsls	r2, r3, #5
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0d8:	461a      	mov	r2, r3
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0ea:	d80c      	bhi.n	800f106 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	015a      	lsls	r2, r3, #5
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f102:	d0ec      	beq.n	800f0de <USB_StopHost+0xb0>
 800f104:	e000      	b.n	800f108 <USB_StopHost+0xda>
        break;
 800f106:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	3301      	adds	r3, #1
 800f10c:	613b      	str	r3, [r7, #16]
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	2b0f      	cmp	r3, #15
 800f112:	d9c7      	bls.n	800f0a4 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f11a:	461a      	mov	r2, r3
 800f11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f120:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f128:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7ff fd63 	bl	800ebf6 <USB_EnableGlobalInt>

  return HAL_OK;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3718      	adds	r7, #24
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b082      	sub	sp, #8
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f148:	1c5a      	adds	r2, r3, #1
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 f804 	bl	800f15e <USBH_HandleSof>
}
 800f156:	bf00      	nop
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b0b      	cmp	r3, #11
 800f16e:	d10a      	bne.n	800f186 <USBH_HandleSof+0x28>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d005      	beq.n	800f186 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	4798      	blx	r3
  }
}
 800f186:	bf00      	nop
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f18e:	b480      	push	{r7}
 800f190:	b083      	sub	sp, #12
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f19e:	bf00      	nop
}
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	b083      	sub	sp, #12
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f1ba:	bf00      	nop
}
 800f1bc:	370c      	adds	r7, #12
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	b083      	sub	sp, #12
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fa9f 	bl	800f758 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	791b      	ldrb	r3, [r3, #4]
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f80b 	bl	800f23c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	795b      	ldrb	r3, [r3, #5]
 800f22a:	4619      	mov	r1, r3
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f805 	bl	800f23c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	460b      	mov	r3, r1
 800f246:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	2b0a      	cmp	r3, #10
 800f24c:	d80d      	bhi.n	800f26a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f24e:	78fb      	ldrb	r3, [r7, #3]
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	33e0      	adds	r3, #224	; 0xe0
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	78fb      	ldrb	r3, [r7, #3]
 800f25c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f260:	6879      	ldr	r1, [r7, #4]
 800f262:	33e0      	adds	r3, #224	; 0xe0
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	440b      	add	r3, r1
 800f268:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	689a      	ldr	r2, [r3, #8]
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	689b      	ldr	r3, [r3, #8]
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	1c5a      	adds	r2, r3, #1
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	601a      	str	r2, [r3, #0]
}
 800f2b4:	bf00      	nop
 800f2b6:	3714      	adds	r7, #20
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	691b      	ldr	r3, [r3, #16]
 800f2cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	6892      	ldr	r2, [r2, #8]
 800f2d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	6852      	ldr	r2, [r2, #4]
 800f2e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d103      	bne.n	800f2f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	1e5a      	subs	r2, r3, #1
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f31a:	2300      	movs	r3, #0
 800f31c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f31e:	4b4f      	ldr	r3, [pc, #316]	; (800f45c <xTaskIncrementTick+0x148>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	f040 808a 	bne.w	800f43c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f328:	4b4d      	ldr	r3, [pc, #308]	; (800f460 <xTaskIncrementTick+0x14c>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3301      	adds	r3, #1
 800f32e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f330:	4a4b      	ldr	r2, [pc, #300]	; (800f460 <xTaskIncrementTick+0x14c>)
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d122      	bne.n	800f382 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f33c:	4b49      	ldr	r3, [pc, #292]	; (800f464 <xTaskIncrementTick+0x150>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00c      	beq.n	800f360 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34a:	b672      	cpsid	i
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	b662      	cpsie	i
 800f35a:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f35c:	bf00      	nop
 800f35e:	e7fe      	b.n	800f35e <xTaskIncrementTick+0x4a>
 800f360:	4b40      	ldr	r3, [pc, #256]	; (800f464 <xTaskIncrementTick+0x150>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	60fb      	str	r3, [r7, #12]
 800f366:	4b40      	ldr	r3, [pc, #256]	; (800f468 <xTaskIncrementTick+0x154>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a3e      	ldr	r2, [pc, #248]	; (800f464 <xTaskIncrementTick+0x150>)
 800f36c:	6013      	str	r3, [r2, #0]
 800f36e:	4a3e      	ldr	r2, [pc, #248]	; (800f468 <xTaskIncrementTick+0x154>)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	4b3d      	ldr	r3, [pc, #244]	; (800f46c <xTaskIncrementTick+0x158>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3301      	adds	r3, #1
 800f37a:	4a3c      	ldr	r2, [pc, #240]	; (800f46c <xTaskIncrementTick+0x158>)
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	f000 f905 	bl	800f58c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f382:	4b3b      	ldr	r3, [pc, #236]	; (800f470 <xTaskIncrementTick+0x15c>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d348      	bcc.n	800f41e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f38c:	4b35      	ldr	r3, [pc, #212]	; (800f464 <xTaskIncrementTick+0x150>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d104      	bne.n	800f3a0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f396:	4b36      	ldr	r3, [pc, #216]	; (800f470 <xTaskIncrementTick+0x15c>)
 800f398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f39c:	601a      	str	r2, [r3, #0]
					break;
 800f39e:	e03e      	b.n	800f41e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3a0:	4b30      	ldr	r3, [pc, #192]	; (800f464 <xTaskIncrementTick+0x150>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d203      	bcs.n	800f3c0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3b8:	4a2d      	ldr	r2, [pc, #180]	; (800f470 <xTaskIncrementTick+0x15c>)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3be:	e02e      	b.n	800f41e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	3304      	adds	r3, #4
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff ff7b 	bl	800f2c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d004      	beq.n	800f3dc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3318      	adds	r3, #24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff ff72 	bl	800f2c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	409a      	lsls	r2, r3
 800f3e4:	4b23      	ldr	r3, [pc, #140]	; (800f474 <xTaskIncrementTick+0x160>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	4a22      	ldr	r2, [pc, #136]	; (800f474 <xTaskIncrementTick+0x160>)
 800f3ec:	6013      	str	r3, [r2, #0]
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4413      	add	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4a1f      	ldr	r2, [pc, #124]	; (800f478 <xTaskIncrementTick+0x164>)
 800f3fc:	441a      	add	r2, r3
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	3304      	adds	r3, #4
 800f402:	4619      	mov	r1, r3
 800f404:	4610      	mov	r0, r2
 800f406:	f7ff ff37 	bl	800f278 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f40e:	4b1b      	ldr	r3, [pc, #108]	; (800f47c <xTaskIncrementTick+0x168>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f414:	429a      	cmp	r2, r3
 800f416:	d3b9      	bcc.n	800f38c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f418:	2301      	movs	r3, #1
 800f41a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f41c:	e7b6      	b.n	800f38c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f41e:	4b17      	ldr	r3, [pc, #92]	; (800f47c <xTaskIncrementTick+0x168>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f424:	4914      	ldr	r1, [pc, #80]	; (800f478 <xTaskIncrementTick+0x164>)
 800f426:	4613      	mov	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	440b      	add	r3, r1
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b01      	cmp	r3, #1
 800f434:	d907      	bls.n	800f446 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f436:	2301      	movs	r3, #1
 800f438:	617b      	str	r3, [r7, #20]
 800f43a:	e004      	b.n	800f446 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f43c:	4b10      	ldr	r3, [pc, #64]	; (800f480 <xTaskIncrementTick+0x16c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3301      	adds	r3, #1
 800f442:	4a0f      	ldr	r2, [pc, #60]	; (800f480 <xTaskIncrementTick+0x16c>)
 800f444:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f446:	4b0f      	ldr	r3, [pc, #60]	; (800f484 <xTaskIncrementTick+0x170>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f44e:	2301      	movs	r3, #1
 800f450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f452:	697b      	ldr	r3, [r7, #20]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3718      	adds	r7, #24
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	20000a78 	.word	0x20000a78
 800f460:	20000a60 	.word	0x20000a60
 800f464:	20000a58 	.word	0x20000a58
 800f468:	20000a5c 	.word	0x20000a5c
 800f46c:	20000a70 	.word	0x20000a70
 800f470:	20000a74 	.word	0x20000a74
 800f474:	20000a64 	.word	0x20000a64
 800f478:	200009cc 	.word	0x200009cc
 800f47c:	200009c8 	.word	0x200009c8
 800f480:	20000a68 	.word	0x20000a68
 800f484:	20000a6c 	.word	0x20000a6c

0800f488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b088      	sub	sp, #32
 800f48c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f48e:	4b3a      	ldr	r3, [pc, #232]	; (800f578 <vTaskSwitchContext+0xf0>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f496:	4b39      	ldr	r3, [pc, #228]	; (800f57c <vTaskSwitchContext+0xf4>)
 800f498:	2201      	movs	r2, #1
 800f49a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f49c:	e068      	b.n	800f570 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800f49e:	4b37      	ldr	r3, [pc, #220]	; (800f57c <vTaskSwitchContext+0xf4>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f4a4:	4b36      	ldr	r3, [pc, #216]	; (800f580 <vTaskSwitchContext+0xf8>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4aa:	61fb      	str	r3, [r7, #28]
 800f4ac:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	69ba      	ldr	r2, [r7, #24]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d111      	bne.n	800f4e0 <vTaskSwitchContext+0x58>
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	69ba      	ldr	r2, [r7, #24]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d10b      	bne.n	800f4e0 <vTaskSwitchContext+0x58>
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	3308      	adds	r3, #8
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	69ba      	ldr	r2, [r7, #24]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d105      	bne.n	800f4e0 <vTaskSwitchContext+0x58>
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	330c      	adds	r3, #12
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	69ba      	ldr	r2, [r7, #24]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d008      	beq.n	800f4f2 <vTaskSwitchContext+0x6a>
 800f4e0:	4b27      	ldr	r3, [pc, #156]	; (800f580 <vTaskSwitchContext+0xf8>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	4b26      	ldr	r3, [pc, #152]	; (800f580 <vTaskSwitchContext+0xf8>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3334      	adds	r3, #52	; 0x34
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	f7f1 ffdc 	bl	80014aa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4f2:	4b24      	ldr	r3, [pc, #144]	; (800f584 <vTaskSwitchContext+0xfc>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	fab3 f383 	clz	r3, r3
 800f4fe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f500:	7afb      	ldrb	r3, [r7, #11]
 800f502:	f1c3 031f 	rsb	r3, r3, #31
 800f506:	617b      	str	r3, [r7, #20]
 800f508:	491f      	ldr	r1, [pc, #124]	; (800f588 <vTaskSwitchContext+0x100>)
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	4613      	mov	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4413      	add	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	440b      	add	r3, r1
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10c      	bne.n	800f536 <vTaskSwitchContext+0xae>
	__asm volatile
 800f51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f520:	b672      	cpsid	i
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	b662      	cpsie	i
 800f530:	607b      	str	r3, [r7, #4]
}
 800f532:	bf00      	nop
 800f534:	e7fe      	b.n	800f534 <vTaskSwitchContext+0xac>
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	4613      	mov	r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4413      	add	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	4a11      	ldr	r2, [pc, #68]	; (800f588 <vTaskSwitchContext+0x100>)
 800f542:	4413      	add	r3, r2
 800f544:	613b      	str	r3, [r7, #16]
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	605a      	str	r2, [r3, #4]
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	3308      	adds	r3, #8
 800f558:	429a      	cmp	r2, r3
 800f55a:	d104      	bne.n	800f566 <vTaskSwitchContext+0xde>
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	685a      	ldr	r2, [r3, #4]
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	605a      	str	r2, [r3, #4]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	4a04      	ldr	r2, [pc, #16]	; (800f580 <vTaskSwitchContext+0xf8>)
 800f56e:	6013      	str	r3, [r2, #0]
}
 800f570:	bf00      	nop
 800f572:	3720      	adds	r7, #32
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	20000a78 	.word	0x20000a78
 800f57c:	20000a6c 	.word	0x20000a6c
 800f580:	200009c8 	.word	0x200009c8
 800f584:	20000a64 	.word	0x20000a64
 800f588:	200009cc 	.word	0x200009cc

0800f58c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f592:	4b0c      	ldr	r3, [pc, #48]	; (800f5c4 <prvResetNextTaskUnblockTime+0x38>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d104      	bne.n	800f5a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f59c:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <prvResetNextTaskUnblockTime+0x3c>)
 800f59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f5a4:	e008      	b.n	800f5b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5a6:	4b07      	ldr	r3, [pc, #28]	; (800f5c4 <prvResetNextTaskUnblockTime+0x38>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	4a04      	ldr	r2, [pc, #16]	; (800f5c8 <prvResetNextTaskUnblockTime+0x3c>)
 800f5b6:	6013      	str	r3, [r2, #0]
}
 800f5b8:	bf00      	nop
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr
 800f5c4:	20000a58 	.word	0x20000a58
 800f5c8:	20000a74 	.word	0x20000a74
 800f5cc:	00000000 	.word	0x00000000

0800f5d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5d0:	4b07      	ldr	r3, [pc, #28]	; (800f5f0 <pxCurrentTCBConst2>)
 800f5d2:	6819      	ldr	r1, [r3, #0]
 800f5d4:	6808      	ldr	r0, [r1, #0]
 800f5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5da:	f380 8809 	msr	PSP, r0
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f04f 0000 	mov.w	r0, #0
 800f5e6:	f380 8811 	msr	BASEPRI, r0
 800f5ea:	4770      	bx	lr
 800f5ec:	f3af 8000 	nop.w

0800f5f0 <pxCurrentTCBConst2>:
 800f5f0:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop
	...

0800f600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f600:	f3ef 8009 	mrs	r0, PSP
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	4b15      	ldr	r3, [pc, #84]	; (800f660 <pxCurrentTCBConst>)
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	f01e 0f10 	tst.w	lr, #16
 800f610:	bf08      	it	eq
 800f612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	6010      	str	r0, [r2, #0]
 800f61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f624:	b672      	cpsid	i
 800f626:	f380 8811 	msr	BASEPRI, r0
 800f62a:	f3bf 8f4f 	dsb	sy
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	b662      	cpsie	i
 800f634:	f7ff ff28 	bl	800f488 <vTaskSwitchContext>
 800f638:	f04f 0000 	mov.w	r0, #0
 800f63c:	f380 8811 	msr	BASEPRI, r0
 800f640:	bc09      	pop	{r0, r3}
 800f642:	6819      	ldr	r1, [r3, #0]
 800f644:	6808      	ldr	r0, [r1, #0]
 800f646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64a:	f01e 0f10 	tst.w	lr, #16
 800f64e:	bf08      	it	eq
 800f650:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f654:	f380 8809 	msr	PSP, r0
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop

0800f660 <pxCurrentTCBConst>:
 800f660:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f664:	bf00      	nop
 800f666:	bf00      	nop

0800f668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	b672      	cpsid	i
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	b662      	cpsie	i
 800f682:	607b      	str	r3, [r7, #4]
}
 800f684:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f686:	f7ff fe45 	bl	800f314 <xTaskIncrementTick>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d003      	beq.n	800f698 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f690:	4b06      	ldr	r3, [pc, #24]	; (800f6ac <SysTick_Handler+0x44>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	2300      	movs	r3, #0
 800f69a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f6a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f6a4:	bf00      	nop
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	e000ed04 	.word	0xe000ed04

0800f6b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff fd3b 	bl	800f13a <USBH_LL_IncTimer>
}
 800f6c4:	bf00      	nop
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7ff fd73 	bl	800f1c6 <USBH_LL_Connect>
}
 800f6e0:	bf00      	nop
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7ff fd7c 	bl	800f1f4 <USBH_LL_Disconnect>
}
 800f6fc:	bf00      	nop
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	70fb      	strb	r3, [r7, #3]
 800f710:	4613      	mov	r3, r2
 800f712:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f72e:	4618      	mov	r0, r3
 800f730:	f7ff fd2d 	bl	800f18e <USBH_LL_PortEnabled>
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7ff fd2d 	bl	800f1aa <USBH_LL_PortDisabled>
}
 800f750:	bf00      	nop
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f760:	2300      	movs	r3, #0
 800f762:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f764:	2300      	movs	r3, #0
 800f766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f76e:	4618      	mov	r0, r3
 800f770:	f7f8 f9b3 	bl	8007ada <HAL_HCD_Stop>
 800f774:	4603      	mov	r3, r0
 800f776:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f778:	7bfb      	ldrb	r3, [r7, #15]
 800f77a:	4618      	mov	r0, r3
 800f77c:	f000 f808 	bl	800f790 <USBH_Get_USB_Status>
 800f780:	4603      	mov	r3, r0
 800f782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f784:	7bbb      	ldrb	r3, [r7, #14]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
	...

0800f790 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f790:	b480      	push	{r7}
 800f792:	b085      	sub	sp, #20
 800f794:	af00      	add	r7, sp, #0
 800f796:	4603      	mov	r3, r0
 800f798:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f79e:	79fb      	ldrb	r3, [r7, #7]
 800f7a0:	2b03      	cmp	r3, #3
 800f7a2:	d817      	bhi.n	800f7d4 <USBH_Get_USB_Status+0x44>
 800f7a4:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <USBH_Get_USB_Status+0x1c>)
 800f7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7aa:	bf00      	nop
 800f7ac:	0800f7bd 	.word	0x0800f7bd
 800f7b0:	0800f7c3 	.word	0x0800f7c3
 800f7b4:	0800f7c9 	.word	0x0800f7c9
 800f7b8:	0800f7cf 	.word	0x0800f7cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	73fb      	strb	r3, [r7, #15]
    break;
 800f7c0:	e00b      	b.n	800f7da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f7c2:	2302      	movs	r3, #2
 800f7c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7c6:	e008      	b.n	800f7da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f7cc:	e005      	b.n	800f7da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f7d2:	e002      	b.n	800f7da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f7d4:	2302      	movs	r3, #2
 800f7d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f7d8:	bf00      	nop
  }
  return usb_status;
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3714      	adds	r7, #20
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <tonecrafter_configure_activations>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	3303      	adds	r3, #3
 800f7f8:	f023 0303 	bic.w	r3, r3, #3
 800f7fc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    lstm_scratch0_array.data = AI_PTR(activations + 0);
 800f7fe:	4a1b      	ldr	r2, [pc, #108]	; (800f86c <tonecrafter_configure_activations+0x84>)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6093      	str	r3, [r2, #8]
    lstm_scratch0_array.data_start = AI_PTR(activations + 0);
 800f804:	4a19      	ldr	r2, [pc, #100]	; (800f86c <tonecrafter_configure_activations+0x84>)
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800f80a:	4b19      	ldr	r3, [pc, #100]	; (800f870 <tonecrafter_configure_activations+0x88>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800f810:	4b17      	ldr	r3, [pc, #92]	; (800f870 <tonecrafter_configure_activations+0x88>)
 800f812:	2200      	movs	r2, #0
 800f814:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations + 512);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f81c:	4a15      	ldr	r2, [pc, #84]	; (800f874 <tonecrafter_configure_activations+0x8c>)
 800f81e:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations + 512);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f826:	4a13      	ldr	r2, [pc, #76]	; (800f874 <tonecrafter_configure_activations+0x8c>)
 800f828:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations + 672);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800f830:	4a11      	ldr	r2, [pc, #68]	; (800f878 <tonecrafter_configure_activations+0x90>)
 800f832:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations + 672);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800f83a:	4a0f      	ldr	r2, [pc, #60]	; (800f878 <tonecrafter_configure_activations+0x90>)
 800f83c:	60d3      	str	r3, [r2, #12]
    lstm_output_array.data = AI_PTR(activations + 688);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800f844:	4a0d      	ldr	r2, [pc, #52]	; (800f87c <tonecrafter_configure_activations+0x94>)
 800f846:	6093      	str	r3, [r2, #8]
    lstm_output_array.data_start = AI_PTR(activations + 688);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800f84e:	4a0b      	ldr	r2, [pc, #44]	; (800f87c <tonecrafter_configure_activations+0x94>)
 800f850:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(NULL);
 800f852:	4b0b      	ldr	r3, [pc, #44]	; (800f880 <tonecrafter_configure_activations+0x98>)
 800f854:	2200      	movs	r2, #0
 800f856:	609a      	str	r2, [r3, #8]
    dense_output_array.data_start = AI_PTR(NULL);
 800f858:	4b09      	ldr	r3, [pc, #36]	; (800f880 <tonecrafter_configure_activations+0x98>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800f85e:	2301      	movs	r3, #1
}
 800f860:	4618      	mov	r0, r3
 800f862:	3714      	adds	r7, #20
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	2000008c 	.word	0x2000008c
 800f870:	2000013c 	.word	0x2000013c
 800f874:	2000014c 	.word	0x2000014c
 800f878:	2000015c 	.word	0x2000015c
 800f87c:	2000016c 	.word	0x2000016c
 800f880:	2000017c 	.word	0x2000017c

0800f884 <tonecrafter_configure_weights>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f894:	4b51      	ldr	r3, [pc, #324]	; (800f9dc <tonecrafter_configure_weights+0x158>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f89c:	4a4f      	ldr	r2, [pc, #316]	; (800f9dc <tonecrafter_configure_weights+0x158>)
 800f89e:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 12512);
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800f8a6:	4413      	add	r3, r2
 800f8a8:	4a4c      	ldr	r2, [pc, #304]	; (800f9dc <tonecrafter_configure_weights+0x158>)
 800f8aa:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 12512);
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800f8b2:	4413      	add	r3, r2
 800f8b4:	4a49      	ldr	r2, [pc, #292]	; (800f9dc <tonecrafter_configure_weights+0x158>)
 800f8b6:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f8b8:	4b49      	ldr	r3, [pc, #292]	; (800f9e0 <tonecrafter_configure_weights+0x15c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f8c0:	4a47      	ldr	r2, [pc, #284]	; (800f9e0 <tonecrafter_configure_weights+0x15c>)
 800f8c2:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 12416);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800f8ca:	4a45      	ldr	r2, [pc, #276]	; (800f9e0 <tonecrafter_configure_weights+0x15c>)
 800f8cc:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 12416);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800f8d4:	4a42      	ldr	r2, [pc, #264]	; (800f9e0 <tonecrafter_configure_weights+0x15c>)
 800f8d6:	60d3      	str	r3, [r2, #12]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 800f8d8:	4b42      	ldr	r3, [pc, #264]	; (800f9e4 <tonecrafter_configure_weights+0x160>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f8e0:	4a40      	ldr	r2, [pc, #256]	; (800f9e4 <tonecrafter_configure_weights+0x160>)
 800f8e2:	6013      	str	r3, [r2, #0]
    lstm_bias_array.data = AI_PTR(weights + 12032);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800f8ea:	4a3e      	ldr	r2, [pc, #248]	; (800f9e4 <tonecrafter_configure_weights+0x160>)
 800f8ec:	6093      	str	r3, [r2, #8]
    lstm_bias_array.data_start = AI_PTR(weights + 12032);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800f8f4:	4a3b      	ldr	r2, [pc, #236]	; (800f9e4 <tonecrafter_configure_weights+0x160>)
 800f8f6:	60d3      	str	r3, [r2, #12]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 800f8f8:	4b3b      	ldr	r3, [pc, #236]	; (800f9e8 <tonecrafter_configure_weights+0x164>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f900:	4a39      	ldr	r2, [pc, #228]	; (800f9e8 <tonecrafter_configure_weights+0x164>)
 800f902:	6013      	str	r3, [r2, #0]
    lstm_peephole_array.data = AI_PTR(weights + 11744);
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800f90a:	4413      	add	r3, r2
 800f90c:	4a36      	ldr	r2, [pc, #216]	; (800f9e8 <tonecrafter_configure_weights+0x164>)
 800f90e:	6093      	str	r3, [r2, #8]
    lstm_peephole_array.data_start = AI_PTR(weights + 11744);
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800f916:	4413      	add	r3, r2
 800f918:	4a33      	ldr	r2, [pc, #204]	; (800f9e8 <tonecrafter_configure_weights+0x164>)
 800f91a:	60d3      	str	r3, [r2, #12]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800f91c:	4b33      	ldr	r3, [pc, #204]	; (800f9ec <tonecrafter_configure_weights+0x168>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f924:	4a31      	ldr	r2, [pc, #196]	; (800f9ec <tonecrafter_configure_weights+0x168>)
 800f926:	6013      	str	r3, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(weights + 2528);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800f92e:	4a2f      	ldr	r2, [pc, #188]	; (800f9ec <tonecrafter_configure_weights+0x168>)
 800f930:	6093      	str	r3, [r2, #8]
    lstm_recurrent_array.data_start = AI_PTR(weights + 2528);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800f938:	4a2c      	ldr	r2, [pc, #176]	; (800f9ec <tonecrafter_configure_weights+0x168>)
 800f93a:	60d3      	str	r3, [r2, #12]
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 800f93c:	4b2c      	ldr	r3, [pc, #176]	; (800f9f0 <tonecrafter_configure_weights+0x16c>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f944:	4a2a      	ldr	r2, [pc, #168]	; (800f9f0 <tonecrafter_configure_weights+0x16c>)
 800f946:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(weights + 992);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800f94e:	4a28      	ldr	r2, [pc, #160]	; (800f9f0 <tonecrafter_configure_weights+0x16c>)
 800f950:	6093      	str	r3, [r2, #8]
    lstm_kernel_array.data_start = AI_PTR(weights + 992);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800f958:	4a25      	ldr	r2, [pc, #148]	; (800f9f0 <tonecrafter_configure_weights+0x16c>)
 800f95a:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800f95c:	4b25      	ldr	r3, [pc, #148]	; (800f9f4 <tonecrafter_configure_weights+0x170>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f964:	4a23      	ldr	r2, [pc, #140]	; (800f9f4 <tonecrafter_configure_weights+0x170>)
 800f966:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights + 976);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800f96e:	4a21      	ldr	r2, [pc, #132]	; (800f9f4 <tonecrafter_configure_weights+0x170>)
 800f970:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights + 976);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800f978:	4a1e      	ldr	r2, [pc, #120]	; (800f9f4 <tonecrafter_configure_weights+0x170>)
 800f97a:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800f97c:	4b1e      	ldr	r3, [pc, #120]	; (800f9f8 <tonecrafter_configure_weights+0x174>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f984:	4a1c      	ldr	r2, [pc, #112]	; (800f9f8 <tonecrafter_configure_weights+0x174>)
 800f986:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights + 208);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	33d0      	adds	r3, #208	; 0xd0
 800f98c:	4a1a      	ldr	r2, [pc, #104]	; (800f9f8 <tonecrafter_configure_weights+0x174>)
 800f98e:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights + 208);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	33d0      	adds	r3, #208	; 0xd0
 800f994:	4a18      	ldr	r2, [pc, #96]	; (800f9f8 <tonecrafter_configure_weights+0x174>)
 800f996:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 800f998:	4b18      	ldr	r3, [pc, #96]	; (800f9fc <tonecrafter_configure_weights+0x178>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f9a0:	4a16      	ldr	r2, [pc, #88]	; (800f9fc <tonecrafter_configure_weights+0x178>)
 800f9a2:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights + 192);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	33c0      	adds	r3, #192	; 0xc0
 800f9a8:	4a14      	ldr	r2, [pc, #80]	; (800f9fc <tonecrafter_configure_weights+0x178>)
 800f9aa:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights + 192);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	33c0      	adds	r3, #192	; 0xc0
 800f9b0:	4a12      	ldr	r2, [pc, #72]	; (800f9fc <tonecrafter_configure_weights+0x178>)
 800f9b2:	60d3      	str	r3, [r2, #12]
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f9b4:	4b12      	ldr	r3, [pc, #72]	; (800fa00 <tonecrafter_configure_weights+0x17c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f9bc:	4a10      	ldr	r2, [pc, #64]	; (800fa00 <tonecrafter_configure_weights+0x17c>)
 800f9be:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights + 0);
 800f9c0:	4a0f      	ldr	r2, [pc, #60]	; (800fa00 <tonecrafter_configure_weights+0x17c>)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights + 0);
 800f9c6:	4a0e      	ldr	r2, [pc, #56]	; (800fa00 <tonecrafter_configure_weights+0x17c>)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800f9cc:	2301      	movs	r3, #1
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3714      	adds	r7, #20
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	2000009c 	.word	0x2000009c
 800f9e0:	200000ac 	.word	0x200000ac
 800f9e4:	200000bc 	.word	0x200000bc
 800f9e8:	200000cc 	.word	0x200000cc
 800f9ec:	200000dc 	.word	0x200000dc
 800f9f0:	200000ec 	.word	0x200000ec
 800f9f4:	200000fc 	.word	0x200000fc
 800f9f8:	2000010c 	.word	0x2000010c
 800f9fc:	2000011c 	.word	0x2000011c
 800fa00:	2000012c 	.word	0x2000012c

0800fa04 <ai_tonecrafter_create>:
}

AI_API_ENTRY
ai_error ai_tonecrafter_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800fa0e:	2300      	movs	r3, #0
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	2303      	movs	r3, #3
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	2301      	movs	r3, #1
 800fa18:	4a04      	ldr	r2, [pc, #16]	; (800fa2c <ai_tonecrafter_create+0x28>)
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f861 	bl	800fae4 <ai_platform_network_create>
 800fa22:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	2000002c 	.word	0x2000002c

0800fa30 <ai_tonecrafter_init>:
}

AI_API_ENTRY
ai_bool ai_tonecrafter_init(
  ai_handle network, const ai_network_params* params)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f8d5 	bl	800fbec <ai_platform_network_init>
 800fa42:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <ai_tonecrafter_init+0x1e>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e02b      	b.n	800faa6 <ai_tonecrafter_init+0x76>

  ai_bool ok = true;
 800fa4e:	2301      	movs	r3, #1
 800fa50:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_weights(net_ctx, &params->params);
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	4619      	mov	r1, r3
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7ff ff14 	bl	800f884 <tonecrafter_configure_weights>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461a      	mov	r2, r3
 800fa60:	7afb      	ldrb	r3, [r7, #11]
 800fa62:	4013      	ands	r3, r2
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	bf14      	ite	ne
 800fa68:	2301      	movne	r3, #1
 800fa6a:	2300      	moveq	r3, #0
 800fa6c:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_activations(net_ctx, &params->activations);
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	3318      	adds	r3, #24
 800fa72:	4619      	mov	r1, r3
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7ff feb7 	bl	800f7e8 <tonecrafter_configure_activations>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	7afb      	ldrb	r3, [r7, #11]
 800fa80:	4013      	ands	r3, r2
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	bf14      	ite	ne
 800fa86:	2301      	movne	r3, #1
 800fa88:	2300      	moveq	r3, #0
 800fa8a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 f995 	bl	800fdbc <ai_platform_network_post_init>
 800fa92:	4603      	mov	r3, r0
 800fa94:	461a      	mov	r2, r3
 800fa96:	7afb      	ldrb	r3, [r7, #11]
 800fa98:	4013      	ands	r3, r2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	bf14      	ite	ne
 800fa9e:	2301      	movne	r3, #1
 800faa0:	2300      	moveq	r3, #0
 800faa2:	72fb      	strb	r3, [r7, #11]

  return ok;
 800faa4:	7afb      	ldrb	r3, [r7, #11]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <ai_tonecrafter_run>:


AI_API_ENTRY
ai_i32 ai_tonecrafter_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	60f8      	str	r0, [r7, #12]
 800fab6:	60b9      	str	r1, [r7, #8]
 800fab8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800faba:	687a      	ldr	r2, [r7, #4]
 800fabc:	68b9      	ldr	r1, [r7, #8]
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f000 fa28 	bl	800ff14 <ai_platform_network_process>
 800fac4:	4603      	mov	r3, r0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 800fad0:	b480      	push	{r7}
 800fad2:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 800fad4:	4b02      	ldr	r3, [pc, #8]	; (800fae0 <ai_tonecrafter_data_weights_get+0x10>)

}
 800fad6:	4618      	mov	r0, r3
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	08018434 	.word	0x08018434

0800fae4 <ai_platform_network_create>:
 800fae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fae6:	4d36      	ldr	r5, [pc, #216]	; (800fbc0 <ai_platform_network_create+0xdc>)
 800fae8:	b083      	sub	sp, #12
 800faea:	4e36      	ldr	r6, [pc, #216]	; (800fbc4 <ai_platform_network_create+0xe0>)
 800faec:	6829      	ldr	r1, [r5, #0]
 800faee:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800faf2:	f021 0101 	bic.w	r1, r1, #1
 800faf6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800fafa:	6029      	str	r1, [r5, #0]
 800fafc:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800fb00:	6831      	ldr	r1, [r6, #0]
 800fb02:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800fb06:	194d      	adds	r5, r1, r5
 800fb08:	2d01      	cmp	r5, #1
 800fb0a:	d92f      	bls.n	800fb6c <ai_platform_network_create+0x88>
 800fb0c:	f240 4549 	movw	r5, #1097	; 0x449
 800fb10:	42a9      	cmp	r1, r5
 800fb12:	d02b      	beq.n	800fb6c <ai_platform_network_create+0x88>
 800fb14:	492c      	ldr	r1, [pc, #176]	; (800fbc8 <ai_platform_network_create+0xe4>)
 800fb16:	6809      	ldr	r1, [r1, #0]
 800fb18:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800fb1c:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800fb20:	d015      	beq.n	800fb4e <ai_platform_network_create+0x6a>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d031      	beq.n	800fb8a <ai_platform_network_create+0xa6>
 800fb26:	461e      	mov	r6, r3
 800fb28:	4613      	mov	r3, r2
 800fb2a:	4a28      	ldr	r2, [pc, #160]	; (800fbcc <ai_platform_network_create+0xe8>)
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	6003      	str	r3, [r0, #0]
 800fb32:	f000 fc9f 	bl	8010474 <core_init>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d02b      	beq.n	800fb92 <ai_platform_network_create+0xae>
 800fb3a:	0223      	lsls	r3, r4, #8
 800fb3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb40:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800fb44:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800fb48:	d92e      	bls.n	800fba8 <ai_platform_network_create+0xc4>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e022      	b.n	800fb94 <ai_platform_network_create+0xb0>
 800fb4e:	4920      	ldr	r1, [pc, #128]	; (800fbd0 <ai_platform_network_create+0xec>)
 800fb50:	2501      	movs	r5, #1
 800fb52:	460e      	mov	r6, r1
 800fb54:	600d      	str	r5, [r1, #0]
 800fb56:	6831      	ldr	r1, [r6, #0]
 800fb58:	2900      	cmp	r1, #0
 800fb5a:	d1fc      	bne.n	800fb56 <ai_platform_network_create+0x72>
 800fb5c:	491d      	ldr	r1, [pc, #116]	; (800fbd4 <ai_platform_network_create+0xf0>)
 800fb5e:	4e1e      	ldr	r6, [pc, #120]	; (800fbd8 <ai_platform_network_create+0xf4>)
 800fb60:	4d1e      	ldr	r5, [pc, #120]	; (800fbdc <ai_platform_network_create+0xf8>)
 800fb62:	600e      	str	r6, [r1, #0]
 800fb64:	6809      	ldr	r1, [r1, #0]
 800fb66:	42a9      	cmp	r1, r5
 800fb68:	d0db      	beq.n	800fb22 <ai_platform_network_create+0x3e>
 800fb6a:	e7fe      	b.n	800fb6a <ai_platform_network_create+0x86>
 800fb6c:	491c      	ldr	r1, [pc, #112]	; (800fbe0 <ai_platform_network_create+0xfc>)
 800fb6e:	2501      	movs	r5, #1
 800fb70:	460e      	mov	r6, r1
 800fb72:	600d      	str	r5, [r1, #0]
 800fb74:	6831      	ldr	r1, [r6, #0]
 800fb76:	2900      	cmp	r1, #0
 800fb78:	d1fc      	bne.n	800fb74 <ai_platform_network_create+0x90>
 800fb7a:	491a      	ldr	r1, [pc, #104]	; (800fbe4 <ai_platform_network_create+0x100>)
 800fb7c:	4e16      	ldr	r6, [pc, #88]	; (800fbd8 <ai_platform_network_create+0xf4>)
 800fb7e:	4d17      	ldr	r5, [pc, #92]	; (800fbdc <ai_platform_network_create+0xf8>)
 800fb80:	600e      	str	r6, [r1, #0]
 800fb82:	6809      	ldr	r1, [r1, #0]
 800fb84:	42a9      	cmp	r1, r5
 800fb86:	d0cc      	beq.n	800fb22 <ai_platform_network_create+0x3e>
 800fb88:	e7fe      	b.n	800fb88 <ai_platform_network_create+0xa4>
 800fb8a:	f241 0010 	movw	r0, #4112	; 0x1010
 800fb8e:	b003      	add	sp, #12
 800fb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb92:	2330      	movs	r3, #48	; 0x30
 800fb94:	2100      	movs	r1, #0
 800fb96:	2210      	movs	r2, #16
 800fb98:	6029      	str	r1, [r5, #0]
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	f363 0007 	bfi	r0, r3, #0, #8
 800fba0:	f362 201f 	bfi	r0, r2, #8, #24
 800fba4:	b003      	add	sp, #12
 800fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fba8:	4b0f      	ldr	r3, [pc, #60]	; (800fbe8 <ai_platform_network_create+0x104>)
 800fbaa:	a802      	add	r0, sp, #8
 800fbac:	f840 3d04 	str.w	r3, [r0, #-4]!
 800fbb0:	f002 fdf4 	bl	801279c <ai_check_custom_types>
 800fbb4:	b110      	cbz	r0, 800fbbc <ai_platform_network_create+0xd8>
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	4613      	mov	r3, r2
 800fbba:	e7ee      	b.n	800fb9a <ai_platform_network_create+0xb6>
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	e7e9      	b.n	800fb94 <ai_platform_network_create+0xb0>
 800fbc0:	e0002000 	.word	0xe0002000
 800fbc4:	e0042000 	.word	0xe0042000
 800fbc8:	5c001000 	.word	0x5c001000
 800fbcc:	a1c00100 	.word	0xa1c00100
 800fbd0:	58024c08 	.word	0x58024c08
 800fbd4:	58024c00 	.word	0x58024c00
 800fbd8:	f407a5c2 	.word	0xf407a5c2
 800fbdc:	b5e8b5cd 	.word	0xb5e8b5cd
 800fbe0:	40023008 	.word	0x40023008
 800fbe4:	40023000 	.word	0x40023000
 800fbe8:	84048403 	.word	0x84048403

0800fbec <ai_platform_network_init>:
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d05e      	beq.n	800fcb0 <ai_platform_network_init+0xc4>
 800fbf2:	4b68      	ldr	r3, [pc, #416]	; (800fd94 <ai_platform_network_init+0x1a8>)
 800fbf4:	6802      	ldr	r2, [r0, #0]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d15a      	bne.n	800fcb0 <ai_platform_network_init+0xc4>
 800fbfa:	4a67      	ldr	r2, [pc, #412]	; (800fd98 <ai_platform_network_init+0x1ac>)
 800fbfc:	4c67      	ldr	r4, [pc, #412]	; (800fd9c <ai_platform_network_init+0x1b0>)
 800fbfe:	6813      	ldr	r3, [r2, #0]
 800fc00:	f023 0301 	bic.w	r3, r3, #1
 800fc04:	6013      	str	r3, [r2, #0]
 800fc06:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc10:	189a      	adds	r2, r3, r2
 800fc12:	2a01      	cmp	r2, #1
 800fc14:	d93d      	bls.n	800fc92 <ai_platform_network_init+0xa6>
 800fc16:	f240 4249 	movw	r2, #1097	; 0x449
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d039      	beq.n	800fc92 <ai_platform_network_init+0xa6>
 800fc1e:	4b60      	ldr	r3, [pc, #384]	; (800fda0 <ai_platform_network_init+0x1b4>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc26:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fc2a:	d06b      	beq.n	800fd04 <ai_platform_network_init+0x118>
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	2900      	cmp	r1, #0
 800fc32:	f000 80a8 	beq.w	800fd86 <ai_platform_network_init+0x19a>
 800fc36:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800fc38:	690e      	ldr	r6, [r1, #16]
 800fc3a:	2f00      	cmp	r7, #0
 800fc3c:	f000 8092 	beq.w	800fd64 <ai_platform_network_init+0x178>
 800fc40:	2e00      	cmp	r6, #0
 800fc42:	d07d      	beq.n	800fd40 <ai_platform_network_init+0x154>
 800fc44:	f104 0718 	add.w	r7, r4, #24
 800fc48:	f105 0c18 	add.w	ip, r5, #24
 800fc4c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800fc50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc56:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc5a:	2403      	movs	r4, #3
 800fc5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fc62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc64:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fc68:	e886 0003 	stmia.w	r6, {r0, r1}
 800fc6c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800fc6e:	60ec      	str	r4, [r5, #12]
 800fc70:	b16a      	cbz	r2, 800fc8e <ai_platform_network_init+0xa2>
 800fc72:	68d3      	ldr	r3, [r2, #12]
 800fc74:	6095      	str	r5, [r2, #8]
 800fc76:	b153      	cbz	r3, 800fc8e <ai_platform_network_init+0xa2>
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d104      	bne.n	800fc86 <ai_platform_network_init+0x9a>
 800fc7c:	e007      	b.n	800fc8e <ai_platform_network_init+0xa2>
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	4613      	mov	r3, r2
 800fc82:	d004      	beq.n	800fc8e <ai_platform_network_init+0xa2>
 800fc84:	b11a      	cbz	r2, 800fc8e <ai_platform_network_init+0xa2>
 800fc86:	68da      	ldr	r2, [r3, #12]
 800fc88:	609d      	str	r5, [r3, #8]
 800fc8a:	2a00      	cmp	r2, #0
 800fc8c:	d1f7      	bne.n	800fc7e <ai_platform_network_init+0x92>
 800fc8e:	4628      	mov	r0, r5
 800fc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc92:	4b44      	ldr	r3, [pc, #272]	; (800fda4 <ai_platform_network_init+0x1b8>)
 800fc94:	2201      	movs	r2, #1
 800fc96:	461c      	mov	r4, r3
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	6823      	ldr	r3, [r4, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1fc      	bne.n	800fc9a <ai_platform_network_init+0xae>
 800fca0:	4b41      	ldr	r3, [pc, #260]	; (800fda8 <ai_platform_network_init+0x1bc>)
 800fca2:	4c42      	ldr	r4, [pc, #264]	; (800fdac <ai_platform_network_init+0x1c0>)
 800fca4:	4a42      	ldr	r2, [pc, #264]	; (800fdb0 <ai_platform_network_init+0x1c4>)
 800fca6:	601c      	str	r4, [r3, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d0be      	beq.n	800fc2c <ai_platform_network_init+0x40>
 800fcae:	e7fe      	b.n	800fcae <ai_platform_network_init+0xc2>
 800fcb0:	4a39      	ldr	r2, [pc, #228]	; (800fd98 <ai_platform_network_init+0x1ac>)
 800fcb2:	493a      	ldr	r1, [pc, #232]	; (800fd9c <ai_platform_network_init+0x1b0>)
 800fcb4:	6813      	ldr	r3, [r2, #0]
 800fcb6:	f023 0301 	bic.w	r3, r3, #1
 800fcba:	6013      	str	r3, [r2, #0]
 800fcbc:	680b      	ldr	r3, [r1, #0]
 800fcbe:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fcc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fcc6:	185a      	adds	r2, r3, r1
 800fcc8:	2a01      	cmp	r2, #1
 800fcca:	d90c      	bls.n	800fce6 <ai_platform_network_init+0xfa>
 800fccc:	f240 4249 	movw	r2, #1097	; 0x449
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d008      	beq.n	800fce6 <ai_platform_network_init+0xfa>
 800fcd4:	4b32      	ldr	r3, [pc, #200]	; (800fda0 <ai_platform_network_init+0x1b4>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fcdc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fce0:	d01f      	beq.n	800fd22 <ai_platform_network_init+0x136>
 800fce2:	2000      	movs	r0, #0
 800fce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce6:	4b2f      	ldr	r3, [pc, #188]	; (800fda4 <ai_platform_network_init+0x1b8>)
 800fce8:	2201      	movs	r2, #1
 800fcea:	4619      	mov	r1, r3
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	680b      	ldr	r3, [r1, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1fc      	bne.n	800fcee <ai_platform_network_init+0x102>
 800fcf4:	4b2c      	ldr	r3, [pc, #176]	; (800fda8 <ai_platform_network_init+0x1bc>)
 800fcf6:	492d      	ldr	r1, [pc, #180]	; (800fdac <ai_platform_network_init+0x1c0>)
 800fcf8:	4a2d      	ldr	r2, [pc, #180]	; (800fdb0 <ai_platform_network_init+0x1c4>)
 800fcfa:	6019      	str	r1, [r3, #0]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d0ef      	beq.n	800fce2 <ai_platform_network_init+0xf6>
 800fd02:	e7fe      	b.n	800fd02 <ai_platform_network_init+0x116>
 800fd04:	4b2b      	ldr	r3, [pc, #172]	; (800fdb4 <ai_platform_network_init+0x1c8>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	461c      	mov	r4, r3
 800fd0a:	601a      	str	r2, [r3, #0]
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1fc      	bne.n	800fd0c <ai_platform_network_init+0x120>
 800fd12:	4b29      	ldr	r3, [pc, #164]	; (800fdb8 <ai_platform_network_init+0x1cc>)
 800fd14:	4c25      	ldr	r4, [pc, #148]	; (800fdac <ai_platform_network_init+0x1c0>)
 800fd16:	4a26      	ldr	r2, [pc, #152]	; (800fdb0 <ai_platform_network_init+0x1c4>)
 800fd18:	601c      	str	r4, [r3, #0]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d085      	beq.n	800fc2c <ai_platform_network_init+0x40>
 800fd20:	e7fe      	b.n	800fd20 <ai_platform_network_init+0x134>
 800fd22:	4b24      	ldr	r3, [pc, #144]	; (800fdb4 <ai_platform_network_init+0x1c8>)
 800fd24:	2201      	movs	r2, #1
 800fd26:	4619      	mov	r1, r3
 800fd28:	601a      	str	r2, [r3, #0]
 800fd2a:	680b      	ldr	r3, [r1, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1fc      	bne.n	800fd2a <ai_platform_network_init+0x13e>
 800fd30:	4b21      	ldr	r3, [pc, #132]	; (800fdb8 <ai_platform_network_init+0x1cc>)
 800fd32:	491e      	ldr	r1, [pc, #120]	; (800fdac <ai_platform_network_init+0x1c0>)
 800fd34:	4a1e      	ldr	r2, [pc, #120]	; (800fdb0 <ai_platform_network_init+0x1c4>)
 800fd36:	6019      	str	r1, [r3, #0]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d0d1      	beq.n	800fce2 <ai_platform_network_init+0xf6>
 800fd3e:	e7fe      	b.n	800fd3e <ai_platform_network_init+0x152>
 800fd40:	8921      	ldrh	r1, [r4, #8]
 800fd42:	88e2      	ldrh	r2, [r4, #6]
 800fd44:	68e3      	ldr	r3, [r4, #12]
 800fd46:	fb02 f201 	mul.w	r2, r2, r1
 800fd4a:	fb03 f302 	mul.w	r3, r3, r2
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f43f af78 	beq.w	800fc44 <ai_platform_network_init+0x58>
 800fd54:	f105 0010 	add.w	r0, r5, #16
 800fd58:	2212      	movs	r2, #18
 800fd5a:	2110      	movs	r1, #16
 800fd5c:	f000 fb8c 	bl	8010478 <core_set_error>
 800fd60:	4630      	mov	r0, r6
 800fd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd64:	8c09      	ldrh	r1, [r1, #32]
 800fd66:	8be2      	ldrh	r2, [r4, #30]
 800fd68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd6a:	fb02 f201 	mul.w	r2, r2, r1
 800fd6e:	fb03 f302 	mul.w	r3, r3, r2
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f43f af64 	beq.w	800fc40 <ai_platform_network_init+0x54>
 800fd78:	2213      	movs	r2, #19
 800fd7a:	2110      	movs	r1, #16
 800fd7c:	3010      	adds	r0, #16
 800fd7e:	f000 fb7b 	bl	8010478 <core_set_error>
 800fd82:	4638      	mov	r0, r7
 800fd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd86:	2211      	movs	r2, #17
 800fd88:	2110      	movs	r1, #16
 800fd8a:	3010      	adds	r0, #16
 800fd8c:	f000 fb74 	bl	8010478 <core_set_error>
 800fd90:	4620      	mov	r0, r4
 800fd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd94:	a1c00100 	.word	0xa1c00100
 800fd98:	e0002000 	.word	0xe0002000
 800fd9c:	e0042000 	.word	0xe0042000
 800fda0:	5c001000 	.word	0x5c001000
 800fda4:	40023008 	.word	0x40023008
 800fda8:	40023000 	.word	0x40023000
 800fdac:	f407a5c2 	.word	0xf407a5c2
 800fdb0:	b5e8b5cd 	.word	0xb5e8b5cd
 800fdb4:	58024c08 	.word	0x58024c08
 800fdb8:	58024c00 	.word	0x58024c00

0800fdbc <ai_platform_network_post_init>:
 800fdbc:	b538      	push	{r3, r4, r5, lr}
 800fdbe:	b118      	cbz	r0, 800fdc8 <ai_platform_network_post_init+0xc>
 800fdc0:	4b4a      	ldr	r3, [pc, #296]	; (800feec <ai_platform_network_post_init+0x130>)
 800fdc2:	6802      	ldr	r2, [r0, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d029      	beq.n	800fe1c <ai_platform_network_post_init+0x60>
 800fdc8:	4a49      	ldr	r2, [pc, #292]	; (800fef0 <ai_platform_network_post_init+0x134>)
 800fdca:	494a      	ldr	r1, [pc, #296]	; (800fef4 <ai_platform_network_post_init+0x138>)
 800fdcc:	6813      	ldr	r3, [r2, #0]
 800fdce:	f023 0301 	bic.w	r3, r3, #1
 800fdd2:	6013      	str	r3, [r2, #0]
 800fdd4:	680b      	ldr	r3, [r1, #0]
 800fdd6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fdda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdde:	185a      	adds	r2, r3, r1
 800fde0:	2a01      	cmp	r2, #1
 800fde2:	d90c      	bls.n	800fdfe <ai_platform_network_post_init+0x42>
 800fde4:	f240 4249 	movw	r2, #1097	; 0x449
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d008      	beq.n	800fdfe <ai_platform_network_post_init+0x42>
 800fdec:	4b42      	ldr	r3, [pc, #264]	; (800fef8 <ai_platform_network_post_init+0x13c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdf4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fdf8:	d044      	beq.n	800fe84 <ai_platform_network_post_init+0xc8>
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	4b3f      	ldr	r3, [pc, #252]	; (800fefc <ai_platform_network_post_init+0x140>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	4619      	mov	r1, r3
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	680b      	ldr	r3, [r1, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d1fc      	bne.n	800fe06 <ai_platform_network_post_init+0x4a>
 800fe0c:	4b3c      	ldr	r3, [pc, #240]	; (800ff00 <ai_platform_network_post_init+0x144>)
 800fe0e:	493d      	ldr	r1, [pc, #244]	; (800ff04 <ai_platform_network_post_init+0x148>)
 800fe10:	4a3d      	ldr	r2, [pc, #244]	; (800ff08 <ai_platform_network_post_init+0x14c>)
 800fe12:	6019      	str	r1, [r3, #0]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d0ef      	beq.n	800fdfa <ai_platform_network_post_init+0x3e>
 800fe1a:	e7fe      	b.n	800fe1a <ai_platform_network_post_init+0x5e>
 800fe1c:	4a34      	ldr	r2, [pc, #208]	; (800fef0 <ai_platform_network_post_init+0x134>)
 800fe1e:	4935      	ldr	r1, [pc, #212]	; (800fef4 <ai_platform_network_post_init+0x138>)
 800fe20:	6813      	ldr	r3, [r2, #0]
 800fe22:	f023 0301 	bic.w	r3, r3, #1
 800fe26:	6013      	str	r3, [r2, #0]
 800fe28:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fe2c:	680b      	ldr	r3, [r1, #0]
 800fe2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe32:	189a      	adds	r2, r3, r2
 800fe34:	2a01      	cmp	r2, #1
 800fe36:	d94a      	bls.n	800fece <ai_platform_network_post_init+0x112>
 800fe38:	f240 4249 	movw	r2, #1097	; 0x449
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d046      	beq.n	800fece <ai_platform_network_post_init+0x112>
 800fe40:	4b2d      	ldr	r3, [pc, #180]	; (800fef8 <ai_platform_network_post_init+0x13c>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe48:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fe4c:	d030      	beq.n	800feb0 <ai_platform_network_post_init+0xf4>
 800fe4e:	68c3      	ldr	r3, [r0, #12]
 800fe50:	4604      	mov	r4, r0
 800fe52:	f013 0502 	ands.w	r5, r3, #2
 800fe56:	d024      	beq.n	800fea2 <ai_platform_network_post_init+0xe6>
 800fe58:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800fe5a:	b18b      	cbz	r3, 800fe80 <ai_platform_network_post_init+0xc4>
 800fe5c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800fe5e:	b90d      	cbnz	r5, 800fe64 <ai_platform_network_post_init+0xa8>
 800fe60:	e00e      	b.n	800fe80 <ai_platform_network_post_init+0xc4>
 800fe62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe64:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fe66:	4629      	mov	r1, r5
 800fe68:	2000      	movs	r0, #0
 800fe6a:	4798      	blx	r3
 800fe6c:	68ea      	ldr	r2, [r5, #12]
 800fe6e:	1b53      	subs	r3, r2, r5
 800fe70:	4615      	mov	r5, r2
 800fe72:	bf18      	it	ne
 800fe74:	2301      	movne	r3, #1
 800fe76:	2a00      	cmp	r2, #0
 800fe78:	bf08      	it	eq
 800fe7a:	2300      	moveq	r3, #0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d1f0      	bne.n	800fe62 <ai_platform_network_post_init+0xa6>
 800fe80:	2001      	movs	r0, #1
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	4b21      	ldr	r3, [pc, #132]	; (800ff0c <ai_platform_network_post_init+0x150>)
 800fe86:	2201      	movs	r2, #1
 800fe88:	4619      	mov	r1, r3
 800fe8a:	601a      	str	r2, [r3, #0]
 800fe8c:	680b      	ldr	r3, [r1, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1fc      	bne.n	800fe8c <ai_platform_network_post_init+0xd0>
 800fe92:	4b1f      	ldr	r3, [pc, #124]	; (800ff10 <ai_platform_network_post_init+0x154>)
 800fe94:	491b      	ldr	r1, [pc, #108]	; (800ff04 <ai_platform_network_post_init+0x148>)
 800fe96:	4a1c      	ldr	r2, [pc, #112]	; (800ff08 <ai_platform_network_post_init+0x14c>)
 800fe98:	6019      	str	r1, [r3, #0]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d0ac      	beq.n	800fdfa <ai_platform_network_post_init+0x3e>
 800fea0:	e7fe      	b.n	800fea0 <ai_platform_network_post_init+0xe4>
 800fea2:	2210      	movs	r2, #16
 800fea4:	2111      	movs	r1, #17
 800fea6:	3010      	adds	r0, #16
 800fea8:	f000 fae6 	bl	8010478 <core_set_error>
 800feac:	4628      	mov	r0, r5
 800feae:	bd38      	pop	{r3, r4, r5, pc}
 800feb0:	4b16      	ldr	r3, [pc, #88]	; (800ff0c <ai_platform_network_post_init+0x150>)
 800feb2:	2201      	movs	r2, #1
 800feb4:	4619      	mov	r1, r3
 800feb6:	601a      	str	r2, [r3, #0]
 800feb8:	680b      	ldr	r3, [r1, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d1fc      	bne.n	800feb8 <ai_platform_network_post_init+0xfc>
 800febe:	4b14      	ldr	r3, [pc, #80]	; (800ff10 <ai_platform_network_post_init+0x154>)
 800fec0:	4910      	ldr	r1, [pc, #64]	; (800ff04 <ai_platform_network_post_init+0x148>)
 800fec2:	4a11      	ldr	r2, [pc, #68]	; (800ff08 <ai_platform_network_post_init+0x14c>)
 800fec4:	6019      	str	r1, [r3, #0]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4293      	cmp	r3, r2
 800feca:	d0c0      	beq.n	800fe4e <ai_platform_network_post_init+0x92>
 800fecc:	e7fe      	b.n	800fecc <ai_platform_network_post_init+0x110>
 800fece:	4b0b      	ldr	r3, [pc, #44]	; (800fefc <ai_platform_network_post_init+0x140>)
 800fed0:	2201      	movs	r2, #1
 800fed2:	4619      	mov	r1, r3
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	680b      	ldr	r3, [r1, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1fc      	bne.n	800fed6 <ai_platform_network_post_init+0x11a>
 800fedc:	4b08      	ldr	r3, [pc, #32]	; (800ff00 <ai_platform_network_post_init+0x144>)
 800fede:	4909      	ldr	r1, [pc, #36]	; (800ff04 <ai_platform_network_post_init+0x148>)
 800fee0:	4a09      	ldr	r2, [pc, #36]	; (800ff08 <ai_platform_network_post_init+0x14c>)
 800fee2:	6019      	str	r1, [r3, #0]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d0b1      	beq.n	800fe4e <ai_platform_network_post_init+0x92>
 800feea:	e7fe      	b.n	800feea <ai_platform_network_post_init+0x12e>
 800feec:	a1c00100 	.word	0xa1c00100
 800fef0:	e0002000 	.word	0xe0002000
 800fef4:	e0042000 	.word	0xe0042000
 800fef8:	5c001000 	.word	0x5c001000
 800fefc:	40023008 	.word	0x40023008
 800ff00:	40023000 	.word	0x40023000
 800ff04:	f407a5c2 	.word	0xf407a5c2
 800ff08:	b5e8b5cd 	.word	0xb5e8b5cd
 800ff0c:	58024c08 	.word	0x58024c08
 800ff10:	58024c00 	.word	0x58024c00

0800ff14 <ai_platform_network_process>:
 800ff14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff18:	4692      	mov	sl, r2
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	b120      	cbz	r0, 800ff2a <ai_platform_network_process+0x16>
 800ff20:	4b86      	ldr	r3, [pc, #536]	; (801013c <ai_platform_network_process+0x228>)
 800ff22:	6802      	ldr	r2, [r0, #0]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	bf18      	it	ne
 800ff28:	2400      	movne	r4, #0
 800ff2a:	4a85      	ldr	r2, [pc, #532]	; (8010140 <ai_platform_network_process+0x22c>)
 800ff2c:	4885      	ldr	r0, [pc, #532]	; (8010144 <ai_platform_network_process+0x230>)
 800ff2e:	6813      	ldr	r3, [r2, #0]
 800ff30:	f023 0301 	bic.w	r3, r3, #1
 800ff34:	6013      	str	r3, [r2, #0]
 800ff36:	6803      	ldr	r3, [r0, #0]
 800ff38:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800ff3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff40:	181a      	adds	r2, r3, r0
 800ff42:	2a01      	cmp	r2, #1
 800ff44:	f240 80c6 	bls.w	80100d4 <ai_platform_network_process+0x1c0>
 800ff48:	f240 4249 	movw	r2, #1097	; 0x449
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	f000 80c1 	beq.w	80100d4 <ai_platform_network_process+0x1c0>
 800ff52:	4b7d      	ldr	r3, [pc, #500]	; (8010148 <ai_platform_network_process+0x234>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff5a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ff5e:	f000 80a9 	beq.w	80100b4 <ai_platform_network_process+0x1a0>
 800ff62:	2c00      	cmp	r4, #0
 800ff64:	f000 80db 	beq.w	801011e <ai_platform_network_process+0x20a>
 800ff68:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800ff6c:	68e0      	ldr	r0, [r4, #12]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f000 0003 	and.w	r0, r0, #3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 80bd 	beq.w	80100f4 <ai_platform_network_process+0x1e0>
 800ff7a:	2600      	movs	r6, #0
 800ff7c:	2803      	cmp	r0, #3
 800ff7e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ff80:	6166      	str	r6, [r4, #20]
 800ff82:	f040 80c6 	bne.w	8010112 <ai_platform_network_process+0x1fe>
 800ff86:	2900      	cmp	r1, #0
 800ff88:	f000 80b7 	beq.w	80100fa <ai_platform_network_process+0x1e6>
 800ff8c:	fab5 f085 	clz	r0, r5
 800ff90:	0940      	lsrs	r0, r0, #5
 800ff92:	2800      	cmp	r0, #0
 800ff94:	f040 80b1 	bne.w	80100fa <ai_platform_network_process+0x1e6>
 800ff98:	882e      	ldrh	r6, [r5, #0]
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	f000 80ad 	beq.w	80100fa <ai_platform_network_process+0x1e6>
 800ffa0:	888f      	ldrh	r7, [r1, #4]
 800ffa2:	686e      	ldr	r6, [r5, #4]
 800ffa4:	9701      	str	r7, [sp, #4]
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	f000 825f 	beq.w	801046a <ai_platform_network_process+0x556>
 800ffac:	6836      	ldr	r6, [r6, #0]
 800ffae:	2e00      	cmp	r6, #0
 800ffb0:	f000 825b 	beq.w	801046a <ai_platform_network_process+0x556>
 800ffb4:	68ab      	ldr	r3, [r5, #8]
 800ffb6:	f8d3 9000 	ldr.w	r9, [r3]
 800ffba:	f1b9 0f00 	cmp.w	r9, #0
 800ffbe:	f000 809c 	beq.w	80100fa <ai_platform_network_process+0x1e6>
 800ffc2:	460f      	mov	r7, r1
 800ffc4:	4680      	mov	r8, r0
 800ffc6:	e05e      	b.n	8010086 <ai_platform_network_process+0x172>
 800ffc8:	68f3      	ldr	r3, [r6, #12]
 800ffca:	68da      	ldr	r2, [r3, #12]
 800ffcc:	455a      	cmp	r2, fp
 800ffce:	d168      	bne.n	80100a2 <ai_platform_network_process+0x18e>
 800ffd0:	689a      	ldr	r2, [r3, #8]
 800ffd2:	4572      	cmp	r2, lr
 800ffd4:	d165      	bne.n	80100a2 <ai_platform_network_process+0x18e>
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	459c      	cmp	ip, r3
 800ffda:	d162      	bne.n	80100a2 <ai_platform_network_process+0x18e>
 800ffdc:	6800      	ldr	r0, [r0, #0]
 800ffde:	f002 fc8d 	bl	80128fc <ai_array_get_byte_size>
 800ffe2:	68f2      	ldr	r2, [r6, #12]
 800ffe4:	6973      	ldr	r3, [r6, #20]
 800ffe6:	68d2      	ldr	r2, [r2, #12]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	fb03 f302 	mul.w	r3, r3, r2
 800ffee:	4298      	cmp	r0, r3
 800fff0:	d357      	bcc.n	80100a2 <ai_platform_network_process+0x18e>
 800fff2:	69b3      	ldr	r3, [r6, #24]
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	f002 fc35 	bl	8012864 <ai_array_to_buffer_fmt>
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	4043      	eors	r3, r0
 800fffe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8010002:	f040 8229 	bne.w	8010458 <ai_platform_network_process+0x544>
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2b00      	cmp	r3, #0
 801000a:	f000 821d 	beq.w	8010448 <ai_platform_network_process+0x534>
 801000e:	88bb      	ldrh	r3, [r7, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	f000 808a 	beq.w	801012a <ai_platform_network_process+0x216>
 8010016:	9a01      	ldr	r2, [sp, #4]
 8010018:	68f1      	ldr	r1, [r6, #12]
 801001a:	429a      	cmp	r2, r3
 801001c:	68c9      	ldr	r1, [r1, #12]
 801001e:	bf38      	it	cc
 8010020:	461a      	movcc	r2, r3
 8010022:	9201      	str	r2, [sp, #4]
 8010024:	6972      	ldr	r2, [r6, #20]
 8010026:	68d3      	ldr	r3, [r2, #12]
 8010028:	fb03 f301 	mul.w	r3, r3, r1
 801002c:	f8c9 3008 	str.w	r3, [r9, #8]
 8010030:	88ba      	ldrh	r2, [r7, #4]
 8010032:	fb03 f302 	mul.w	r3, r3, r2
 8010036:	f8c9 300c 	str.w	r3, [r9, #12]
 801003a:	6939      	ldr	r1, [r7, #16]
 801003c:	f8c9 1004 	str.w	r1, [r9, #4]
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	4413      	add	r3, r2
 8010044:	f8c9 3000 	str.w	r3, [r9]
 8010048:	69b0      	ldr	r0, [r6, #24]
 801004a:	6803      	ldr	r3, [r0, #0]
 801004c:	009a      	lsls	r2, r3, #2
 801004e:	d408      	bmi.n	8010062 <ai_platform_network_process+0x14e>
 8010050:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	4419      	add	r1, r3
 8010058:	6081      	str	r1, [r0, #8]
 801005a:	69b3      	ldr	r3, [r6, #24]
 801005c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010060:	60da      	str	r2, [r3, #12]
 8010062:	f108 0801 	add.w	r8, r8, #1
 8010066:	882b      	ldrh	r3, [r5, #0]
 8010068:	4598      	cmp	r8, r3
 801006a:	d27b      	bcs.n	8010164 <ai_platform_network_process+0x250>
 801006c:	686b      	ldr	r3, [r5, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d078      	beq.n	8010164 <ai_platform_network_process+0x250>
 8010072:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8010076:	2e00      	cmp	r6, #0
 8010078:	d074      	beq.n	8010164 <ai_platform_network_process+0x250>
 801007a:	68ab      	ldr	r3, [r5, #8]
 801007c:	3718      	adds	r7, #24
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8010084:	d039      	beq.n	80100fa <ai_platform_network_process+0x1e6>
 8010086:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 801008a:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 801008e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8010092:	fb0b f30e 	mul.w	r3, fp, lr
 8010096:	69b0      	ldr	r0, [r6, #24]
 8010098:	fb0c f303 	mul.w	r3, ip, r3
 801009c:	6841      	ldr	r1, [r0, #4]
 801009e:	4299      	cmp	r1, r3
 80100a0:	d292      	bcs.n	800ffc8 <ai_platform_network_process+0xb4>
 80100a2:	f104 0010 	add.w	r0, r4, #16
 80100a6:	2218      	movs	r2, #24
 80100a8:	2112      	movs	r1, #18
 80100aa:	f04f 0b00 	mov.w	fp, #0
 80100ae:	f000 f9e3 	bl	8010478 <core_set_error>
 80100b2:	e02a      	b.n	801010a <ai_platform_network_process+0x1f6>
 80100b4:	4b25      	ldr	r3, [pc, #148]	; (801014c <ai_platform_network_process+0x238>)
 80100b6:	2201      	movs	r2, #1
 80100b8:	4618      	mov	r0, r3
 80100ba:	601a      	str	r2, [r3, #0]
 80100bc:	6803      	ldr	r3, [r0, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1fc      	bne.n	80100bc <ai_platform_network_process+0x1a8>
 80100c2:	4b23      	ldr	r3, [pc, #140]	; (8010150 <ai_platform_network_process+0x23c>)
 80100c4:	4823      	ldr	r0, [pc, #140]	; (8010154 <ai_platform_network_process+0x240>)
 80100c6:	4a24      	ldr	r2, [pc, #144]	; (8010158 <ai_platform_network_process+0x244>)
 80100c8:	6018      	str	r0, [r3, #0]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4293      	cmp	r3, r2
 80100ce:	f43f af48 	beq.w	800ff62 <ai_platform_network_process+0x4e>
 80100d2:	e7fe      	b.n	80100d2 <ai_platform_network_process+0x1be>
 80100d4:	4b21      	ldr	r3, [pc, #132]	; (801015c <ai_platform_network_process+0x248>)
 80100d6:	2201      	movs	r2, #1
 80100d8:	4618      	mov	r0, r3
 80100da:	601a      	str	r2, [r3, #0]
 80100dc:	6803      	ldr	r3, [r0, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1fc      	bne.n	80100dc <ai_platform_network_process+0x1c8>
 80100e2:	4b1f      	ldr	r3, [pc, #124]	; (8010160 <ai_platform_network_process+0x24c>)
 80100e4:	481b      	ldr	r0, [pc, #108]	; (8010154 <ai_platform_network_process+0x240>)
 80100e6:	4a1c      	ldr	r2, [pc, #112]	; (8010158 <ai_platform_network_process+0x244>)
 80100e8:	6018      	str	r0, [r3, #0]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4293      	cmp	r3, r2
 80100ee:	f43f af38 	beq.w	800ff62 <ai_platform_network_process+0x4e>
 80100f2:	e7fe      	b.n	80100f2 <ai_platform_network_process+0x1de>
 80100f4:	2803      	cmp	r0, #3
 80100f6:	6163      	str	r3, [r4, #20]
 80100f8:	d10b      	bne.n	8010112 <ai_platform_network_process+0x1fe>
 80100fa:	f04f 0b00 	mov.w	fp, #0
 80100fe:	f104 0010 	add.w	r0, r4, #16
 8010102:	2217      	movs	r2, #23
 8010104:	2112      	movs	r1, #18
 8010106:	f000 f9b7 	bl	8010478 <core_set_error>
 801010a:	4658      	mov	r0, fp
 801010c:	b003      	add	sp, #12
 801010e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010112:	f104 0010 	add.w	r0, r4, #16
 8010116:	2230      	movs	r2, #48	; 0x30
 8010118:	2111      	movs	r1, #17
 801011a:	f000 f9ad 	bl	8010478 <core_set_error>
 801011e:	f04f 0b00 	mov.w	fp, #0
 8010122:	4658      	mov	r0, fp
 8010124:	b003      	add	sp, #12
 8010126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801012a:	f104 0010 	add.w	r0, r4, #16
 801012e:	2221      	movs	r2, #33	; 0x21
 8010130:	2112      	movs	r1, #18
 8010132:	469b      	mov	fp, r3
 8010134:	f000 f9a0 	bl	8010478 <core_set_error>
 8010138:	e7e7      	b.n	801010a <ai_platform_network_process+0x1f6>
 801013a:	bf00      	nop
 801013c:	a1c00100 	.word	0xa1c00100
 8010140:	e0002000 	.word	0xe0002000
 8010144:	e0042000 	.word	0xe0042000
 8010148:	5c001000 	.word	0x5c001000
 801014c:	58024c08 	.word	0x58024c08
 8010150:	58024c00 	.word	0x58024c00
 8010154:	f407a5c2 	.word	0xf407a5c2
 8010158:	b5e8b5cd 	.word	0xb5e8b5cd
 801015c:	40023008 	.word	0x40023008
 8010160:	40023000 	.word	0x40023000
 8010164:	f1ba 0f00 	cmp.w	sl, #0
 8010168:	f000 808c 	beq.w	8010284 <ai_platform_network_process+0x370>
 801016c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010170:	2b01      	cmp	r3, #1
 8010172:	f240 813b 	bls.w	80103ec <ai_platform_network_process+0x4d8>
 8010176:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010178:	f115 0f0c 	cmn.w	r5, #12
 801017c:	f000 8136 	beq.w	80103ec <ai_platform_network_process+0x4d8>
 8010180:	89ab      	ldrh	r3, [r5, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	f000 8132 	beq.w	80103ec <ai_platform_network_process+0x4d8>
 8010188:	4656      	mov	r6, sl
 801018a:	f04f 0900 	mov.w	r9, #0
 801018e:	9400      	str	r4, [sp, #0]
 8010190:	4599      	cmp	r9, r3
 8010192:	d274      	bcs.n	801027e <ai_platform_network_process+0x36a>
 8010194:	692b      	ldr	r3, [r5, #16]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d071      	beq.n	801027e <ai_platform_network_process+0x36a>
 801019a:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 801019e:	2f00      	cmp	r7, #0
 80101a0:	d06d      	beq.n	801027e <ai_platform_network_process+0x36a>
 80101a2:	696b      	ldr	r3, [r5, #20]
 80101a4:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80101a8:	f8d3 8000 	ldr.w	r8, [r3]
 80101ac:	eb18 0a04 	adds.w	sl, r8, r4
 80101b0:	f000 8125 	beq.w	80103fe <ai_platform_network_process+0x4ea>
 80101b4:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80101b8:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80101bc:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80101c0:	fb0b f30e 	mul.w	r3, fp, lr
 80101c4:	69b8      	ldr	r0, [r7, #24]
 80101c6:	fb0c f303 	mul.w	r3, ip, r3
 80101ca:	6841      	ldr	r1, [r0, #4]
 80101cc:	4299      	cmp	r1, r3
 80101ce:	f0c0 810c 	bcc.w	80103ea <ai_platform_network_process+0x4d6>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	68da      	ldr	r2, [r3, #12]
 80101d6:	455a      	cmp	r2, fp
 80101d8:	f040 8107 	bne.w	80103ea <ai_platform_network_process+0x4d6>
 80101dc:	689a      	ldr	r2, [r3, #8]
 80101de:	4572      	cmp	r2, lr
 80101e0:	f040 8103 	bne.w	80103ea <ai_platform_network_process+0x4d6>
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	459c      	cmp	ip, r3
 80101e8:	f040 80ff 	bne.w	80103ea <ai_platform_network_process+0x4d6>
 80101ec:	6800      	ldr	r0, [r0, #0]
 80101ee:	f002 fb85 	bl	80128fc <ai_array_get_byte_size>
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	68d2      	ldr	r2, [r2, #12]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	fb03 f302 	mul.w	r3, r3, r2
 80101fe:	4298      	cmp	r0, r3
 8010200:	f0c0 80f3 	bcc.w	80103ea <ai_platform_network_process+0x4d6>
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	6818      	ldr	r0, [r3, #0]
 8010208:	f002 fb2c 	bl	8012864 <ai_array_to_buffer_fmt>
 801020c:	6833      	ldr	r3, [r6, #0]
 801020e:	4043      	eors	r3, r0
 8010210:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8010214:	f040 810e 	bne.w	8010434 <ai_platform_network_process+0x520>
 8010218:	6933      	ldr	r3, [r6, #16]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 8101 	beq.w	8010422 <ai_platform_network_process+0x50e>
 8010220:	88b3      	ldrh	r3, [r6, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 80f4 	beq.w	8010410 <ai_platform_network_process+0x4fc>
 8010228:	9a01      	ldr	r2, [sp, #4]
 801022a:	68f9      	ldr	r1, [r7, #12]
 801022c:	429a      	cmp	r2, r3
 801022e:	68c9      	ldr	r1, [r1, #12]
 8010230:	bf38      	it	cc
 8010232:	461a      	movcc	r2, r3
 8010234:	9201      	str	r2, [sp, #4]
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	68d3      	ldr	r3, [r2, #12]
 801023a:	fb03 f301 	mul.w	r3, r3, r1
 801023e:	f8ca 3008 	str.w	r3, [sl, #8]
 8010242:	88b2      	ldrh	r2, [r6, #4]
 8010244:	fb03 f302 	mul.w	r3, r3, r2
 8010248:	f8ca 300c 	str.w	r3, [sl, #12]
 801024c:	6931      	ldr	r1, [r6, #16]
 801024e:	f8ca 1004 	str.w	r1, [sl, #4]
 8010252:	6932      	ldr	r2, [r6, #16]
 8010254:	4413      	add	r3, r2
 8010256:	f848 3004 	str.w	r3, [r8, r4]
 801025a:	69b8      	ldr	r0, [r7, #24]
 801025c:	6803      	ldr	r3, [r0, #0]
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	d408      	bmi.n	8010274 <ai_platform_network_process+0x360>
 8010262:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010266:	1a9b      	subs	r3, r3, r2
 8010268:	4419      	add	r1, r3
 801026a:	6081      	str	r1, [r0, #8]
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010272:	60da      	str	r2, [r3, #12]
 8010274:	f109 0901 	add.w	r9, r9, #1
 8010278:	3618      	adds	r6, #24
 801027a:	89ab      	ldrh	r3, [r5, #12]
 801027c:	e788      	b.n	8010190 <ai_platform_network_process+0x27c>
 801027e:	e9dd 4300 	ldrd	r4, r3, [sp]
 8010282:	82a3      	strh	r3, [r4, #20]
 8010284:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010288:	2a00      	cmp	r2, #0
 801028a:	f000 80a9 	beq.w	80103e0 <ai_platform_network_process+0x4cc>
 801028e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010290:	2a01      	cmp	r2, #1
 8010292:	f240 80a8 	bls.w	80103e6 <ai_platform_network_process+0x4d2>
 8010296:	f105 060c 	add.w	r6, r5, #12
 801029a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 801029e:	8aa3      	ldrh	r3, [r4, #20]
 80102a0:	455b      	cmp	r3, fp
 80102a2:	f67f af32 	bls.w	801010a <ai_platform_network_process+0x1f6>
 80102a6:	9400      	str	r4, [sp, #0]
 80102a8:	2d00      	cmp	r5, #0
 80102aa:	d037      	beq.n	801031c <ai_platform_network_process+0x408>
 80102ac:	882b      	ldrh	r3, [r5, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d034      	beq.n	801031c <ai_platform_network_process+0x408>
 80102b2:	686b      	ldr	r3, [r5, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d031      	beq.n	801031c <ai_platform_network_process+0x408>
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d02e      	beq.n	801031c <ai_platform_network_process+0x408>
 80102be:	f04f 0800 	mov.w	r8, #0
 80102c2:	e01a      	b.n	80102fa <ai_platform_network_process+0x3e6>
 80102c4:	68d4      	ldr	r4, [r2, #12]
 80102c6:	1b00      	subs	r0, r0, r4
 80102c8:	4401      	add	r1, r0
 80102ca:	6091      	str	r1, [r2, #8]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	699b      	ldr	r3, [r3, #24]
 80102d0:	60da      	str	r2, [r3, #12]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f108 0801 	add.w	r8, r8, #1
 80102d8:	68b9      	ldr	r1, [r7, #8]
 80102da:	f85a 2009 	ldr.w	r2, [sl, r9]
 80102de:	440b      	add	r3, r1
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d301      	bcc.n	80102e8 <ai_platform_network_process+0x3d4>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	607b      	str	r3, [r7, #4]
 80102ea:	882b      	ldrh	r3, [r5, #0]
 80102ec:	4598      	cmp	r8, r3
 80102ee:	d215      	bcs.n	801031c <ai_platform_network_process+0x408>
 80102f0:	686b      	ldr	r3, [r5, #4]
 80102f2:	b19b      	cbz	r3, 801031c <ai_platform_network_process+0x408>
 80102f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80102f8:	b183      	cbz	r3, 801031c <ai_platform_network_process+0x408>
 80102fa:	68a9      	ldr	r1, [r5, #8]
 80102fc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010300:	699a      	ldr	r2, [r3, #24]
 8010302:	f8d1 a000 	ldr.w	sl, [r1]
 8010306:	6814      	ldr	r4, [r2, #0]
 8010308:	eb0a 0709 	add.w	r7, sl, r9
 801030c:	6890      	ldr	r0, [r2, #8]
 801030e:	00a4      	lsls	r4, r4, #2
 8010310:	6879      	ldr	r1, [r7, #4]
 8010312:	d5d7      	bpl.n	80102c4 <ai_platform_network_process+0x3b0>
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	f002 fb4b 	bl	80129b0 <memcpy>
 801031a:	e7da      	b.n	80102d2 <ai_platform_network_process+0x3be>
 801031c:	9800      	ldr	r0, [sp, #0]
 801031e:	f002 fa67 	bl	80127f0 <ai_layers_forward_all>
 8010322:	2e00      	cmp	r6, #0
 8010324:	d04a      	beq.n	80103bc <ai_platform_network_process+0x4a8>
 8010326:	8833      	ldrh	r3, [r6, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d047      	beq.n	80103bc <ai_platform_network_process+0x4a8>
 801032c:	6873      	ldr	r3, [r6, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d044      	beq.n	80103bc <ai_platform_network_process+0x4a8>
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d041      	beq.n	80103bc <ai_platform_network_process+0x4a8>
 8010338:	f04f 0800 	mov.w	r8, #0
 801033c:	e019      	b.n	8010372 <ai_platform_network_process+0x45e>
 801033e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010342:	4291      	cmp	r1, r2
 8010344:	d301      	bcc.n	801034a <ai_platform_network_process+0x436>
 8010346:	68f9      	ldr	r1, [r7, #12]
 8010348:	1a51      	subs	r1, r2, r1
 801034a:	6079      	str	r1, [r7, #4]
 801034c:	f108 0801 	add.w	r8, r8, #1
 8010350:	6998      	ldr	r0, [r3, #24]
 8010352:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8010356:	1b12      	subs	r2, r2, r4
 8010358:	440a      	add	r2, r1
 801035a:	6082      	str	r2, [r0, #8]
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	60da      	str	r2, [r3, #12]
 8010362:	8833      	ldrh	r3, [r6, #0]
 8010364:	4598      	cmp	r8, r3
 8010366:	d229      	bcs.n	80103bc <ai_platform_network_process+0x4a8>
 8010368:	6873      	ldr	r3, [r6, #4]
 801036a:	b33b      	cbz	r3, 80103bc <ai_platform_network_process+0x4a8>
 801036c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010370:	b323      	cbz	r3, 80103bc <ai_platform_network_process+0x4a8>
 8010372:	68b2      	ldr	r2, [r6, #8]
 8010374:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010378:	f8d3 e018 	ldr.w	lr, [r3, #24]
 801037c:	f8d2 a000 	ldr.w	sl, [r2]
 8010380:	f8de 1000 	ldr.w	r1, [lr]
 8010384:	eb0a 0709 	add.w	r7, sl, r9
 8010388:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801038c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8010390:	eb00 0102 	add.w	r1, r0, r2
 8010394:	d0d3      	beq.n	801033e <ai_platform_network_process+0x42a>
 8010396:	f8de 1008 	ldr.w	r1, [lr, #8]
 801039a:	f002 fb09 	bl	80129b0 <memcpy>
 801039e:	f85a 2009 	ldr.w	r2, [sl, r9]
 80103a2:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 80103a6:	440b      	add	r3, r1
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d301      	bcc.n	80103b0 <ai_platform_network_process+0x49c>
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	607b      	str	r3, [r7, #4]
 80103b2:	f108 0801 	add.w	r8, r8, #1
 80103b6:	8833      	ldrh	r3, [r6, #0]
 80103b8:	4598      	cmp	r8, r3
 80103ba:	d3d5      	bcc.n	8010368 <ai_platform_network_process+0x454>
 80103bc:	9b00      	ldr	r3, [sp, #0]
 80103be:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80103c2:	461a      	mov	r2, r3
 80103c4:	8a9b      	ldrh	r3, [r3, #20]
 80103c6:	f10b 0b01 	add.w	fp, fp, #1
 80103ca:	fa1f fb8b 	uxth.w	fp, fp
 80103ce:	455b      	cmp	r3, fp
 80103d0:	f8a2 b016 	strh.w	fp, [r2, #22]
 80103d4:	f63f af68 	bhi.w	80102a8 <ai_platform_network_process+0x394>
 80103d8:	4658      	mov	r0, fp
 80103da:	b003      	add	sp, #12
 80103dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e0:	4615      	mov	r5, r2
 80103e2:	4616      	mov	r6, r2
 80103e4:	e759      	b.n	801029a <ai_platform_network_process+0x386>
 80103e6:	2600      	movs	r6, #0
 80103e8:	e757      	b.n	801029a <ai_platform_network_process+0x386>
 80103ea:	9c00      	ldr	r4, [sp, #0]
 80103ec:	f104 0010 	add.w	r0, r4, #16
 80103f0:	2218      	movs	r2, #24
 80103f2:	2113      	movs	r1, #19
 80103f4:	f04f 0b00 	mov.w	fp, #0
 80103f8:	f000 f83e 	bl	8010478 <core_set_error>
 80103fc:	e685      	b.n	801010a <ai_platform_network_process+0x1f6>
 80103fe:	9c00      	ldr	r4, [sp, #0]
 8010400:	2217      	movs	r2, #23
 8010402:	2113      	movs	r1, #19
 8010404:	46d3      	mov	fp, sl
 8010406:	f104 0010 	add.w	r0, r4, #16
 801040a:	f000 f835 	bl	8010478 <core_set_error>
 801040e:	e67c      	b.n	801010a <ai_platform_network_process+0x1f6>
 8010410:	9c00      	ldr	r4, [sp, #0]
 8010412:	2221      	movs	r2, #33	; 0x21
 8010414:	2113      	movs	r1, #19
 8010416:	469b      	mov	fp, r3
 8010418:	f104 0010 	add.w	r0, r4, #16
 801041c:	f000 f82c 	bl	8010478 <core_set_error>
 8010420:	e673      	b.n	801010a <ai_platform_network_process+0x1f6>
 8010422:	9c00      	ldr	r4, [sp, #0]
 8010424:	2217      	movs	r2, #23
 8010426:	2113      	movs	r1, #19
 8010428:	469b      	mov	fp, r3
 801042a:	f104 0010 	add.w	r0, r4, #16
 801042e:	f000 f823 	bl	8010478 <core_set_error>
 8010432:	e66a      	b.n	801010a <ai_platform_network_process+0x1f6>
 8010434:	9c00      	ldr	r4, [sp, #0]
 8010436:	2219      	movs	r2, #25
 8010438:	2113      	movs	r1, #19
 801043a:	f04f 0b00 	mov.w	fp, #0
 801043e:	f104 0010 	add.w	r0, r4, #16
 8010442:	f000 f819 	bl	8010478 <core_set_error>
 8010446:	e660      	b.n	801010a <ai_platform_network_process+0x1f6>
 8010448:	f104 0010 	add.w	r0, r4, #16
 801044c:	2217      	movs	r2, #23
 801044e:	2112      	movs	r1, #18
 8010450:	469b      	mov	fp, r3
 8010452:	f000 f811 	bl	8010478 <core_set_error>
 8010456:	e658      	b.n	801010a <ai_platform_network_process+0x1f6>
 8010458:	f104 0010 	add.w	r0, r4, #16
 801045c:	2219      	movs	r2, #25
 801045e:	2112      	movs	r1, #18
 8010460:	f04f 0b00 	mov.w	fp, #0
 8010464:	f000 f808 	bl	8010478 <core_set_error>
 8010468:	e64f      	b.n	801010a <ai_platform_network_process+0x1f6>
 801046a:	f1ba 0f00 	cmp.w	sl, #0
 801046e:	f47f ae7f 	bne.w	8010170 <ai_platform_network_process+0x25c>
 8010472:	e70d      	b.n	8010290 <ai_platform_network_process+0x37c>

08010474 <core_init>:
 8010474:	2001      	movs	r0, #1
 8010476:	4770      	bx	lr

08010478 <core_set_error>:
 8010478:	4603      	mov	r3, r0
 801047a:	7800      	ldrb	r0, [r0, #0]
 801047c:	b930      	cbnz	r0, 801048c <core_set_error+0x14>
 801047e:	7019      	strb	r1, [r3, #0]
 8010480:	2001      	movs	r0, #1
 8010482:	6819      	ldr	r1, [r3, #0]
 8010484:	f362 211f 	bfi	r1, r2, #8, #24
 8010488:	6019      	str	r1, [r3, #0]
 801048a:	4770      	bx	lr
 801048c:	2000      	movs	r0, #0
 801048e:	4770      	bx	lr

08010490 <func_dummy>:
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop

08010494 <ai_dict8_dot_array_f32>:
 8010494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010498:	9d06      	ldr	r5, [sp, #24]
 801049a:	4c88      	ldr	r4, [pc, #544]	; (80106bc <ai_dict8_dot_array_f32+0x228>)
 801049c:	2d07      	cmp	r5, #7
 801049e:	442c      	add	r4, r5
 80104a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80104a4:	f104 0620 	add.w	r6, r4, #32
 80104a8:	d817      	bhi.n	80104da <ai_dict8_dot_array_f32+0x46>
 80104aa:	42b3      	cmp	r3, r6
 80104ac:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80106c0 <ai_dict8_dot_array_f32+0x22c>
 80104b0:	d20b      	bcs.n	80104ca <ai_dict8_dot_array_f32+0x36>
 80104b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104b6:	ecf3 7a01 	vldmia	r3!, {s15}
 80104ba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80104be:	42b3      	cmp	r3, r6
 80104c0:	edd4 6a00 	vldr	s13, [r4]
 80104c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104c8:	d3f3      	bcc.n	80104b2 <ai_dict8_dot_array_f32+0x1e>
 80104ca:	edd0 7a00 	vldr	s15, [r0]
 80104ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80104d2:	ed80 7a00 	vstr	s14, [r0]
 80104d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104da:	f001 0503 	and.w	r5, r1, #3
 80104de:	2d02      	cmp	r5, #2
 80104e0:	f000 80f0 	beq.w	80106c4 <ai_dict8_dot_array_f32+0x230>
 80104e4:	2d03      	cmp	r5, #3
 80104e6:	f000 81ff 	beq.w	80108e8 <ai_dict8_dot_array_f32+0x454>
 80104ea:	2d01      	cmp	r5, #1
 80104ec:	f000 81f0 	beq.w	80108d0 <ai_dict8_dot_array_f32+0x43c>
 80104f0:	42a3      	cmp	r3, r4
 80104f2:	f200 81fc 	bhi.w	80108ee <ai_dict8_dot_array_f32+0x45a>
 80104f6:	1ae4      	subs	r4, r4, r3
 80104f8:	f101 0810 	add.w	r8, r1, #16
 80104fc:	f101 0508 	add.w	r5, r1, #8
 8010500:	f103 0720 	add.w	r7, r3, #32
 8010504:	0964      	lsrs	r4, r4, #5
 8010506:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80106c0 <ai_dict8_dot_array_f32+0x22c>
 801050a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 801050e:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8010512:	3508      	adds	r5, #8
 8010514:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8010518:	3720      	adds	r7, #32
 801051a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 801051e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8010522:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010526:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 801052a:	edde 7a00 	vldr	s15, [lr]
 801052e:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8010532:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010536:	eddc 5a00 	vldr	s11, [ip]
 801053a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 801053e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8010542:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010546:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801054a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 801054e:	ed9c 4a00 	vldr	s8, [ip]
 8010552:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8010556:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 801055a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 801055e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010562:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8010566:	eee4 7a26 	vfma.f32	s15, s8, s13
 801056a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 801056e:	ed9c 4a00 	vldr	s8, [ip]
 8010572:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8010576:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 801057a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801057e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010582:	ed9e 5a00 	vldr	s10, [lr]
 8010586:	ed9c 4a00 	vldr	s8, [ip]
 801058a:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 801058e:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8010592:	4545      	cmp	r5, r8
 8010594:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010598:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801059c:	eee5 7a06 	vfma.f32	s15, s10, s12
 80105a0:	ed9e 5a00 	vldr	s10, [lr]
 80105a4:	ed9c 6a00 	vldr	s12, [ip]
 80105a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80105ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80105b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80105b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80105b8:	d1a9      	bne.n	801050e <ai_dict8_dot_array_f32+0x7a>
 80105ba:	3401      	adds	r4, #1
 80105bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80105c0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80105c4:	42b3      	cmp	r3, r6
 80105c6:	d280      	bcs.n	80104ca <ai_dict8_dot_array_f32+0x36>
 80105c8:	461c      	mov	r4, r3
 80105ca:	780d      	ldrb	r5, [r1, #0]
 80105cc:	ecf4 6a01 	vldmia	r4!, {s13}
 80105d0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80105d4:	42a6      	cmp	r6, r4
 80105d6:	edd5 7a00 	vldr	s15, [r5]
 80105da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80105de:	f67f af74 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 80105e2:	784d      	ldrb	r5, [r1, #1]
 80105e4:	f103 0408 	add.w	r4, r3, #8
 80105e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80105ec:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80105f0:	42a6      	cmp	r6, r4
 80105f2:	edd5 7a00 	vldr	s15, [r5]
 80105f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80105fa:	f67f af66 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 80105fe:	788d      	ldrb	r5, [r1, #2]
 8010600:	f103 040c 	add.w	r4, r3, #12
 8010604:	edd3 6a02 	vldr	s13, [r3, #8]
 8010608:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801060c:	42a6      	cmp	r6, r4
 801060e:	edd5 7a00 	vldr	s15, [r5]
 8010612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010616:	f67f af58 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 801061a:	78cd      	ldrb	r5, [r1, #3]
 801061c:	f103 0410 	add.w	r4, r3, #16
 8010620:	edd3 6a03 	vldr	s13, [r3, #12]
 8010624:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010628:	42a6      	cmp	r6, r4
 801062a:	edd5 7a00 	vldr	s15, [r5]
 801062e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010632:	f67f af4a 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 8010636:	790d      	ldrb	r5, [r1, #4]
 8010638:	f103 0414 	add.w	r4, r3, #20
 801063c:	edd3 6a04 	vldr	s13, [r3, #16]
 8010640:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010644:	42a6      	cmp	r6, r4
 8010646:	edd5 7a00 	vldr	s15, [r5]
 801064a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801064e:	f67f af3c 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 8010652:	794d      	ldrb	r5, [r1, #5]
 8010654:	f103 0418 	add.w	r4, r3, #24
 8010658:	edd3 6a05 	vldr	s13, [r3, #20]
 801065c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010660:	42a6      	cmp	r6, r4
 8010662:	edd5 7a00 	vldr	s15, [r5]
 8010666:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801066a:	f67f af2e 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 801066e:	798d      	ldrb	r5, [r1, #6]
 8010670:	f103 041c 	add.w	r4, r3, #28
 8010674:	edd3 6a06 	vldr	s13, [r3, #24]
 8010678:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801067c:	42a6      	cmp	r6, r4
 801067e:	edd5 7a00 	vldr	s15, [r5]
 8010682:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010686:	f67f af20 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 801068a:	79cd      	ldrb	r5, [r1, #7]
 801068c:	f103 0420 	add.w	r4, r3, #32
 8010690:	edd3 6a07 	vldr	s13, [r3, #28]
 8010694:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010698:	42a6      	cmp	r6, r4
 801069a:	edd5 7a00 	vldr	s15, [r5]
 801069e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106a2:	f67f af12 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 80106a6:	7a09      	ldrb	r1, [r1, #8]
 80106a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80106ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80106b0:	edd2 6a00 	vldr	s13, [r2]
 80106b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106b8:	e707      	b.n	80104ca <ai_dict8_dot_array_f32+0x36>
 80106ba:	bf00      	nop
 80106bc:	3ffffff8 	.word	0x3ffffff8
 80106c0:	00000000 	.word	0x00000000
 80106c4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80106c0 <ai_dict8_dot_array_f32+0x22c>
 80106c8:	780d      	ldrb	r5, [r1, #0]
 80106ca:	3304      	adds	r3, #4
 80106cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80106d0:	3101      	adds	r1, #1
 80106d2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80106d6:	edd5 6a00 	vldr	s13, [r5]
 80106da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106de:	780d      	ldrb	r5, [r1, #0]
 80106e0:	1d1f      	adds	r7, r3, #4
 80106e2:	edd3 7a00 	vldr	s15, [r3]
 80106e6:	f101 0c01 	add.w	ip, r1, #1
 80106ea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80106ee:	42bc      	cmp	r4, r7
 80106f0:	edd5 6a00 	vldr	s13, [r5]
 80106f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106f8:	d365      	bcc.n	80107c6 <ai_dict8_dot_array_f32+0x332>
 80106fa:	3324      	adds	r3, #36	; 0x24
 80106fc:	f101 0e11 	add.w	lr, r1, #17
 8010700:	3109      	adds	r1, #9
 8010702:	eba6 0803 	sub.w	r8, r6, r3
 8010706:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801070a:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 801070e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010712:	3108      	adds	r1, #8
 8010714:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8010718:	3320      	adds	r3, #32
 801071a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801071e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8010722:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010726:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 801072a:	edd5 7a00 	vldr	s15, [r5]
 801072e:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8010732:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010736:	edd4 5a00 	vldr	s11, [r4]
 801073a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 801073e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8010742:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010746:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801074a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 801074e:	ed94 4a00 	vldr	s8, [r4]
 8010752:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8010756:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801075a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 801075e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010762:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8010766:	eee4 7a26 	vfma.f32	s15, s8, s13
 801076a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 801076e:	ed94 4a00 	vldr	s8, [r4]
 8010772:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8010776:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 801077a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801077e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010782:	ed95 5a00 	vldr	s10, [r5]
 8010786:	ed94 4a00 	vldr	s8, [r4]
 801078a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 801078e:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8010792:	458e      	cmp	lr, r1
 8010794:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010798:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801079c:	eee5 7a06 	vfma.f32	s15, s10, s12
 80107a0:	ed95 5a00 	vldr	s10, [r5]
 80107a4:	ed94 6a00 	vldr	s12, [r4]
 80107a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80107ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80107b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80107b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107b8:	d1a9      	bne.n	801070e <ai_dict8_dot_array_f32+0x27a>
 80107ba:	f108 0801 	add.w	r8, r8, #1
 80107be:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80107c2:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 80107c6:	42b7      	cmp	r7, r6
 80107c8:	f4bf ae7f 	bcs.w	80104ca <ai_dict8_dot_array_f32+0x36>
 80107cc:	463b      	mov	r3, r7
 80107ce:	f89c 1000 	ldrb.w	r1, [ip]
 80107d2:	ecf3 6a01 	vldmia	r3!, {s13}
 80107d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80107da:	429e      	cmp	r6, r3
 80107dc:	edd1 7a00 	vldr	s15, [r1]
 80107e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107e4:	f67f ae71 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 80107e8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80107ec:	f107 0308 	add.w	r3, r7, #8
 80107f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80107f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80107f8:	429e      	cmp	r6, r3
 80107fa:	edd1 7a00 	vldr	s15, [r1]
 80107fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010802:	f67f ae62 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 8010806:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801080a:	f107 030c 	add.w	r3, r7, #12
 801080e:	edd7 6a02 	vldr	s13, [r7, #8]
 8010812:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010816:	429e      	cmp	r6, r3
 8010818:	edd1 7a00 	vldr	s15, [r1]
 801081c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010820:	f67f ae53 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 8010824:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8010828:	f107 0310 	add.w	r3, r7, #16
 801082c:	edd7 6a03 	vldr	s13, [r7, #12]
 8010830:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010834:	429e      	cmp	r6, r3
 8010836:	edd1 7a00 	vldr	s15, [r1]
 801083a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801083e:	f67f ae44 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 8010842:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8010846:	f107 0314 	add.w	r3, r7, #20
 801084a:	edd7 6a04 	vldr	s13, [r7, #16]
 801084e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010852:	429e      	cmp	r6, r3
 8010854:	edd1 7a00 	vldr	s15, [r1]
 8010858:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801085c:	f67f ae35 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 8010860:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8010864:	f107 0318 	add.w	r3, r7, #24
 8010868:	edd7 6a05 	vldr	s13, [r7, #20]
 801086c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010870:	429e      	cmp	r6, r3
 8010872:	edd1 7a00 	vldr	s15, [r1]
 8010876:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801087a:	f67f ae26 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 801087e:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8010882:	f107 031c 	add.w	r3, r7, #28
 8010886:	edd7 6a06 	vldr	s13, [r7, #24]
 801088a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801088e:	429e      	cmp	r6, r3
 8010890:	edd1 7a00 	vldr	s15, [r1]
 8010894:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010898:	f67f ae17 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 801089c:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80108a0:	f107 0320 	add.w	r3, r7, #32
 80108a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80108a8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80108ac:	429e      	cmp	r6, r3
 80108ae:	edd1 7a00 	vldr	s15, [r1]
 80108b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108b6:	f67f ae08 	bls.w	80104ca <ai_dict8_dot_array_f32+0x36>
 80108ba:	f89c 3008 	ldrb.w	r3, [ip, #8]
 80108be:	edd7 7a08 	vldr	s15, [r7, #32]
 80108c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80108c6:	edd2 6a00 	vldr	s13, [r2]
 80108ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108ce:	e5fc      	b.n	80104ca <ai_dict8_dot_array_f32+0x36>
 80108d0:	780d      	ldrb	r5, [r1, #0]
 80108d2:	3304      	adds	r3, #4
 80108d4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80108d8:	3101      	adds	r1, #1
 80108da:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80108de:	ed95 7a00 	vldr	s14, [r5]
 80108e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108e6:	e6ef      	b.n	80106c8 <ai_dict8_dot_array_f32+0x234>
 80108e8:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 80106c0 <ai_dict8_dot_array_f32+0x22c>
 80108ec:	e6f7      	b.n	80106de <ai_dict8_dot_array_f32+0x24a>
 80108ee:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 80106c0 <ai_dict8_dot_array_f32+0x22c>
 80108f2:	e667      	b.n	80105c4 <ai_dict8_dot_array_f32+0x130>

080108f4 <ai_dict4_dot_array_f32>:
 80108f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80108fa:	f027 0c01 	bic.w	ip, r7, #1
 80108fe:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8010902:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010906:	f000 80ad 	beq.w	8010a64 <ai_dict4_dot_array_f32+0x170>
 801090a:	1d0d      	adds	r5, r1, #4
 801090c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8010910:	f103 0420 	add.w	r4, r3, #32
 8010914:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8010a6c <ai_dict4_dot_array_f32+0x178>
 8010918:	eb05 0e09 	add.w	lr, r5, r9
 801091c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8010920:	3504      	adds	r5, #4
 8010922:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8010926:	3420      	adds	r4, #32
 8010928:	f006 0a0f 	and.w	sl, r6, #15
 801092c:	0936      	lsrs	r6, r6, #4
 801092e:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8010932:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010936:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 801093a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801093e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8010942:	edda 7a00 	vldr	s15, [sl]
 8010946:	edd6 5a00 	vldr	s11, [r6]
 801094a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801094e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8010952:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8010956:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 801095a:	f006 060f 	and.w	r6, r6, #15
 801095e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8010962:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8010966:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 801096a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 801096e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010972:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8010976:	ed9a 3a00 	vldr	s6, [sl]
 801097a:	ed96 5a00 	vldr	s10, [r6]
 801097e:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8010982:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010986:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 801098a:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 801098e:	f00a 0a0f 	and.w	sl, sl, #15
 8010992:	45ae      	cmp	lr, r5
 8010994:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8010998:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 801099c:	ed9b 3a00 	vldr	s6, [fp]
 80109a0:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 80109a4:	eee5 7a06 	vfma.f32	s15, s10, s12
 80109a8:	ed9a 4a00 	vldr	s8, [sl]
 80109ac:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 80109b0:	f006 060f 	and.w	r6, r6, #15
 80109b4:	ed9a 5a00 	vldr	s10, [sl]
 80109b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80109bc:	ed96 6a00 	vldr	s12, [r6]
 80109c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80109c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80109c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80109cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80109d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80109d4:	d1a2      	bne.n	801091c <ai_dict4_dot_array_f32+0x28>
 80109d6:	4449      	add	r1, r9
 80109d8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80109dc:	459c      	cmp	ip, r3
 80109de:	d92d      	bls.n	8010a3c <ai_dict4_dot_array_f32+0x148>
 80109e0:	f10c 0c07 	add.w	ip, ip, #7
 80109e4:	f103 0508 	add.w	r5, r3, #8
 80109e8:	f103 0810 	add.w	r8, r3, #16
 80109ec:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80109f0:	ebac 0c05 	sub.w	ip, ip, r5
 80109f4:	f02c 0407 	bic.w	r4, ip, #7
 80109f8:	44a0      	add	r8, r4
 80109fa:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80109fe:	3508      	adds	r5, #8
 8010a00:	ed55 5a03 	vldr	s11, [r5, #-12]
 8010a04:	f004 060f 	and.w	r6, r4, #15
 8010a08:	0924      	lsrs	r4, r4, #4
 8010a0a:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010a0e:	45a8      	cmp	r8, r5
 8010a10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a14:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010a18:	edd6 7a00 	vldr	s15, [r6]
 8010a1c:	ed94 6a00 	vldr	s12, [r4]
 8010a20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010a24:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a2c:	d1e5      	bne.n	80109fa <ai_dict4_dot_array_f32+0x106>
 8010a2e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8010a32:	f10c 0c01 	add.w	ip, ip, #1
 8010a36:	4461      	add	r1, ip
 8010a38:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8010a3c:	07fc      	lsls	r4, r7, #31
 8010a3e:	d509      	bpl.n	8010a54 <ai_dict4_dot_array_f32+0x160>
 8010a40:	7809      	ldrb	r1, [r1, #0]
 8010a42:	edd3 7a00 	vldr	s15, [r3]
 8010a46:	090b      	lsrs	r3, r1, #4
 8010a48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a4c:	edd2 6a00 	vldr	s13, [r2]
 8010a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a54:	edd0 7a00 	vldr	s15, [r0]
 8010a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a5c:	ed80 7a00 	vstr	s14, [r0]
 8010a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a64:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8010a6c <ai_dict4_dot_array_f32+0x178>
 8010a68:	e7b8      	b.n	80109dc <ai_dict4_dot_array_f32+0xe8>
 8010a6a:	bf00      	nop
 8010a6c:	00000000 	.word	0x00000000

08010a70 <ai_dict_decompress_f32>:
 8010a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a74:	9f08      	ldr	r7, [sp, #32]
 8010a76:	2b04      	cmp	r3, #4
 8010a78:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8010a7c:	d00e      	beq.n	8010a9c <ai_dict_decompress_f32+0x2c>
 8010a7e:	2b08      	cmp	r3, #8
 8010a80:	d10a      	bne.n	8010a98 <ai_dict_decompress_f32+0x28>
 8010a82:	42b8      	cmp	r0, r7
 8010a84:	d208      	bcs.n	8010a98 <ai_dict_decompress_f32+0x28>
 8010a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f840 3b04 	str.w	r3, [r0], #4
 8010a94:	4287      	cmp	r7, r0
 8010a96:	d8f6      	bhi.n	8010a86 <ai_dict_decompress_f32+0x16>
 8010a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a9c:	9b07      	ldr	r3, [sp, #28]
 8010a9e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8010aa2:	f003 0e01 	and.w	lr, r3, #1
 8010aa6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8010aaa:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8010aae:	42b8      	cmp	r0, r7
 8010ab0:	d2f2      	bcs.n	8010a98 <ai_dict_decompress_f32+0x28>
 8010ab2:	f1bc 0f00 	cmp.w	ip, #0
 8010ab6:	d019      	beq.n	8010aec <ai_dict_decompress_f32+0x7c>
 8010ab8:	f100 0508 	add.w	r5, r0, #8
 8010abc:	1e4c      	subs	r4, r1, #1
 8010abe:	eb01 0608 	add.w	r6, r1, r8
 8010ac2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010ac6:	3508      	adds	r5, #8
 8010ac8:	091b      	lsrs	r3, r3, #4
 8010aca:	42a6      	cmp	r6, r4
 8010acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f845 3c10 	str.w	r3, [r5, #-16]
 8010ad6:	7823      	ldrb	r3, [r4, #0]
 8010ad8:	f003 030f 	and.w	r3, r3, #15
 8010adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f845 3c0c 	str.w	r3, [r5, #-12]
 8010ae6:	d1ec      	bne.n	8010ac2 <ai_dict_decompress_f32+0x52>
 8010ae8:	4461      	add	r1, ip
 8010aea:	4448      	add	r0, r9
 8010aec:	f1be 0f00 	cmp.w	lr, #0
 8010af0:	d103      	bne.n	8010afa <ai_dict_decompress_f32+0x8a>
 8010af2:	4287      	cmp	r7, r0
 8010af4:	d8dd      	bhi.n	8010ab2 <ai_dict_decompress_f32+0x42>
 8010af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010afa:	780b      	ldrb	r3, [r1, #0]
 8010afc:	3004      	adds	r0, #4
 8010afe:	3101      	adds	r1, #1
 8010b00:	091b      	lsrs	r3, r3, #4
 8010b02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f840 3c04 	str.w	r3, [r0, #-4]
 8010b0c:	e7cf      	b.n	8010aae <ai_dict_decompress_f32+0x3e>
 8010b0e:	bf00      	nop

08010b10 <forward_conv2d>:
 8010b10:	6942      	ldr	r2, [r0, #20]
 8010b12:	8813      	ldrh	r3, [r2, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f000 8639 	beq.w	801178c <forward_conv2d+0xc7c>
 8010b1a:	6852      	ldr	r2, [r2, #4]
 8010b1c:	6851      	ldr	r1, [r2, #4]
 8010b1e:	b101      	cbz	r1, 8010b22 <forward_conv2d+0x12>
 8010b20:	6809      	ldr	r1, [r1, #0]
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	f240 862f 	bls.w	8011786 <forward_conv2d+0xc76>
 8010b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	ed2d 8b08 	vpush	{d8-d11}
 8010b30:	b0c9      	sub	sp, #292	; 0x124
 8010b32:	6914      	ldr	r4, [r2, #16]
 8010b34:	af02      	add	r7, sp, #8
 8010b36:	2c00      	cmp	r4, #0
 8010b38:	f000 8621 	beq.w	801177e <forward_conv2d+0xc6e>
 8010b3c:	6824      	ldr	r4, [r4, #0]
 8010b3e:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	f000 8616 	beq.w	8011774 <forward_conv2d+0xc64>
 8010b48:	69d5      	ldr	r5, [r2, #28]
 8010b4a:	2d00      	cmp	r5, #0
 8010b4c:	f000 860b 	beq.w	8011766 <forward_conv2d+0xc56>
 8010b50:	f112 0318 	adds.w	r3, r2, #24
 8010b54:	682c      	ldr	r4, [r5, #0]
 8010b56:	d004      	beq.n	8010b62 <forward_conv2d+0x52>
 8010b58:	8b13      	ldrh	r3, [r2, #24]
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	f240 8618 	bls.w	8011790 <forward_conv2d+0xc80>
 8010b60:	686b      	ldr	r3, [r5, #4]
 8010b62:	68aa      	ldr	r2, [r5, #8]
 8010b64:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8010b68:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8010b6c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8010b70:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010b74:	68ce      	ldr	r6, [r1, #12]
 8010b76:	69a1      	ldr	r1, [r4, #24]
 8010b78:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8010b7a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8010b7e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010b82:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8010b86:	f8de 1004 	ldr.w	r1, [lr, #4]
 8010b8a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8010b8e:	f8de 100c 	ldr.w	r1, [lr, #12]
 8010b92:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010b94:	f8de 1008 	ldr.w	r1, [lr, #8]
 8010b98:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8010b9c:	6871      	ldr	r1, [r6, #4]
 8010b9e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8010ba2:	68f1      	ldr	r1, [r6, #12]
 8010ba4:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8010ba8:	68b1      	ldr	r1, [r6, #8]
 8010baa:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8010bae:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010bb2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8010bb6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010bba:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8010bbe:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8010bc2:	6889      	ldr	r1, [r1, #8]
 8010bc4:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8010bc8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8010bca:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8010bce:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8010bd2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8010bd4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8010bd8:	6981      	ldr	r1, [r0, #24]
 8010bda:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 8010bde:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f000 85b0 	beq.w	8011748 <forward_conv2d+0xc38>
 8010be8:	699b      	ldr	r3, [r3, #24]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bf4:	4606      	mov	r6, r0
 8010bf6:	69c0      	ldr	r0, [r0, #28]
 8010bf8:	699b      	ldr	r3, [r3, #24]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010c00:	2a00      	cmp	r2, #0
 8010c02:	f000 8594 	beq.w	801172e <forward_conv2d+0xc1e>
 8010c06:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 8010c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c0e:	6892      	ldr	r2, [r2, #8]
 8010c10:	689b      	ldr	r3, [r3, #8]
 8010c12:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010c16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010c1a:	f001 fe6f 	bl	80128fc <ai_array_get_byte_size>
 8010c1e:	69a3      	ldr	r3, [r4, #24]
 8010c20:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8010c24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010c28:	681c      	ldr	r4, [r3, #0]
 8010c2a:	fa1f f289 	uxth.w	r2, r9
 8010c2e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010c32:	fa1f f388 	uxth.w	r3, r8
 8010c36:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 8010c3a:	f3c4 5041 	ubfx	r0, r4, #21, #2
 8010c3e:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8010c42:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 8010c46:	3a01      	subs	r2, #1
 8010c48:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8010c4c:	fa45 f000 	asr.w	r0, r5, r0
 8010c50:	6a35      	ldr	r5, [r6, #32]
 8010c52:	fb0e 1202 	mla	r2, lr, r2, r1
 8010c56:	3b01      	subs	r3, #1
 8010c58:	3c01      	subs	r4, #1
 8010c5a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010c5e:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 8010c62:	b285      	uxth	r5, r0
 8010c64:	fb04 1103 	mla	r1, r4, r3, r1
 8010c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010c6c:	64ba      	str	r2, [r7, #72]	; 0x48
 8010c6e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8010c72:	4619      	mov	r1, r3
 8010c74:	4ad1      	ldr	r2, [pc, #836]	; (8010fbc <forward_conv2d+0x4ac>)
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	bf08      	it	eq
 8010c7a:	4611      	moveq	r1, r2
 8010c7c:	f1bc 0f04 	cmp.w	ip, #4
 8010c80:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8010c84:	f000 852a 	beq.w	80116dc <forward_conv2d+0xbcc>
 8010c88:	f1bc 0f08 	cmp.w	ip, #8
 8010c8c:	f000 8526 	beq.w	80116dc <forward_conv2d+0xbcc>
 8010c90:	fa1f f38a 	uxth.w	r3, sl
 8010c94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010c9c:	425b      	negs	r3, r3
 8010c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010ca2:	2a00      	cmp	r2, #0
 8010ca4:	f000 8222 	beq.w	80110ec <forward_conv2d+0x5dc>
 8010ca8:	fa1f f48b 	uxth.w	r4, fp
 8010cac:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8010cb0:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8010cb4:	fa0f f588 	sxth.w	r5, r8
 8010cb8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8010cbc:	fa0f f689 	sxth.w	r6, r9
 8010cc0:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8010cc4:	4264      	negs	r4, r4
 8010cc6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010cca:	fb02 f200 	mul.w	r2, r2, r0
 8010cce:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 8010cd2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8010cd6:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 8010cda:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8010cde:	0084      	lsls	r4, r0, #2
 8010ce0:	fb01 f300 	mul.w	r3, r1, r0
 8010ce4:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8010fc0 <forward_conv2d+0x4b0>
 8010ce8:	fb00 f202 	mul.w	r2, r0, r2
 8010cec:	f8c7 c0b4 	str.w	ip, [r7, #180]	; 0xb4
 8010cf0:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 8010cf4:	fb06 fc05 	mul.w	ip, r6, r5
 8010cf8:	fb05 f500 	mul.w	r5, r5, r0
 8010cfc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010d00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010d04:	460a      	mov	r2, r1
 8010d06:	637d      	str	r5, [r7, #52]	; 0x34
 8010d08:	4605      	mov	r5, r0
 8010d0a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010d0e:	fb04 f505 	mul.w	r5, r4, r5
 8010d12:	653e      	str	r6, [r7, #80]	; 0x50
 8010d14:	66fc      	str	r4, [r7, #108]	; 0x6c
 8010d16:	fb01 f606 	mul.w	r6, r1, r6
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	607d      	str	r5, [r7, #4]
 8010d1e:	0085      	lsls	r5, r0, #2
 8010d20:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8010d24:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 8010d28:	4625      	mov	r5, r4
 8010d2a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8010d2c:	63be      	str	r6, [r7, #56]	; 0x38
 8010d2e:	fb01 f505 	mul.w	r5, r1, r5
 8010d32:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 8010d36:	fb04 f402 	mul.w	r4, r4, r2
 8010d3a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010d3e:	00b6      	lsls	r6, r6, #2
 8010d40:	62bd      	str	r5, [r7, #40]	; 0x28
 8010d42:	fb00 f001 	mul.w	r0, r0, r1
 8010d46:	009d      	lsls	r5, r3, #2
 8010d48:	61bc      	str	r4, [r7, #24]
 8010d4a:	0094      	lsls	r4, r2, #2
 8010d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d50:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8010d54:	f8c7 60cc 	str.w	r6, [r7, #204]	; 0xcc
 8010d58:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8010d5c:	62fd      	str	r5, [r7, #44]	; 0x2c
 8010d5e:	633c      	str	r4, [r7, #48]	; 0x30
 8010d60:	6238      	str	r0, [r7, #32]
 8010d62:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8010d66:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8010d6a:	fb06 f000 	mul.w	r0, r6, r0
 8010d6e:	fb02 f201 	mul.w	r2, r2, r1
 8010d72:	61f8      	str	r0, [r7, #28]
 8010d74:	0118      	lsls	r0, r3, #4
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8010d7c:	60b8      	str	r0, [r7, #8]
 8010d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d8e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8010d92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d98:	2900      	cmp	r1, #0
 8010d9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010d9c:	4413      	add	r3, r2
 8010d9e:	bfb4      	ite	lt
 8010da0:	2100      	movlt	r1, #0
 8010da2:	2200      	movge	r2, #0
 8010da4:	4283      	cmp	r3, r0
 8010da6:	bf28      	it	cs
 8010da8:	4603      	movcs	r3, r0
 8010daa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8010dae:	2801      	cmp	r0, #1
 8010db0:	f000 82f9 	beq.w	80113a6 <forward_conv2d+0x896>
 8010db4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8010db8:	4281      	cmp	r1, r0
 8010dba:	f000 81b5 	beq.w	8011128 <forward_conv2d+0x618>
 8010dbe:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8010dc2:	2900      	cmp	r1, #0
 8010dc4:	f000 8171 	beq.w	80110aa <forward_conv2d+0x59a>
 8010dc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8010dd0:	1815      	adds	r5, r2, r0
 8010dd2:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8010dd6:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8010dda:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8010dde:	3d01      	subs	r5, #1
 8010de0:	fb92 f1f0 	sdiv	r1, r2, r0
 8010de4:	fb00 2111 	mls	r1, r0, r1, r2
 8010de8:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8010dec:	2400      	movs	r4, #0
 8010dee:	1a41      	subs	r1, r0, r1
 8010df0:	67bc      	str	r4, [r7, #120]	; 0x78
 8010df2:	4604      	mov	r4, r0
 8010df4:	fb91 f0f0 	sdiv	r0, r1, r0
 8010df8:	fb04 1110 	mls	r1, r4, r0, r1
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	1a5b      	subs	r3, r3, r1
 8010e00:	4411      	add	r1, r2
 8010e02:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010e06:	4423      	add	r3, r4
 8010e08:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8010e0c:	fb02 f201 	mul.w	r2, r2, r1
 8010e10:	677a      	str	r2, [r7, #116]	; 0x74
 8010e12:	1e5a      	subs	r2, r3, #1
 8010e14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010e18:	fb92 f8f0 	sdiv	r8, r2, r0
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010e22:	46c2      	mov	sl, r8
 8010e24:	fbb1 f3f4 	udiv	r3, r1, r4
 8010e28:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010e2c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8010e30:	fb95 f5f0 	sdiv	r5, r5, r0
 8010e34:	eba1 0008 	sub.w	r0, r1, r8
 8010e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e3a:	eba1 0c03 	sub.w	ip, r1, r3
 8010e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010e42:	fbb2 f2f4 	udiv	r2, r2, r4
 8010e46:	fb0e f403 	mul.w	r4, lr, r3
 8010e4a:	0096      	lsls	r6, r2, #2
 8010e4c:	fb03 f305 	mul.w	r3, r3, r5
 8010e50:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8010e54:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010e56:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8010e5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e5c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8010e60:	fb04 f300 	mul.w	r3, r4, r0
 8010e64:	663e      	str	r6, [r7, #96]	; 0x60
 8010e66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010e6e:	1b9b      	subs	r3, r3, r6
 8010e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e74:	008b      	lsls	r3, r1, #2
 8010e76:	647b      	str	r3, [r7, #68]	; 0x44
 8010e78:	00d3      	lsls	r3, r2, #3
 8010e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e82:	189e      	adds	r6, r3, r2
 8010e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f2c0 8138 	blt.w	80110fe <forward_conv2d+0x5ee>
 8010e8e:	2100      	movs	r1, #0
 8010e90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8010e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e96:	4688      	mov	r8, r1
 8010e98:	460d      	mov	r5, r1
 8010e9a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8010e9e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8010ea2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010ea6:	0080      	lsls	r0, r0, #2
 8010ea8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010eac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010eb0:	4422      	add	r2, r4
 8010eb2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8010eb6:	4423      	add	r3, r4
 8010eb8:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8010ebc:	42a2      	cmp	r2, r4
 8010ebe:	bf94      	ite	ls
 8010ec0:	ebc5 0202 	rsbls	r2, r5, r2
 8010ec4:	ebc5 0204 	rsbhi	r2, r5, r4
 8010ec8:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8010ecc:	eb08 0403 	add.w	r4, r8, r3
 8010ed0:	1a52      	subs	r2, r2, r1
 8010ed2:	462b      	mov	r3, r5
 8010ed4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8010ed8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010edc:	2d00      	cmp	r5, #0
 8010ede:	bf08      	it	eq
 8010ee0:	4633      	moveq	r3, r6
 8010ee2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8010ee6:	440a      	add	r2, r1
 8010ee8:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8010eec:	42b3      	cmp	r3, r6
 8010eee:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8010ef2:	fb00 5004 	mla	r0, r0, r4, r5
 8010ef6:	460a      	mov	r2, r1
 8010ef8:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8010efc:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8010f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f02:	fb96 f6f1 	sdiv	r6, r6, r1
 8010f06:	fb9c f5f1 	sdiv	r5, ip, r1
 8010f0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010f0c:	440d      	add	r5, r1
 8010f0e:	fb06 0112 	mls	r1, r6, r2, r0
 8010f12:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8010f16:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8010f1a:	fb0e 0505 	mla	r5, lr, r5, r0
 8010f1e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8010f22:	1b92      	subs	r2, r2, r6
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d073      	beq.n	8011010 <forward_conv2d+0x500>
 8010f28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010f2a:	fb02 f80e 	mul.w	r8, r2, lr
 8010f2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f30:	fb00 fb01 	mul.w	fp, r0, r1
 8010f34:	2a00      	cmp	r2, #0
 8010f36:	d06b      	beq.n	8011010 <forward_conv2d+0x500>
 8010f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f3a:	189a      	adds	r2, r3, r2
 8010f3c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8010f40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	643b      	str	r3, [r7, #64]	; 0x40
 8010f48:	2300      	movs	r3, #0
 8010f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8010f4c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f54:	4413      	add	r3, r2
 8010f56:	188a      	adds	r2, r1, r2
 8010f58:	657b      	str	r3, [r7, #84]	; 0x54
 8010f5a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8010f5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f66:	f1ba 0f00 	cmp.w	sl, #0
 8010f6a:	ecf3 7a01 	vldmia	r3!, {s15}
 8010f6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010f72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010f76:	f340 80c0 	ble.w	80110fa <forward_conv2d+0x5ea>
 8010f7a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8010f7e:	f04f 0c00 	mov.w	ip, #0
 8010f82:	2e00      	cmp	r6, #0
 8010f84:	dd1e      	ble.n	8010fc4 <forward_conv2d+0x4b4>
 8010f86:	2100      	movs	r1, #0
 8010f88:	eb00 040e 	add.w	r4, r0, lr
 8010f8c:	4284      	cmp	r4, r0
 8010f8e:	d910      	bls.n	8010fb2 <forward_conv2d+0x4a2>
 8010f90:	4603      	mov	r3, r0
 8010f92:	462a      	mov	r2, r5
 8010f94:	ecb3 7a01 	vldmia	r3!, {s14}
 8010f98:	ecf2 6a01 	vldmia	r2!, {s13}
 8010f9c:	429c      	cmp	r4, r3
 8010f9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010fa2:	d8f7      	bhi.n	8010f94 <forward_conv2d+0x484>
 8010fa4:	43c3      	mvns	r3, r0
 8010fa6:	441c      	add	r4, r3
 8010fa8:	f024 0403 	bic.w	r4, r4, #3
 8010fac:	3404      	adds	r4, #4
 8010fae:	4425      	add	r5, r4
 8010fb0:	4420      	add	r0, r4
 8010fb2:	3101      	adds	r1, #1
 8010fb4:	4448      	add	r0, r9
 8010fb6:	428e      	cmp	r6, r1
 8010fb8:	d1e6      	bne.n	8010f88 <forward_conv2d+0x478>
 8010fba:	e003      	b.n	8010fc4 <forward_conv2d+0x4b4>
 8010fbc:	08010491 	.word	0x08010491
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	f10c 0c01 	add.w	ip, ip, #1
 8010fc8:	4458      	add	r0, fp
 8010fca:	4445      	add	r5, r8
 8010fcc:	45e2      	cmp	sl, ip
 8010fce:	d1d8      	bne.n	8010f82 <forward_conv2d+0x472>
 8010fd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8010fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010fd8:	441d      	add	r5, r3
 8010fda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010fde:	ece3 7a01 	vstmia	r3!, {s15}
 8010fe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d1b9      	bne.n	8010f62 <forward_conv2d+0x452>
 8010fee:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8010ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ff4:	4472      	add	r2, lr
 8010ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ff8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011000:	673b      	str	r3, [r7, #112]	; 0x70
 8011002:	1a52      	subs	r2, r2, r1
 8011004:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8011008:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801100c:	429a      	cmp	r2, r3
 801100e:	d19d      	bne.n	8010f4c <forward_conv2d+0x43c>
 8011010:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011014:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011018:	4608      	mov	r0, r1
 801101a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801101e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011020:	4410      	add	r0, r2
 8011022:	3301      	adds	r3, #1
 8011024:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8011028:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801102c:	67bb      	str	r3, [r7, #120]	; 0x78
 801102e:	4401      	add	r1, r0
 8011030:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8011034:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011038:	1a8a      	subs	r2, r1, r2
 801103a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801103e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011042:	429a      	cmp	r2, r3
 8011044:	f47f af1a 	bne.w	8010e7c <forward_conv2d+0x36c>
 8011048:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 801104c:	2400      	movs	r4, #0
 801104e:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8011052:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 8011056:	46a2      	mov	sl, r4
 8011058:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 801105a:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 801105e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011062:	4633      	mov	r3, r6
 8011064:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011068:	f10a 0a01 	add.w	sl, sl, #1
 801106c:	608d      	str	r5, [r1, #8]
 801106e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8011072:	4416      	add	r6, r2
 8011074:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011078:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801107c:	4405      	add	r5, r0
 801107e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8011082:	4608      	mov	r0, r1
 8011084:	47a0      	blx	r4
 8011086:	eba6 0309 	sub.w	r3, r6, r9
 801108a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801108e:	4293      	cmp	r3, r2
 8011090:	bfa8      	it	ge
 8011092:	464e      	movge	r6, r9
 8011094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011098:	4553      	cmp	r3, sl
 801109a:	d1e0      	bne.n	801105e <forward_conv2d+0x54e>
 801109c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80110a0:	69fa      	ldr	r2, [r7, #28]
 80110a2:	66be      	str	r6, [r7, #104]	; 0x68
 80110a4:	4413      	add	r3, r2
 80110a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80110aa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80110ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80110b0:	4604      	mov	r4, r0
 80110b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110b6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80110ba:	699b      	ldr	r3, [r3, #24]
 80110bc:	4414      	add	r4, r2
 80110be:	1a82      	subs	r2, r0, r2
 80110c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80110c4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80110c8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80110cc:	3101      	adds	r1, #1
 80110ce:	68da      	ldr	r2, [r3, #12]
 80110d0:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 80110d4:	609a      	str	r2, [r3, #8]
 80110d6:	69bc      	ldr	r4, [r7, #24]
 80110d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110dc:	4420      	add	r0, r4
 80110de:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80110e2:	428b      	cmp	r3, r1
 80110e4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80110e8:	f47f ae51 	bne.w	8010d8e <forward_conv2d+0x27e>
 80110ec:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80110f0:	46bd      	mov	sp, r7
 80110f2:	ecbd 8b08 	vpop	{d8-d11}
 80110f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fa:	461a      	mov	r2, r3
 80110fc:	e76a      	b.n	8010fd4 <forward_conv2d+0x4c4>
 80110fe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011106:	460d      	mov	r5, r1
 8011108:	4688      	mov	r8, r1
 801110a:	1853      	adds	r3, r2, r1
 801110c:	4611      	mov	r1, r2
 801110e:	fb95 f2f2 	sdiv	r2, r5, r2
 8011112:	fb01 5212 	mls	r2, r1, r2, r5
 8011116:	460c      	mov	r4, r1
 8011118:	1a8a      	subs	r2, r1, r2
 801111a:	fb92 f1f1 	sdiv	r1, r2, r1
 801111e:	fb04 2111 	mls	r1, r4, r1, r2
 8011122:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011124:	1888      	adds	r0, r1, r2
 8011126:	e6b8      	b.n	8010e9a <forward_conv2d+0x38a>
 8011128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801112a:	2901      	cmp	r1, #1
 801112c:	f47f ae47 	bne.w	8010dbe <forward_conv2d+0x2ae>
 8011130:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8011134:	2900      	cmp	r1, #0
 8011136:	d0b8      	beq.n	80110aa <forward_conv2d+0x59a>
 8011138:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801113c:	1a99      	subs	r1, r3, r2
 801113e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8011142:	0083      	lsls	r3, r0, #2
 8011144:	fb02 f000 	mul.w	r0, r2, r0
 8011148:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 801114c:	6778      	str	r0, [r7, #116]	; 0x74
 801114e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011152:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8011156:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801115a:	1a41      	subs	r1, r0, r1
 801115c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801115e:	fb00 f202 	mul.w	r2, r0, r2
 8011162:	fb03 f301 	mul.w	r3, r3, r1
 8011166:	627a      	str	r2, [r7, #36]	; 0x24
 8011168:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801116c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801116e:	2300      	movs	r3, #0
 8011170:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011178:	67bb      	str	r3, [r7, #120]	; 0x78
 801117a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801117e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011182:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8011186:	fbb3 f3f2 	udiv	r3, r3, r2
 801118a:	4619      	mov	r1, r3
 801118c:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8011190:	643b      	str	r3, [r7, #64]	; 0x40
 8011192:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8011196:	0092      	lsls	r2, r2, #2
 8011198:	00db      	lsls	r3, r3, #3
 801119a:	657a      	str	r2, [r7, #84]	; 0x54
 801119c:	603b      	str	r3, [r7, #0]
 801119e:	008b      	lsls	r3, r1, #2
 80111a0:	60fb      	str	r3, [r7, #12]
 80111a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f2c0 8280 	blt.w	80116ac <forward_conv2d+0xb9c>
 80111ac:	2400      	movs	r4, #0
 80111ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80111b0:	4621      	mov	r1, r4
 80111b2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80111b6:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 80111ba:	1818      	adds	r0, r3, r0
 80111bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80111c0:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 80111c4:	18f3      	adds	r3, r6, r3
 80111c6:	4420      	add	r0, r4
 80111c8:	461c      	mov	r4, r3
 80111ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80111ce:	0080      	lsls	r0, r0, #2
 80111d0:	429c      	cmp	r4, r3
 80111d2:	bf28      	it	cs
 80111d4:	461c      	movcs	r4, r3
 80111d6:	1a64      	subs	r4, r4, r1
 80111d8:	2d00      	cmp	r5, #0
 80111da:	f000 8258 	beq.w	801168e <forward_conv2d+0xb7e>
 80111de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80111e2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 80111e6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80111ea:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80111ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80111f2:	428d      	cmp	r5, r1
 80111f4:	462a      	mov	r2, r5
 80111f6:	eba6 0104 	sub.w	r1, r6, r4
 80111fa:	eba3 0304 	sub.w	r3, r3, r4
 80111fe:	fe08 4a04 	vseleq.f32	s8, s16, s8
 8011202:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011204:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 8011208:	4428      	add	r0, r5
 801120a:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 801120e:	fb05 6e00 	mla	lr, r5, r0, r6
 8011212:	eb0e 000b 	add.w	r0, lr, fp
 8011216:	4570      	cmp	r0, lr
 8011218:	6478      	str	r0, [r7, #68]	; 0x44
 801121a:	f240 80a7 	bls.w	801136c <forward_conv2d+0x85c>
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	fb01 f10b 	mul.w	r1, r1, fp
 8011224:	f024 0803 	bic.w	r8, r4, #3
 8011228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801122e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8011232:	2b00      	cmp	r3, #0
 8011234:	f000 809a 	beq.w	801136c <forward_conv2d+0x85c>
 8011238:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801123a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801123e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011242:	089b      	lsrs	r3, r3, #2
 8011244:	4401      	add	r1, r0
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	3301      	adds	r3, #1
 801124a:	1810      	adds	r0, r2, r0
 801124c:	1a8a      	subs	r2, r1, r2
 801124e:	617a      	str	r2, [r7, #20]
 8011250:	fb03 f20a 	mul.w	r2, r3, sl
 8011254:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8011258:	65fa      	str	r2, [r7, #92]	; 0x5c
 801125a:	011a      	lsls	r2, r3, #4
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	663a      	str	r2, [r7, #96]	; 0x60
 8011260:	65bb      	str	r3, [r7, #88]	; 0x58
 8011262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011268:	6979      	ldr	r1, [r7, #20]
 801126a:	4413      	add	r3, r2
 801126c:	188a      	adds	r2, r1, r2
 801126e:	613b      	str	r3, [r7, #16]
 8011270:	673a      	str	r2, [r7, #112]	; 0x70
 8011272:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801127a:	ecf3 6a01 	vldmia	r3!, {s13}
 801127e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011282:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011286:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801128a:	2b00      	cmp	r3, #0
 801128c:	dd57      	ble.n	801133e <forward_conv2d+0x82e>
 801128e:	4676      	mov	r6, lr
 8011290:	f04f 0c00 	mov.w	ip, #0
 8011294:	f1b8 0f00 	cmp.w	r8, #0
 8011298:	f340 81f7 	ble.w	801168a <forward_conv2d+0xb7a>
 801129c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80112a0:	f109 0310 	add.w	r3, r9, #16
 80112a4:	2000      	movs	r0, #0
 80112a6:	18b1      	adds	r1, r6, r2
 80112a8:	4632      	mov	r2, r6
 80112aa:	eb02 050b 	add.w	r5, r2, fp
 80112ae:	ed53 7a03 	vldr	s15, [r3, #-12]
 80112b2:	ed92 6a00 	vldr	s12, [r2]
 80112b6:	3004      	adds	r0, #4
 80112b8:	ed95 7a00 	vldr	s14, [r5]
 80112bc:	eb01 050b 	add.w	r5, r1, fp
 80112c0:	ed53 4a04 	vldr	s9, [r3, #-16]
 80112c4:	4540      	cmp	r0, r8
 80112c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112ca:	ed13 5a02 	vldr	s10, [r3, #-8]
 80112ce:	edd1 5a00 	vldr	s11, [r1]
 80112d2:	4452      	add	r2, sl
 80112d4:	ed95 7a00 	vldr	s14, [r5]
 80112d8:	4451      	add	r1, sl
 80112da:	eee4 7a86 	vfma.f32	s15, s9, s12
 80112de:	ed13 6a01 	vldr	s12, [r3, #-4]
 80112e2:	f103 0310 	add.w	r3, r3, #16
 80112e6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80112ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80112ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80112f2:	dbda      	blt.n	80112aa <forward_conv2d+0x79a>
 80112f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80112f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80112f8:	441e      	add	r6, r3
 80112fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112fc:	4499      	add	r9, r3
 80112fe:	4284      	cmp	r4, r0
 8011300:	dd11      	ble.n	8011326 <forward_conv2d+0x816>
 8011302:	4602      	mov	r2, r0
 8011304:	4633      	mov	r3, r6
 8011306:	4649      	mov	r1, r9
 8011308:	3201      	adds	r2, #1
 801130a:	edd3 7a00 	vldr	s15, [r3]
 801130e:	ecb1 7a01 	vldmia	r1!, {s14}
 8011312:	445b      	add	r3, fp
 8011314:	42a2      	cmp	r2, r4
 8011316:	eee7 6a27 	vfma.f32	s13, s14, s15
 801131a:	d1f5      	bne.n	8011308 <forward_conv2d+0x7f8>
 801131c:	1a20      	subs	r0, r4, r0
 801131e:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8011322:	fb00 660b 	mla	r6, r0, fp, r6
 8011326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801132a:	f10c 0c01 	add.w	ip, ip, #1
 801132e:	441e      	add	r6, r3
 8011330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011334:	4499      	add	r9, r3
 8011336:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801133a:	4563      	cmp	r3, ip
 801133c:	d1aa      	bne.n	8011294 <forward_conv2d+0x784>
 801133e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011340:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011344:	4499      	add	r9, r3
 8011346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011348:	ece3 6a01 	vstmia	r3!, {s13}
 801134c:	673b      	str	r3, [r7, #112]	; 0x70
 801134e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011352:	4293      	cmp	r3, r2
 8011354:	d18f      	bne.n	8011276 <forward_conv2d+0x766>
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	f10e 0e04 	add.w	lr, lr, #4
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	1a9b      	subs	r3, r3, r2
 8011360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011366:	4573      	cmp	r3, lr
 8011368:	f63f af7b 	bhi.w	8011262 <forward_conv2d+0x752>
 801136c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011370:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8011374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011376:	440a      	add	r2, r1
 8011378:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801137c:	3301      	adds	r3, #1
 801137e:	4608      	mov	r0, r1
 8011380:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011384:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011388:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801138c:	67bb      	str	r3, [r7, #120]	; 0x78
 801138e:	4410      	add	r0, r2
 8011390:	1a8a      	subs	r2, r1, r2
 8011392:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8011396:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801139a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 801139e:	429a      	cmp	r2, r3
 80113a0:	f47f aeff 	bne.w	80111a2 <forward_conv2d+0x692>
 80113a4:	e652      	b.n	801104c <forward_conv2d+0x53c>
 80113a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80113a8:	2801      	cmp	r0, #1
 80113aa:	f47f ad08 	bne.w	8010dbe <forward_conv2d+0x2ae>
 80113ae:	1a9b      	subs	r3, r3, r2
 80113b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80113b6:	fb00 f101 	mul.w	r1, r0, r1
 80113ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80113be:	6779      	str	r1, [r7, #116]	; 0x74
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 815c 	beq.w	801167e <forward_conv2d+0xb6e>
 80113c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	fb03 f202 	mul.w	r2, r3, r2
 80113ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113d2:	4401      	add	r1, r0
 80113d4:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 80113d8:	330a      	adds	r3, #10
 80113da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80113dc:	6439      	str	r1, [r7, #64]	; 0x40
 80113de:	1a12      	subs	r2, r2, r0
 80113e0:	f023 0307 	bic.w	r3, r3, #7
 80113e4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80113e8:	647a      	str	r2, [r7, #68]	; 0x44
 80113ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113f0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80113f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80113f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011400:	2300      	movs	r3, #0
 8011402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011408:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 801140c:	ebad 0d03 	sub.w	sp, sp, r3
 8011410:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011414:	ab02      	add	r3, sp, #8
 8011416:	663b      	str	r3, [r7, #96]	; 0x60
 8011418:	b132      	cbz	r2, 8011428 <forward_conv2d+0x918>
 801141a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801141e:	4618      	mov	r0, r3
 8011420:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011424:	f001 fac4 	bl	80129b0 <memcpy>
 8011428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 8152 	beq.w	80116d6 <forward_conv2d+0xbc6>
 8011432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011436:	ed93 2a00 	vldr	s4, [r3]
 801143a:	3304      	adds	r3, #4
 801143c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011444:	2b00      	cmp	r3, #0
 8011446:	f000 8100 	beq.w	801164a <forward_conv2d+0xb3a>
 801144a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801144e:	f04f 0b00 	mov.w	fp, #0
 8011452:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011456:	eb03 0802 	add.w	r8, r3, r2
 801145a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801145c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011466:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801146a:	67bb      	str	r3, [r7, #120]	; 0x78
 801146c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011470:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011474:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011478:	2b00      	cmp	r3, #0
 801147a:	f2c0 8124 	blt.w	80116c6 <forward_conv2d+0xbb6>
 801147e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011482:	2300      	movs	r3, #0
 8011484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011486:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 801148a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801148e:	4421      	add	r1, r4
 8011490:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8011492:	4540      	cmp	r0, r8
 8011494:	bf94      	ite	ls
 8011496:	ebc3 0300 	rsbls	r3, r3, r0
 801149a:	ebc3 0308 	rsbhi	r3, r3, r8
 801149e:	4422      	add	r2, r4
 80114a0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80114a4:	1ac0      	subs	r0, r0, r3
 80114a6:	eba4 0903 	sub.w	r9, r4, r3
 80114aa:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 80114ae:	fb03 f304 	mul.w	r3, r3, r4
 80114b2:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 80114b6:	2c00      	cmp	r4, #0
 80114b8:	f340 8102 	ble.w	80116c0 <forward_conv2d+0xbb0>
 80114bc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80114be:	f023 0c0f 	bic.w	ip, r3, #15
 80114c2:	eef0 6a42 	vmov.f32	s13, s4
 80114c6:	f04f 0e00 	mov.w	lr, #0
 80114ca:	fb04 f000 	mul.w	r0, r4, r0
 80114ce:	fb04 f909 	mul.w	r9, r4, r9
 80114d2:	65b8      	str	r0, [r7, #88]	; 0x58
 80114d4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80114d8:	0900      	lsrs	r0, r0, #4
 80114da:	3001      	adds	r0, #1
 80114dc:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80114e0:	0100      	lsls	r0, r0, #4
 80114e2:	6578      	str	r0, [r7, #84]	; 0x54
 80114e4:	f1bc 0f00 	cmp.w	ip, #0
 80114e8:	f340 80e8 	ble.w	80116bc <forward_conv2d+0xbac>
 80114ec:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80114f0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80114f4:	2500      	movs	r5, #0
 80114f6:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 80114fa:	3510      	adds	r5, #16
 80114fc:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8011500:	3440      	adds	r4, #64	; 0x40
 8011502:	ed14 6a20 	vldr	s12, [r4, #-128]	; 0xffffff80
 8011506:	4565      	cmp	r5, ip
 8011508:	ee67 7a27 	vmul.f32	s15, s14, s15
 801150c:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
 8011510:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8011514:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8011518:	ed50 3a1e 	vldr	s7, [r0, #-120]	; 0xffffff88
 801151c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011520:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 8011524:	ed50 4a1d 	vldr	s9, [r0, #-116]	; 0xffffff8c
 8011528:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 801152c:	ed50 5a1c 	vldr	s11, [r0, #-112]	; 0xffffff90
 8011530:	ed14 6a1b 	vldr	s12, [r4, #-108]	; 0xffffff94
 8011534:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 8011538:	eee3 7a23 	vfma.f32	s15, s6, s7
 801153c:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8011540:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8011544:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8011548:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 801154c:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8011550:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8011554:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011558:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 801155c:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8011560:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 8011564:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 8011568:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 801156c:	ed50 2a15 	vldr	s5, [r0, #-84]	; 0xffffffac
 8011570:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011574:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8011578:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 801157c:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8011580:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8011584:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8011588:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 801158c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011590:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8011594:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 8011598:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801159c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80115a0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80115a4:	eee8 7a80 	vfma.f32	s15, s17, s0
 80115a8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80115ac:	eee1 7aa2 	vfma.f32	s15, s3, s5
 80115b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80115b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80115b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80115bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80115c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80115c4:	db97      	blt.n	80114f6 <forward_conv2d+0x9e6>
 80115c6:	4451      	add	r1, sl
 80115c8:	4452      	add	r2, sl
 80115ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80115cc:	4283      	cmp	r3, r0
 80115ce:	dd0f      	ble.n	80115f0 <forward_conv2d+0xae0>
 80115d0:	4604      	mov	r4, r0
 80115d2:	460e      	mov	r6, r1
 80115d4:	4615      	mov	r5, r2
 80115d6:	3401      	adds	r4, #1
 80115d8:	ecb5 7a01 	vldmia	r5!, {s14}
 80115dc:	ecf6 7a01 	vldmia	r6!, {s15}
 80115e0:	42a3      	cmp	r3, r4
 80115e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80115e6:	d1f6      	bne.n	80115d6 <forward_conv2d+0xac6>
 80115e8:	1a18      	subs	r0, r3, r0
 80115ea:	0080      	lsls	r0, r0, #2
 80115ec:	4402      	add	r2, r0
 80115ee:	4401      	add	r1, r0
 80115f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80115f2:	f10e 0e01 	add.w	lr, lr, #1
 80115f6:	4449      	add	r1, r9
 80115f8:	4402      	add	r2, r0
 80115fa:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80115fe:	4570      	cmp	r0, lr
 8011600:	f47f af70 	bne.w	80114e4 <forward_conv2d+0x9d4>
 8011604:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011608:	f10b 0b01 	add.w	fp, fp, #1
 801160c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801160e:	4608      	mov	r0, r1
 8011610:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8011614:	edc3 6a00 	vstr	s13, [r3]
 8011618:	440b      	add	r3, r1
 801161a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801161e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011622:	67bb      	str	r3, [r7, #120]	; 0x78
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	4410      	add	r0, r2
 8011628:	eba8 0802 	sub.w	r8, r8, r2
 801162c:	1ac9      	subs	r1, r1, r3
 801162e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011632:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8011636:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801163a:	4419      	add	r1, r3
 801163c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011640:	455b      	cmp	r3, fp
 8011642:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8011646:	f47f af15 	bne.w	8011474 <forward_conv2d+0x964>
 801164a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801164e:	3301      	adds	r3, #1
 8011650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011654:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011658:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801165c:	440a      	add	r2, r1
 801165e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011662:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011666:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 801166a:	3204      	adds	r2, #4
 801166c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8011670:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011674:	429a      	cmp	r2, r3
 8011676:	f47f aec6 	bne.w	8011406 <forward_conv2d+0x8f6>
 801167a:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 801167e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011682:	2b00      	cmp	r3, #0
 8011684:	f47f ace2 	bne.w	801104c <forward_conv2d+0x53c>
 8011688:	e50f      	b.n	80110aa <forward_conv2d+0x59a>
 801168a:	2000      	movs	r0, #0
 801168c:	e637      	b.n	80112fe <forward_conv2d+0x7ee>
 801168e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011692:	eeb0 4a48 	vmov.f32	s8, s16
 8011696:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801169a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801169e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80116a2:	1b19      	subs	r1, r3, r4
 80116a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80116a8:	1b1b      	subs	r3, r3, r4
 80116aa:	e5aa      	b.n	8011202 <forward_conv2d+0x6f2>
 80116ac:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 80116b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116b2:	4621      	mov	r1, r4
 80116b4:	191a      	adds	r2, r3, r4
 80116b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80116ba:	e57a      	b.n	80111b2 <forward_conv2d+0x6a2>
 80116bc:	2000      	movs	r0, #0
 80116be:	e785      	b.n	80115cc <forward_conv2d+0xabc>
 80116c0:	eef0 6a42 	vmov.f32	s13, s4
 80116c4:	e79e      	b.n	8011604 <forward_conv2d+0xaf4>
 80116c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80116cc:	eba8 0303 	sub.w	r3, r8, r3
 80116d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80116d4:	e6d7      	b.n	8011486 <forward_conv2d+0x976>
 80116d6:	eeb0 2a48 	vmov.f32	s4, s16
 80116da:	e6b1      	b.n	8011440 <forward_conv2d+0x930>
 80116dc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80116e0:	68ca      	ldr	r2, [r1, #12]
 80116e2:	2a00      	cmp	r2, #0
 80116e4:	f43f aad4 	beq.w	8010c90 <forward_conv2d+0x180>
 80116e8:	6973      	ldr	r3, [r6, #20]
 80116ea:	8818      	ldrh	r0, [r3, #0]
 80116ec:	2803      	cmp	r0, #3
 80116ee:	d91b      	bls.n	8011728 <forward_conv2d+0xc18>
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f4:	b1ab      	cbz	r3, 8011722 <forward_conv2d+0xc12>
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	b19b      	cbz	r3, 8011722 <forward_conv2d+0xc12>
 80116fa:	699c      	ldr	r4, [r3, #24]
 80116fc:	462b      	mov	r3, r5
 80116fe:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8011702:	6889      	ldr	r1, [r1, #8]
 8011704:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011708:	2800      	cmp	r0, #0
 801170a:	bf18      	it	ne
 801170c:	4605      	movne	r5, r0
 801170e:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8011712:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8011716:	e9cd 5400 	strd	r5, r4, [sp]
 801171a:	f7ff f9a9 	bl	8010a70 <ai_dict_decompress_f32>
 801171e:	f7ff bab7 	b.w	8010c90 <forward_conv2d+0x180>
 8011722:	2300      	movs	r3, #0
 8011724:	699b      	ldr	r3, [r3, #24]
 8011726:	deff      	udf	#255	; 0xff
 8011728:	2300      	movs	r3, #0
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	deff      	udf	#255	; 0xff
 801172e:	b178      	cbz	r0, 8011750 <forward_conv2d+0xc40>
 8011730:	6883      	ldr	r3, [r0, #8]
 8011732:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801173a:	2301      	movs	r3, #1
 801173c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011744:	f7ff ba70 	b.w	8010c28 <forward_conv2d+0x118>
 8011748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801174c:	f7ff ba50 	b.w	8010bf0 <forward_conv2d+0xe0>
 8011750:	2301      	movs	r3, #1
 8011752:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011756:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801175a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801175e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011762:	f7ff ba61 	b.w	8010c28 <forward_conv2d+0x118>
 8011766:	3218      	adds	r2, #24
 8011768:	d007      	beq.n	801177a <forward_conv2d+0xc6a>
 801176a:	462b      	mov	r3, r5
 801176c:	462c      	mov	r4, r5
 801176e:	462a      	mov	r2, r5
 8011770:	f7ff b9f8 	b.w	8010b64 <forward_conv2d+0x54>
 8011774:	2300      	movs	r3, #0
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	deff      	udf	#255	; 0xff
 801177a:	68d3      	ldr	r3, [r2, #12]
 801177c:	deff      	udf	#255	; 0xff
 801177e:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8011782:	f7ff b9de 	b.w	8010b42 <forward_conv2d+0x32>
 8011786:	2300      	movs	r3, #0
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	deff      	udf	#255	; 0xff
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	deff      	udf	#255	; 0xff
 8011790:	2300      	movs	r3, #0
 8011792:	f7ff b9e6 	b.w	8010b62 <forward_conv2d+0x52>
 8011796:	bf00      	nop

08011798 <forward_dense>:
 8011798:	6942      	ldr	r2, [r0, #20]
 801179a:	8813      	ldrh	r3, [r2, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 81c8 	beq.w	8011b32 <forward_dense+0x39a>
 80117a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a6:	ed2d 8b08 	vpush	{d8-d11}
 80117aa:	6851      	ldr	r1, [r2, #4]
 80117ac:	b091      	sub	sp, #68	; 0x44
 80117ae:	684d      	ldr	r5, [r1, #4]
 80117b0:	b105      	cbz	r5, 80117b4 <forward_dense+0x1c>
 80117b2:	682d      	ldr	r5, [r5, #0]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	f240 81b9 	bls.w	8011b2c <forward_dense+0x394>
 80117ba:	690a      	ldr	r2, [r1, #16]
 80117bc:	b102      	cbz	r2, 80117c0 <forward_dense+0x28>
 80117be:	6812      	ldr	r2, [r2, #0]
 80117c0:	2b02      	cmp	r3, #2
 80117c2:	f000 81b8 	beq.w	8011b36 <forward_dense+0x39e>
 80117c6:	69cb      	ldr	r3, [r1, #28]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 8209 	beq.w	8011be0 <forward_dense+0x448>
 80117ce:	6818      	ldr	r0, [r3, #0]
 80117d0:	9008      	str	r0, [sp, #32]
 80117d2:	f111 0018 	adds.w	r0, r1, #24
 80117d6:	f000 81dc 	beq.w	8011b92 <forward_dense+0x3fa>
 80117da:	8b09      	ldrh	r1, [r1, #24]
 80117dc:	2901      	cmp	r1, #1
 80117de:	f240 81fc 	bls.w	8011bda <forward_dense+0x442>
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 81d7 	beq.w	8011b96 <forward_dense+0x3fe>
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	9306      	str	r3, [sp, #24]
 80117ec:	9b08      	ldr	r3, [sp, #32]
 80117ee:	68d6      	ldr	r6, [r2, #12]
 80117f0:	699b      	ldr	r3, [r3, #24]
 80117f2:	68b0      	ldr	r0, [r6, #8]
 80117f4:	681f      	ldr	r7, [r3, #0]
 80117f6:	68f4      	ldr	r4, [r6, #12]
 80117f8:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 80117fc:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8011800:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8011804:	fb04 f000 	mul.w	r0, r4, r0
 8011808:	fa4e f10c 	asr.w	r1, lr, ip
 801180c:	2f04      	cmp	r7, #4
 801180e:	9007      	str	r0, [sp, #28]
 8011810:	910b      	str	r1, [sp, #44]	; 0x2c
 8011812:	68e9      	ldr	r1, [r5, #12]
 8011814:	6870      	ldr	r0, [r6, #4]
 8011816:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801181a:	f000 81db 	beq.w	8011bd4 <forward_dense+0x43c>
 801181e:	2f08      	cmp	r7, #8
 8011820:	f000 81d8 	beq.w	8011bd4 <forward_dense+0x43c>
 8011824:	f04f 0a00 	mov.w	sl, #0
 8011828:	6992      	ldr	r2, [r2, #24]
 801182a:	0080      	lsls	r0, r0, #2
 801182c:	69a9      	ldr	r1, [r5, #24]
 801182e:	6894      	ldr	r4, [r2, #8]
 8011830:	9a08      	ldr	r2, [sp, #32]
 8011832:	9009      	str	r0, [sp, #36]	; 0x24
 8011834:	1826      	adds	r6, r4, r0
 8011836:	6952      	ldr	r2, [r2, #20]
 8011838:	9404      	str	r4, [sp, #16]
 801183a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 801183e:	9a07      	ldr	r2, [sp, #28]
 8011840:	688f      	ldr	r7, [r1, #8]
 8011842:	2a00      	cmp	r2, #0
 8011844:	f000 81c1 	beq.w	8011bca <forward_dense+0x432>
 8011848:	f1a8 0210 	sub.w	r2, r8, #16
 801184c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8011850:	689d      	ldr	r5, [r3, #8]
 8011852:	0912      	lsrs	r2, r2, #4
 8011854:	910a      	str	r1, [sp, #40]	; 0x28
 8011856:	2100      	movs	r1, #0
 8011858:	9b06      	ldr	r3, [sp, #24]
 801185a:	3201      	adds	r2, #1
 801185c:	eddf 2acf 	vldr	s5, [pc, #828]	; 8011b9c <forward_dense+0x404>
 8011860:	9105      	str	r1, [sp, #20]
 8011862:	f008 010f 	and.w	r1, r8, #15
 8011866:	0192      	lsls	r2, r2, #6
 8011868:	910d      	str	r1, [sp, #52]	; 0x34
 801186a:	920c      	str	r2, [sp, #48]	; 0x30
 801186c:	2b00      	cmp	r3, #0
 801186e:	d042      	beq.n	80118f6 <forward_dense+0x15e>
 8011870:	699b      	ldr	r3, [r3, #24]
 8011872:	689c      	ldr	r4, [r3, #8]
 8011874:	9b04      	ldr	r3, [sp, #16]
 8011876:	f1ba 0f00 	cmp.w	sl, #0
 801187a:	d041      	beq.n	8011900 <forward_dense+0x168>
 801187c:	42b3      	cmp	r3, r6
 801187e:	d229      	bcs.n	80118d4 <forward_dense+0x13c>
 8011880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011882:	469b      	mov	fp, r3
 8011884:	ab0f      	add	r3, sp, #60	; 0x3c
 8011886:	2a04      	cmp	r2, #4
 8011888:	9303      	str	r3, [sp, #12]
 801188a:	4633      	mov	r3, r6
 801188c:	4646      	mov	r6, r8
 801188e:	4698      	mov	r8, r3
 8011890:	f000 8154 	beq.w	8011b3c <forward_dense+0x3a4>
 8011894:	2c00      	cmp	r4, #0
 8011896:	f000 8183 	beq.w	8011ba0 <forward_dense+0x408>
 801189a:	f8d4 c000 	ldr.w	ip, [r4]
 801189e:	463b      	mov	r3, r7
 80118a0:	4629      	mov	r1, r5
 80118a2:	9600      	str	r6, [sp, #0]
 80118a4:	4652      	mov	r2, sl
 80118a6:	9803      	ldr	r0, [sp, #12]
 80118a8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80118ac:	f7fe fdf2 	bl	8010494 <ai_dict8_dot_array_f32>
 80118b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118b2:	3404      	adds	r4, #4
 80118b4:	444d      	add	r5, r9
 80118b6:	f84b 3b04 	str.w	r3, [fp], #4
 80118ba:	45c3      	cmp	fp, r8
 80118bc:	d3ea      	bcc.n	8011894 <forward_dense+0xfc>
 80118be:	4643      	mov	r3, r8
 80118c0:	46b0      	mov	r8, r6
 80118c2:	461e      	mov	r6, r3
 80118c4:	9a04      	ldr	r2, [sp, #16]
 80118c6:	43d3      	mvns	r3, r2
 80118c8:	4433      	add	r3, r6
 80118ca:	f023 0303 	bic.w	r3, r3, #3
 80118ce:	3304      	adds	r3, #4
 80118d0:	18d3      	adds	r3, r2, r3
 80118d2:	9304      	str	r3, [sp, #16]
 80118d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118d6:	9b05      	ldr	r3, [sp, #20]
 80118d8:	4417      	add	r7, r2
 80118da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118dc:	3301      	adds	r3, #1
 80118de:	4416      	add	r6, r2
 80118e0:	9a07      	ldr	r2, [sp, #28]
 80118e2:	9305      	str	r3, [sp, #20]
 80118e4:	4293      	cmp	r3, r2
 80118e6:	f000 8170 	beq.w	8011bca <forward_dense+0x432>
 80118ea:	9b08      	ldr	r3, [sp, #32]
 80118ec:	699b      	ldr	r3, [r3, #24]
 80118ee:	689d      	ldr	r5, [r3, #8]
 80118f0:	9b06      	ldr	r3, [sp, #24]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1bc      	bne.n	8011870 <forward_dense+0xd8>
 80118f6:	461c      	mov	r4, r3
 80118f8:	9b04      	ldr	r3, [sp, #16]
 80118fa:	f1ba 0f00 	cmp.w	sl, #0
 80118fe:	d1bd      	bne.n	801187c <forward_dense+0xe4>
 8011900:	42b3      	cmp	r3, r6
 8011902:	d2e7      	bcs.n	80118d4 <forward_dense+0x13c>
 8011904:	4618      	mov	r0, r3
 8011906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011908:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801190c:	eb07 0c03 	add.w	ip, r7, r3
 8011910:	469e      	mov	lr, r3
 8011912:	2c00      	cmp	r4, #0
 8011914:	f000 80fe 	beq.w	8011b14 <forward_dense+0x37c>
 8011918:	f1b8 0f0f 	cmp.w	r8, #15
 801191c:	ed94 6a00 	vldr	s12, [r4]
 8011920:	f104 0404 	add.w	r4, r4, #4
 8011924:	f240 80fc 	bls.w	8011b20 <forward_dense+0x388>
 8011928:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801192c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011930:	4641      	mov	r1, r8
 8011932:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8011b9c <forward_dense+0x404>
 8011936:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 801193a:	3910      	subs	r1, #16
 801193c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8011940:	3240      	adds	r2, #64	; 0x40
 8011942:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8011946:	290f      	cmp	r1, #15
 8011948:	ee67 7a27 	vmul.f32	s15, s14, s15
 801194c:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8011950:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8011954:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011958:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 801195c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011960:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8011964:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8011968:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 801196c:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8011970:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8011974:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8011978:	eee2 7a03 	vfma.f32	s15, s4, s6
 801197c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8011980:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8011984:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8011988:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 801198c:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8011990:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011994:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011998:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 801199c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 80119a0:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 80119a4:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 80119a8:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 80119ac:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 80119b0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80119b4:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 80119b8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80119bc:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 80119c0:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 80119c4:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 80119c8:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 80119cc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80119d0:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80119d4:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 80119d8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80119dc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80119e0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80119e4:	eee8 7a88 	vfma.f32	s15, s17, s16
 80119e8:	eee0 7a20 	vfma.f32	s15, s0, s1
 80119ec:	eee1 7a21 	vfma.f32	s15, s2, s3
 80119f0:	eee2 7a03 	vfma.f32	s15, s4, s6
 80119f4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80119f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80119fc:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011a00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011a04:	d897      	bhi.n	8011936 <forward_dense+0x19e>
 8011a06:	eb05 010e 	add.w	r1, r5, lr
 8011a0a:	465b      	mov	r3, fp
 8011a0c:	4662      	mov	r2, ip
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d075      	beq.n	8011afe <forward_dense+0x366>
 8011a12:	ed91 7a00 	vldr	s14, [r1]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	edd2 7a00 	vldr	s15, [r2]
 8011a1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a20:	d06d      	beq.n	8011afe <forward_dense+0x366>
 8011a22:	ed91 7a01 	vldr	s14, [r1, #4]
 8011a26:	2b02      	cmp	r3, #2
 8011a28:	edd2 7a01 	vldr	s15, [r2, #4]
 8011a2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a30:	d065      	beq.n	8011afe <forward_dense+0x366>
 8011a32:	ed91 7a02 	vldr	s14, [r1, #8]
 8011a36:	2b03      	cmp	r3, #3
 8011a38:	edd2 7a02 	vldr	s15, [r2, #8]
 8011a3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a40:	d05d      	beq.n	8011afe <forward_dense+0x366>
 8011a42:	ed91 7a03 	vldr	s14, [r1, #12]
 8011a46:	2b04      	cmp	r3, #4
 8011a48:	edd2 7a03 	vldr	s15, [r2, #12]
 8011a4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a50:	d055      	beq.n	8011afe <forward_dense+0x366>
 8011a52:	ed91 7a04 	vldr	s14, [r1, #16]
 8011a56:	2b05      	cmp	r3, #5
 8011a58:	edd2 7a04 	vldr	s15, [r2, #16]
 8011a5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a60:	d04d      	beq.n	8011afe <forward_dense+0x366>
 8011a62:	ed91 7a05 	vldr	s14, [r1, #20]
 8011a66:	2b06      	cmp	r3, #6
 8011a68:	edd2 7a05 	vldr	s15, [r2, #20]
 8011a6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a70:	d045      	beq.n	8011afe <forward_dense+0x366>
 8011a72:	ed91 7a06 	vldr	s14, [r1, #24]
 8011a76:	2b07      	cmp	r3, #7
 8011a78:	edd2 7a06 	vldr	s15, [r2, #24]
 8011a7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a80:	d03d      	beq.n	8011afe <forward_dense+0x366>
 8011a82:	ed91 7a07 	vldr	s14, [r1, #28]
 8011a86:	2b08      	cmp	r3, #8
 8011a88:	edd2 7a07 	vldr	s15, [r2, #28]
 8011a8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a90:	d035      	beq.n	8011afe <forward_dense+0x366>
 8011a92:	ed91 7a08 	vldr	s14, [r1, #32]
 8011a96:	2b09      	cmp	r3, #9
 8011a98:	edd2 7a08 	vldr	s15, [r2, #32]
 8011a9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011aa0:	d02d      	beq.n	8011afe <forward_dense+0x366>
 8011aa2:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8011aa6:	2b0a      	cmp	r3, #10
 8011aa8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011aac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ab0:	d025      	beq.n	8011afe <forward_dense+0x366>
 8011ab2:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8011ab6:	2b0b      	cmp	r3, #11
 8011ab8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8011abc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ac0:	d01d      	beq.n	8011afe <forward_dense+0x366>
 8011ac2:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8011ac6:	2b0c      	cmp	r3, #12
 8011ac8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8011acc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ad0:	d015      	beq.n	8011afe <forward_dense+0x366>
 8011ad2:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8011ad6:	2b0d      	cmp	r3, #13
 8011ad8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8011adc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ae0:	d00d      	beq.n	8011afe <forward_dense+0x366>
 8011ae2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8011ae6:	2b0e      	cmp	r3, #14
 8011ae8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011aec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011af0:	d005      	beq.n	8011afe <forward_dense+0x366>
 8011af2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8011af6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8011afa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011afe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011b02:	444d      	add	r5, r9
 8011b04:	ece0 6a01 	vstmia	r0!, {s13}
 8011b08:	42b0      	cmp	r0, r6
 8011b0a:	f4bf aedb 	bcs.w	80118c4 <forward_dense+0x12c>
 8011b0e:	2c00      	cmp	r4, #0
 8011b10:	f47f af02 	bne.w	8011918 <forward_dense+0x180>
 8011b14:	f1b8 0f0f 	cmp.w	r8, #15
 8011b18:	eeb0 6a62 	vmov.f32	s12, s5
 8011b1c:	f63f af04 	bhi.w	8011928 <forward_dense+0x190>
 8011b20:	4643      	mov	r3, r8
 8011b22:	4629      	mov	r1, r5
 8011b24:	463a      	mov	r2, r7
 8011b26:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8011b9c <forward_dense+0x404>
 8011b2a:	e770      	b.n	8011a0e <forward_dense+0x276>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	deff      	udf	#255	; 0xff
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	deff      	udf	#255	; 0xff
 8011b36:	2300      	movs	r3, #0
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	deff      	udf	#255	; 0xff
 8011b3c:	b1a4      	cbz	r4, 8011b68 <forward_dense+0x3d0>
 8011b3e:	f8d4 c000 	ldr.w	ip, [r4]
 8011b42:	463b      	mov	r3, r7
 8011b44:	4629      	mov	r1, r5
 8011b46:	9600      	str	r6, [sp, #0]
 8011b48:	4652      	mov	r2, sl
 8011b4a:	9803      	ldr	r0, [sp, #12]
 8011b4c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011b50:	f7fe fed0 	bl	80108f4 <ai_dict4_dot_array_f32>
 8011b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b56:	3404      	adds	r4, #4
 8011b58:	444d      	add	r5, r9
 8011b5a:	f84b 3b04 	str.w	r3, [fp], #4
 8011b5e:	45c3      	cmp	fp, r8
 8011b60:	f4bf aead 	bcs.w	80118be <forward_dense+0x126>
 8011b64:	2c00      	cmp	r4, #0
 8011b66:	d1ea      	bne.n	8011b3e <forward_dense+0x3a6>
 8011b68:	4634      	mov	r4, r6
 8011b6a:	4646      	mov	r6, r8
 8011b6c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011b70:	463b      	mov	r3, r7
 8011b72:	4629      	mov	r1, r5
 8011b74:	9400      	str	r4, [sp, #0]
 8011b76:	4652      	mov	r2, sl
 8011b78:	4640      	mov	r0, r8
 8011b7a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8011b7e:	f7fe feb9 	bl	80108f4 <ai_dict4_dot_array_f32>
 8011b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b84:	444d      	add	r5, r9
 8011b86:	f84b 3b04 	str.w	r3, [fp], #4
 8011b8a:	45b3      	cmp	fp, r6
 8011b8c:	d3f0      	bcc.n	8011b70 <forward_dense+0x3d8>
 8011b8e:	46a0      	mov	r8, r4
 8011b90:	e698      	b.n	80118c4 <forward_dense+0x12c>
 8011b92:	9006      	str	r0, [sp, #24]
 8011b94:	e62a      	b.n	80117ec <forward_dense+0x54>
 8011b96:	9306      	str	r3, [sp, #24]
 8011b98:	e628      	b.n	80117ec <forward_dense+0x54>
 8011b9a:	bf00      	nop
 8011b9c:	00000000 	.word	0x00000000
 8011ba0:	4634      	mov	r4, r6
 8011ba2:	4646      	mov	r6, r8
 8011ba4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011ba8:	463b      	mov	r3, r7
 8011baa:	4629      	mov	r1, r5
 8011bac:	9400      	str	r4, [sp, #0]
 8011bae:	4652      	mov	r2, sl
 8011bb0:	4640      	mov	r0, r8
 8011bb2:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8011bb6:	f7fe fc6d 	bl	8010494 <ai_dict8_dot_array_f32>
 8011bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bbc:	444d      	add	r5, r9
 8011bbe:	f84b 3b04 	str.w	r3, [fp], #4
 8011bc2:	45b3      	cmp	fp, r6
 8011bc4:	d3f0      	bcc.n	8011ba8 <forward_dense+0x410>
 8011bc6:	46a0      	mov	r8, r4
 8011bc8:	e67c      	b.n	80118c4 <forward_dense+0x12c>
 8011bca:	b011      	add	sp, #68	; 0x44
 8011bcc:	ecbd 8b08 	vpop	{d8-d11}
 8011bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8011bd8:	e626      	b.n	8011828 <forward_dense+0x90>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	9306      	str	r3, [sp, #24]
 8011bde:	e605      	b.n	80117ec <forward_dense+0x54>
 8011be0:	9308      	str	r3, [sp, #32]
 8011be2:	e5f6      	b.n	80117d2 <forward_dense+0x3a>

08011be4 <array_f32_identity>:
 8011be4:	4288      	cmp	r0, r1
 8011be6:	d004      	beq.n	8011bf2 <array_f32_identity+0xe>
 8011be8:	0092      	lsls	r2, r2, #2
 8011bea:	68c9      	ldr	r1, [r1, #12]
 8011bec:	68c0      	ldr	r0, [r0, #12]
 8011bee:	f000 bedf 	b.w	80129b0 <memcpy>
 8011bf2:	4770      	bx	lr

08011bf4 <lstm_cell>:
 8011bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	b0b5      	sub	sp, #212	; 0xd4
 8011bfc:	8ccd      	ldrh	r5, [r1, #38]	; 0x26
 8011bfe:	4682      	mov	sl, r0
 8011c00:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 8011c02:	4613      	mov	r3, r2
 8011c04:	9005      	str	r0, [sp, #20]
 8011c06:	00af      	lsls	r7, r5, #2
 8011c08:	910a      	str	r1, [sp, #40]	; 0x28
 8011c0a:	fb05 f005 	mul.w	r0, r5, r5
 8011c0e:	6822      	ldr	r2, [r4, #0]
 8011c10:	fb01 f105 	mul.w	r1, r1, r5
 8011c14:	6866      	ldr	r6, [r4, #4]
 8011c16:	0080      	lsls	r0, r0, #2
 8011c18:	9206      	str	r2, [sp, #24]
 8011c1a:	0089      	lsls	r1, r1, #2
 8011c1c:	9607      	str	r6, [sp, #28]
 8011c1e:	4406      	add	r6, r0
 8011c20:	9701      	str	r7, [sp, #4]
 8011c22:	440a      	add	r2, r1
 8011c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c26:	441f      	add	r7, r3
 8011c28:	9609      	str	r6, [sp, #36]	; 0x24
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	4406      	add	r6, r0
 8011c2e:	9208      	str	r2, [sp, #32]
 8011c30:	9603      	str	r6, [sp, #12]
 8011c32:	461e      	mov	r6, r3
 8011c34:	9a01      	ldr	r2, [sp, #4]
 8011c36:	440e      	add	r6, r1
 8011c38:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8011c3c:	eb07 0e02 	add.w	lr, r7, r2
 8011c40:	9602      	str	r6, [sp, #8]
 8011c42:	eb09 0c02 	add.w	ip, r9, r2
 8011c46:	9e03      	ldr	r6, [sp, #12]
 8011c48:	eb0e 0802 	add.w	r8, lr, r2
 8011c4c:	9a01      	ldr	r2, [sp, #4]
 8011c4e:	1830      	adds	r0, r6, r0
 8011c50:	9e02      	ldr	r6, [sp, #8]
 8011c52:	4643      	mov	r3, r8
 8011c54:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8011c58:	1871      	adds	r1, r6, r1
 8011c5a:	eb0c 0602 	add.w	r6, ip, r2
 8011c5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c60:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8011c64:	921e      	str	r2, [sp, #120]	; 0x78
 8011c66:	9a01      	ldr	r2, [sp, #4]
 8011c68:	901b      	str	r0, [sp, #108]	; 0x6c
 8011c6a:	eb08 0b02 	add.w	fp, r8, r2
 8011c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c70:	6a20      	ldr	r0, [r4, #32]
 8011c72:	911a      	str	r1, [sp, #104]	; 0x68
 8011c74:	9619      	str	r6, [sp, #100]	; 0x64
 8011c76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011c78:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 8011c7c:	921f      	str	r2, [sp, #124]	; 0x7c
 8011c7e:	951d      	str	r5, [sp, #116]	; 0x74
 8011c80:	9521      	str	r5, [sp, #132]	; 0x84
 8011c82:	9525      	str	r5, [sp, #148]	; 0x94
 8011c84:	9529      	str	r5, [sp, #164]	; 0xa4
 8011c86:	952d      	str	r5, [sp, #180]	; 0xb4
 8011c88:	9531      	str	r5, [sp, #196]	; 0xc4
 8011c8a:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8011c8e:	4bd9      	ldr	r3, [pc, #868]	; (8011ff4 <lstm_cell+0x400>)
 8011c90:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
 8011c94:	e9cd ee26 	strd	lr, lr, [sp, #152]	; 0x98
 8011c98:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
 8011c9c:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
 8011ca0:	931c      	str	r3, [sp, #112]	; 0x70
 8011ca2:	9320      	str	r3, [sp, #128]	; 0x80
 8011ca4:	9324      	str	r3, [sp, #144]	; 0x90
 8011ca6:	9328      	str	r3, [sp, #160]	; 0xa0
 8011ca8:	932c      	str	r3, [sp, #176]	; 0xb0
 8011caa:	9330      	str	r3, [sp, #192]	; 0xc0
 8011cac:	2d00      	cmp	r5, #0
 8011cae:	f000 83c1 	beq.w	8012434 <lstm_cell+0x840>
 8011cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb4:	46f3      	mov	fp, lr
 8011cb6:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 8011cba:	46be      	mov	lr, r7
 8011cbc:	3b04      	subs	r3, #4
 8011cbe:	9712      	str	r7, [sp, #72]	; 0x48
 8011cc0:	1f28      	subs	r0, r5, #4
 8011cc2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	089b      	lsrs	r3, r3, #2
 8011cca:	0881      	lsrs	r1, r0, #2
 8011ccc:	9610      	str	r6, [sp, #64]	; 0x40
 8011cce:	1c5f      	adds	r7, r3, #1
 8011cd0:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8011cd4:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
 8011cd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011cda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cde:	9a01      	ldr	r2, [sp, #4]
 8011ce0:	013f      	lsls	r7, r7, #4
 8011ce2:	3101      	adds	r1, #1
 8011ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8011ce6:	4653      	mov	r3, sl
 8011ce8:	970b      	str	r7, [sp, #44]	; 0x2c
 8011cea:	2e03      	cmp	r6, #3
 8011cec:	443b      	add	r3, r7
 8011cee:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8011ff8 <lstm_cell+0x404>
 8011cf2:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 8011cf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8011cfa:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8011cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d00:	46dc      	mov	ip, fp
 8011d02:	edc0 6a00 	vstr	s13, [r0]
 8011d06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011d0a:	9304      	str	r3, [sp, #16]
 8011d0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d0e:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011d12:	eb03 0802 	add.w	r8, r3, r2
 8011d16:	f04f 0300 	mov.w	r3, #0
 8011d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8011d1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011d20:	930a      	str	r3, [sp, #40]	; 0x28
 8011d22:	f240 823e 	bls.w	80121a2 <lstm_cell+0x5ae>
 8011d26:	9b06      	ldr	r3, [sp, #24]
 8011d28:	46b1      	mov	r9, r6
 8011d2a:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 8011ff8 <lstm_cell+0x404>
 8011d2e:	f103 0210 	add.w	r2, r3, #16
 8011d32:	9b05      	ldr	r3, [sp, #20]
 8011d34:	3310      	adds	r3, #16
 8011d36:	ed12 7a03 	vldr	s14, [r2, #-12]
 8011d3a:	f1a9 0904 	sub.w	r9, r9, #4
 8011d3e:	ed53 7a03 	vldr	s15, [r3, #-12]
 8011d42:	3210      	adds	r2, #16
 8011d44:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8011d48:	f1b9 0f03 	cmp.w	r9, #3
 8011d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d50:	ed13 7a04 	vldr	s14, [r3, #-16]
 8011d54:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8011d58:	f103 0310 	add.w	r3, r3, #16
 8011d5c:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8011d60:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011d64:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8011d68:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8011d6c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011d70:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011d74:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011d78:	d8dd      	bhi.n	8011d36 <lstm_cell+0x142>
 8011d7a:	9b06      	ldr	r3, [sp, #24]
 8011d7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011d7e:	eb03 0902 	add.w	r9, r3, r2
 8011d82:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8011d86:	b1ab      	cbz	r3, 8011db4 <lstm_cell+0x1c0>
 8011d88:	ed99 7a00 	vldr	s14, [r9]
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	edd2 7a00 	vldr	s15, [r2]
 8011d92:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011d96:	d00d      	beq.n	8011db4 <lstm_cell+0x1c0>
 8011d98:	ed99 7a01 	vldr	s14, [r9, #4]
 8011d9c:	2b02      	cmp	r3, #2
 8011d9e:	edd2 7a01 	vldr	s15, [r2, #4]
 8011da2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011da6:	d005      	beq.n	8011db4 <lstm_cell+0x1c0>
 8011da8:	ed99 7a02 	vldr	s14, [r9, #8]
 8011dac:	edd2 7a02 	vldr	s15, [r2, #8]
 8011db0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011db4:	2d03      	cmp	r5, #3
 8011db6:	ed80 6a00 	vstr	s12, [r0]
 8011dba:	9b07      	ldr	r3, [sp, #28]
 8011dbc:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8011dc0:	f240 8334 	bls.w	801242c <lstm_cell+0x838>
 8011dc4:	f103 0210 	add.w	r2, r3, #16
 8011dc8:	46a9      	mov	r9, r5
 8011dca:	f10a 0310 	add.w	r3, sl, #16
 8011dce:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8011ff8 <lstm_cell+0x404>
 8011dd2:	ed12 7a03 	vldr	s14, [r2, #-12]
 8011dd6:	f1a9 0904 	sub.w	r9, r9, #4
 8011dda:	ed53 7a03 	vldr	s15, [r3, #-12]
 8011dde:	3210      	adds	r2, #16
 8011de0:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8011de4:	f1b9 0f03 	cmp.w	r9, #3
 8011de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dec:	ed13 7a04 	vldr	s14, [r3, #-16]
 8011df0:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8011df4:	f103 0310 	add.w	r3, r3, #16
 8011df8:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8011dfc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011e00:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8011e04:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8011e08:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011e0c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011e10:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011e14:	d8dd      	bhi.n	8011dd2 <lstm_cell+0x1de>
 8011e16:	9b07      	ldr	r3, [sp, #28]
 8011e18:	448a      	add	sl, r1
 8011e1a:	440b      	add	r3, r1
 8011e1c:	b1b7      	cbz	r7, 8011e4c <lstm_cell+0x258>
 8011e1e:	463a      	mov	r2, r7
 8011e20:	ed93 7a00 	vldr	s14, [r3]
 8011e24:	2a01      	cmp	r2, #1
 8011e26:	edda 7a00 	vldr	s15, [sl]
 8011e2a:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e2e:	d00d      	beq.n	8011e4c <lstm_cell+0x258>
 8011e30:	ed93 7a01 	vldr	s14, [r3, #4]
 8011e34:	2a02      	cmp	r2, #2
 8011e36:	edda 7a01 	vldr	s15, [sl, #4]
 8011e3a:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e3e:	d005      	beq.n	8011e4c <lstm_cell+0x258>
 8011e40:	ed93 7a02 	vldr	s14, [r3, #8]
 8011e44:	edda 7a02 	vldr	s15, [sl, #8]
 8011e48:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e4c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8011e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e52:	2e03      	cmp	r6, #3
 8011e54:	ed80 6a00 	vstr	s12, [r0]
 8011e58:	ecb2 7a01 	vldmia	r2!, {s14}
 8011e5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011e5e:	9214      	str	r2, [sp, #80]	; 0x50
 8011e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e62:	4413      	add	r3, r2
 8011e64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011e66:	edd3 7a00 	vldr	s15, [r3]
 8011e6a:	ecf2 5a01 	vldmia	r2!, {s11}
 8011e6e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e72:	9215      	str	r2, [sp, #84]	; 0x54
 8011e74:	ee35 6a86 	vadd.f32	s12, s11, s12
 8011e78:	eca0 6a01 	vstmia	r0!, {s12}
 8011e7c:	edce 6a00 	vstr	s13, [lr]
 8011e80:	f240 82cd 	bls.w	801241e <lstm_cell+0x82a>
 8011e84:	9b08      	ldr	r3, [sp, #32]
 8011e86:	46b1      	mov	r9, r6
 8011e88:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8011ff8 <lstm_cell+0x404>
 8011e8c:	f103 0210 	add.w	r2, r3, #16
 8011e90:	9b05      	ldr	r3, [sp, #20]
 8011e92:	3310      	adds	r3, #16
 8011e94:	ed12 7a03 	vldr	s14, [r2, #-12]
 8011e98:	f1a9 0904 	sub.w	r9, r9, #4
 8011e9c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8011ea0:	3210      	adds	r2, #16
 8011ea2:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8011ea6:	f1b9 0f03 	cmp.w	r9, #3
 8011eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011eae:	ed13 7a04 	vldr	s14, [r3, #-16]
 8011eb2:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8011eb6:	f103 0310 	add.w	r3, r3, #16
 8011eba:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8011ebe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011ec2:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8011ec6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8011eca:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011ece:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011ed2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011ed6:	d8dd      	bhi.n	8011e94 <lstm_cell+0x2a0>
 8011ed8:	9b08      	ldr	r3, [sp, #32]
 8011eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011edc:	eb03 0902 	add.w	r9, r3, r2
 8011ee0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8011ee4:	b1ab      	cbz	r3, 8011f12 <lstm_cell+0x31e>
 8011ee6:	ed99 7a00 	vldr	s14, [r9]
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	edd2 7a00 	vldr	s15, [r2]
 8011ef0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011ef4:	d00d      	beq.n	8011f12 <lstm_cell+0x31e>
 8011ef6:	ed99 7a01 	vldr	s14, [r9, #4]
 8011efa:	2b02      	cmp	r3, #2
 8011efc:	edd2 7a01 	vldr	s15, [r2, #4]
 8011f00:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011f04:	d005      	beq.n	8011f12 <lstm_cell+0x31e>
 8011f06:	ed99 7a02 	vldr	s14, [r9, #8]
 8011f0a:	edd2 7a02 	vldr	s15, [r2, #8]
 8011f0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011f12:	2d03      	cmp	r5, #3
 8011f14:	ed8e 6a00 	vstr	s12, [lr]
 8011f18:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8011f1c:	f240 827a 	bls.w	8012414 <lstm_cell+0x820>
 8011f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f22:	46a9      	mov	r9, r5
 8011f24:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011ff8 <lstm_cell+0x404>
 8011f28:	f103 0210 	add.w	r2, r3, #16
 8011f2c:	f10a 0310 	add.w	r3, sl, #16
 8011f30:	ed12 7a03 	vldr	s14, [r2, #-12]
 8011f34:	f1a9 0904 	sub.w	r9, r9, #4
 8011f38:	ed53 7a03 	vldr	s15, [r3, #-12]
 8011f3c:	3210      	adds	r2, #16
 8011f3e:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8011f42:	f1b9 0f03 	cmp.w	r9, #3
 8011f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f4a:	ed13 7a04 	vldr	s14, [r3, #-16]
 8011f4e:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8011f52:	f103 0310 	add.w	r3, r3, #16
 8011f56:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8011f5a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011f5e:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8011f62:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8011f66:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011f6a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8011f6e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011f72:	d8dd      	bhi.n	8011f30 <lstm_cell+0x33c>
 8011f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f76:	448a      	add	sl, r1
 8011f78:	440b      	add	r3, r1
 8011f7a:	b1b7      	cbz	r7, 8011faa <lstm_cell+0x3b6>
 8011f7c:	463a      	mov	r2, r7
 8011f7e:	ed93 7a00 	vldr	s14, [r3]
 8011f82:	2a01      	cmp	r2, #1
 8011f84:	edda 7a00 	vldr	s15, [sl]
 8011f88:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011f8c:	d00d      	beq.n	8011faa <lstm_cell+0x3b6>
 8011f8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f92:	2a02      	cmp	r2, #2
 8011f94:	edda 7a01 	vldr	s15, [sl, #4]
 8011f98:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011f9c:	d005      	beq.n	8011faa <lstm_cell+0x3b6>
 8011f9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011fa2:	edda 7a02 	vldr	s15, [sl, #8]
 8011fa6:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011faa:	ee35 6a86 	vadd.f32	s12, s11, s12
 8011fae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011fb0:	2e03      	cmp	r6, #3
 8011fb2:	46c1      	mov	r9, r8
 8011fb4:	ed8e 6a00 	vstr	s12, [lr]
 8011fb8:	ecf2 5a01 	vldmia	r2!, {s11}
 8011fbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011fbe:	9213      	str	r2, [sp, #76]	; 0x4c
 8011fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fc2:	ed98 7a00 	vldr	s14, [r8]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	edd3 7a00 	vldr	s15, [r3]
 8011fcc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011fd0:	ee35 6a86 	vadd.f32	s12, s11, s12
 8011fd4:	ecae 6a01 	vstmia	lr!, {s12}
 8011fd8:	edcc 6a00 	vstr	s13, [ip]
 8011fdc:	f240 80ec 	bls.w	80121b8 <lstm_cell+0x5c4>
 8011fe0:	9b02      	ldr	r3, [sp, #8]
 8011fe2:	46b2      	mov	sl, r6
 8011fe4:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8011ff8 <lstm_cell+0x404>
 8011fe8:	f103 0210 	add.w	r2, r3, #16
 8011fec:	9b05      	ldr	r3, [sp, #20]
 8011fee:	3310      	adds	r3, #16
 8011ff0:	e004      	b.n	8011ffc <lstm_cell+0x408>
 8011ff2:	bf00      	nop
 8011ff4:	01821040 	.word	0x01821040
 8011ff8:	00000000 	.word	0x00000000
 8011ffc:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012000:	f1aa 0a04 	sub.w	sl, sl, #4
 8012004:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012008:	3210      	adds	r2, #16
 801200a:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 801200e:	f1ba 0f03 	cmp.w	sl, #3
 8012012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012016:	ed13 7a04 	vldr	s14, [r3, #-16]
 801201a:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 801201e:	f103 0310 	add.w	r3, r3, #16
 8012022:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012026:	eee5 7a87 	vfma.f32	s15, s11, s14
 801202a:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 801202e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012032:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012036:	eee5 7a87 	vfma.f32	s15, s11, s14
 801203a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801203e:	d8dd      	bhi.n	8011ffc <lstm_cell+0x408>
 8012040:	9b02      	ldr	r3, [sp, #8]
 8012042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012044:	eb03 0a02 	add.w	sl, r3, r2
 8012048:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801204c:	b1ab      	cbz	r3, 801207a <lstm_cell+0x486>
 801204e:	ed9a 7a00 	vldr	s14, [sl]
 8012052:	2b01      	cmp	r3, #1
 8012054:	edd2 7a00 	vldr	s15, [r2]
 8012058:	eea7 6a27 	vfma.f32	s12, s14, s15
 801205c:	d00d      	beq.n	801207a <lstm_cell+0x486>
 801205e:	ed9a 7a01 	vldr	s14, [sl, #4]
 8012062:	2b02      	cmp	r3, #2
 8012064:	edd2 7a01 	vldr	s15, [r2, #4]
 8012068:	eea7 6a27 	vfma.f32	s12, s14, s15
 801206c:	d005      	beq.n	801207a <lstm_cell+0x486>
 801206e:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012072:	edd2 7a02 	vldr	s15, [r2, #8]
 8012076:	eea7 6a27 	vfma.f32	s12, s14, s15
 801207a:	2d03      	cmp	r5, #3
 801207c:	ed8c 6a00 	vstr	s12, [ip]
 8012080:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 8012084:	f240 8093 	bls.w	80121ae <lstm_cell+0x5ba>
 8012088:	9b03      	ldr	r3, [sp, #12]
 801208a:	46aa      	mov	sl, r5
 801208c:	ed5f 5a26 	vldr	s11, [pc, #-152]	; 8011ff8 <lstm_cell+0x404>
 8012090:	f103 0210 	add.w	r2, r3, #16
 8012094:	f10b 0310 	add.w	r3, fp, #16
 8012098:	ed12 7a03 	vldr	s14, [r2, #-12]
 801209c:	f1aa 0a04 	sub.w	sl, sl, #4
 80120a0:	ed53 7a03 	vldr	s15, [r3, #-12]
 80120a4:	3210      	adds	r2, #16
 80120a6:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 80120aa:	f1ba 0f03 	cmp.w	sl, #3
 80120ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120b2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80120b6:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 80120ba:	f103 0310 	add.w	r3, r3, #16
 80120be:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 80120c2:	eee5 7a07 	vfma.f32	s15, s10, s14
 80120c6:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 80120ca:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80120ce:	eee4 7a24 	vfma.f32	s15, s8, s9
 80120d2:	eee5 7a07 	vfma.f32	s15, s10, s14
 80120d6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80120da:	d8dd      	bhi.n	8012098 <lstm_cell+0x4a4>
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	448b      	add	fp, r1
 80120e0:	440b      	add	r3, r1
 80120e2:	b1b7      	cbz	r7, 8012112 <lstm_cell+0x51e>
 80120e4:	463a      	mov	r2, r7
 80120e6:	ed93 7a00 	vldr	s14, [r3]
 80120ea:	2a01      	cmp	r2, #1
 80120ec:	eddb 7a00 	vldr	s15, [fp]
 80120f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80120f4:	d00d      	beq.n	8012112 <lstm_cell+0x51e>
 80120f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80120fa:	2a02      	cmp	r2, #2
 80120fc:	eddb 7a01 	vldr	s15, [fp, #4]
 8012100:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012104:	d005      	beq.n	8012112 <lstm_cell+0x51e>
 8012106:	ed93 7a02 	vldr	s14, [r3, #8]
 801210a:	eddb 7a02 	vldr	s15, [fp, #8]
 801210e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012112:	9a06      	ldr	r2, [sp, #24]
 8012114:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012118:	9b04      	ldr	r3, [sp, #16]
 801211a:	f108 0804 	add.w	r8, r8, #4
 801211e:	4692      	mov	sl, r2
 8012120:	9a07      	ldr	r2, [sp, #28]
 8012122:	ed8c 6a00 	vstr	s12, [ip]
 8012126:	449a      	add	sl, r3
 8012128:	ed99 7a00 	vldr	s14, [r9]
 801212c:	f8cd a018 	str.w	sl, [sp, #24]
 8012130:	4692      	mov	sl, r2
 8012132:	9a01      	ldr	r2, [sp, #4]
 8012134:	4492      	add	sl, r2
 8012136:	9a08      	ldr	r2, [sp, #32]
 8012138:	f8cd a01c 	str.w	sl, [sp, #28]
 801213c:	4692      	mov	sl, r2
 801213e:	9a01      	ldr	r2, [sp, #4]
 8012140:	449a      	add	sl, r3
 8012142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012144:	f8cd a020 	str.w	sl, [sp, #32]
 8012148:	469a      	mov	sl, r3
 801214a:	9b02      	ldr	r3, [sp, #8]
 801214c:	4492      	add	sl, r2
 801214e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012152:	469a      	mov	sl, r3
 8012154:	9b04      	ldr	r3, [sp, #16]
 8012156:	449a      	add	sl, r3
 8012158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801215a:	9316      	str	r3, [sp, #88]	; 0x58
 801215c:	9b03      	ldr	r3, [sp, #12]
 801215e:	f8cd a008 	str.w	sl, [sp, #8]
 8012162:	4413      	add	r3, r2
 8012164:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012166:	9303      	str	r3, [sp, #12]
 8012168:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801216a:	ecf3 5a01 	vldmia	r3!, {s11}
 801216e:	9310      	str	r3, [sp, #64]	; 0x40
 8012170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012172:	441a      	add	r2, r3
 8012174:	4613      	mov	r3, r2
 8012176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012178:	edd3 7a00 	vldr	s15, [r3]
 801217c:	3201      	adds	r2, #1
 801217e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012182:	4295      	cmp	r5, r2
 8012184:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012188:	ecac 6a01 	vstmia	ip!, {s12}
 801218c:	d01b      	beq.n	80121c6 <lstm_cell+0x5d2>
 801218e:	4613      	mov	r3, r2
 8012190:	2e03      	cmp	r6, #3
 8012192:	920e      	str	r2, [sp, #56]	; 0x38
 8012194:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012198:	edc0 6a00 	vstr	s13, [r0]
 801219c:	930a      	str	r3, [sp, #40]	; 0x28
 801219e:	f63f adc2 	bhi.w	8011d26 <lstm_cell+0x132>
 80121a2:	4633      	mov	r3, r6
 80121a4:	ed1f 6a6c 	vldr	s12, [pc, #-432]	; 8011ff8 <lstm_cell+0x404>
 80121a8:	e9dd 2905 	ldrd	r2, r9, [sp, #20]
 80121ac:	e5eb      	b.n	8011d86 <lstm_cell+0x192>
 80121ae:	462a      	mov	r2, r5
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	ed5f 5a6f 	vldr	s11, [pc, #-444]	; 8011ff8 <lstm_cell+0x404>
 80121b6:	e796      	b.n	80120e6 <lstm_cell+0x4f2>
 80121b8:	4633      	mov	r3, r6
 80121ba:	9a05      	ldr	r2, [sp, #20]
 80121bc:	f8dd a008 	ldr.w	sl, [sp, #8]
 80121c0:	ed1f 6a73 	vldr	s12, [pc, #-460]	; 8011ff8 <lstm_cell+0x404>
 80121c4:	e742      	b.n	801204c <lstm_cell+0x458>
 80121c6:	a91c      	add	r1, sp, #112	; 0x70
 80121c8:	4617      	mov	r7, r2
 80121ca:	960a      	str	r6, [sp, #40]	; 0x28
 80121cc:	4608      	mov	r0, r1
 80121ce:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80121d2:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 80121d6:	47a8      	blx	r5
 80121d8:	a920      	add	r1, sp, #128	; 0x80
 80121da:	6965      	ldr	r5, [r4, #20]
 80121dc:	463a      	mov	r2, r7
 80121de:	4608      	mov	r0, r1
 80121e0:	69a3      	ldr	r3, [r4, #24]
 80121e2:	47a8      	blx	r5
 80121e4:	a924      	add	r1, sp, #144	; 0x90
 80121e6:	68e5      	ldr	r5, [r4, #12]
 80121e8:	463a      	mov	r2, r7
 80121ea:	4608      	mov	r0, r1
 80121ec:	6923      	ldr	r3, [r4, #16]
 80121ee:	47a8      	blx	r5
 80121f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121f2:	9a01      	ldr	r2, [sp, #4]
 80121f4:	2100      	movs	r1, #0
 80121f6:	f1a3 0803 	sub.w	r8, r3, #3
 80121fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80121fc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012200:	ea4f 0598 	mov.w	r5, r8, lsr #2
 8012204:	4413      	add	r3, r2
 8012206:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012208:	469c      	mov	ip, r3
 801220a:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
 801220e:	3501      	adds	r5, #1
 8012210:	ed1f 4a87 	vldr	s8, [pc, #-540]	; 8011ff8 <lstm_cell+0x404>
 8012214:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8012218:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801221a:	012d      	lsls	r5, r5, #4
 801221c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8012220:	e9cd b802 	strd	fp, r8, [sp, #8]
 8012224:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801222a:	2e03      	cmp	r6, #3
 801222c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801222e:	ecb2 7a01 	vldmia	r2!, {s14}
 8012232:	440b      	add	r3, r1
 8012234:	920f      	str	r2, [sp, #60]	; 0x3c
 8012236:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012238:	ecf2 7a01 	vldmia	r2!, {s15}
 801223c:	9211      	str	r2, [sp, #68]	; 0x44
 801223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012242:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012244:	ed93 7a00 	vldr	s14, [r3]
 8012248:	ecf2 6a01 	vldmia	r2!, {s13}
 801224c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012250:	9212      	str	r2, [sp, #72]	; 0x48
 8012252:	edc3 7a00 	vstr	s15, [r3]
 8012256:	ed80 4a00 	vstr	s8, [r0]
 801225a:	f240 80d5 	bls.w	8012408 <lstm_cell+0x814>
 801225e:	9b05      	ldr	r3, [sp, #20]
 8012260:	f108 0210 	add.w	r2, r8, #16
 8012264:	46b2      	mov	sl, r6
 8012266:	ed5f 6a9c 	vldr	s13, [pc, #-624]	; 8011ff8 <lstm_cell+0x404>
 801226a:	3310      	adds	r3, #16
 801226c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012270:	f1aa 0a04 	sub.w	sl, sl, #4
 8012274:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012278:	3210      	adds	r2, #16
 801227a:	ed12 6a08 	vldr	s12, [r2, #-32]	; 0xffffffe0
 801227e:	f1ba 0f03 	cmp.w	sl, #3
 8012282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012286:	ed13 7a04 	vldr	s14, [r3, #-16]
 801228a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 801228e:	f103 0310 	add.w	r3, r3, #16
 8012292:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 8012296:	eee6 7a07 	vfma.f32	s15, s12, s14
 801229a:	ed12 6a05 	vldr	s12, [r2, #-20]	; 0xffffffec
 801229e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80122a2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80122a6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80122aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80122ae:	d8dd      	bhi.n	801226c <lstm_cell+0x678>
 80122b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122b2:	eb08 0a03 	add.w	sl, r8, r3
 80122b6:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80122ba:	b1ab      	cbz	r3, 80122e8 <lstm_cell+0x6f4>
 80122bc:	ed9a 7a00 	vldr	s14, [sl]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	edd2 7a00 	vldr	s15, [r2]
 80122c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80122ca:	d00d      	beq.n	80122e8 <lstm_cell+0x6f4>
 80122cc:	ed9a 7a01 	vldr	s14, [sl, #4]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	edd2 7a01 	vldr	s15, [r2, #4]
 80122d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80122da:	d005      	beq.n	80122e8 <lstm_cell+0x6f4>
 80122dc:	ed9a 7a02 	vldr	s14, [sl, #8]
 80122e0:	edd2 7a02 	vldr	s15, [r2, #8]
 80122e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80122e8:	2f03      	cmp	r7, #3
 80122ea:	edc0 6a00 	vstr	s13, [r0]
 80122ee:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 80122f2:	f240 8084 	bls.w	80123fe <lstm_cell+0x80a>
 80122f6:	f109 0210 	add.w	r2, r9, #16
 80122fa:	f10b 0310 	add.w	r3, fp, #16
 80122fe:	46ba      	mov	sl, r7
 8012300:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 8011ff8 <lstm_cell+0x404>
 8012304:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012308:	f1aa 0a04 	sub.w	sl, sl, #4
 801230c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012310:	3210      	adds	r2, #16
 8012312:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8012316:	f1ba 0f03 	cmp.w	sl, #3
 801231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801231e:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012322:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8012326:	f103 0310 	add.w	r3, r3, #16
 801232a:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 801232e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012332:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8012336:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 801233a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801233e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012342:	ee36 6a27 	vadd.f32	s12, s12, s15
 8012346:	d8dd      	bhi.n	8012304 <lstm_cell+0x710>
 8012348:	9a03      	ldr	r2, [sp, #12]
 801234a:	44ab      	add	fp, r5
 801234c:	eb09 0305 	add.w	r3, r9, r5
 8012350:	b1aa      	cbz	r2, 801237e <lstm_cell+0x78a>
 8012352:	ed93 7a00 	vldr	s14, [r3]
 8012356:	2a01      	cmp	r2, #1
 8012358:	eddb 7a00 	vldr	s15, [fp]
 801235c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012360:	d00d      	beq.n	801237e <lstm_cell+0x78a>
 8012362:	ed93 7a01 	vldr	s14, [r3, #4]
 8012366:	2a02      	cmp	r2, #2
 8012368:	eddb 7a01 	vldr	s15, [fp, #4]
 801236c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012370:	d005      	beq.n	801237e <lstm_cell+0x78a>
 8012372:	ed93 7a02 	vldr	s14, [r3, #8]
 8012376:	eddb 7a02 	vldr	s15, [fp, #8]
 801237a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801237e:	9b04      	ldr	r3, [sp, #16]
 8012380:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012384:	4498      	add	r8, r3
 8012386:	9b01      	ldr	r3, [sp, #4]
 8012388:	edc0 6a00 	vstr	s13, [r0]
 801238c:	4499      	add	r9, r3
 801238e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012390:	ecbe 7a01 	vldmia	lr!, {s14}
 8012394:	440b      	add	r3, r1
 8012396:	ecbc 6a01 	vldmia	ip!, {s12}
 801239a:	3104      	adds	r1, #4
 801239c:	edd3 7a00 	vldr	s15, [r3]
 80123a0:	9b02      	ldr	r3, [sp, #8]
 80123a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80123a6:	428b      	cmp	r3, r1
 80123a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80123ac:	ece0 6a01 	vstmia	r0!, {s13}
 80123b0:	f47f af3a 	bne.w	8012228 <lstm_cell+0x634>
 80123b4:	a928      	add	r1, sp, #160	; 0xa0
 80123b6:	469b      	mov	fp, r3
 80123b8:	463a      	mov	r2, r7
 80123ba:	4608      	mov	r0, r1
 80123bc:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 80123c0:	47a8      	blx	r5
 80123c2:	a930      	add	r1, sp, #192	; 0xc0
 80123c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123c6:	a82c      	add	r0, sp, #176	; 0xb0
 80123c8:	463a      	mov	r2, r7
 80123ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80123cc:	47a8      	blx	r5
 80123ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80123d0:	449b      	add	fp, r3
 80123d2:	4619      	mov	r1, r3
 80123d4:	4618      	mov	r0, r3
 80123d6:	1a0a      	subs	r2, r1, r0
 80123d8:	6a23      	ldr	r3, [r4, #32]
 80123da:	ecf1 7a01 	vldmia	r1!, {s15}
 80123de:	4413      	add	r3, r2
 80123e0:	458b      	cmp	fp, r1
 80123e2:	ed93 7a00 	vldr	s14, [r3]
 80123e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ea:	edc3 7a00 	vstr	s15, [r3]
 80123ee:	d1f2      	bne.n	80123d6 <lstm_cell+0x7e2>
 80123f0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80123f4:	e9c4 2307 	strd	r2, r3, [r4, #28]
 80123f8:	b035      	add	sp, #212	; 0xd4
 80123fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fe:	464b      	mov	r3, r9
 8012400:	463a      	mov	r2, r7
 8012402:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8012480 <lstm_cell+0x88c>
 8012406:	e7a4      	b.n	8012352 <lstm_cell+0x75e>
 8012408:	4633      	mov	r3, r6
 801240a:	9a05      	ldr	r2, [sp, #20]
 801240c:	46c2      	mov	sl, r8
 801240e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8012480 <lstm_cell+0x88c>
 8012412:	e752      	b.n	80122ba <lstm_cell+0x6c6>
 8012414:	462a      	mov	r2, r5
 8012416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012418:	eddf 5a19 	vldr	s11, [pc, #100]	; 8012480 <lstm_cell+0x88c>
 801241c:	e5af      	b.n	8011f7e <lstm_cell+0x38a>
 801241e:	4633      	mov	r3, r6
 8012420:	9a05      	ldr	r2, [sp, #20]
 8012422:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012426:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8012480 <lstm_cell+0x88c>
 801242a:	e55b      	b.n	8011ee4 <lstm_cell+0x2f0>
 801242c:	462a      	mov	r2, r5
 801242e:	eddf 5a14 	vldr	s11, [pc, #80]	; 8012480 <lstm_cell+0x88c>
 8012432:	e4f5      	b.n	8011e20 <lstm_cell+0x22c>
 8012434:	a91c      	add	r1, sp, #112	; 0x70
 8012436:	462a      	mov	r2, r5
 8012438:	e9d4 6305 	ldrd	r6, r3, [r4, #20]
 801243c:	4608      	mov	r0, r1
 801243e:	47b0      	blx	r6
 8012440:	a920      	add	r1, sp, #128	; 0x80
 8012442:	6966      	ldr	r6, [r4, #20]
 8012444:	462a      	mov	r2, r5
 8012446:	4608      	mov	r0, r1
 8012448:	69a3      	ldr	r3, [r4, #24]
 801244a:	47b0      	blx	r6
 801244c:	a924      	add	r1, sp, #144	; 0x90
 801244e:	68e6      	ldr	r6, [r4, #12]
 8012450:	462a      	mov	r2, r5
 8012452:	4608      	mov	r0, r1
 8012454:	6923      	ldr	r3, [r4, #16]
 8012456:	47b0      	blx	r6
 8012458:	a928      	add	r1, sp, #160	; 0xa0
 801245a:	462a      	mov	r2, r5
 801245c:	69a3      	ldr	r3, [r4, #24]
 801245e:	4608      	mov	r0, r1
 8012460:	6966      	ldr	r6, [r4, #20]
 8012462:	47b0      	blx	r6
 8012464:	462a      	mov	r2, r5
 8012466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012468:	a930      	add	r1, sp, #192	; 0xc0
 801246a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801246c:	a82c      	add	r0, sp, #176	; 0xb0
 801246e:	47a8      	blx	r5
 8012470:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8012474:	e9c4 2307 	strd	r2, r3, [r4, #28]
 8012478:	b035      	add	sp, #212	; 0xd4
 801247a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247e:	bf00      	nop
 8012480:	00000000 	.word	0x00000000

08012484 <forward_lstm>:
 8012484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012488:	6943      	ldr	r3, [r0, #20]
 801248a:	b099      	sub	sp, #100	; 0x64
 801248c:	881c      	ldrh	r4, [r3, #0]
 801248e:	2c00      	cmp	r4, #0
 8012490:	f000 80ea 	beq.w	8012668 <forward_lstm+0x1e4>
 8012494:	6859      	ldr	r1, [r3, #4]
 8012496:	684b      	ldr	r3, [r1, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	f000 8130 	beq.w	80126fe <forward_lstm+0x27a>
 801249e:	f8d3 b000 	ldr.w	fp, [r3]
 80124a2:	2c01      	cmp	r4, #1
 80124a4:	f240 80db 	bls.w	801265e <forward_lstm+0x1da>
 80124a8:	690e      	ldr	r6, [r1, #16]
 80124aa:	b106      	cbz	r6, 80124ae <forward_lstm+0x2a>
 80124ac:	6836      	ldr	r6, [r6, #0]
 80124ae:	2c02      	cmp	r4, #2
 80124b0:	f000 80d5 	beq.w	801265e <forward_lstm+0x1da>
 80124b4:	69ca      	ldr	r2, [r1, #28]
 80124b6:	2a00      	cmp	r2, #0
 80124b8:	f000 8114 	beq.w	80126e4 <forward_lstm+0x260>
 80124bc:	f111 0818 	adds.w	r8, r1, #24
 80124c0:	6815      	ldr	r5, [r2, #0]
 80124c2:	d008      	beq.n	80124d6 <forward_lstm+0x52>
 80124c4:	8b0f      	ldrh	r7, [r1, #24]
 80124c6:	2f01      	cmp	r7, #1
 80124c8:	f240 8114 	bls.w	80126f4 <forward_lstm+0x270>
 80124cc:	2a00      	cmp	r2, #0
 80124ce:	f000 80d0 	beq.w	8012672 <forward_lstm+0x1ee>
 80124d2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80124d6:	f8db 700c 	ldr.w	r7, [fp, #12]
 80124da:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	69b6      	ldr	r6, [r6, #24]
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8d2 9010 	ldr.w	r9, [r2, #16]
 80124ea:	9303      	str	r3, [sp, #12]
 80124ec:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80124f0:	f8d0 a018 	ldr.w	sl, [r0, #24]
 80124f4:	9309      	str	r3, [sp, #36]	; 0x24
 80124f6:	68b3      	ldr	r3, [r6, #8]
 80124f8:	9304      	str	r3, [sp, #16]
 80124fa:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80124fe:	e9d2 7205 	ldrd	r7, r2, [r2, #20]
 8012502:	f1b9 0f00 	cmp.w	r9, #0
 8012506:	f000 80fe 	beq.w	8012706 <forward_lstm+0x282>
 801250a:	f8d9 9018 	ldr.w	r9, [r9, #24]
 801250e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8012512:	9605      	str	r6, [sp, #20]
 8012514:	2f00      	cmp	r7, #0
 8012516:	f000 80f4 	beq.w	8012702 <forward_lstm+0x27e>
 801251a:	69bf      	ldr	r7, [r7, #24]
 801251c:	68be      	ldr	r6, [r7, #8]
 801251e:	9606      	str	r6, [sp, #24]
 8012520:	2a00      	cmp	r2, #0
 8012522:	f000 80f3 	beq.w	801270c <forward_lstm+0x288>
 8012526:	6992      	ldr	r2, [r2, #24]
 8012528:	6892      	ldr	r2, [r2, #8]
 801252a:	9207      	str	r2, [sp, #28]
 801252c:	2c03      	cmp	r4, #3
 801252e:	f000 8096 	beq.w	801265e <forward_lstm+0x1da>
 8012532:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8012534:	2a00      	cmp	r2, #0
 8012536:	f000 8095 	beq.w	8012664 <forward_lstm+0x1e0>
 801253a:	6812      	ldr	r2, [r2, #0]
 801253c:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
 8012540:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8012544:	4681      	mov	r9, r0
 8012546:	6992      	ldr	r2, [r2, #24]
 8012548:	ea4f 008a 	mov.w	r0, sl, lsl #2
 801254c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8012550:	00bf      	lsls	r7, r7, #2
 8012552:	6894      	ldr	r4, [r2, #8]
 8012554:	2100      	movs	r1, #0
 8012556:	f8d8 8018 	ldr.w	r8, [r8, #24]
 801255a:	463a      	mov	r2, r7
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	4427      	add	r7, r4
 8012560:	69ad      	ldr	r5, [r5, #24]
 8012562:	9002      	str	r0, [sp, #8]
 8012564:	4620      	mov	r0, r4
 8012566:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801256a:	68ad      	ldr	r5, [r5, #8]
 801256c:	f8de 8008 	ldr.w	r8, [lr, #8]
 8012570:	9308      	str	r3, [sp, #32]
 8012572:	f000 fa2b 	bl	80129cc <memset>
 8012576:	9b02      	ldr	r3, [sp, #8]
 8012578:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801257c:	eb04 0e03 	add.w	lr, r4, r3
 8012580:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8012584:	4b62      	ldr	r3, [pc, #392]	; (8012710 <forward_lstm+0x28c>)
 8012586:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 801258a:	960b      	str	r6, [sp, #44]	; 0x2c
 801258c:	2800      	cmp	r0, #0
 801258e:	bf08      	it	eq
 8012590:	4618      	moveq	r0, r3
 8012592:	9e05      	ldr	r6, [sp, #20]
 8012594:	2900      	cmp	r1, #0
 8012596:	bf08      	it	eq
 8012598:	4619      	moveq	r1, r3
 801259a:	2a00      	cmp	r2, #0
 801259c:	bf08      	it	eq
 801259e:	461a      	moveq	r2, r3
 80125a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125a2:	960e      	str	r6, [sp, #56]	; 0x38
 80125a4:	9e06      	ldr	r6, [sp, #24]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	950a      	str	r5, [sp, #40]	; 0x28
 80125aa:	9b02      	ldr	r3, [sp, #8]
 80125ac:	9d03      	ldr	r5, [sp, #12]
 80125ae:	9610      	str	r6, [sp, #64]	; 0x40
 80125b0:	4473      	add	r3, lr
 80125b2:	9e03      	ldr	r6, [sp, #12]
 80125b4:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80125b8:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
 80125bc:	bf98      	it	ls
 80125be:	f04f 0a00 	movls.w	sl, #0
 80125c2:	9d08      	ldr	r5, [sp, #32]
 80125c4:	9415      	str	r4, [sp, #84]	; 0x54
 80125c6:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 80125ca:	f899 4028 	ldrb.w	r4, [r9, #40]	; 0x28
 80125ce:	9e07      	ldr	r6, [sp, #28]
 80125d0:	950c      	str	r5, [sp, #48]	; 0x30
 80125d2:	4655      	mov	r5, sl
 80125d4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80125d8:	9617      	str	r6, [sp, #92]	; 0x5c
 80125da:	900d      	str	r0, [sp, #52]	; 0x34
 80125dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80125de:	9216      	str	r2, [sp, #88]	; 0x58
 80125e0:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
 80125e4:	2c00      	cmp	r4, #0
 80125e6:	d041      	beq.n	801266c <forward_lstm+0x1e8>
 80125e8:	9b01      	ldr	r3, [sp, #4]
 80125ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80125ee:	1e5c      	subs	r4, r3, #1
 80125f0:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 80125f4:	b14a      	cbz	r2, 801260a <forward_lstm+0x186>
 80125f6:	9b01      	ldr	r3, [sp, #4]
 80125f8:	f1ca 0500 	rsb	r5, sl, #0
 80125fc:	1e5a      	subs	r2, r3, #1
 80125fe:	9b04      	ldr	r3, [sp, #16]
 8012600:	fb0a fa02 	mul.w	sl, sl, r2
 8012604:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012608:	9304      	str	r3, [sp, #16]
 801260a:	fb0c f308 	mul.w	r3, ip, r8
 801260e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012612:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8012616:	9303      	str	r3, [sp, #12]
 8012618:	2d00      	cmp	r5, #0
 801261a:	d143      	bne.n	80126a4 <forward_lstm+0x220>
 801261c:	4653      	mov	r3, sl
 801261e:	fb0c f504 	mul.w	r5, ip, r4
 8012622:	46ba      	mov	sl, r7
 8012624:	9e04      	ldr	r6, [sp, #16]
 8012626:	465f      	mov	r7, fp
 8012628:	469b      	mov	fp, r3
 801262a:	e002      	b.n	8012632 <forward_lstm+0x1ae>
 801262c:	9b01      	ldr	r3, [sp, #4]
 801262e:	429c      	cmp	r4, r3
 8012630:	da0c      	bge.n	801264c <forward_lstm+0x1c8>
 8012632:	69b8      	ldr	r0, [r7, #24]
 8012634:	4444      	add	r4, r8
 8012636:	9b03      	ldr	r3, [sp, #12]
 8012638:	4652      	mov	r2, sl
 801263a:	6880      	ldr	r0, [r0, #8]
 801263c:	4659      	mov	r1, fp
 801263e:	444e      	add	r6, r9
 8012640:	4428      	add	r0, r5
 8012642:	441d      	add	r5, r3
 8012644:	f7ff fad6 	bl	8011bf4 <lstm_cell>
 8012648:	2c00      	cmp	r4, #0
 801264a:	daef      	bge.n	801262c <forward_lstm+0x1a8>
 801264c:	4630      	mov	r0, r6
 801264e:	9a02      	ldr	r2, [sp, #8]
 8012650:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012652:	9604      	str	r6, [sp, #16]
 8012654:	f000 f9ac 	bl	80129b0 <memcpy>
 8012658:	b019      	add	sp, #100	; 0x64
 801265a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801265e:	2300      	movs	r3, #0
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	deff      	udf	#255	; 0xff
 8012664:	6993      	ldr	r3, [r2, #24]
 8012666:	deff      	udf	#255	; 0xff
 8012668:	6863      	ldr	r3, [r4, #4]
 801266a:	deff      	udf	#255	; 0xff
 801266c:	f04f 0801 	mov.w	r8, #1
 8012670:	e7be      	b.n	80125f0 <forward_lstm+0x16c>
 8012672:	f8db 300c 	ldr.w	r3, [fp, #12]
 8012676:	f04f 0800 	mov.w	r8, #0
 801267a:	68f7      	ldr	r7, [r6, #12]
 801267c:	69b2      	ldr	r2, [r6, #24]
 801267e:	46c4      	mov	ip, r8
 8012680:	68de      	ldr	r6, [r3, #12]
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	6892      	ldr	r2, [r2, #8]
 8012686:	9303      	str	r3, [sp, #12]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f8cd 8014 	str.w	r8, [sp, #20]
 801268e:	9309      	str	r3, [sp, #36]	; 0x24
 8012690:	4643      	mov	r3, r8
 8012692:	9601      	str	r6, [sp, #4]
 8012694:	f8cd 8018 	str.w	r8, [sp, #24]
 8012698:	9204      	str	r2, [sp, #16]
 801269a:	f8cd 801c 	str.w	r8, [sp, #28]
 801269e:	f8d0 a018 	ldr.w	sl, [r0, #24]
 80126a2:	e743      	b.n	801252c <forward_lstm+0xa8>
 80126a4:	4653      	mov	r3, sl
 80126a6:	fb0c f504 	mul.w	r5, ip, r4
 80126aa:	46da      	mov	sl, fp
 80126ac:	9e04      	ldr	r6, [sp, #16]
 80126ae:	469b      	mov	fp, r3
 80126b0:	e001      	b.n	80126b6 <forward_lstm+0x232>
 80126b2:	2c00      	cmp	r4, #0
 80126b4:	dbd0      	blt.n	8012658 <forward_lstm+0x1d4>
 80126b6:	f8da 0018 	ldr.w	r0, [sl, #24]
 80126ba:	463a      	mov	r2, r7
 80126bc:	9b03      	ldr	r3, [sp, #12]
 80126be:	4659      	mov	r1, fp
 80126c0:	6880      	ldr	r0, [r0, #8]
 80126c2:	4444      	add	r4, r8
 80126c4:	4428      	add	r0, r5
 80126c6:	441d      	add	r5, r3
 80126c8:	f7ff fa94 	bl	8011bf4 <lstm_cell>
 80126cc:	4630      	mov	r0, r6
 80126ce:	9a02      	ldr	r2, [sp, #8]
 80126d0:	444e      	add	r6, r9
 80126d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80126d4:	f000 f96c 	bl	80129b0 <memcpy>
 80126d8:	9b01      	ldr	r3, [sp, #4]
 80126da:	429c      	cmp	r4, r3
 80126dc:	dbe9      	blt.n	80126b2 <forward_lstm+0x22e>
 80126de:	b019      	add	sp, #100	; 0x64
 80126e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e4:	f111 0518 	adds.w	r5, r1, #24
 80126e8:	d0c3      	beq.n	8012672 <forward_lstm+0x1ee>
 80126ea:	8b0f      	ldrh	r7, [r1, #24]
 80126ec:	4615      	mov	r5, r2
 80126ee:	2f01      	cmp	r7, #1
 80126f0:	f63f aeec 	bhi.w	80124cc <forward_lstm+0x48>
 80126f4:	2a00      	cmp	r2, #0
 80126f6:	d0bc      	beq.n	8012672 <forward_lstm+0x1ee>
 80126f8:	f04f 0800 	mov.w	r8, #0
 80126fc:	e6eb      	b.n	80124d6 <forward_lstm+0x52>
 80126fe:	469b      	mov	fp, r3
 8012700:	e6cf      	b.n	80124a2 <forward_lstm+0x1e>
 8012702:	9706      	str	r7, [sp, #24]
 8012704:	e70c      	b.n	8012520 <forward_lstm+0x9c>
 8012706:	f8cd 9014 	str.w	r9, [sp, #20]
 801270a:	e703      	b.n	8012514 <forward_lstm+0x90>
 801270c:	9207      	str	r2, [sp, #28]
 801270e:	e70d      	b.n	801252c <forward_lstm+0xa8>
 8012710:	08011be5 	.word	0x08011be5

08012714 <nl_func_sigmoid_array_f32>:
 8012714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012716:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801271a:	688c      	ldr	r4, [r1, #8]
 801271c:	4413      	add	r3, r2
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	18e4      	adds	r4, r4, r3
 8012722:	ed2d 8b02 	vpush	{d8}
 8012726:	6885      	ldr	r5, [r0, #8]
 8012728:	d218      	bcs.n	801275c <nl_func_sigmoid_array_f32+0x48>
 801272a:	3304      	adds	r3, #4
 801272c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012730:	460f      	mov	r7, r1
 8012732:	3404      	adds	r4, #4
 8012734:	441d      	add	r5, r3
 8012736:	ed14 0a01 	vldr	s0, [r4, #-4]
 801273a:	1f26      	subs	r6, r4, #4
 801273c:	eeb1 0a40 	vneg.f32	s0, s0
 8012740:	f003 f956 	bl	80159f0 <expf>
 8012744:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012748:	f1a4 0308 	sub.w	r3, r4, #8
 801274c:	4634      	mov	r4, r6
 801274e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8012752:	ed65 7a01 	vstmdb	r5!, {s15}
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	429a      	cmp	r2, r3
 801275a:	d9ec      	bls.n	8012736 <nl_func_sigmoid_array_f32+0x22>
 801275c:	ecbd 8b02 	vpop	{d8}
 8012760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012762:	bf00      	nop

08012764 <nl_func_tanh_array_f32>:
 8012764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012766:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801276a:	688c      	ldr	r4, [r1, #8]
 801276c:	6885      	ldr	r5, [r0, #8]
 801276e:	4413      	add	r3, r2
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	18e4      	adds	r4, r4, r3
 8012774:	d210      	bcs.n	8012798 <nl_func_tanh_array_f32+0x34>
 8012776:	3304      	adds	r3, #4
 8012778:	460f      	mov	r7, r1
 801277a:	3404      	adds	r4, #4
 801277c:	441d      	add	r5, r3
 801277e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012782:	1f26      	subs	r6, r4, #4
 8012784:	f003 f89a 	bl	80158bc <tanhf>
 8012788:	ed25 0a01 	vstmdb	r5!, {s0}
 801278c:	f1a4 0308 	sub.w	r3, r4, #8
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	4634      	mov	r4, r6
 8012794:	429a      	cmp	r2, r3
 8012796:	d9f2      	bls.n	801277e <nl_func_tanh_array_f32+0x1a>
 8012798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801279a:	bf00      	nop

0801279c <ai_check_custom_types>:
 801279c:	4b13      	ldr	r3, [pc, #76]	; (80127ec <ai_check_custom_types+0x50>)
 801279e:	b082      	sub	sp, #8
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	b118      	cbz	r0, 80127ae <ai_check_custom_types+0x12>
 80127a6:	7803      	ldrb	r3, [r0, #0]
 80127a8:	2b03      	cmp	r3, #3
 80127aa:	d002      	beq.n	80127b2 <ai_check_custom_types+0x16>
 80127ac:	2000      	movs	r0, #0
 80127ae:	b002      	add	sp, #8
 80127b0:	4770      	bx	lr
 80127b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d004      	beq.n	80127c4 <ai_check_custom_types+0x28>
 80127ba:	2001      	movs	r0, #1
 80127bc:	f080 0001 	eor.w	r0, r0, #1
 80127c0:	b002      	add	sp, #8
 80127c2:	4770      	bx	lr
 80127c4:	7842      	ldrb	r2, [r0, #1]
 80127c6:	3001      	adds	r0, #1
 80127c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d1f4      	bne.n	80127ba <ai_check_custom_types+0x1e>
 80127d0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80127d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d1ee      	bne.n	80127ba <ai_check_custom_types+0x1e>
 80127dc:	7842      	ldrb	r2, [r0, #1]
 80127de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80127e2:	429a      	cmp	r2, r3
 80127e4:	d1e9      	bne.n	80127ba <ai_check_custom_types+0x1e>
 80127e6:	2000      	movs	r0, #0
 80127e8:	e7e8      	b.n	80127bc <ai_check_custom_types+0x20>
 80127ea:	bf00      	nop
 80127ec:	080164c4 	.word	0x080164c4

080127f0 <ai_layers_forward_all>:
 80127f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127f2:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80127f4:	4604      	mov	r4, r0
 80127f6:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80127f8:	b316      	cbz	r6, 8012840 <ai_layers_forward_all+0x50>
 80127fa:	b1c5      	cbz	r5, 801282e <ai_layers_forward_all+0x3e>
 80127fc:	6545      	str	r5, [r0, #84]	; 0x54
 80127fe:	4629      	mov	r1, r5
 8012800:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012802:	2001      	movs	r0, #1
 8012804:	47b0      	blx	r6
 8012806:	2700      	movs	r7, #0
 8012808:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801280a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801280c:	2002      	movs	r0, #2
 801280e:	47b0      	blx	r6
 8012810:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012812:	692b      	ldr	r3, [r5, #16]
 8012814:	4628      	mov	r0, r5
 8012816:	4798      	blx	r3
 8012818:	68eb      	ldr	r3, [r5, #12]
 801281a:	2003      	movs	r0, #3
 801281c:	429d      	cmp	r5, r3
 801281e:	4619      	mov	r1, r3
 8012820:	d006      	beq.n	8012830 <ai_layers_forward_all+0x40>
 8012822:	6563      	str	r3, [r4, #84]	; 0x54
 8012824:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012826:	47b0      	blx	r6
 8012828:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801282a:	2900      	cmp	r1, #0
 801282c:	d1ed      	bne.n	801280a <ai_layers_forward_all+0x1a>
 801282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012830:	2100      	movs	r1, #0
 8012832:	6567      	str	r7, [r4, #84]	; 0x54
 8012834:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012836:	47b0      	blx	r6
 8012838:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801283a:	2900      	cmp	r1, #0
 801283c:	d1e5      	bne.n	801280a <ai_layers_forward_all+0x1a>
 801283e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012840:	2d00      	cmp	r5, #0
 8012842:	d0f4      	beq.n	801282e <ai_layers_forward_all+0x3e>
 8012844:	6545      	str	r5, [r0, #84]	; 0x54
 8012846:	692b      	ldr	r3, [r5, #16]
 8012848:	4628      	mov	r0, r5
 801284a:	4798      	blx	r3
 801284c:	68eb      	ldr	r3, [r5, #12]
 801284e:	42ab      	cmp	r3, r5
 8012850:	461d      	mov	r5, r3
 8012852:	d003      	beq.n	801285c <ai_layers_forward_all+0x6c>
 8012854:	6563      	str	r3, [r4, #84]	; 0x54
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1f5      	bne.n	8012846 <ai_layers_forward_all+0x56>
 801285a:	e7e8      	b.n	801282e <ai_layers_forward_all+0x3e>
 801285c:	2300      	movs	r3, #0
 801285e:	6563      	str	r3, [r4, #84]	; 0x54
 8012860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012862:	bf00      	nop

08012864 <ai_array_to_buffer_fmt>:
 8012864:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012868:	2b02      	cmp	r3, #2
 801286a:	d01f      	beq.n	80128ac <ai_array_to_buffer_fmt+0x48>
 801286c:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8012870:	4a1b      	ldr	r2, [pc, #108]	; (80128e0 <ai_array_to_buffer_fmt+0x7c>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d00a      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 8012876:	dc0d      	bgt.n	8012894 <ai_array_to_buffer_fmt+0x30>
 8012878:	4a1a      	ldr	r2, [pc, #104]	; (80128e4 <ai_array_to_buffer_fmt+0x80>)
 801287a:	4293      	cmp	r3, r2
 801287c:	d006      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 801287e:	dd1d      	ble.n	80128bc <ai_array_to_buffer_fmt+0x58>
 8012880:	4a19      	ldr	r2, [pc, #100]	; (80128e8 <ai_array_to_buffer_fmt+0x84>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d002      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 8012886:	320f      	adds	r2, #15
 8012888:	4293      	cmp	r3, r2
 801288a:	d10d      	bne.n	80128a8 <ai_array_to_buffer_fmt+0x44>
 801288c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012890:	4318      	orrs	r0, r3
 8012892:	4770      	bx	lr
 8012894:	4a15      	ldr	r2, [pc, #84]	; (80128ec <ai_array_to_buffer_fmt+0x88>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d0f8      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 801289a:	dd18      	ble.n	80128ce <ai_array_to_buffer_fmt+0x6a>
 801289c:	4a14      	ldr	r2, [pc, #80]	; (80128f0 <ai_array_to_buffer_fmt+0x8c>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d0f4      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128a2:	4a14      	ldr	r2, [pc, #80]	; (80128f4 <ai_array_to_buffer_fmt+0x90>)
 80128a4:	4293      	cmp	r3, r2
 80128a6:	d0f1      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128a8:	2340      	movs	r3, #64	; 0x40
 80128aa:	e7ef      	b.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128ac:	4b12      	ldr	r3, [pc, #72]	; (80128f8 <ai_array_to_buffer_fmt+0x94>)
 80128ae:	4003      	ands	r3, r0
 80128b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80128b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80128b8:	4318      	orrs	r0, r3
 80128ba:	4770      	bx	lr
 80128bc:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d0e3      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d0df      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128cc:	e7ec      	b.n	80128a8 <ai_array_to_buffer_fmt+0x44>
 80128ce:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d0da      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128d6:	3207      	adds	r2, #7
 80128d8:	4293      	cmp	r3, r2
 80128da:	d0d7      	beq.n	801288c <ai_array_to_buffer_fmt+0x28>
 80128dc:	e7e4      	b.n	80128a8 <ai_array_to_buffer_fmt+0x44>
 80128de:	bf00      	nop
 80128e0:	00840040 	.word	0x00840040
 80128e4:	00040447 	.word	0x00040447
 80128e8:	00040840 	.word	0x00040840
 80128ec:	00840840 	.word	0x00840840
 80128f0:	0084084f 	.word	0x0084084f
 80128f4:	01821040 	.word	0x01821040
 80128f8:	00803fff 	.word	0x00803fff

080128fc <ai_array_get_byte_size>:
 80128fc:	b1e1      	cbz	r1, 8012938 <ai_array_get_byte_size+0x3c>
 80128fe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012902:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012906:	b410      	push	{r4}
 8012908:	f3c0 3482 	ubfx	r4, r0, #14, #3
 801290c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8012910:	4423      	add	r3, r4
 8012912:	2804      	cmp	r0, #4
 8012914:	fb01 f103 	mul.w	r1, r1, r3
 8012918:	f101 0107 	add.w	r1, r1, #7
 801291c:	f021 0107 	bic.w	r1, r1, #7
 8012920:	fa21 f102 	lsr.w	r1, r1, r2
 8012924:	d00a      	beq.n	801293c <ai_array_get_byte_size+0x40>
 8012926:	2808      	cmp	r0, #8
 8012928:	d101      	bne.n	801292e <ai_array_get_byte_size+0x32>
 801292a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801292e:	3107      	adds	r1, #7
 8012930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012934:	08c8      	lsrs	r0, r1, #3
 8012936:	4770      	bx	lr
 8012938:	4608      	mov	r0, r1
 801293a:	4770      	bx	lr
 801293c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8012940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012944:	3107      	adds	r1, #7
 8012946:	08c8      	lsrs	r0, r1, #3
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop

0801294c <__errno>:
 801294c:	4b01      	ldr	r3, [pc, #4]	; (8012954 <__errno+0x8>)
 801294e:	6818      	ldr	r0, [r3, #0]
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	20000780 	.word	0x20000780

08012958 <__libc_init_array>:
 8012958:	b570      	push	{r4, r5, r6, lr}
 801295a:	4d0d      	ldr	r5, [pc, #52]	; (8012990 <__libc_init_array+0x38>)
 801295c:	4c0d      	ldr	r4, [pc, #52]	; (8012994 <__libc_init_array+0x3c>)
 801295e:	1b64      	subs	r4, r4, r5
 8012960:	10a4      	asrs	r4, r4, #2
 8012962:	2600      	movs	r6, #0
 8012964:	42a6      	cmp	r6, r4
 8012966:	d109      	bne.n	801297c <__libc_init_array+0x24>
 8012968:	4d0b      	ldr	r5, [pc, #44]	; (8012998 <__libc_init_array+0x40>)
 801296a:	4c0c      	ldr	r4, [pc, #48]	; (801299c <__libc_init_array+0x44>)
 801296c:	f003 fcf2 	bl	8016354 <_init>
 8012970:	1b64      	subs	r4, r4, r5
 8012972:	10a4      	asrs	r4, r4, #2
 8012974:	2600      	movs	r6, #0
 8012976:	42a6      	cmp	r6, r4
 8012978:	d105      	bne.n	8012986 <__libc_init_array+0x2e>
 801297a:	bd70      	pop	{r4, r5, r6, pc}
 801297c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012980:	4798      	blx	r3
 8012982:	3601      	adds	r6, #1
 8012984:	e7ee      	b.n	8012964 <__libc_init_array+0xc>
 8012986:	f855 3b04 	ldr.w	r3, [r5], #4
 801298a:	4798      	blx	r3
 801298c:	3601      	adds	r6, #1
 801298e:	e7f2      	b.n	8012976 <__libc_init_array+0x1e>
 8012990:	0801b918 	.word	0x0801b918
 8012994:	0801b918 	.word	0x0801b918
 8012998:	0801b918 	.word	0x0801b918
 801299c:	0801b91c 	.word	0x0801b91c

080129a0 <malloc>:
 80129a0:	4b02      	ldr	r3, [pc, #8]	; (80129ac <malloc+0xc>)
 80129a2:	4601      	mov	r1, r0
 80129a4:	6818      	ldr	r0, [r3, #0]
 80129a6:	f000 b869 	b.w	8012a7c <_malloc_r>
 80129aa:	bf00      	nop
 80129ac:	20000780 	.word	0x20000780

080129b0 <memcpy>:
 80129b0:	440a      	add	r2, r1
 80129b2:	4291      	cmp	r1, r2
 80129b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80129b8:	d100      	bne.n	80129bc <memcpy+0xc>
 80129ba:	4770      	bx	lr
 80129bc:	b510      	push	{r4, lr}
 80129be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129c6:	4291      	cmp	r1, r2
 80129c8:	d1f9      	bne.n	80129be <memcpy+0xe>
 80129ca:	bd10      	pop	{r4, pc}

080129cc <memset>:
 80129cc:	4402      	add	r2, r0
 80129ce:	4603      	mov	r3, r0
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d100      	bne.n	80129d6 <memset+0xa>
 80129d4:	4770      	bx	lr
 80129d6:	f803 1b01 	strb.w	r1, [r3], #1
 80129da:	e7f9      	b.n	80129d0 <memset+0x4>

080129dc <_free_r>:
 80129dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129de:	2900      	cmp	r1, #0
 80129e0:	d048      	beq.n	8012a74 <_free_r+0x98>
 80129e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129e6:	9001      	str	r0, [sp, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f1a1 0404 	sub.w	r4, r1, #4
 80129ee:	bfb8      	it	lt
 80129f0:	18e4      	addlt	r4, r4, r3
 80129f2:	f001 ff67 	bl	80148c4 <__malloc_lock>
 80129f6:	4a20      	ldr	r2, [pc, #128]	; (8012a78 <_free_r+0x9c>)
 80129f8:	9801      	ldr	r0, [sp, #4]
 80129fa:	6813      	ldr	r3, [r2, #0]
 80129fc:	4615      	mov	r5, r2
 80129fe:	b933      	cbnz	r3, 8012a0e <_free_r+0x32>
 8012a00:	6063      	str	r3, [r4, #4]
 8012a02:	6014      	str	r4, [r2, #0]
 8012a04:	b003      	add	sp, #12
 8012a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a0a:	f001 bf61 	b.w	80148d0 <__malloc_unlock>
 8012a0e:	42a3      	cmp	r3, r4
 8012a10:	d90b      	bls.n	8012a2a <_free_r+0x4e>
 8012a12:	6821      	ldr	r1, [r4, #0]
 8012a14:	1862      	adds	r2, r4, r1
 8012a16:	4293      	cmp	r3, r2
 8012a18:	bf04      	itt	eq
 8012a1a:	681a      	ldreq	r2, [r3, #0]
 8012a1c:	685b      	ldreq	r3, [r3, #4]
 8012a1e:	6063      	str	r3, [r4, #4]
 8012a20:	bf04      	itt	eq
 8012a22:	1852      	addeq	r2, r2, r1
 8012a24:	6022      	streq	r2, [r4, #0]
 8012a26:	602c      	str	r4, [r5, #0]
 8012a28:	e7ec      	b.n	8012a04 <_free_r+0x28>
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	b10b      	cbz	r3, 8012a34 <_free_r+0x58>
 8012a30:	42a3      	cmp	r3, r4
 8012a32:	d9fa      	bls.n	8012a2a <_free_r+0x4e>
 8012a34:	6811      	ldr	r1, [r2, #0]
 8012a36:	1855      	adds	r5, r2, r1
 8012a38:	42a5      	cmp	r5, r4
 8012a3a:	d10b      	bne.n	8012a54 <_free_r+0x78>
 8012a3c:	6824      	ldr	r4, [r4, #0]
 8012a3e:	4421      	add	r1, r4
 8012a40:	1854      	adds	r4, r2, r1
 8012a42:	42a3      	cmp	r3, r4
 8012a44:	6011      	str	r1, [r2, #0]
 8012a46:	d1dd      	bne.n	8012a04 <_free_r+0x28>
 8012a48:	681c      	ldr	r4, [r3, #0]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	6053      	str	r3, [r2, #4]
 8012a4e:	4421      	add	r1, r4
 8012a50:	6011      	str	r1, [r2, #0]
 8012a52:	e7d7      	b.n	8012a04 <_free_r+0x28>
 8012a54:	d902      	bls.n	8012a5c <_free_r+0x80>
 8012a56:	230c      	movs	r3, #12
 8012a58:	6003      	str	r3, [r0, #0]
 8012a5a:	e7d3      	b.n	8012a04 <_free_r+0x28>
 8012a5c:	6825      	ldr	r5, [r4, #0]
 8012a5e:	1961      	adds	r1, r4, r5
 8012a60:	428b      	cmp	r3, r1
 8012a62:	bf04      	itt	eq
 8012a64:	6819      	ldreq	r1, [r3, #0]
 8012a66:	685b      	ldreq	r3, [r3, #4]
 8012a68:	6063      	str	r3, [r4, #4]
 8012a6a:	bf04      	itt	eq
 8012a6c:	1949      	addeq	r1, r1, r5
 8012a6e:	6021      	streq	r1, [r4, #0]
 8012a70:	6054      	str	r4, [r2, #4]
 8012a72:	e7c7      	b.n	8012a04 <_free_r+0x28>
 8012a74:	b003      	add	sp, #12
 8012a76:	bd30      	pop	{r4, r5, pc}
 8012a78:	20000ae8 	.word	0x20000ae8

08012a7c <_malloc_r>:
 8012a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7e:	1ccd      	adds	r5, r1, #3
 8012a80:	f025 0503 	bic.w	r5, r5, #3
 8012a84:	3508      	adds	r5, #8
 8012a86:	2d0c      	cmp	r5, #12
 8012a88:	bf38      	it	cc
 8012a8a:	250c      	movcc	r5, #12
 8012a8c:	2d00      	cmp	r5, #0
 8012a8e:	4606      	mov	r6, r0
 8012a90:	db01      	blt.n	8012a96 <_malloc_r+0x1a>
 8012a92:	42a9      	cmp	r1, r5
 8012a94:	d903      	bls.n	8012a9e <_malloc_r+0x22>
 8012a96:	230c      	movs	r3, #12
 8012a98:	6033      	str	r3, [r6, #0]
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a9e:	f001 ff11 	bl	80148c4 <__malloc_lock>
 8012aa2:	4921      	ldr	r1, [pc, #132]	; (8012b28 <_malloc_r+0xac>)
 8012aa4:	680a      	ldr	r2, [r1, #0]
 8012aa6:	4614      	mov	r4, r2
 8012aa8:	b99c      	cbnz	r4, 8012ad2 <_malloc_r+0x56>
 8012aaa:	4f20      	ldr	r7, [pc, #128]	; (8012b2c <_malloc_r+0xb0>)
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	b923      	cbnz	r3, 8012aba <_malloc_r+0x3e>
 8012ab0:	4621      	mov	r1, r4
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f000 fd4a 	bl	801354c <_sbrk_r>
 8012ab8:	6038      	str	r0, [r7, #0]
 8012aba:	4629      	mov	r1, r5
 8012abc:	4630      	mov	r0, r6
 8012abe:	f000 fd45 	bl	801354c <_sbrk_r>
 8012ac2:	1c43      	adds	r3, r0, #1
 8012ac4:	d123      	bne.n	8012b0e <_malloc_r+0x92>
 8012ac6:	230c      	movs	r3, #12
 8012ac8:	6033      	str	r3, [r6, #0]
 8012aca:	4630      	mov	r0, r6
 8012acc:	f001 ff00 	bl	80148d0 <__malloc_unlock>
 8012ad0:	e7e3      	b.n	8012a9a <_malloc_r+0x1e>
 8012ad2:	6823      	ldr	r3, [r4, #0]
 8012ad4:	1b5b      	subs	r3, r3, r5
 8012ad6:	d417      	bmi.n	8012b08 <_malloc_r+0x8c>
 8012ad8:	2b0b      	cmp	r3, #11
 8012ada:	d903      	bls.n	8012ae4 <_malloc_r+0x68>
 8012adc:	6023      	str	r3, [r4, #0]
 8012ade:	441c      	add	r4, r3
 8012ae0:	6025      	str	r5, [r4, #0]
 8012ae2:	e004      	b.n	8012aee <_malloc_r+0x72>
 8012ae4:	6863      	ldr	r3, [r4, #4]
 8012ae6:	42a2      	cmp	r2, r4
 8012ae8:	bf0c      	ite	eq
 8012aea:	600b      	streq	r3, [r1, #0]
 8012aec:	6053      	strne	r3, [r2, #4]
 8012aee:	4630      	mov	r0, r6
 8012af0:	f001 feee 	bl	80148d0 <__malloc_unlock>
 8012af4:	f104 000b 	add.w	r0, r4, #11
 8012af8:	1d23      	adds	r3, r4, #4
 8012afa:	f020 0007 	bic.w	r0, r0, #7
 8012afe:	1ac2      	subs	r2, r0, r3
 8012b00:	d0cc      	beq.n	8012a9c <_malloc_r+0x20>
 8012b02:	1a1b      	subs	r3, r3, r0
 8012b04:	50a3      	str	r3, [r4, r2]
 8012b06:	e7c9      	b.n	8012a9c <_malloc_r+0x20>
 8012b08:	4622      	mov	r2, r4
 8012b0a:	6864      	ldr	r4, [r4, #4]
 8012b0c:	e7cc      	b.n	8012aa8 <_malloc_r+0x2c>
 8012b0e:	1cc4      	adds	r4, r0, #3
 8012b10:	f024 0403 	bic.w	r4, r4, #3
 8012b14:	42a0      	cmp	r0, r4
 8012b16:	d0e3      	beq.n	8012ae0 <_malloc_r+0x64>
 8012b18:	1a21      	subs	r1, r4, r0
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f000 fd16 	bl	801354c <_sbrk_r>
 8012b20:	3001      	adds	r0, #1
 8012b22:	d1dd      	bne.n	8012ae0 <_malloc_r+0x64>
 8012b24:	e7cf      	b.n	8012ac6 <_malloc_r+0x4a>
 8012b26:	bf00      	nop
 8012b28:	20000ae8 	.word	0x20000ae8
 8012b2c:	20000aec 	.word	0x20000aec

08012b30 <__cvt>:
 8012b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b34:	ec55 4b10 	vmov	r4, r5, d0
 8012b38:	2d00      	cmp	r5, #0
 8012b3a:	460e      	mov	r6, r1
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	462b      	mov	r3, r5
 8012b40:	bfbb      	ittet	lt
 8012b42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012b46:	461d      	movlt	r5, r3
 8012b48:	2300      	movge	r3, #0
 8012b4a:	232d      	movlt	r3, #45	; 0x2d
 8012b4c:	700b      	strb	r3, [r1, #0]
 8012b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012b54:	4691      	mov	r9, r2
 8012b56:	f023 0820 	bic.w	r8, r3, #32
 8012b5a:	bfbc      	itt	lt
 8012b5c:	4622      	movlt	r2, r4
 8012b5e:	4614      	movlt	r4, r2
 8012b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012b64:	d005      	beq.n	8012b72 <__cvt+0x42>
 8012b66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012b6a:	d100      	bne.n	8012b6e <__cvt+0x3e>
 8012b6c:	3601      	adds	r6, #1
 8012b6e:	2102      	movs	r1, #2
 8012b70:	e000      	b.n	8012b74 <__cvt+0x44>
 8012b72:	2103      	movs	r1, #3
 8012b74:	ab03      	add	r3, sp, #12
 8012b76:	9301      	str	r3, [sp, #4]
 8012b78:	ab02      	add	r3, sp, #8
 8012b7a:	9300      	str	r3, [sp, #0]
 8012b7c:	ec45 4b10 	vmov	d0, r4, r5
 8012b80:	4653      	mov	r3, sl
 8012b82:	4632      	mov	r2, r6
 8012b84:	f000 fe7c 	bl	8013880 <_dtoa_r>
 8012b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012b8c:	4607      	mov	r7, r0
 8012b8e:	d102      	bne.n	8012b96 <__cvt+0x66>
 8012b90:	f019 0f01 	tst.w	r9, #1
 8012b94:	d022      	beq.n	8012bdc <__cvt+0xac>
 8012b96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012b9a:	eb07 0906 	add.w	r9, r7, r6
 8012b9e:	d110      	bne.n	8012bc2 <__cvt+0x92>
 8012ba0:	783b      	ldrb	r3, [r7, #0]
 8012ba2:	2b30      	cmp	r3, #48	; 0x30
 8012ba4:	d10a      	bne.n	8012bbc <__cvt+0x8c>
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	2300      	movs	r3, #0
 8012baa:	4620      	mov	r0, r4
 8012bac:	4629      	mov	r1, r5
 8012bae:	f7ed ffab 	bl	8000b08 <__aeabi_dcmpeq>
 8012bb2:	b918      	cbnz	r0, 8012bbc <__cvt+0x8c>
 8012bb4:	f1c6 0601 	rsb	r6, r6, #1
 8012bb8:	f8ca 6000 	str.w	r6, [sl]
 8012bbc:	f8da 3000 	ldr.w	r3, [sl]
 8012bc0:	4499      	add	r9, r3
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	4629      	mov	r1, r5
 8012bca:	f7ed ff9d 	bl	8000b08 <__aeabi_dcmpeq>
 8012bce:	b108      	cbz	r0, 8012bd4 <__cvt+0xa4>
 8012bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8012bd4:	2230      	movs	r2, #48	; 0x30
 8012bd6:	9b03      	ldr	r3, [sp, #12]
 8012bd8:	454b      	cmp	r3, r9
 8012bda:	d307      	bcc.n	8012bec <__cvt+0xbc>
 8012bdc:	9b03      	ldr	r3, [sp, #12]
 8012bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012be0:	1bdb      	subs	r3, r3, r7
 8012be2:	4638      	mov	r0, r7
 8012be4:	6013      	str	r3, [r2, #0]
 8012be6:	b004      	add	sp, #16
 8012be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bec:	1c59      	adds	r1, r3, #1
 8012bee:	9103      	str	r1, [sp, #12]
 8012bf0:	701a      	strb	r2, [r3, #0]
 8012bf2:	e7f0      	b.n	8012bd6 <__cvt+0xa6>

08012bf4 <__exponent>:
 8012bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2900      	cmp	r1, #0
 8012bfa:	bfb8      	it	lt
 8012bfc:	4249      	neglt	r1, r1
 8012bfe:	f803 2b02 	strb.w	r2, [r3], #2
 8012c02:	bfb4      	ite	lt
 8012c04:	222d      	movlt	r2, #45	; 0x2d
 8012c06:	222b      	movge	r2, #43	; 0x2b
 8012c08:	2909      	cmp	r1, #9
 8012c0a:	7042      	strb	r2, [r0, #1]
 8012c0c:	dd2a      	ble.n	8012c64 <__exponent+0x70>
 8012c0e:	f10d 0407 	add.w	r4, sp, #7
 8012c12:	46a4      	mov	ip, r4
 8012c14:	270a      	movs	r7, #10
 8012c16:	46a6      	mov	lr, r4
 8012c18:	460a      	mov	r2, r1
 8012c1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8012c1e:	fb07 1516 	mls	r5, r7, r6, r1
 8012c22:	3530      	adds	r5, #48	; 0x30
 8012c24:	2a63      	cmp	r2, #99	; 0x63
 8012c26:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012c2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012c2e:	4631      	mov	r1, r6
 8012c30:	dcf1      	bgt.n	8012c16 <__exponent+0x22>
 8012c32:	3130      	adds	r1, #48	; 0x30
 8012c34:	f1ae 0502 	sub.w	r5, lr, #2
 8012c38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012c3c:	1c44      	adds	r4, r0, #1
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4561      	cmp	r1, ip
 8012c42:	d30a      	bcc.n	8012c5a <__exponent+0x66>
 8012c44:	f10d 0209 	add.w	r2, sp, #9
 8012c48:	eba2 020e 	sub.w	r2, r2, lr
 8012c4c:	4565      	cmp	r5, ip
 8012c4e:	bf88      	it	hi
 8012c50:	2200      	movhi	r2, #0
 8012c52:	4413      	add	r3, r2
 8012c54:	1a18      	subs	r0, r3, r0
 8012c56:	b003      	add	sp, #12
 8012c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012c62:	e7ed      	b.n	8012c40 <__exponent+0x4c>
 8012c64:	2330      	movs	r3, #48	; 0x30
 8012c66:	3130      	adds	r1, #48	; 0x30
 8012c68:	7083      	strb	r3, [r0, #2]
 8012c6a:	70c1      	strb	r1, [r0, #3]
 8012c6c:	1d03      	adds	r3, r0, #4
 8012c6e:	e7f1      	b.n	8012c54 <__exponent+0x60>

08012c70 <_printf_float>:
 8012c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c74:	ed2d 8b02 	vpush	{d8}
 8012c78:	b08d      	sub	sp, #52	; 0x34
 8012c7a:	460c      	mov	r4, r1
 8012c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012c80:	4616      	mov	r6, r2
 8012c82:	461f      	mov	r7, r3
 8012c84:	4605      	mov	r5, r0
 8012c86:	f001 fdb1 	bl	80147ec <_localeconv_r>
 8012c8a:	f8d0 a000 	ldr.w	sl, [r0]
 8012c8e:	4650      	mov	r0, sl
 8012c90:	f7ed fabe 	bl	8000210 <strlen>
 8012c94:	2300      	movs	r3, #0
 8012c96:	930a      	str	r3, [sp, #40]	; 0x28
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	9305      	str	r3, [sp, #20]
 8012c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8012ca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012ca4:	3307      	adds	r3, #7
 8012ca6:	f023 0307 	bic.w	r3, r3, #7
 8012caa:	f103 0208 	add.w	r2, r3, #8
 8012cae:	f8c8 2000 	str.w	r2, [r8]
 8012cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012cba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012cbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012cc2:	9307      	str	r3, [sp, #28]
 8012cc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8012cc8:	ee08 0a10 	vmov	s16, r0
 8012ccc:	4b9f      	ldr	r3, [pc, #636]	; (8012f4c <_printf_float+0x2dc>)
 8012cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012cd6:	f7ed ff49 	bl	8000b6c <__aeabi_dcmpun>
 8012cda:	bb88      	cbnz	r0, 8012d40 <_printf_float+0xd0>
 8012cdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ce0:	4b9a      	ldr	r3, [pc, #616]	; (8012f4c <_printf_float+0x2dc>)
 8012ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ce6:	f7ed ff23 	bl	8000b30 <__aeabi_dcmple>
 8012cea:	bb48      	cbnz	r0, 8012d40 <_printf_float+0xd0>
 8012cec:	2200      	movs	r2, #0
 8012cee:	2300      	movs	r3, #0
 8012cf0:	4640      	mov	r0, r8
 8012cf2:	4649      	mov	r1, r9
 8012cf4:	f7ed ff12 	bl	8000b1c <__aeabi_dcmplt>
 8012cf8:	b110      	cbz	r0, 8012d00 <_printf_float+0x90>
 8012cfa:	232d      	movs	r3, #45	; 0x2d
 8012cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d00:	4b93      	ldr	r3, [pc, #588]	; (8012f50 <_printf_float+0x2e0>)
 8012d02:	4894      	ldr	r0, [pc, #592]	; (8012f54 <_printf_float+0x2e4>)
 8012d04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012d08:	bf94      	ite	ls
 8012d0a:	4698      	movls	r8, r3
 8012d0c:	4680      	movhi	r8, r0
 8012d0e:	2303      	movs	r3, #3
 8012d10:	6123      	str	r3, [r4, #16]
 8012d12:	9b05      	ldr	r3, [sp, #20]
 8012d14:	f023 0204 	bic.w	r2, r3, #4
 8012d18:	6022      	str	r2, [r4, #0]
 8012d1a:	f04f 0900 	mov.w	r9, #0
 8012d1e:	9700      	str	r7, [sp, #0]
 8012d20:	4633      	mov	r3, r6
 8012d22:	aa0b      	add	r2, sp, #44	; 0x2c
 8012d24:	4621      	mov	r1, r4
 8012d26:	4628      	mov	r0, r5
 8012d28:	f000 f9d8 	bl	80130dc <_printf_common>
 8012d2c:	3001      	adds	r0, #1
 8012d2e:	f040 8090 	bne.w	8012e52 <_printf_float+0x1e2>
 8012d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d36:	b00d      	add	sp, #52	; 0x34
 8012d38:	ecbd 8b02 	vpop	{d8}
 8012d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d40:	4642      	mov	r2, r8
 8012d42:	464b      	mov	r3, r9
 8012d44:	4640      	mov	r0, r8
 8012d46:	4649      	mov	r1, r9
 8012d48:	f7ed ff10 	bl	8000b6c <__aeabi_dcmpun>
 8012d4c:	b140      	cbz	r0, 8012d60 <_printf_float+0xf0>
 8012d4e:	464b      	mov	r3, r9
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	bfbc      	itt	lt
 8012d54:	232d      	movlt	r3, #45	; 0x2d
 8012d56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012d5a:	487f      	ldr	r0, [pc, #508]	; (8012f58 <_printf_float+0x2e8>)
 8012d5c:	4b7f      	ldr	r3, [pc, #508]	; (8012f5c <_printf_float+0x2ec>)
 8012d5e:	e7d1      	b.n	8012d04 <_printf_float+0x94>
 8012d60:	6863      	ldr	r3, [r4, #4]
 8012d62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012d66:	9206      	str	r2, [sp, #24]
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	d13f      	bne.n	8012dec <_printf_float+0x17c>
 8012d6c:	2306      	movs	r3, #6
 8012d6e:	6063      	str	r3, [r4, #4]
 8012d70:	9b05      	ldr	r3, [sp, #20]
 8012d72:	6861      	ldr	r1, [r4, #4]
 8012d74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012d78:	2300      	movs	r3, #0
 8012d7a:	9303      	str	r3, [sp, #12]
 8012d7c:	ab0a      	add	r3, sp, #40	; 0x28
 8012d7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012d82:	ab09      	add	r3, sp, #36	; 0x24
 8012d84:	ec49 8b10 	vmov	d0, r8, r9
 8012d88:	9300      	str	r3, [sp, #0]
 8012d8a:	6022      	str	r2, [r4, #0]
 8012d8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012d90:	4628      	mov	r0, r5
 8012d92:	f7ff fecd 	bl	8012b30 <__cvt>
 8012d96:	9b06      	ldr	r3, [sp, #24]
 8012d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d9a:	2b47      	cmp	r3, #71	; 0x47
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	d108      	bne.n	8012db2 <_printf_float+0x142>
 8012da0:	1cc8      	adds	r0, r1, #3
 8012da2:	db02      	blt.n	8012daa <_printf_float+0x13a>
 8012da4:	6863      	ldr	r3, [r4, #4]
 8012da6:	4299      	cmp	r1, r3
 8012da8:	dd41      	ble.n	8012e2e <_printf_float+0x1be>
 8012daa:	f1ab 0b02 	sub.w	fp, fp, #2
 8012dae:	fa5f fb8b 	uxtb.w	fp, fp
 8012db2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012db6:	d820      	bhi.n	8012dfa <_printf_float+0x18a>
 8012db8:	3901      	subs	r1, #1
 8012dba:	465a      	mov	r2, fp
 8012dbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012dc0:	9109      	str	r1, [sp, #36]	; 0x24
 8012dc2:	f7ff ff17 	bl	8012bf4 <__exponent>
 8012dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dc8:	1813      	adds	r3, r2, r0
 8012dca:	2a01      	cmp	r2, #1
 8012dcc:	4681      	mov	r9, r0
 8012dce:	6123      	str	r3, [r4, #16]
 8012dd0:	dc02      	bgt.n	8012dd8 <_printf_float+0x168>
 8012dd2:	6822      	ldr	r2, [r4, #0]
 8012dd4:	07d2      	lsls	r2, r2, #31
 8012dd6:	d501      	bpl.n	8012ddc <_printf_float+0x16c>
 8012dd8:	3301      	adds	r3, #1
 8012dda:	6123      	str	r3, [r4, #16]
 8012ddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d09c      	beq.n	8012d1e <_printf_float+0xae>
 8012de4:	232d      	movs	r3, #45	; 0x2d
 8012de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012dea:	e798      	b.n	8012d1e <_printf_float+0xae>
 8012dec:	9a06      	ldr	r2, [sp, #24]
 8012dee:	2a47      	cmp	r2, #71	; 0x47
 8012df0:	d1be      	bne.n	8012d70 <_printf_float+0x100>
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1bc      	bne.n	8012d70 <_printf_float+0x100>
 8012df6:	2301      	movs	r3, #1
 8012df8:	e7b9      	b.n	8012d6e <_printf_float+0xfe>
 8012dfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012dfe:	d118      	bne.n	8012e32 <_printf_float+0x1c2>
 8012e00:	2900      	cmp	r1, #0
 8012e02:	6863      	ldr	r3, [r4, #4]
 8012e04:	dd0b      	ble.n	8012e1e <_printf_float+0x1ae>
 8012e06:	6121      	str	r1, [r4, #16]
 8012e08:	b913      	cbnz	r3, 8012e10 <_printf_float+0x1a0>
 8012e0a:	6822      	ldr	r2, [r4, #0]
 8012e0c:	07d0      	lsls	r0, r2, #31
 8012e0e:	d502      	bpl.n	8012e16 <_printf_float+0x1a6>
 8012e10:	3301      	adds	r3, #1
 8012e12:	440b      	add	r3, r1
 8012e14:	6123      	str	r3, [r4, #16]
 8012e16:	65a1      	str	r1, [r4, #88]	; 0x58
 8012e18:	f04f 0900 	mov.w	r9, #0
 8012e1c:	e7de      	b.n	8012ddc <_printf_float+0x16c>
 8012e1e:	b913      	cbnz	r3, 8012e26 <_printf_float+0x1b6>
 8012e20:	6822      	ldr	r2, [r4, #0]
 8012e22:	07d2      	lsls	r2, r2, #31
 8012e24:	d501      	bpl.n	8012e2a <_printf_float+0x1ba>
 8012e26:	3302      	adds	r3, #2
 8012e28:	e7f4      	b.n	8012e14 <_printf_float+0x1a4>
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	e7f2      	b.n	8012e14 <_printf_float+0x1a4>
 8012e2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e34:	4299      	cmp	r1, r3
 8012e36:	db05      	blt.n	8012e44 <_printf_float+0x1d4>
 8012e38:	6823      	ldr	r3, [r4, #0]
 8012e3a:	6121      	str	r1, [r4, #16]
 8012e3c:	07d8      	lsls	r0, r3, #31
 8012e3e:	d5ea      	bpl.n	8012e16 <_printf_float+0x1a6>
 8012e40:	1c4b      	adds	r3, r1, #1
 8012e42:	e7e7      	b.n	8012e14 <_printf_float+0x1a4>
 8012e44:	2900      	cmp	r1, #0
 8012e46:	bfd4      	ite	le
 8012e48:	f1c1 0202 	rsble	r2, r1, #2
 8012e4c:	2201      	movgt	r2, #1
 8012e4e:	4413      	add	r3, r2
 8012e50:	e7e0      	b.n	8012e14 <_printf_float+0x1a4>
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	055a      	lsls	r2, r3, #21
 8012e56:	d407      	bmi.n	8012e68 <_printf_float+0x1f8>
 8012e58:	6923      	ldr	r3, [r4, #16]
 8012e5a:	4642      	mov	r2, r8
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	4628      	mov	r0, r5
 8012e60:	47b8      	blx	r7
 8012e62:	3001      	adds	r0, #1
 8012e64:	d12c      	bne.n	8012ec0 <_printf_float+0x250>
 8012e66:	e764      	b.n	8012d32 <_printf_float+0xc2>
 8012e68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012e6c:	f240 80e0 	bls.w	8013030 <_printf_float+0x3c0>
 8012e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e74:	2200      	movs	r2, #0
 8012e76:	2300      	movs	r3, #0
 8012e78:	f7ed fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d034      	beq.n	8012eea <_printf_float+0x27a>
 8012e80:	4a37      	ldr	r2, [pc, #220]	; (8012f60 <_printf_float+0x2f0>)
 8012e82:	2301      	movs	r3, #1
 8012e84:	4631      	mov	r1, r6
 8012e86:	4628      	mov	r0, r5
 8012e88:	47b8      	blx	r7
 8012e8a:	3001      	adds	r0, #1
 8012e8c:	f43f af51 	beq.w	8012d32 <_printf_float+0xc2>
 8012e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e94:	429a      	cmp	r2, r3
 8012e96:	db02      	blt.n	8012e9e <_printf_float+0x22e>
 8012e98:	6823      	ldr	r3, [r4, #0]
 8012e9a:	07d8      	lsls	r0, r3, #31
 8012e9c:	d510      	bpl.n	8012ec0 <_printf_float+0x250>
 8012e9e:	ee18 3a10 	vmov	r3, s16
 8012ea2:	4652      	mov	r2, sl
 8012ea4:	4631      	mov	r1, r6
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	47b8      	blx	r7
 8012eaa:	3001      	adds	r0, #1
 8012eac:	f43f af41 	beq.w	8012d32 <_printf_float+0xc2>
 8012eb0:	f04f 0800 	mov.w	r8, #0
 8012eb4:	f104 091a 	add.w	r9, r4, #26
 8012eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eba:	3b01      	subs	r3, #1
 8012ebc:	4543      	cmp	r3, r8
 8012ebe:	dc09      	bgt.n	8012ed4 <_printf_float+0x264>
 8012ec0:	6823      	ldr	r3, [r4, #0]
 8012ec2:	079b      	lsls	r3, r3, #30
 8012ec4:	f100 8105 	bmi.w	80130d2 <_printf_float+0x462>
 8012ec8:	68e0      	ldr	r0, [r4, #12]
 8012eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ecc:	4298      	cmp	r0, r3
 8012ece:	bfb8      	it	lt
 8012ed0:	4618      	movlt	r0, r3
 8012ed2:	e730      	b.n	8012d36 <_printf_float+0xc6>
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	464a      	mov	r2, r9
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4628      	mov	r0, r5
 8012edc:	47b8      	blx	r7
 8012ede:	3001      	adds	r0, #1
 8012ee0:	f43f af27 	beq.w	8012d32 <_printf_float+0xc2>
 8012ee4:	f108 0801 	add.w	r8, r8, #1
 8012ee8:	e7e6      	b.n	8012eb8 <_printf_float+0x248>
 8012eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	dc39      	bgt.n	8012f64 <_printf_float+0x2f4>
 8012ef0:	4a1b      	ldr	r2, [pc, #108]	; (8012f60 <_printf_float+0x2f0>)
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	4631      	mov	r1, r6
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	47b8      	blx	r7
 8012efa:	3001      	adds	r0, #1
 8012efc:	f43f af19 	beq.w	8012d32 <_printf_float+0xc2>
 8012f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f04:	4313      	orrs	r3, r2
 8012f06:	d102      	bne.n	8012f0e <_printf_float+0x29e>
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	07d9      	lsls	r1, r3, #31
 8012f0c:	d5d8      	bpl.n	8012ec0 <_printf_float+0x250>
 8012f0e:	ee18 3a10 	vmov	r3, s16
 8012f12:	4652      	mov	r2, sl
 8012f14:	4631      	mov	r1, r6
 8012f16:	4628      	mov	r0, r5
 8012f18:	47b8      	blx	r7
 8012f1a:	3001      	adds	r0, #1
 8012f1c:	f43f af09 	beq.w	8012d32 <_printf_float+0xc2>
 8012f20:	f04f 0900 	mov.w	r9, #0
 8012f24:	f104 0a1a 	add.w	sl, r4, #26
 8012f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f2a:	425b      	negs	r3, r3
 8012f2c:	454b      	cmp	r3, r9
 8012f2e:	dc01      	bgt.n	8012f34 <_printf_float+0x2c4>
 8012f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f32:	e792      	b.n	8012e5a <_printf_float+0x1ea>
 8012f34:	2301      	movs	r3, #1
 8012f36:	4652      	mov	r2, sl
 8012f38:	4631      	mov	r1, r6
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	47b8      	blx	r7
 8012f3e:	3001      	adds	r0, #1
 8012f40:	f43f aef7 	beq.w	8012d32 <_printf_float+0xc2>
 8012f44:	f109 0901 	add.w	r9, r9, #1
 8012f48:	e7ee      	b.n	8012f28 <_printf_float+0x2b8>
 8012f4a:	bf00      	nop
 8012f4c:	7fefffff 	.word	0x7fefffff
 8012f50:	0801b51c 	.word	0x0801b51c
 8012f54:	0801b520 	.word	0x0801b520
 8012f58:	0801b528 	.word	0x0801b528
 8012f5c:	0801b524 	.word	0x0801b524
 8012f60:	0801b52c 	.word	0x0801b52c
 8012f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	bfa8      	it	ge
 8012f6c:	461a      	movge	r2, r3
 8012f6e:	2a00      	cmp	r2, #0
 8012f70:	4691      	mov	r9, r2
 8012f72:	dc37      	bgt.n	8012fe4 <_printf_float+0x374>
 8012f74:	f04f 0b00 	mov.w	fp, #0
 8012f78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f7c:	f104 021a 	add.w	r2, r4, #26
 8012f80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012f82:	9305      	str	r3, [sp, #20]
 8012f84:	eba3 0309 	sub.w	r3, r3, r9
 8012f88:	455b      	cmp	r3, fp
 8012f8a:	dc33      	bgt.n	8012ff4 <_printf_float+0x384>
 8012f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f90:	429a      	cmp	r2, r3
 8012f92:	db3b      	blt.n	801300c <_printf_float+0x39c>
 8012f94:	6823      	ldr	r3, [r4, #0]
 8012f96:	07da      	lsls	r2, r3, #31
 8012f98:	d438      	bmi.n	801300c <_printf_float+0x39c>
 8012f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f9c:	9b05      	ldr	r3, [sp, #20]
 8012f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012fa0:	1ad3      	subs	r3, r2, r3
 8012fa2:	eba2 0901 	sub.w	r9, r2, r1
 8012fa6:	4599      	cmp	r9, r3
 8012fa8:	bfa8      	it	ge
 8012faa:	4699      	movge	r9, r3
 8012fac:	f1b9 0f00 	cmp.w	r9, #0
 8012fb0:	dc35      	bgt.n	801301e <_printf_float+0x3ae>
 8012fb2:	f04f 0800 	mov.w	r8, #0
 8012fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012fba:	f104 0a1a 	add.w	sl, r4, #26
 8012fbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012fc2:	1a9b      	subs	r3, r3, r2
 8012fc4:	eba3 0309 	sub.w	r3, r3, r9
 8012fc8:	4543      	cmp	r3, r8
 8012fca:	f77f af79 	ble.w	8012ec0 <_printf_float+0x250>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	4652      	mov	r2, sl
 8012fd2:	4631      	mov	r1, r6
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	47b8      	blx	r7
 8012fd8:	3001      	adds	r0, #1
 8012fda:	f43f aeaa 	beq.w	8012d32 <_printf_float+0xc2>
 8012fde:	f108 0801 	add.w	r8, r8, #1
 8012fe2:	e7ec      	b.n	8012fbe <_printf_float+0x34e>
 8012fe4:	4613      	mov	r3, r2
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	4642      	mov	r2, r8
 8012fea:	4628      	mov	r0, r5
 8012fec:	47b8      	blx	r7
 8012fee:	3001      	adds	r0, #1
 8012ff0:	d1c0      	bne.n	8012f74 <_printf_float+0x304>
 8012ff2:	e69e      	b.n	8012d32 <_printf_float+0xc2>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	4631      	mov	r1, r6
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	9205      	str	r2, [sp, #20]
 8012ffc:	47b8      	blx	r7
 8012ffe:	3001      	adds	r0, #1
 8013000:	f43f ae97 	beq.w	8012d32 <_printf_float+0xc2>
 8013004:	9a05      	ldr	r2, [sp, #20]
 8013006:	f10b 0b01 	add.w	fp, fp, #1
 801300a:	e7b9      	b.n	8012f80 <_printf_float+0x310>
 801300c:	ee18 3a10 	vmov	r3, s16
 8013010:	4652      	mov	r2, sl
 8013012:	4631      	mov	r1, r6
 8013014:	4628      	mov	r0, r5
 8013016:	47b8      	blx	r7
 8013018:	3001      	adds	r0, #1
 801301a:	d1be      	bne.n	8012f9a <_printf_float+0x32a>
 801301c:	e689      	b.n	8012d32 <_printf_float+0xc2>
 801301e:	9a05      	ldr	r2, [sp, #20]
 8013020:	464b      	mov	r3, r9
 8013022:	4442      	add	r2, r8
 8013024:	4631      	mov	r1, r6
 8013026:	4628      	mov	r0, r5
 8013028:	47b8      	blx	r7
 801302a:	3001      	adds	r0, #1
 801302c:	d1c1      	bne.n	8012fb2 <_printf_float+0x342>
 801302e:	e680      	b.n	8012d32 <_printf_float+0xc2>
 8013030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013032:	2a01      	cmp	r2, #1
 8013034:	dc01      	bgt.n	801303a <_printf_float+0x3ca>
 8013036:	07db      	lsls	r3, r3, #31
 8013038:	d538      	bpl.n	80130ac <_printf_float+0x43c>
 801303a:	2301      	movs	r3, #1
 801303c:	4642      	mov	r2, r8
 801303e:	4631      	mov	r1, r6
 8013040:	4628      	mov	r0, r5
 8013042:	47b8      	blx	r7
 8013044:	3001      	adds	r0, #1
 8013046:	f43f ae74 	beq.w	8012d32 <_printf_float+0xc2>
 801304a:	ee18 3a10 	vmov	r3, s16
 801304e:	4652      	mov	r2, sl
 8013050:	4631      	mov	r1, r6
 8013052:	4628      	mov	r0, r5
 8013054:	47b8      	blx	r7
 8013056:	3001      	adds	r0, #1
 8013058:	f43f ae6b 	beq.w	8012d32 <_printf_float+0xc2>
 801305c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013060:	2200      	movs	r2, #0
 8013062:	2300      	movs	r3, #0
 8013064:	f7ed fd50 	bl	8000b08 <__aeabi_dcmpeq>
 8013068:	b9d8      	cbnz	r0, 80130a2 <_printf_float+0x432>
 801306a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801306c:	f108 0201 	add.w	r2, r8, #1
 8013070:	3b01      	subs	r3, #1
 8013072:	4631      	mov	r1, r6
 8013074:	4628      	mov	r0, r5
 8013076:	47b8      	blx	r7
 8013078:	3001      	adds	r0, #1
 801307a:	d10e      	bne.n	801309a <_printf_float+0x42a>
 801307c:	e659      	b.n	8012d32 <_printf_float+0xc2>
 801307e:	2301      	movs	r3, #1
 8013080:	4652      	mov	r2, sl
 8013082:	4631      	mov	r1, r6
 8013084:	4628      	mov	r0, r5
 8013086:	47b8      	blx	r7
 8013088:	3001      	adds	r0, #1
 801308a:	f43f ae52 	beq.w	8012d32 <_printf_float+0xc2>
 801308e:	f108 0801 	add.w	r8, r8, #1
 8013092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013094:	3b01      	subs	r3, #1
 8013096:	4543      	cmp	r3, r8
 8013098:	dcf1      	bgt.n	801307e <_printf_float+0x40e>
 801309a:	464b      	mov	r3, r9
 801309c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80130a0:	e6dc      	b.n	8012e5c <_printf_float+0x1ec>
 80130a2:	f04f 0800 	mov.w	r8, #0
 80130a6:	f104 0a1a 	add.w	sl, r4, #26
 80130aa:	e7f2      	b.n	8013092 <_printf_float+0x422>
 80130ac:	2301      	movs	r3, #1
 80130ae:	4642      	mov	r2, r8
 80130b0:	e7df      	b.n	8013072 <_printf_float+0x402>
 80130b2:	2301      	movs	r3, #1
 80130b4:	464a      	mov	r2, r9
 80130b6:	4631      	mov	r1, r6
 80130b8:	4628      	mov	r0, r5
 80130ba:	47b8      	blx	r7
 80130bc:	3001      	adds	r0, #1
 80130be:	f43f ae38 	beq.w	8012d32 <_printf_float+0xc2>
 80130c2:	f108 0801 	add.w	r8, r8, #1
 80130c6:	68e3      	ldr	r3, [r4, #12]
 80130c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80130ca:	1a5b      	subs	r3, r3, r1
 80130cc:	4543      	cmp	r3, r8
 80130ce:	dcf0      	bgt.n	80130b2 <_printf_float+0x442>
 80130d0:	e6fa      	b.n	8012ec8 <_printf_float+0x258>
 80130d2:	f04f 0800 	mov.w	r8, #0
 80130d6:	f104 0919 	add.w	r9, r4, #25
 80130da:	e7f4      	b.n	80130c6 <_printf_float+0x456>

080130dc <_printf_common>:
 80130dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130e0:	4616      	mov	r6, r2
 80130e2:	4699      	mov	r9, r3
 80130e4:	688a      	ldr	r2, [r1, #8]
 80130e6:	690b      	ldr	r3, [r1, #16]
 80130e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80130ec:	4293      	cmp	r3, r2
 80130ee:	bfb8      	it	lt
 80130f0:	4613      	movlt	r3, r2
 80130f2:	6033      	str	r3, [r6, #0]
 80130f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80130f8:	4607      	mov	r7, r0
 80130fa:	460c      	mov	r4, r1
 80130fc:	b10a      	cbz	r2, 8013102 <_printf_common+0x26>
 80130fe:	3301      	adds	r3, #1
 8013100:	6033      	str	r3, [r6, #0]
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	0699      	lsls	r1, r3, #26
 8013106:	bf42      	ittt	mi
 8013108:	6833      	ldrmi	r3, [r6, #0]
 801310a:	3302      	addmi	r3, #2
 801310c:	6033      	strmi	r3, [r6, #0]
 801310e:	6825      	ldr	r5, [r4, #0]
 8013110:	f015 0506 	ands.w	r5, r5, #6
 8013114:	d106      	bne.n	8013124 <_printf_common+0x48>
 8013116:	f104 0a19 	add.w	sl, r4, #25
 801311a:	68e3      	ldr	r3, [r4, #12]
 801311c:	6832      	ldr	r2, [r6, #0]
 801311e:	1a9b      	subs	r3, r3, r2
 8013120:	42ab      	cmp	r3, r5
 8013122:	dc26      	bgt.n	8013172 <_printf_common+0x96>
 8013124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013128:	1e13      	subs	r3, r2, #0
 801312a:	6822      	ldr	r2, [r4, #0]
 801312c:	bf18      	it	ne
 801312e:	2301      	movne	r3, #1
 8013130:	0692      	lsls	r2, r2, #26
 8013132:	d42b      	bmi.n	801318c <_printf_common+0xb0>
 8013134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013138:	4649      	mov	r1, r9
 801313a:	4638      	mov	r0, r7
 801313c:	47c0      	blx	r8
 801313e:	3001      	adds	r0, #1
 8013140:	d01e      	beq.n	8013180 <_printf_common+0xa4>
 8013142:	6823      	ldr	r3, [r4, #0]
 8013144:	68e5      	ldr	r5, [r4, #12]
 8013146:	6832      	ldr	r2, [r6, #0]
 8013148:	f003 0306 	and.w	r3, r3, #6
 801314c:	2b04      	cmp	r3, #4
 801314e:	bf08      	it	eq
 8013150:	1aad      	subeq	r5, r5, r2
 8013152:	68a3      	ldr	r3, [r4, #8]
 8013154:	6922      	ldr	r2, [r4, #16]
 8013156:	bf0c      	ite	eq
 8013158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801315c:	2500      	movne	r5, #0
 801315e:	4293      	cmp	r3, r2
 8013160:	bfc4      	itt	gt
 8013162:	1a9b      	subgt	r3, r3, r2
 8013164:	18ed      	addgt	r5, r5, r3
 8013166:	2600      	movs	r6, #0
 8013168:	341a      	adds	r4, #26
 801316a:	42b5      	cmp	r5, r6
 801316c:	d11a      	bne.n	80131a4 <_printf_common+0xc8>
 801316e:	2000      	movs	r0, #0
 8013170:	e008      	b.n	8013184 <_printf_common+0xa8>
 8013172:	2301      	movs	r3, #1
 8013174:	4652      	mov	r2, sl
 8013176:	4649      	mov	r1, r9
 8013178:	4638      	mov	r0, r7
 801317a:	47c0      	blx	r8
 801317c:	3001      	adds	r0, #1
 801317e:	d103      	bne.n	8013188 <_printf_common+0xac>
 8013180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013188:	3501      	adds	r5, #1
 801318a:	e7c6      	b.n	801311a <_printf_common+0x3e>
 801318c:	18e1      	adds	r1, r4, r3
 801318e:	1c5a      	adds	r2, r3, #1
 8013190:	2030      	movs	r0, #48	; 0x30
 8013192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013196:	4422      	add	r2, r4
 8013198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801319c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131a0:	3302      	adds	r3, #2
 80131a2:	e7c7      	b.n	8013134 <_printf_common+0x58>
 80131a4:	2301      	movs	r3, #1
 80131a6:	4622      	mov	r2, r4
 80131a8:	4649      	mov	r1, r9
 80131aa:	4638      	mov	r0, r7
 80131ac:	47c0      	blx	r8
 80131ae:	3001      	adds	r0, #1
 80131b0:	d0e6      	beq.n	8013180 <_printf_common+0xa4>
 80131b2:	3601      	adds	r6, #1
 80131b4:	e7d9      	b.n	801316a <_printf_common+0x8e>
	...

080131b8 <_printf_i>:
 80131b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131bc:	460c      	mov	r4, r1
 80131be:	4691      	mov	r9, r2
 80131c0:	7e27      	ldrb	r7, [r4, #24]
 80131c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131c4:	2f78      	cmp	r7, #120	; 0x78
 80131c6:	4680      	mov	r8, r0
 80131c8:	469a      	mov	sl, r3
 80131ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131ce:	d807      	bhi.n	80131e0 <_printf_i+0x28>
 80131d0:	2f62      	cmp	r7, #98	; 0x62
 80131d2:	d80a      	bhi.n	80131ea <_printf_i+0x32>
 80131d4:	2f00      	cmp	r7, #0
 80131d6:	f000 80d8 	beq.w	801338a <_printf_i+0x1d2>
 80131da:	2f58      	cmp	r7, #88	; 0x58
 80131dc:	f000 80a3 	beq.w	8013326 <_printf_i+0x16e>
 80131e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80131e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80131e8:	e03a      	b.n	8013260 <_printf_i+0xa8>
 80131ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80131ee:	2b15      	cmp	r3, #21
 80131f0:	d8f6      	bhi.n	80131e0 <_printf_i+0x28>
 80131f2:	a001      	add	r0, pc, #4	; (adr r0, 80131f8 <_printf_i+0x40>)
 80131f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80131f8:	08013251 	.word	0x08013251
 80131fc:	08013265 	.word	0x08013265
 8013200:	080131e1 	.word	0x080131e1
 8013204:	080131e1 	.word	0x080131e1
 8013208:	080131e1 	.word	0x080131e1
 801320c:	080131e1 	.word	0x080131e1
 8013210:	08013265 	.word	0x08013265
 8013214:	080131e1 	.word	0x080131e1
 8013218:	080131e1 	.word	0x080131e1
 801321c:	080131e1 	.word	0x080131e1
 8013220:	080131e1 	.word	0x080131e1
 8013224:	08013371 	.word	0x08013371
 8013228:	08013295 	.word	0x08013295
 801322c:	08013353 	.word	0x08013353
 8013230:	080131e1 	.word	0x080131e1
 8013234:	080131e1 	.word	0x080131e1
 8013238:	08013393 	.word	0x08013393
 801323c:	080131e1 	.word	0x080131e1
 8013240:	08013295 	.word	0x08013295
 8013244:	080131e1 	.word	0x080131e1
 8013248:	080131e1 	.word	0x080131e1
 801324c:	0801335b 	.word	0x0801335b
 8013250:	680b      	ldr	r3, [r1, #0]
 8013252:	1d1a      	adds	r2, r3, #4
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	600a      	str	r2, [r1, #0]
 8013258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801325c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013260:	2301      	movs	r3, #1
 8013262:	e0a3      	b.n	80133ac <_printf_i+0x1f4>
 8013264:	6825      	ldr	r5, [r4, #0]
 8013266:	6808      	ldr	r0, [r1, #0]
 8013268:	062e      	lsls	r6, r5, #24
 801326a:	f100 0304 	add.w	r3, r0, #4
 801326e:	d50a      	bpl.n	8013286 <_printf_i+0xce>
 8013270:	6805      	ldr	r5, [r0, #0]
 8013272:	600b      	str	r3, [r1, #0]
 8013274:	2d00      	cmp	r5, #0
 8013276:	da03      	bge.n	8013280 <_printf_i+0xc8>
 8013278:	232d      	movs	r3, #45	; 0x2d
 801327a:	426d      	negs	r5, r5
 801327c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013280:	485e      	ldr	r0, [pc, #376]	; (80133fc <_printf_i+0x244>)
 8013282:	230a      	movs	r3, #10
 8013284:	e019      	b.n	80132ba <_printf_i+0x102>
 8013286:	f015 0f40 	tst.w	r5, #64	; 0x40
 801328a:	6805      	ldr	r5, [r0, #0]
 801328c:	600b      	str	r3, [r1, #0]
 801328e:	bf18      	it	ne
 8013290:	b22d      	sxthne	r5, r5
 8013292:	e7ef      	b.n	8013274 <_printf_i+0xbc>
 8013294:	680b      	ldr	r3, [r1, #0]
 8013296:	6825      	ldr	r5, [r4, #0]
 8013298:	1d18      	adds	r0, r3, #4
 801329a:	6008      	str	r0, [r1, #0]
 801329c:	0628      	lsls	r0, r5, #24
 801329e:	d501      	bpl.n	80132a4 <_printf_i+0xec>
 80132a0:	681d      	ldr	r5, [r3, #0]
 80132a2:	e002      	b.n	80132aa <_printf_i+0xf2>
 80132a4:	0669      	lsls	r1, r5, #25
 80132a6:	d5fb      	bpl.n	80132a0 <_printf_i+0xe8>
 80132a8:	881d      	ldrh	r5, [r3, #0]
 80132aa:	4854      	ldr	r0, [pc, #336]	; (80133fc <_printf_i+0x244>)
 80132ac:	2f6f      	cmp	r7, #111	; 0x6f
 80132ae:	bf0c      	ite	eq
 80132b0:	2308      	moveq	r3, #8
 80132b2:	230a      	movne	r3, #10
 80132b4:	2100      	movs	r1, #0
 80132b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80132ba:	6866      	ldr	r6, [r4, #4]
 80132bc:	60a6      	str	r6, [r4, #8]
 80132be:	2e00      	cmp	r6, #0
 80132c0:	bfa2      	ittt	ge
 80132c2:	6821      	ldrge	r1, [r4, #0]
 80132c4:	f021 0104 	bicge.w	r1, r1, #4
 80132c8:	6021      	strge	r1, [r4, #0]
 80132ca:	b90d      	cbnz	r5, 80132d0 <_printf_i+0x118>
 80132cc:	2e00      	cmp	r6, #0
 80132ce:	d04d      	beq.n	801336c <_printf_i+0x1b4>
 80132d0:	4616      	mov	r6, r2
 80132d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80132d6:	fb03 5711 	mls	r7, r3, r1, r5
 80132da:	5dc7      	ldrb	r7, [r0, r7]
 80132dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80132e0:	462f      	mov	r7, r5
 80132e2:	42bb      	cmp	r3, r7
 80132e4:	460d      	mov	r5, r1
 80132e6:	d9f4      	bls.n	80132d2 <_printf_i+0x11a>
 80132e8:	2b08      	cmp	r3, #8
 80132ea:	d10b      	bne.n	8013304 <_printf_i+0x14c>
 80132ec:	6823      	ldr	r3, [r4, #0]
 80132ee:	07df      	lsls	r7, r3, #31
 80132f0:	d508      	bpl.n	8013304 <_printf_i+0x14c>
 80132f2:	6923      	ldr	r3, [r4, #16]
 80132f4:	6861      	ldr	r1, [r4, #4]
 80132f6:	4299      	cmp	r1, r3
 80132f8:	bfde      	ittt	le
 80132fa:	2330      	movle	r3, #48	; 0x30
 80132fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013300:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8013304:	1b92      	subs	r2, r2, r6
 8013306:	6122      	str	r2, [r4, #16]
 8013308:	f8cd a000 	str.w	sl, [sp]
 801330c:	464b      	mov	r3, r9
 801330e:	aa03      	add	r2, sp, #12
 8013310:	4621      	mov	r1, r4
 8013312:	4640      	mov	r0, r8
 8013314:	f7ff fee2 	bl	80130dc <_printf_common>
 8013318:	3001      	adds	r0, #1
 801331a:	d14c      	bne.n	80133b6 <_printf_i+0x1fe>
 801331c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013320:	b004      	add	sp, #16
 8013322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013326:	4835      	ldr	r0, [pc, #212]	; (80133fc <_printf_i+0x244>)
 8013328:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801332c:	6823      	ldr	r3, [r4, #0]
 801332e:	680e      	ldr	r6, [r1, #0]
 8013330:	061f      	lsls	r7, r3, #24
 8013332:	f856 5b04 	ldr.w	r5, [r6], #4
 8013336:	600e      	str	r6, [r1, #0]
 8013338:	d514      	bpl.n	8013364 <_printf_i+0x1ac>
 801333a:	07d9      	lsls	r1, r3, #31
 801333c:	bf44      	itt	mi
 801333e:	f043 0320 	orrmi.w	r3, r3, #32
 8013342:	6023      	strmi	r3, [r4, #0]
 8013344:	b91d      	cbnz	r5, 801334e <_printf_i+0x196>
 8013346:	6823      	ldr	r3, [r4, #0]
 8013348:	f023 0320 	bic.w	r3, r3, #32
 801334c:	6023      	str	r3, [r4, #0]
 801334e:	2310      	movs	r3, #16
 8013350:	e7b0      	b.n	80132b4 <_printf_i+0xfc>
 8013352:	6823      	ldr	r3, [r4, #0]
 8013354:	f043 0320 	orr.w	r3, r3, #32
 8013358:	6023      	str	r3, [r4, #0]
 801335a:	2378      	movs	r3, #120	; 0x78
 801335c:	4828      	ldr	r0, [pc, #160]	; (8013400 <_printf_i+0x248>)
 801335e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013362:	e7e3      	b.n	801332c <_printf_i+0x174>
 8013364:	065e      	lsls	r6, r3, #25
 8013366:	bf48      	it	mi
 8013368:	b2ad      	uxthmi	r5, r5
 801336a:	e7e6      	b.n	801333a <_printf_i+0x182>
 801336c:	4616      	mov	r6, r2
 801336e:	e7bb      	b.n	80132e8 <_printf_i+0x130>
 8013370:	680b      	ldr	r3, [r1, #0]
 8013372:	6826      	ldr	r6, [r4, #0]
 8013374:	6960      	ldr	r0, [r4, #20]
 8013376:	1d1d      	adds	r5, r3, #4
 8013378:	600d      	str	r5, [r1, #0]
 801337a:	0635      	lsls	r5, r6, #24
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	d501      	bpl.n	8013384 <_printf_i+0x1cc>
 8013380:	6018      	str	r0, [r3, #0]
 8013382:	e002      	b.n	801338a <_printf_i+0x1d2>
 8013384:	0671      	lsls	r1, r6, #25
 8013386:	d5fb      	bpl.n	8013380 <_printf_i+0x1c8>
 8013388:	8018      	strh	r0, [r3, #0]
 801338a:	2300      	movs	r3, #0
 801338c:	6123      	str	r3, [r4, #16]
 801338e:	4616      	mov	r6, r2
 8013390:	e7ba      	b.n	8013308 <_printf_i+0x150>
 8013392:	680b      	ldr	r3, [r1, #0]
 8013394:	1d1a      	adds	r2, r3, #4
 8013396:	600a      	str	r2, [r1, #0]
 8013398:	681e      	ldr	r6, [r3, #0]
 801339a:	6862      	ldr	r2, [r4, #4]
 801339c:	2100      	movs	r1, #0
 801339e:	4630      	mov	r0, r6
 80133a0:	f7ec ff3e 	bl	8000220 <memchr>
 80133a4:	b108      	cbz	r0, 80133aa <_printf_i+0x1f2>
 80133a6:	1b80      	subs	r0, r0, r6
 80133a8:	6060      	str	r0, [r4, #4]
 80133aa:	6863      	ldr	r3, [r4, #4]
 80133ac:	6123      	str	r3, [r4, #16]
 80133ae:	2300      	movs	r3, #0
 80133b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133b4:	e7a8      	b.n	8013308 <_printf_i+0x150>
 80133b6:	6923      	ldr	r3, [r4, #16]
 80133b8:	4632      	mov	r2, r6
 80133ba:	4649      	mov	r1, r9
 80133bc:	4640      	mov	r0, r8
 80133be:	47d0      	blx	sl
 80133c0:	3001      	adds	r0, #1
 80133c2:	d0ab      	beq.n	801331c <_printf_i+0x164>
 80133c4:	6823      	ldr	r3, [r4, #0]
 80133c6:	079b      	lsls	r3, r3, #30
 80133c8:	d413      	bmi.n	80133f2 <_printf_i+0x23a>
 80133ca:	68e0      	ldr	r0, [r4, #12]
 80133cc:	9b03      	ldr	r3, [sp, #12]
 80133ce:	4298      	cmp	r0, r3
 80133d0:	bfb8      	it	lt
 80133d2:	4618      	movlt	r0, r3
 80133d4:	e7a4      	b.n	8013320 <_printf_i+0x168>
 80133d6:	2301      	movs	r3, #1
 80133d8:	4632      	mov	r2, r6
 80133da:	4649      	mov	r1, r9
 80133dc:	4640      	mov	r0, r8
 80133de:	47d0      	blx	sl
 80133e0:	3001      	adds	r0, #1
 80133e2:	d09b      	beq.n	801331c <_printf_i+0x164>
 80133e4:	3501      	adds	r5, #1
 80133e6:	68e3      	ldr	r3, [r4, #12]
 80133e8:	9903      	ldr	r1, [sp, #12]
 80133ea:	1a5b      	subs	r3, r3, r1
 80133ec:	42ab      	cmp	r3, r5
 80133ee:	dcf2      	bgt.n	80133d6 <_printf_i+0x21e>
 80133f0:	e7eb      	b.n	80133ca <_printf_i+0x212>
 80133f2:	2500      	movs	r5, #0
 80133f4:	f104 0619 	add.w	r6, r4, #25
 80133f8:	e7f5      	b.n	80133e6 <_printf_i+0x22e>
 80133fa:	bf00      	nop
 80133fc:	0801b52e 	.word	0x0801b52e
 8013400:	0801b53f 	.word	0x0801b53f

08013404 <iprintf>:
 8013404:	b40f      	push	{r0, r1, r2, r3}
 8013406:	4b0a      	ldr	r3, [pc, #40]	; (8013430 <iprintf+0x2c>)
 8013408:	b513      	push	{r0, r1, r4, lr}
 801340a:	681c      	ldr	r4, [r3, #0]
 801340c:	b124      	cbz	r4, 8013418 <iprintf+0x14>
 801340e:	69a3      	ldr	r3, [r4, #24]
 8013410:	b913      	cbnz	r3, 8013418 <iprintf+0x14>
 8013412:	4620      	mov	r0, r4
 8013414:	f001 f93a 	bl	801468c <__sinit>
 8013418:	ab05      	add	r3, sp, #20
 801341a:	9a04      	ldr	r2, [sp, #16]
 801341c:	68a1      	ldr	r1, [r4, #8]
 801341e:	9301      	str	r3, [sp, #4]
 8013420:	4620      	mov	r0, r4
 8013422:	f001 ff93 	bl	801534c <_vfiprintf_r>
 8013426:	b002      	add	sp, #8
 8013428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801342c:	b004      	add	sp, #16
 801342e:	4770      	bx	lr
 8013430:	20000780 	.word	0x20000780

08013434 <putchar>:
 8013434:	4b09      	ldr	r3, [pc, #36]	; (801345c <putchar+0x28>)
 8013436:	b513      	push	{r0, r1, r4, lr}
 8013438:	681c      	ldr	r4, [r3, #0]
 801343a:	4601      	mov	r1, r0
 801343c:	b134      	cbz	r4, 801344c <putchar+0x18>
 801343e:	69a3      	ldr	r3, [r4, #24]
 8013440:	b923      	cbnz	r3, 801344c <putchar+0x18>
 8013442:	9001      	str	r0, [sp, #4]
 8013444:	4620      	mov	r0, r4
 8013446:	f001 f921 	bl	801468c <__sinit>
 801344a:	9901      	ldr	r1, [sp, #4]
 801344c:	68a2      	ldr	r2, [r4, #8]
 801344e:	4620      	mov	r0, r4
 8013450:	b002      	add	sp, #8
 8013452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013456:	f002 b8a9 	b.w	80155ac <_putc_r>
 801345a:	bf00      	nop
 801345c:	20000780 	.word	0x20000780

08013460 <_puts_r>:
 8013460:	b570      	push	{r4, r5, r6, lr}
 8013462:	460e      	mov	r6, r1
 8013464:	4605      	mov	r5, r0
 8013466:	b118      	cbz	r0, 8013470 <_puts_r+0x10>
 8013468:	6983      	ldr	r3, [r0, #24]
 801346a:	b90b      	cbnz	r3, 8013470 <_puts_r+0x10>
 801346c:	f001 f90e 	bl	801468c <__sinit>
 8013470:	69ab      	ldr	r3, [r5, #24]
 8013472:	68ac      	ldr	r4, [r5, #8]
 8013474:	b913      	cbnz	r3, 801347c <_puts_r+0x1c>
 8013476:	4628      	mov	r0, r5
 8013478:	f001 f908 	bl	801468c <__sinit>
 801347c:	4b2c      	ldr	r3, [pc, #176]	; (8013530 <_puts_r+0xd0>)
 801347e:	429c      	cmp	r4, r3
 8013480:	d120      	bne.n	80134c4 <_puts_r+0x64>
 8013482:	686c      	ldr	r4, [r5, #4]
 8013484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013486:	07db      	lsls	r3, r3, #31
 8013488:	d405      	bmi.n	8013496 <_puts_r+0x36>
 801348a:	89a3      	ldrh	r3, [r4, #12]
 801348c:	0598      	lsls	r0, r3, #22
 801348e:	d402      	bmi.n	8013496 <_puts_r+0x36>
 8013490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013492:	f001 f9b0 	bl	80147f6 <__retarget_lock_acquire_recursive>
 8013496:	89a3      	ldrh	r3, [r4, #12]
 8013498:	0719      	lsls	r1, r3, #28
 801349a:	d51d      	bpl.n	80134d8 <_puts_r+0x78>
 801349c:	6923      	ldr	r3, [r4, #16]
 801349e:	b1db      	cbz	r3, 80134d8 <_puts_r+0x78>
 80134a0:	3e01      	subs	r6, #1
 80134a2:	68a3      	ldr	r3, [r4, #8]
 80134a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80134a8:	3b01      	subs	r3, #1
 80134aa:	60a3      	str	r3, [r4, #8]
 80134ac:	bb39      	cbnz	r1, 80134fe <_puts_r+0x9e>
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	da38      	bge.n	8013524 <_puts_r+0xc4>
 80134b2:	4622      	mov	r2, r4
 80134b4:	210a      	movs	r1, #10
 80134b6:	4628      	mov	r0, r5
 80134b8:	f000 f878 	bl	80135ac <__swbuf_r>
 80134bc:	3001      	adds	r0, #1
 80134be:	d011      	beq.n	80134e4 <_puts_r+0x84>
 80134c0:	250a      	movs	r5, #10
 80134c2:	e011      	b.n	80134e8 <_puts_r+0x88>
 80134c4:	4b1b      	ldr	r3, [pc, #108]	; (8013534 <_puts_r+0xd4>)
 80134c6:	429c      	cmp	r4, r3
 80134c8:	d101      	bne.n	80134ce <_puts_r+0x6e>
 80134ca:	68ac      	ldr	r4, [r5, #8]
 80134cc:	e7da      	b.n	8013484 <_puts_r+0x24>
 80134ce:	4b1a      	ldr	r3, [pc, #104]	; (8013538 <_puts_r+0xd8>)
 80134d0:	429c      	cmp	r4, r3
 80134d2:	bf08      	it	eq
 80134d4:	68ec      	ldreq	r4, [r5, #12]
 80134d6:	e7d5      	b.n	8013484 <_puts_r+0x24>
 80134d8:	4621      	mov	r1, r4
 80134da:	4628      	mov	r0, r5
 80134dc:	f000 f8b8 	bl	8013650 <__swsetup_r>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d0dd      	beq.n	80134a0 <_puts_r+0x40>
 80134e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80134e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134ea:	07da      	lsls	r2, r3, #31
 80134ec:	d405      	bmi.n	80134fa <_puts_r+0x9a>
 80134ee:	89a3      	ldrh	r3, [r4, #12]
 80134f0:	059b      	lsls	r3, r3, #22
 80134f2:	d402      	bmi.n	80134fa <_puts_r+0x9a>
 80134f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134f6:	f001 f97f 	bl	80147f8 <__retarget_lock_release_recursive>
 80134fa:	4628      	mov	r0, r5
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	2b00      	cmp	r3, #0
 8013500:	da04      	bge.n	801350c <_puts_r+0xac>
 8013502:	69a2      	ldr	r2, [r4, #24]
 8013504:	429a      	cmp	r2, r3
 8013506:	dc06      	bgt.n	8013516 <_puts_r+0xb6>
 8013508:	290a      	cmp	r1, #10
 801350a:	d004      	beq.n	8013516 <_puts_r+0xb6>
 801350c:	6823      	ldr	r3, [r4, #0]
 801350e:	1c5a      	adds	r2, r3, #1
 8013510:	6022      	str	r2, [r4, #0]
 8013512:	7019      	strb	r1, [r3, #0]
 8013514:	e7c5      	b.n	80134a2 <_puts_r+0x42>
 8013516:	4622      	mov	r2, r4
 8013518:	4628      	mov	r0, r5
 801351a:	f000 f847 	bl	80135ac <__swbuf_r>
 801351e:	3001      	adds	r0, #1
 8013520:	d1bf      	bne.n	80134a2 <_puts_r+0x42>
 8013522:	e7df      	b.n	80134e4 <_puts_r+0x84>
 8013524:	6823      	ldr	r3, [r4, #0]
 8013526:	250a      	movs	r5, #10
 8013528:	1c5a      	adds	r2, r3, #1
 801352a:	6022      	str	r2, [r4, #0]
 801352c:	701d      	strb	r5, [r3, #0]
 801352e:	e7db      	b.n	80134e8 <_puts_r+0x88>
 8013530:	0801b640 	.word	0x0801b640
 8013534:	0801b660 	.word	0x0801b660
 8013538:	0801b620 	.word	0x0801b620

0801353c <puts>:
 801353c:	4b02      	ldr	r3, [pc, #8]	; (8013548 <puts+0xc>)
 801353e:	4601      	mov	r1, r0
 8013540:	6818      	ldr	r0, [r3, #0]
 8013542:	f7ff bf8d 	b.w	8013460 <_puts_r>
 8013546:	bf00      	nop
 8013548:	20000780 	.word	0x20000780

0801354c <_sbrk_r>:
 801354c:	b538      	push	{r3, r4, r5, lr}
 801354e:	4d06      	ldr	r5, [pc, #24]	; (8013568 <_sbrk_r+0x1c>)
 8013550:	2300      	movs	r3, #0
 8013552:	4604      	mov	r4, r0
 8013554:	4608      	mov	r0, r1
 8013556:	602b      	str	r3, [r5, #0]
 8013558:	f7f0 f938 	bl	80037cc <_sbrk>
 801355c:	1c43      	adds	r3, r0, #1
 801355e:	d102      	bne.n	8013566 <_sbrk_r+0x1a>
 8013560:	682b      	ldr	r3, [r5, #0]
 8013562:	b103      	cbz	r3, 8013566 <_sbrk_r+0x1a>
 8013564:	6023      	str	r3, [r4, #0]
 8013566:	bd38      	pop	{r3, r4, r5, pc}
 8013568:	200417b8 	.word	0x200417b8

0801356c <siprintf>:
 801356c:	b40e      	push	{r1, r2, r3}
 801356e:	b500      	push	{lr}
 8013570:	b09c      	sub	sp, #112	; 0x70
 8013572:	ab1d      	add	r3, sp, #116	; 0x74
 8013574:	9002      	str	r0, [sp, #8]
 8013576:	9006      	str	r0, [sp, #24]
 8013578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801357c:	4809      	ldr	r0, [pc, #36]	; (80135a4 <siprintf+0x38>)
 801357e:	9107      	str	r1, [sp, #28]
 8013580:	9104      	str	r1, [sp, #16]
 8013582:	4909      	ldr	r1, [pc, #36]	; (80135a8 <siprintf+0x3c>)
 8013584:	f853 2b04 	ldr.w	r2, [r3], #4
 8013588:	9105      	str	r1, [sp, #20]
 801358a:	6800      	ldr	r0, [r0, #0]
 801358c:	9301      	str	r3, [sp, #4]
 801358e:	a902      	add	r1, sp, #8
 8013590:	f001 fdb2 	bl	80150f8 <_svfiprintf_r>
 8013594:	9b02      	ldr	r3, [sp, #8]
 8013596:	2200      	movs	r2, #0
 8013598:	701a      	strb	r2, [r3, #0]
 801359a:	b01c      	add	sp, #112	; 0x70
 801359c:	f85d eb04 	ldr.w	lr, [sp], #4
 80135a0:	b003      	add	sp, #12
 80135a2:	4770      	bx	lr
 80135a4:	20000780 	.word	0x20000780
 80135a8:	ffff0208 	.word	0xffff0208

080135ac <__swbuf_r>:
 80135ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ae:	460e      	mov	r6, r1
 80135b0:	4614      	mov	r4, r2
 80135b2:	4605      	mov	r5, r0
 80135b4:	b118      	cbz	r0, 80135be <__swbuf_r+0x12>
 80135b6:	6983      	ldr	r3, [r0, #24]
 80135b8:	b90b      	cbnz	r3, 80135be <__swbuf_r+0x12>
 80135ba:	f001 f867 	bl	801468c <__sinit>
 80135be:	4b21      	ldr	r3, [pc, #132]	; (8013644 <__swbuf_r+0x98>)
 80135c0:	429c      	cmp	r4, r3
 80135c2:	d12b      	bne.n	801361c <__swbuf_r+0x70>
 80135c4:	686c      	ldr	r4, [r5, #4]
 80135c6:	69a3      	ldr	r3, [r4, #24]
 80135c8:	60a3      	str	r3, [r4, #8]
 80135ca:	89a3      	ldrh	r3, [r4, #12]
 80135cc:	071a      	lsls	r2, r3, #28
 80135ce:	d52f      	bpl.n	8013630 <__swbuf_r+0x84>
 80135d0:	6923      	ldr	r3, [r4, #16]
 80135d2:	b36b      	cbz	r3, 8013630 <__swbuf_r+0x84>
 80135d4:	6923      	ldr	r3, [r4, #16]
 80135d6:	6820      	ldr	r0, [r4, #0]
 80135d8:	1ac0      	subs	r0, r0, r3
 80135da:	6963      	ldr	r3, [r4, #20]
 80135dc:	b2f6      	uxtb	r6, r6
 80135de:	4283      	cmp	r3, r0
 80135e0:	4637      	mov	r7, r6
 80135e2:	dc04      	bgt.n	80135ee <__swbuf_r+0x42>
 80135e4:	4621      	mov	r1, r4
 80135e6:	4628      	mov	r0, r5
 80135e8:	f000 ffbc 	bl	8014564 <_fflush_r>
 80135ec:	bb30      	cbnz	r0, 801363c <__swbuf_r+0x90>
 80135ee:	68a3      	ldr	r3, [r4, #8]
 80135f0:	3b01      	subs	r3, #1
 80135f2:	60a3      	str	r3, [r4, #8]
 80135f4:	6823      	ldr	r3, [r4, #0]
 80135f6:	1c5a      	adds	r2, r3, #1
 80135f8:	6022      	str	r2, [r4, #0]
 80135fa:	701e      	strb	r6, [r3, #0]
 80135fc:	6963      	ldr	r3, [r4, #20]
 80135fe:	3001      	adds	r0, #1
 8013600:	4283      	cmp	r3, r0
 8013602:	d004      	beq.n	801360e <__swbuf_r+0x62>
 8013604:	89a3      	ldrh	r3, [r4, #12]
 8013606:	07db      	lsls	r3, r3, #31
 8013608:	d506      	bpl.n	8013618 <__swbuf_r+0x6c>
 801360a:	2e0a      	cmp	r6, #10
 801360c:	d104      	bne.n	8013618 <__swbuf_r+0x6c>
 801360e:	4621      	mov	r1, r4
 8013610:	4628      	mov	r0, r5
 8013612:	f000 ffa7 	bl	8014564 <_fflush_r>
 8013616:	b988      	cbnz	r0, 801363c <__swbuf_r+0x90>
 8013618:	4638      	mov	r0, r7
 801361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801361c:	4b0a      	ldr	r3, [pc, #40]	; (8013648 <__swbuf_r+0x9c>)
 801361e:	429c      	cmp	r4, r3
 8013620:	d101      	bne.n	8013626 <__swbuf_r+0x7a>
 8013622:	68ac      	ldr	r4, [r5, #8]
 8013624:	e7cf      	b.n	80135c6 <__swbuf_r+0x1a>
 8013626:	4b09      	ldr	r3, [pc, #36]	; (801364c <__swbuf_r+0xa0>)
 8013628:	429c      	cmp	r4, r3
 801362a:	bf08      	it	eq
 801362c:	68ec      	ldreq	r4, [r5, #12]
 801362e:	e7ca      	b.n	80135c6 <__swbuf_r+0x1a>
 8013630:	4621      	mov	r1, r4
 8013632:	4628      	mov	r0, r5
 8013634:	f000 f80c 	bl	8013650 <__swsetup_r>
 8013638:	2800      	cmp	r0, #0
 801363a:	d0cb      	beq.n	80135d4 <__swbuf_r+0x28>
 801363c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013640:	e7ea      	b.n	8013618 <__swbuf_r+0x6c>
 8013642:	bf00      	nop
 8013644:	0801b640 	.word	0x0801b640
 8013648:	0801b660 	.word	0x0801b660
 801364c:	0801b620 	.word	0x0801b620

08013650 <__swsetup_r>:
 8013650:	4b32      	ldr	r3, [pc, #200]	; (801371c <__swsetup_r+0xcc>)
 8013652:	b570      	push	{r4, r5, r6, lr}
 8013654:	681d      	ldr	r5, [r3, #0]
 8013656:	4606      	mov	r6, r0
 8013658:	460c      	mov	r4, r1
 801365a:	b125      	cbz	r5, 8013666 <__swsetup_r+0x16>
 801365c:	69ab      	ldr	r3, [r5, #24]
 801365e:	b913      	cbnz	r3, 8013666 <__swsetup_r+0x16>
 8013660:	4628      	mov	r0, r5
 8013662:	f001 f813 	bl	801468c <__sinit>
 8013666:	4b2e      	ldr	r3, [pc, #184]	; (8013720 <__swsetup_r+0xd0>)
 8013668:	429c      	cmp	r4, r3
 801366a:	d10f      	bne.n	801368c <__swsetup_r+0x3c>
 801366c:	686c      	ldr	r4, [r5, #4]
 801366e:	89a3      	ldrh	r3, [r4, #12]
 8013670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013674:	0719      	lsls	r1, r3, #28
 8013676:	d42c      	bmi.n	80136d2 <__swsetup_r+0x82>
 8013678:	06dd      	lsls	r5, r3, #27
 801367a:	d411      	bmi.n	80136a0 <__swsetup_r+0x50>
 801367c:	2309      	movs	r3, #9
 801367e:	6033      	str	r3, [r6, #0]
 8013680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013684:	81a3      	strh	r3, [r4, #12]
 8013686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801368a:	e03e      	b.n	801370a <__swsetup_r+0xba>
 801368c:	4b25      	ldr	r3, [pc, #148]	; (8013724 <__swsetup_r+0xd4>)
 801368e:	429c      	cmp	r4, r3
 8013690:	d101      	bne.n	8013696 <__swsetup_r+0x46>
 8013692:	68ac      	ldr	r4, [r5, #8]
 8013694:	e7eb      	b.n	801366e <__swsetup_r+0x1e>
 8013696:	4b24      	ldr	r3, [pc, #144]	; (8013728 <__swsetup_r+0xd8>)
 8013698:	429c      	cmp	r4, r3
 801369a:	bf08      	it	eq
 801369c:	68ec      	ldreq	r4, [r5, #12]
 801369e:	e7e6      	b.n	801366e <__swsetup_r+0x1e>
 80136a0:	0758      	lsls	r0, r3, #29
 80136a2:	d512      	bpl.n	80136ca <__swsetup_r+0x7a>
 80136a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136a6:	b141      	cbz	r1, 80136ba <__swsetup_r+0x6a>
 80136a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136ac:	4299      	cmp	r1, r3
 80136ae:	d002      	beq.n	80136b6 <__swsetup_r+0x66>
 80136b0:	4630      	mov	r0, r6
 80136b2:	f7ff f993 	bl	80129dc <_free_r>
 80136b6:	2300      	movs	r3, #0
 80136b8:	6363      	str	r3, [r4, #52]	; 0x34
 80136ba:	89a3      	ldrh	r3, [r4, #12]
 80136bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80136c0:	81a3      	strh	r3, [r4, #12]
 80136c2:	2300      	movs	r3, #0
 80136c4:	6063      	str	r3, [r4, #4]
 80136c6:	6923      	ldr	r3, [r4, #16]
 80136c8:	6023      	str	r3, [r4, #0]
 80136ca:	89a3      	ldrh	r3, [r4, #12]
 80136cc:	f043 0308 	orr.w	r3, r3, #8
 80136d0:	81a3      	strh	r3, [r4, #12]
 80136d2:	6923      	ldr	r3, [r4, #16]
 80136d4:	b94b      	cbnz	r3, 80136ea <__swsetup_r+0x9a>
 80136d6:	89a3      	ldrh	r3, [r4, #12]
 80136d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80136dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80136e0:	d003      	beq.n	80136ea <__swsetup_r+0x9a>
 80136e2:	4621      	mov	r1, r4
 80136e4:	4630      	mov	r0, r6
 80136e6:	f001 f8ad 	bl	8014844 <__smakebuf_r>
 80136ea:	89a0      	ldrh	r0, [r4, #12]
 80136ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80136f0:	f010 0301 	ands.w	r3, r0, #1
 80136f4:	d00a      	beq.n	801370c <__swsetup_r+0xbc>
 80136f6:	2300      	movs	r3, #0
 80136f8:	60a3      	str	r3, [r4, #8]
 80136fa:	6963      	ldr	r3, [r4, #20]
 80136fc:	425b      	negs	r3, r3
 80136fe:	61a3      	str	r3, [r4, #24]
 8013700:	6923      	ldr	r3, [r4, #16]
 8013702:	b943      	cbnz	r3, 8013716 <__swsetup_r+0xc6>
 8013704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013708:	d1ba      	bne.n	8013680 <__swsetup_r+0x30>
 801370a:	bd70      	pop	{r4, r5, r6, pc}
 801370c:	0781      	lsls	r1, r0, #30
 801370e:	bf58      	it	pl
 8013710:	6963      	ldrpl	r3, [r4, #20]
 8013712:	60a3      	str	r3, [r4, #8]
 8013714:	e7f4      	b.n	8013700 <__swsetup_r+0xb0>
 8013716:	2000      	movs	r0, #0
 8013718:	e7f7      	b.n	801370a <__swsetup_r+0xba>
 801371a:	bf00      	nop
 801371c:	20000780 	.word	0x20000780
 8013720:	0801b640 	.word	0x0801b640
 8013724:	0801b660 	.word	0x0801b660
 8013728:	0801b620 	.word	0x0801b620

0801372c <__assert_func>:
 801372c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801372e:	4614      	mov	r4, r2
 8013730:	461a      	mov	r2, r3
 8013732:	4b09      	ldr	r3, [pc, #36]	; (8013758 <__assert_func+0x2c>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	4605      	mov	r5, r0
 8013738:	68d8      	ldr	r0, [r3, #12]
 801373a:	b14c      	cbz	r4, 8013750 <__assert_func+0x24>
 801373c:	4b07      	ldr	r3, [pc, #28]	; (801375c <__assert_func+0x30>)
 801373e:	9100      	str	r1, [sp, #0]
 8013740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013744:	4906      	ldr	r1, [pc, #24]	; (8013760 <__assert_func+0x34>)
 8013746:	462b      	mov	r3, r5
 8013748:	f001 f81e 	bl	8014788 <fiprintf>
 801374c:	f001 ffcc 	bl	80156e8 <abort>
 8013750:	4b04      	ldr	r3, [pc, #16]	; (8013764 <__assert_func+0x38>)
 8013752:	461c      	mov	r4, r3
 8013754:	e7f3      	b.n	801373e <__assert_func+0x12>
 8013756:	bf00      	nop
 8013758:	20000780 	.word	0x20000780
 801375c:	0801b550 	.word	0x0801b550
 8013760:	0801b55d 	.word	0x0801b55d
 8013764:	0801b58b 	.word	0x0801b58b

08013768 <quorem>:
 8013768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801376c:	6903      	ldr	r3, [r0, #16]
 801376e:	690c      	ldr	r4, [r1, #16]
 8013770:	42a3      	cmp	r3, r4
 8013772:	4607      	mov	r7, r0
 8013774:	f2c0 8081 	blt.w	801387a <quorem+0x112>
 8013778:	3c01      	subs	r4, #1
 801377a:	f101 0814 	add.w	r8, r1, #20
 801377e:	f100 0514 	add.w	r5, r0, #20
 8013782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013786:	9301      	str	r3, [sp, #4]
 8013788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801378c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013790:	3301      	adds	r3, #1
 8013792:	429a      	cmp	r2, r3
 8013794:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801379c:	fbb2 f6f3 	udiv	r6, r2, r3
 80137a0:	d331      	bcc.n	8013806 <quorem+0x9e>
 80137a2:	f04f 0e00 	mov.w	lr, #0
 80137a6:	4640      	mov	r0, r8
 80137a8:	46ac      	mov	ip, r5
 80137aa:	46f2      	mov	sl, lr
 80137ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80137b0:	b293      	uxth	r3, r2
 80137b2:	fb06 e303 	mla	r3, r6, r3, lr
 80137b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	ebaa 0303 	sub.w	r3, sl, r3
 80137c0:	0c12      	lsrs	r2, r2, #16
 80137c2:	f8dc a000 	ldr.w	sl, [ip]
 80137c6:	fb06 e202 	mla	r2, r6, r2, lr
 80137ca:	fa13 f38a 	uxtah	r3, r3, sl
 80137ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80137d2:	fa1f fa82 	uxth.w	sl, r2
 80137d6:	f8dc 2000 	ldr.w	r2, [ip]
 80137da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80137de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137e8:	4581      	cmp	r9, r0
 80137ea:	f84c 3b04 	str.w	r3, [ip], #4
 80137ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80137f2:	d2db      	bcs.n	80137ac <quorem+0x44>
 80137f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80137f8:	b92b      	cbnz	r3, 8013806 <quorem+0x9e>
 80137fa:	9b01      	ldr	r3, [sp, #4]
 80137fc:	3b04      	subs	r3, #4
 80137fe:	429d      	cmp	r5, r3
 8013800:	461a      	mov	r2, r3
 8013802:	d32e      	bcc.n	8013862 <quorem+0xfa>
 8013804:	613c      	str	r4, [r7, #16]
 8013806:	4638      	mov	r0, r7
 8013808:	f001 fae6 	bl	8014dd8 <__mcmp>
 801380c:	2800      	cmp	r0, #0
 801380e:	db24      	blt.n	801385a <quorem+0xf2>
 8013810:	3601      	adds	r6, #1
 8013812:	4628      	mov	r0, r5
 8013814:	f04f 0c00 	mov.w	ip, #0
 8013818:	f858 2b04 	ldr.w	r2, [r8], #4
 801381c:	f8d0 e000 	ldr.w	lr, [r0]
 8013820:	b293      	uxth	r3, r2
 8013822:	ebac 0303 	sub.w	r3, ip, r3
 8013826:	0c12      	lsrs	r2, r2, #16
 8013828:	fa13 f38e 	uxtah	r3, r3, lr
 801382c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013834:	b29b      	uxth	r3, r3
 8013836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801383a:	45c1      	cmp	r9, r8
 801383c:	f840 3b04 	str.w	r3, [r0], #4
 8013840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013844:	d2e8      	bcs.n	8013818 <quorem+0xb0>
 8013846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801384a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801384e:	b922      	cbnz	r2, 801385a <quorem+0xf2>
 8013850:	3b04      	subs	r3, #4
 8013852:	429d      	cmp	r5, r3
 8013854:	461a      	mov	r2, r3
 8013856:	d30a      	bcc.n	801386e <quorem+0x106>
 8013858:	613c      	str	r4, [r7, #16]
 801385a:	4630      	mov	r0, r6
 801385c:	b003      	add	sp, #12
 801385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013862:	6812      	ldr	r2, [r2, #0]
 8013864:	3b04      	subs	r3, #4
 8013866:	2a00      	cmp	r2, #0
 8013868:	d1cc      	bne.n	8013804 <quorem+0x9c>
 801386a:	3c01      	subs	r4, #1
 801386c:	e7c7      	b.n	80137fe <quorem+0x96>
 801386e:	6812      	ldr	r2, [r2, #0]
 8013870:	3b04      	subs	r3, #4
 8013872:	2a00      	cmp	r2, #0
 8013874:	d1f0      	bne.n	8013858 <quorem+0xf0>
 8013876:	3c01      	subs	r4, #1
 8013878:	e7eb      	b.n	8013852 <quorem+0xea>
 801387a:	2000      	movs	r0, #0
 801387c:	e7ee      	b.n	801385c <quorem+0xf4>
	...

08013880 <_dtoa_r>:
 8013880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013884:	ed2d 8b02 	vpush	{d8}
 8013888:	ec57 6b10 	vmov	r6, r7, d0
 801388c:	b095      	sub	sp, #84	; 0x54
 801388e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013890:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013894:	9105      	str	r1, [sp, #20]
 8013896:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801389a:	4604      	mov	r4, r0
 801389c:	9209      	str	r2, [sp, #36]	; 0x24
 801389e:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a0:	b975      	cbnz	r5, 80138c0 <_dtoa_r+0x40>
 80138a2:	2010      	movs	r0, #16
 80138a4:	f7ff f87c 	bl	80129a0 <malloc>
 80138a8:	4602      	mov	r2, r0
 80138aa:	6260      	str	r0, [r4, #36]	; 0x24
 80138ac:	b920      	cbnz	r0, 80138b8 <_dtoa_r+0x38>
 80138ae:	4bb2      	ldr	r3, [pc, #712]	; (8013b78 <_dtoa_r+0x2f8>)
 80138b0:	21ea      	movs	r1, #234	; 0xea
 80138b2:	48b2      	ldr	r0, [pc, #712]	; (8013b7c <_dtoa_r+0x2fc>)
 80138b4:	f7ff ff3a 	bl	801372c <__assert_func>
 80138b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80138bc:	6005      	str	r5, [r0, #0]
 80138be:	60c5      	str	r5, [r0, #12]
 80138c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138c2:	6819      	ldr	r1, [r3, #0]
 80138c4:	b151      	cbz	r1, 80138dc <_dtoa_r+0x5c>
 80138c6:	685a      	ldr	r2, [r3, #4]
 80138c8:	604a      	str	r2, [r1, #4]
 80138ca:	2301      	movs	r3, #1
 80138cc:	4093      	lsls	r3, r2
 80138ce:	608b      	str	r3, [r1, #8]
 80138d0:	4620      	mov	r0, r4
 80138d2:	f001 f843 	bl	801495c <_Bfree>
 80138d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138d8:	2200      	movs	r2, #0
 80138da:	601a      	str	r2, [r3, #0]
 80138dc:	1e3b      	subs	r3, r7, #0
 80138de:	bfb9      	ittee	lt
 80138e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80138e4:	9303      	strlt	r3, [sp, #12]
 80138e6:	2300      	movge	r3, #0
 80138e8:	f8c8 3000 	strge.w	r3, [r8]
 80138ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80138f0:	4ba3      	ldr	r3, [pc, #652]	; (8013b80 <_dtoa_r+0x300>)
 80138f2:	bfbc      	itt	lt
 80138f4:	2201      	movlt	r2, #1
 80138f6:	f8c8 2000 	strlt.w	r2, [r8]
 80138fa:	ea33 0309 	bics.w	r3, r3, r9
 80138fe:	d11b      	bne.n	8013938 <_dtoa_r+0xb8>
 8013900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013902:	f242 730f 	movw	r3, #9999	; 0x270f
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801390c:	4333      	orrs	r3, r6
 801390e:	f000 857a 	beq.w	8014406 <_dtoa_r+0xb86>
 8013912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013914:	b963      	cbnz	r3, 8013930 <_dtoa_r+0xb0>
 8013916:	4b9b      	ldr	r3, [pc, #620]	; (8013b84 <_dtoa_r+0x304>)
 8013918:	e024      	b.n	8013964 <_dtoa_r+0xe4>
 801391a:	4b9b      	ldr	r3, [pc, #620]	; (8013b88 <_dtoa_r+0x308>)
 801391c:	9300      	str	r3, [sp, #0]
 801391e:	3308      	adds	r3, #8
 8013920:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013922:	6013      	str	r3, [r2, #0]
 8013924:	9800      	ldr	r0, [sp, #0]
 8013926:	b015      	add	sp, #84	; 0x54
 8013928:	ecbd 8b02 	vpop	{d8}
 801392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013930:	4b94      	ldr	r3, [pc, #592]	; (8013b84 <_dtoa_r+0x304>)
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	3303      	adds	r3, #3
 8013936:	e7f3      	b.n	8013920 <_dtoa_r+0xa0>
 8013938:	ed9d 7b02 	vldr	d7, [sp, #8]
 801393c:	2200      	movs	r2, #0
 801393e:	ec51 0b17 	vmov	r0, r1, d7
 8013942:	2300      	movs	r3, #0
 8013944:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013948:	f7ed f8de 	bl	8000b08 <__aeabi_dcmpeq>
 801394c:	4680      	mov	r8, r0
 801394e:	b158      	cbz	r0, 8013968 <_dtoa_r+0xe8>
 8013950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013952:	2301      	movs	r3, #1
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 8551 	beq.w	8014400 <_dtoa_r+0xb80>
 801395e:	488b      	ldr	r0, [pc, #556]	; (8013b8c <_dtoa_r+0x30c>)
 8013960:	6018      	str	r0, [r3, #0]
 8013962:	1e43      	subs	r3, r0, #1
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	e7dd      	b.n	8013924 <_dtoa_r+0xa4>
 8013968:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801396c:	aa12      	add	r2, sp, #72	; 0x48
 801396e:	a913      	add	r1, sp, #76	; 0x4c
 8013970:	4620      	mov	r0, r4
 8013972:	f001 fad5 	bl	8014f20 <__d2b>
 8013976:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801397a:	4683      	mov	fp, r0
 801397c:	2d00      	cmp	r5, #0
 801397e:	d07c      	beq.n	8013a7a <_dtoa_r+0x1fa>
 8013980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013982:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801398a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801398e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013992:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801399a:	4b7d      	ldr	r3, [pc, #500]	; (8013b90 <_dtoa_r+0x310>)
 801399c:	2200      	movs	r2, #0
 801399e:	4630      	mov	r0, r6
 80139a0:	4639      	mov	r1, r7
 80139a2:	f7ec fc91 	bl	80002c8 <__aeabi_dsub>
 80139a6:	a36e      	add	r3, pc, #440	; (adr r3, 8013b60 <_dtoa_r+0x2e0>)
 80139a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ac:	f7ec fe44 	bl	8000638 <__aeabi_dmul>
 80139b0:	a36d      	add	r3, pc, #436	; (adr r3, 8013b68 <_dtoa_r+0x2e8>)
 80139b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b6:	f7ec fc89 	bl	80002cc <__adddf3>
 80139ba:	4606      	mov	r6, r0
 80139bc:	4628      	mov	r0, r5
 80139be:	460f      	mov	r7, r1
 80139c0:	f7ec fdd0 	bl	8000564 <__aeabi_i2d>
 80139c4:	a36a      	add	r3, pc, #424	; (adr r3, 8013b70 <_dtoa_r+0x2f0>)
 80139c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ca:	f7ec fe35 	bl	8000638 <__aeabi_dmul>
 80139ce:	4602      	mov	r2, r0
 80139d0:	460b      	mov	r3, r1
 80139d2:	4630      	mov	r0, r6
 80139d4:	4639      	mov	r1, r7
 80139d6:	f7ec fc79 	bl	80002cc <__adddf3>
 80139da:	4606      	mov	r6, r0
 80139dc:	460f      	mov	r7, r1
 80139de:	f7ed f8db 	bl	8000b98 <__aeabi_d2iz>
 80139e2:	2200      	movs	r2, #0
 80139e4:	4682      	mov	sl, r0
 80139e6:	2300      	movs	r3, #0
 80139e8:	4630      	mov	r0, r6
 80139ea:	4639      	mov	r1, r7
 80139ec:	f7ed f896 	bl	8000b1c <__aeabi_dcmplt>
 80139f0:	b148      	cbz	r0, 8013a06 <_dtoa_r+0x186>
 80139f2:	4650      	mov	r0, sl
 80139f4:	f7ec fdb6 	bl	8000564 <__aeabi_i2d>
 80139f8:	4632      	mov	r2, r6
 80139fa:	463b      	mov	r3, r7
 80139fc:	f7ed f884 	bl	8000b08 <__aeabi_dcmpeq>
 8013a00:	b908      	cbnz	r0, 8013a06 <_dtoa_r+0x186>
 8013a02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013a06:	f1ba 0f16 	cmp.w	sl, #22
 8013a0a:	d854      	bhi.n	8013ab6 <_dtoa_r+0x236>
 8013a0c:	4b61      	ldr	r3, [pc, #388]	; (8013b94 <_dtoa_r+0x314>)
 8013a0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a1a:	f7ed f87f 	bl	8000b1c <__aeabi_dcmplt>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d04b      	beq.n	8013aba <_dtoa_r+0x23a>
 8013a22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013a26:	2300      	movs	r3, #0
 8013a28:	930e      	str	r3, [sp, #56]	; 0x38
 8013a2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a2c:	1b5d      	subs	r5, r3, r5
 8013a2e:	1e6b      	subs	r3, r5, #1
 8013a30:	9304      	str	r3, [sp, #16]
 8013a32:	bf43      	ittte	mi
 8013a34:	2300      	movmi	r3, #0
 8013a36:	f1c5 0801 	rsbmi	r8, r5, #1
 8013a3a:	9304      	strmi	r3, [sp, #16]
 8013a3c:	f04f 0800 	movpl.w	r8, #0
 8013a40:	f1ba 0f00 	cmp.w	sl, #0
 8013a44:	db3b      	blt.n	8013abe <_dtoa_r+0x23e>
 8013a46:	9b04      	ldr	r3, [sp, #16]
 8013a48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013a4c:	4453      	add	r3, sl
 8013a4e:	9304      	str	r3, [sp, #16]
 8013a50:	2300      	movs	r3, #0
 8013a52:	9306      	str	r3, [sp, #24]
 8013a54:	9b05      	ldr	r3, [sp, #20]
 8013a56:	2b09      	cmp	r3, #9
 8013a58:	d869      	bhi.n	8013b2e <_dtoa_r+0x2ae>
 8013a5a:	2b05      	cmp	r3, #5
 8013a5c:	bfc4      	itt	gt
 8013a5e:	3b04      	subgt	r3, #4
 8013a60:	9305      	strgt	r3, [sp, #20]
 8013a62:	9b05      	ldr	r3, [sp, #20]
 8013a64:	f1a3 0302 	sub.w	r3, r3, #2
 8013a68:	bfcc      	ite	gt
 8013a6a:	2500      	movgt	r5, #0
 8013a6c:	2501      	movle	r5, #1
 8013a6e:	2b03      	cmp	r3, #3
 8013a70:	d869      	bhi.n	8013b46 <_dtoa_r+0x2c6>
 8013a72:	e8df f003 	tbb	[pc, r3]
 8013a76:	4e2c      	.short	0x4e2c
 8013a78:	5a4c      	.short	0x5a4c
 8013a7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013a7e:	441d      	add	r5, r3
 8013a80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013a84:	2b20      	cmp	r3, #32
 8013a86:	bfc1      	itttt	gt
 8013a88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013a8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013a90:	fa09 f303 	lslgt.w	r3, r9, r3
 8013a94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013a98:	bfda      	itte	le
 8013a9a:	f1c3 0320 	rsble	r3, r3, #32
 8013a9e:	fa06 f003 	lslle.w	r0, r6, r3
 8013aa2:	4318      	orrgt	r0, r3
 8013aa4:	f7ec fd4e 	bl	8000544 <__aeabi_ui2d>
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	4606      	mov	r6, r0
 8013aac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013ab0:	3d01      	subs	r5, #1
 8013ab2:	9310      	str	r3, [sp, #64]	; 0x40
 8013ab4:	e771      	b.n	801399a <_dtoa_r+0x11a>
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e7b6      	b.n	8013a28 <_dtoa_r+0x1a8>
 8013aba:	900e      	str	r0, [sp, #56]	; 0x38
 8013abc:	e7b5      	b.n	8013a2a <_dtoa_r+0x1aa>
 8013abe:	f1ca 0300 	rsb	r3, sl, #0
 8013ac2:	9306      	str	r3, [sp, #24]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	eba8 080a 	sub.w	r8, r8, sl
 8013aca:	930d      	str	r3, [sp, #52]	; 0x34
 8013acc:	e7c2      	b.n	8013a54 <_dtoa_r+0x1d4>
 8013ace:	2300      	movs	r3, #0
 8013ad0:	9308      	str	r3, [sp, #32]
 8013ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	dc39      	bgt.n	8013b4c <_dtoa_r+0x2cc>
 8013ad8:	f04f 0901 	mov.w	r9, #1
 8013adc:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ae0:	464b      	mov	r3, r9
 8013ae2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013ae8:	2200      	movs	r2, #0
 8013aea:	6042      	str	r2, [r0, #4]
 8013aec:	2204      	movs	r2, #4
 8013aee:	f102 0614 	add.w	r6, r2, #20
 8013af2:	429e      	cmp	r6, r3
 8013af4:	6841      	ldr	r1, [r0, #4]
 8013af6:	d92f      	bls.n	8013b58 <_dtoa_r+0x2d8>
 8013af8:	4620      	mov	r0, r4
 8013afa:	f000 feef 	bl	80148dc <_Balloc>
 8013afe:	9000      	str	r0, [sp, #0]
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d14b      	bne.n	8013b9c <_dtoa_r+0x31c>
 8013b04:	4b24      	ldr	r3, [pc, #144]	; (8013b98 <_dtoa_r+0x318>)
 8013b06:	4602      	mov	r2, r0
 8013b08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013b0c:	e6d1      	b.n	80138b2 <_dtoa_r+0x32>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	e7de      	b.n	8013ad0 <_dtoa_r+0x250>
 8013b12:	2300      	movs	r3, #0
 8013b14:	9308      	str	r3, [sp, #32]
 8013b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b18:	eb0a 0903 	add.w	r9, sl, r3
 8013b1c:	f109 0301 	add.w	r3, r9, #1
 8013b20:	2b01      	cmp	r3, #1
 8013b22:	9301      	str	r3, [sp, #4]
 8013b24:	bfb8      	it	lt
 8013b26:	2301      	movlt	r3, #1
 8013b28:	e7dd      	b.n	8013ae6 <_dtoa_r+0x266>
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e7f2      	b.n	8013b14 <_dtoa_r+0x294>
 8013b2e:	2501      	movs	r5, #1
 8013b30:	2300      	movs	r3, #0
 8013b32:	9305      	str	r3, [sp, #20]
 8013b34:	9508      	str	r5, [sp, #32]
 8013b36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013b40:	2312      	movs	r3, #18
 8013b42:	9209      	str	r2, [sp, #36]	; 0x24
 8013b44:	e7cf      	b.n	8013ae6 <_dtoa_r+0x266>
 8013b46:	2301      	movs	r3, #1
 8013b48:	9308      	str	r3, [sp, #32]
 8013b4a:	e7f4      	b.n	8013b36 <_dtoa_r+0x2b6>
 8013b4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013b50:	f8cd 9004 	str.w	r9, [sp, #4]
 8013b54:	464b      	mov	r3, r9
 8013b56:	e7c6      	b.n	8013ae6 <_dtoa_r+0x266>
 8013b58:	3101      	adds	r1, #1
 8013b5a:	6041      	str	r1, [r0, #4]
 8013b5c:	0052      	lsls	r2, r2, #1
 8013b5e:	e7c6      	b.n	8013aee <_dtoa_r+0x26e>
 8013b60:	636f4361 	.word	0x636f4361
 8013b64:	3fd287a7 	.word	0x3fd287a7
 8013b68:	8b60c8b3 	.word	0x8b60c8b3
 8013b6c:	3fc68a28 	.word	0x3fc68a28
 8013b70:	509f79fb 	.word	0x509f79fb
 8013b74:	3fd34413 	.word	0x3fd34413
 8013b78:	0801b599 	.word	0x0801b599
 8013b7c:	0801b5b0 	.word	0x0801b5b0
 8013b80:	7ff00000 	.word	0x7ff00000
 8013b84:	0801b595 	.word	0x0801b595
 8013b88:	0801b58c 	.word	0x0801b58c
 8013b8c:	0801b52d 	.word	0x0801b52d
 8013b90:	3ff80000 	.word	0x3ff80000
 8013b94:	0801b708 	.word	0x0801b708
 8013b98:	0801b60f 	.word	0x0801b60f
 8013b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b9e:	9a00      	ldr	r2, [sp, #0]
 8013ba0:	601a      	str	r2, [r3, #0]
 8013ba2:	9b01      	ldr	r3, [sp, #4]
 8013ba4:	2b0e      	cmp	r3, #14
 8013ba6:	f200 80ad 	bhi.w	8013d04 <_dtoa_r+0x484>
 8013baa:	2d00      	cmp	r5, #0
 8013bac:	f000 80aa 	beq.w	8013d04 <_dtoa_r+0x484>
 8013bb0:	f1ba 0f00 	cmp.w	sl, #0
 8013bb4:	dd36      	ble.n	8013c24 <_dtoa_r+0x3a4>
 8013bb6:	4ac3      	ldr	r2, [pc, #780]	; (8013ec4 <_dtoa_r+0x644>)
 8013bb8:	f00a 030f 	and.w	r3, sl, #15
 8013bbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013bc0:	ed93 7b00 	vldr	d7, [r3]
 8013bc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013bc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013bcc:	eeb0 8a47 	vmov.f32	s16, s14
 8013bd0:	eef0 8a67 	vmov.f32	s17, s15
 8013bd4:	d016      	beq.n	8013c04 <_dtoa_r+0x384>
 8013bd6:	4bbc      	ldr	r3, [pc, #752]	; (8013ec8 <_dtoa_r+0x648>)
 8013bd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013be0:	f7ec fe54 	bl	800088c <__aeabi_ddiv>
 8013be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013be8:	f007 070f 	and.w	r7, r7, #15
 8013bec:	2503      	movs	r5, #3
 8013bee:	4eb6      	ldr	r6, [pc, #728]	; (8013ec8 <_dtoa_r+0x648>)
 8013bf0:	b957      	cbnz	r7, 8013c08 <_dtoa_r+0x388>
 8013bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bf6:	ec53 2b18 	vmov	r2, r3, d8
 8013bfa:	f7ec fe47 	bl	800088c <__aeabi_ddiv>
 8013bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c02:	e029      	b.n	8013c58 <_dtoa_r+0x3d8>
 8013c04:	2502      	movs	r5, #2
 8013c06:	e7f2      	b.n	8013bee <_dtoa_r+0x36e>
 8013c08:	07f9      	lsls	r1, r7, #31
 8013c0a:	d508      	bpl.n	8013c1e <_dtoa_r+0x39e>
 8013c0c:	ec51 0b18 	vmov	r0, r1, d8
 8013c10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c14:	f7ec fd10 	bl	8000638 <__aeabi_dmul>
 8013c18:	ec41 0b18 	vmov	d8, r0, r1
 8013c1c:	3501      	adds	r5, #1
 8013c1e:	107f      	asrs	r7, r7, #1
 8013c20:	3608      	adds	r6, #8
 8013c22:	e7e5      	b.n	8013bf0 <_dtoa_r+0x370>
 8013c24:	f000 80a6 	beq.w	8013d74 <_dtoa_r+0x4f4>
 8013c28:	f1ca 0600 	rsb	r6, sl, #0
 8013c2c:	4ba5      	ldr	r3, [pc, #660]	; (8013ec4 <_dtoa_r+0x644>)
 8013c2e:	4fa6      	ldr	r7, [pc, #664]	; (8013ec8 <_dtoa_r+0x648>)
 8013c30:	f006 020f 	and.w	r2, r6, #15
 8013c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c40:	f7ec fcfa 	bl	8000638 <__aeabi_dmul>
 8013c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c48:	1136      	asrs	r6, r6, #4
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	2502      	movs	r5, #2
 8013c4e:	2e00      	cmp	r6, #0
 8013c50:	f040 8085 	bne.w	8013d5e <_dtoa_r+0x4de>
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d1d2      	bne.n	8013bfe <_dtoa_r+0x37e>
 8013c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f000 808c 	beq.w	8013d78 <_dtoa_r+0x4f8>
 8013c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013c64:	4b99      	ldr	r3, [pc, #612]	; (8013ecc <_dtoa_r+0x64c>)
 8013c66:	2200      	movs	r2, #0
 8013c68:	4630      	mov	r0, r6
 8013c6a:	4639      	mov	r1, r7
 8013c6c:	f7ec ff56 	bl	8000b1c <__aeabi_dcmplt>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	f000 8081 	beq.w	8013d78 <_dtoa_r+0x4f8>
 8013c76:	9b01      	ldr	r3, [sp, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d07d      	beq.n	8013d78 <_dtoa_r+0x4f8>
 8013c7c:	f1b9 0f00 	cmp.w	r9, #0
 8013c80:	dd3c      	ble.n	8013cfc <_dtoa_r+0x47c>
 8013c82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8013c86:	9307      	str	r3, [sp, #28]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	4b91      	ldr	r3, [pc, #580]	; (8013ed0 <_dtoa_r+0x650>)
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	4639      	mov	r1, r7
 8013c90:	f7ec fcd2 	bl	8000638 <__aeabi_dmul>
 8013c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c98:	3501      	adds	r5, #1
 8013c9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013c9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	f7ec fc5e 	bl	8000564 <__aeabi_i2d>
 8013ca8:	4632      	mov	r2, r6
 8013caa:	463b      	mov	r3, r7
 8013cac:	f7ec fcc4 	bl	8000638 <__aeabi_dmul>
 8013cb0:	4b88      	ldr	r3, [pc, #544]	; (8013ed4 <_dtoa_r+0x654>)
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	f7ec fb0a 	bl	80002cc <__adddf3>
 8013cb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013cc0:	9303      	str	r3, [sp, #12]
 8013cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d15c      	bne.n	8013d82 <_dtoa_r+0x502>
 8013cc8:	4b83      	ldr	r3, [pc, #524]	; (8013ed8 <_dtoa_r+0x658>)
 8013cca:	2200      	movs	r2, #0
 8013ccc:	4630      	mov	r0, r6
 8013cce:	4639      	mov	r1, r7
 8013cd0:	f7ec fafa 	bl	80002c8 <__aeabi_dsub>
 8013cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013cd8:	4606      	mov	r6, r0
 8013cda:	460f      	mov	r7, r1
 8013cdc:	f7ec ff3c 	bl	8000b58 <__aeabi_dcmpgt>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	f040 8296 	bne.w	8014212 <_dtoa_r+0x992>
 8013ce6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013cea:	4630      	mov	r0, r6
 8013cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cf0:	4639      	mov	r1, r7
 8013cf2:	f7ec ff13 	bl	8000b1c <__aeabi_dcmplt>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	f040 8288 	bne.w	801420c <_dtoa_r+0x98c>
 8013cfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f2c0 8158 	blt.w	8013fbc <_dtoa_r+0x73c>
 8013d0c:	f1ba 0f0e 	cmp.w	sl, #14
 8013d10:	f300 8154 	bgt.w	8013fbc <_dtoa_r+0x73c>
 8013d14:	4b6b      	ldr	r3, [pc, #428]	; (8013ec4 <_dtoa_r+0x644>)
 8013d16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013d1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f280 80e3 	bge.w	8013eec <_dtoa_r+0x66c>
 8013d26:	9b01      	ldr	r3, [sp, #4]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f300 80df 	bgt.w	8013eec <_dtoa_r+0x66c>
 8013d2e:	f040 826d 	bne.w	801420c <_dtoa_r+0x98c>
 8013d32:	4b69      	ldr	r3, [pc, #420]	; (8013ed8 <_dtoa_r+0x658>)
 8013d34:	2200      	movs	r2, #0
 8013d36:	4640      	mov	r0, r8
 8013d38:	4649      	mov	r1, r9
 8013d3a:	f7ec fc7d 	bl	8000638 <__aeabi_dmul>
 8013d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d42:	f7ec feff 	bl	8000b44 <__aeabi_dcmpge>
 8013d46:	9e01      	ldr	r6, [sp, #4]
 8013d48:	4637      	mov	r7, r6
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	f040 8243 	bne.w	80141d6 <_dtoa_r+0x956>
 8013d50:	9d00      	ldr	r5, [sp, #0]
 8013d52:	2331      	movs	r3, #49	; 0x31
 8013d54:	f805 3b01 	strb.w	r3, [r5], #1
 8013d58:	f10a 0a01 	add.w	sl, sl, #1
 8013d5c:	e23f      	b.n	80141de <_dtoa_r+0x95e>
 8013d5e:	07f2      	lsls	r2, r6, #31
 8013d60:	d505      	bpl.n	8013d6e <_dtoa_r+0x4ee>
 8013d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d66:	f7ec fc67 	bl	8000638 <__aeabi_dmul>
 8013d6a:	3501      	adds	r5, #1
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	1076      	asrs	r6, r6, #1
 8013d70:	3708      	adds	r7, #8
 8013d72:	e76c      	b.n	8013c4e <_dtoa_r+0x3ce>
 8013d74:	2502      	movs	r5, #2
 8013d76:	e76f      	b.n	8013c58 <_dtoa_r+0x3d8>
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8013d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8013d80:	e78d      	b.n	8013c9e <_dtoa_r+0x41e>
 8013d82:	9900      	ldr	r1, [sp, #0]
 8013d84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d88:	4b4e      	ldr	r3, [pc, #312]	; (8013ec4 <_dtoa_r+0x644>)
 8013d8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d8e:	4401      	add	r1, r0
 8013d90:	9102      	str	r1, [sp, #8]
 8013d92:	9908      	ldr	r1, [sp, #32]
 8013d94:	eeb0 8a47 	vmov.f32	s16, s14
 8013d98:	eef0 8a67 	vmov.f32	s17, s15
 8013d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013da0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013da4:	2900      	cmp	r1, #0
 8013da6:	d045      	beq.n	8013e34 <_dtoa_r+0x5b4>
 8013da8:	494c      	ldr	r1, [pc, #304]	; (8013edc <_dtoa_r+0x65c>)
 8013daa:	2000      	movs	r0, #0
 8013dac:	f7ec fd6e 	bl	800088c <__aeabi_ddiv>
 8013db0:	ec53 2b18 	vmov	r2, r3, d8
 8013db4:	f7ec fa88 	bl	80002c8 <__aeabi_dsub>
 8013db8:	9d00      	ldr	r5, [sp, #0]
 8013dba:	ec41 0b18 	vmov	d8, r0, r1
 8013dbe:	4639      	mov	r1, r7
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f7ec fee9 	bl	8000b98 <__aeabi_d2iz>
 8013dc6:	900c      	str	r0, [sp, #48]	; 0x30
 8013dc8:	f7ec fbcc 	bl	8000564 <__aeabi_i2d>
 8013dcc:	4602      	mov	r2, r0
 8013dce:	460b      	mov	r3, r1
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	4639      	mov	r1, r7
 8013dd4:	f7ec fa78 	bl	80002c8 <__aeabi_dsub>
 8013dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dda:	3330      	adds	r3, #48	; 0x30
 8013ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8013de0:	ec53 2b18 	vmov	r2, r3, d8
 8013de4:	4606      	mov	r6, r0
 8013de6:	460f      	mov	r7, r1
 8013de8:	f7ec fe98 	bl	8000b1c <__aeabi_dcmplt>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d165      	bne.n	8013ebc <_dtoa_r+0x63c>
 8013df0:	4632      	mov	r2, r6
 8013df2:	463b      	mov	r3, r7
 8013df4:	4935      	ldr	r1, [pc, #212]	; (8013ecc <_dtoa_r+0x64c>)
 8013df6:	2000      	movs	r0, #0
 8013df8:	f7ec fa66 	bl	80002c8 <__aeabi_dsub>
 8013dfc:	ec53 2b18 	vmov	r2, r3, d8
 8013e00:	f7ec fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f040 80b9 	bne.w	8013f7c <_dtoa_r+0x6fc>
 8013e0a:	9b02      	ldr	r3, [sp, #8]
 8013e0c:	429d      	cmp	r5, r3
 8013e0e:	f43f af75 	beq.w	8013cfc <_dtoa_r+0x47c>
 8013e12:	4b2f      	ldr	r3, [pc, #188]	; (8013ed0 <_dtoa_r+0x650>)
 8013e14:	ec51 0b18 	vmov	r0, r1, d8
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f7ec fc0d 	bl	8000638 <__aeabi_dmul>
 8013e1e:	4b2c      	ldr	r3, [pc, #176]	; (8013ed0 <_dtoa_r+0x650>)
 8013e20:	ec41 0b18 	vmov	d8, r0, r1
 8013e24:	2200      	movs	r2, #0
 8013e26:	4630      	mov	r0, r6
 8013e28:	4639      	mov	r1, r7
 8013e2a:	f7ec fc05 	bl	8000638 <__aeabi_dmul>
 8013e2e:	4606      	mov	r6, r0
 8013e30:	460f      	mov	r7, r1
 8013e32:	e7c4      	b.n	8013dbe <_dtoa_r+0x53e>
 8013e34:	ec51 0b17 	vmov	r0, r1, d7
 8013e38:	f7ec fbfe 	bl	8000638 <__aeabi_dmul>
 8013e3c:	9b02      	ldr	r3, [sp, #8]
 8013e3e:	9d00      	ldr	r5, [sp, #0]
 8013e40:	930c      	str	r3, [sp, #48]	; 0x30
 8013e42:	ec41 0b18 	vmov	d8, r0, r1
 8013e46:	4639      	mov	r1, r7
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f7ec fea5 	bl	8000b98 <__aeabi_d2iz>
 8013e4e:	9011      	str	r0, [sp, #68]	; 0x44
 8013e50:	f7ec fb88 	bl	8000564 <__aeabi_i2d>
 8013e54:	4602      	mov	r2, r0
 8013e56:	460b      	mov	r3, r1
 8013e58:	4630      	mov	r0, r6
 8013e5a:	4639      	mov	r1, r7
 8013e5c:	f7ec fa34 	bl	80002c8 <__aeabi_dsub>
 8013e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e62:	3330      	adds	r3, #48	; 0x30
 8013e64:	f805 3b01 	strb.w	r3, [r5], #1
 8013e68:	9b02      	ldr	r3, [sp, #8]
 8013e6a:	429d      	cmp	r5, r3
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	460f      	mov	r7, r1
 8013e70:	f04f 0200 	mov.w	r2, #0
 8013e74:	d134      	bne.n	8013ee0 <_dtoa_r+0x660>
 8013e76:	4b19      	ldr	r3, [pc, #100]	; (8013edc <_dtoa_r+0x65c>)
 8013e78:	ec51 0b18 	vmov	r0, r1, d8
 8013e7c:	f7ec fa26 	bl	80002cc <__adddf3>
 8013e80:	4602      	mov	r2, r0
 8013e82:	460b      	mov	r3, r1
 8013e84:	4630      	mov	r0, r6
 8013e86:	4639      	mov	r1, r7
 8013e88:	f7ec fe66 	bl	8000b58 <__aeabi_dcmpgt>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d175      	bne.n	8013f7c <_dtoa_r+0x6fc>
 8013e90:	ec53 2b18 	vmov	r2, r3, d8
 8013e94:	4911      	ldr	r1, [pc, #68]	; (8013edc <_dtoa_r+0x65c>)
 8013e96:	2000      	movs	r0, #0
 8013e98:	f7ec fa16 	bl	80002c8 <__aeabi_dsub>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	460b      	mov	r3, r1
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	4639      	mov	r1, r7
 8013ea4:	f7ec fe3a 	bl	8000b1c <__aeabi_dcmplt>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	f43f af27 	beq.w	8013cfc <_dtoa_r+0x47c>
 8013eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013eb0:	1e6b      	subs	r3, r5, #1
 8013eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8013eb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013eb8:	2b30      	cmp	r3, #48	; 0x30
 8013eba:	d0f8      	beq.n	8013eae <_dtoa_r+0x62e>
 8013ebc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013ec0:	e04a      	b.n	8013f58 <_dtoa_r+0x6d8>
 8013ec2:	bf00      	nop
 8013ec4:	0801b708 	.word	0x0801b708
 8013ec8:	0801b6e0 	.word	0x0801b6e0
 8013ecc:	3ff00000 	.word	0x3ff00000
 8013ed0:	40240000 	.word	0x40240000
 8013ed4:	401c0000 	.word	0x401c0000
 8013ed8:	40140000 	.word	0x40140000
 8013edc:	3fe00000 	.word	0x3fe00000
 8013ee0:	4baf      	ldr	r3, [pc, #700]	; (80141a0 <_dtoa_r+0x920>)
 8013ee2:	f7ec fba9 	bl	8000638 <__aeabi_dmul>
 8013ee6:	4606      	mov	r6, r0
 8013ee8:	460f      	mov	r7, r1
 8013eea:	e7ac      	b.n	8013e46 <_dtoa_r+0x5c6>
 8013eec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013ef0:	9d00      	ldr	r5, [sp, #0]
 8013ef2:	4642      	mov	r2, r8
 8013ef4:	464b      	mov	r3, r9
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	4639      	mov	r1, r7
 8013efa:	f7ec fcc7 	bl	800088c <__aeabi_ddiv>
 8013efe:	f7ec fe4b 	bl	8000b98 <__aeabi_d2iz>
 8013f02:	9002      	str	r0, [sp, #8]
 8013f04:	f7ec fb2e 	bl	8000564 <__aeabi_i2d>
 8013f08:	4642      	mov	r2, r8
 8013f0a:	464b      	mov	r3, r9
 8013f0c:	f7ec fb94 	bl	8000638 <__aeabi_dmul>
 8013f10:	4602      	mov	r2, r0
 8013f12:	460b      	mov	r3, r1
 8013f14:	4630      	mov	r0, r6
 8013f16:	4639      	mov	r1, r7
 8013f18:	f7ec f9d6 	bl	80002c8 <__aeabi_dsub>
 8013f1c:	9e02      	ldr	r6, [sp, #8]
 8013f1e:	9f01      	ldr	r7, [sp, #4]
 8013f20:	3630      	adds	r6, #48	; 0x30
 8013f22:	f805 6b01 	strb.w	r6, [r5], #1
 8013f26:	9e00      	ldr	r6, [sp, #0]
 8013f28:	1bae      	subs	r6, r5, r6
 8013f2a:	42b7      	cmp	r7, r6
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	460b      	mov	r3, r1
 8013f30:	d137      	bne.n	8013fa2 <_dtoa_r+0x722>
 8013f32:	f7ec f9cb 	bl	80002cc <__adddf3>
 8013f36:	4642      	mov	r2, r8
 8013f38:	464b      	mov	r3, r9
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	460f      	mov	r7, r1
 8013f3e:	f7ec fe0b 	bl	8000b58 <__aeabi_dcmpgt>
 8013f42:	b9c8      	cbnz	r0, 8013f78 <_dtoa_r+0x6f8>
 8013f44:	4642      	mov	r2, r8
 8013f46:	464b      	mov	r3, r9
 8013f48:	4630      	mov	r0, r6
 8013f4a:	4639      	mov	r1, r7
 8013f4c:	f7ec fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8013f50:	b110      	cbz	r0, 8013f58 <_dtoa_r+0x6d8>
 8013f52:	9b02      	ldr	r3, [sp, #8]
 8013f54:	07d9      	lsls	r1, r3, #31
 8013f56:	d40f      	bmi.n	8013f78 <_dtoa_r+0x6f8>
 8013f58:	4620      	mov	r0, r4
 8013f5a:	4659      	mov	r1, fp
 8013f5c:	f000 fcfe 	bl	801495c <_Bfree>
 8013f60:	2300      	movs	r3, #0
 8013f62:	702b      	strb	r3, [r5, #0]
 8013f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f66:	f10a 0001 	add.w	r0, sl, #1
 8013f6a:	6018      	str	r0, [r3, #0]
 8013f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f43f acd8 	beq.w	8013924 <_dtoa_r+0xa4>
 8013f74:	601d      	str	r5, [r3, #0]
 8013f76:	e4d5      	b.n	8013924 <_dtoa_r+0xa4>
 8013f78:	f8cd a01c 	str.w	sl, [sp, #28]
 8013f7c:	462b      	mov	r3, r5
 8013f7e:	461d      	mov	r5, r3
 8013f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f84:	2a39      	cmp	r2, #57	; 0x39
 8013f86:	d108      	bne.n	8013f9a <_dtoa_r+0x71a>
 8013f88:	9a00      	ldr	r2, [sp, #0]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d1f7      	bne.n	8013f7e <_dtoa_r+0x6fe>
 8013f8e:	9a07      	ldr	r2, [sp, #28]
 8013f90:	9900      	ldr	r1, [sp, #0]
 8013f92:	3201      	adds	r2, #1
 8013f94:	9207      	str	r2, [sp, #28]
 8013f96:	2230      	movs	r2, #48	; 0x30
 8013f98:	700a      	strb	r2, [r1, #0]
 8013f9a:	781a      	ldrb	r2, [r3, #0]
 8013f9c:	3201      	adds	r2, #1
 8013f9e:	701a      	strb	r2, [r3, #0]
 8013fa0:	e78c      	b.n	8013ebc <_dtoa_r+0x63c>
 8013fa2:	4b7f      	ldr	r3, [pc, #508]	; (80141a0 <_dtoa_r+0x920>)
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	f7ec fb47 	bl	8000638 <__aeabi_dmul>
 8013faa:	2200      	movs	r2, #0
 8013fac:	2300      	movs	r3, #0
 8013fae:	4606      	mov	r6, r0
 8013fb0:	460f      	mov	r7, r1
 8013fb2:	f7ec fda9 	bl	8000b08 <__aeabi_dcmpeq>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d09b      	beq.n	8013ef2 <_dtoa_r+0x672>
 8013fba:	e7cd      	b.n	8013f58 <_dtoa_r+0x6d8>
 8013fbc:	9a08      	ldr	r2, [sp, #32]
 8013fbe:	2a00      	cmp	r2, #0
 8013fc0:	f000 80c4 	beq.w	801414c <_dtoa_r+0x8cc>
 8013fc4:	9a05      	ldr	r2, [sp, #20]
 8013fc6:	2a01      	cmp	r2, #1
 8013fc8:	f300 80a8 	bgt.w	801411c <_dtoa_r+0x89c>
 8013fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013fce:	2a00      	cmp	r2, #0
 8013fd0:	f000 80a0 	beq.w	8014114 <_dtoa_r+0x894>
 8013fd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013fd8:	9e06      	ldr	r6, [sp, #24]
 8013fda:	4645      	mov	r5, r8
 8013fdc:	9a04      	ldr	r2, [sp, #16]
 8013fde:	2101      	movs	r1, #1
 8013fe0:	441a      	add	r2, r3
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	4498      	add	r8, r3
 8013fe6:	9204      	str	r2, [sp, #16]
 8013fe8:	f000 fd74 	bl	8014ad4 <__i2b>
 8013fec:	4607      	mov	r7, r0
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	dd0b      	ble.n	801400a <_dtoa_r+0x78a>
 8013ff2:	9b04      	ldr	r3, [sp, #16]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dd08      	ble.n	801400a <_dtoa_r+0x78a>
 8013ff8:	42ab      	cmp	r3, r5
 8013ffa:	9a04      	ldr	r2, [sp, #16]
 8013ffc:	bfa8      	it	ge
 8013ffe:	462b      	movge	r3, r5
 8014000:	eba8 0803 	sub.w	r8, r8, r3
 8014004:	1aed      	subs	r5, r5, r3
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	9304      	str	r3, [sp, #16]
 801400a:	9b06      	ldr	r3, [sp, #24]
 801400c:	b1fb      	cbz	r3, 801404e <_dtoa_r+0x7ce>
 801400e:	9b08      	ldr	r3, [sp, #32]
 8014010:	2b00      	cmp	r3, #0
 8014012:	f000 809f 	beq.w	8014154 <_dtoa_r+0x8d4>
 8014016:	2e00      	cmp	r6, #0
 8014018:	dd11      	ble.n	801403e <_dtoa_r+0x7be>
 801401a:	4639      	mov	r1, r7
 801401c:	4632      	mov	r2, r6
 801401e:	4620      	mov	r0, r4
 8014020:	f000 fe14 	bl	8014c4c <__pow5mult>
 8014024:	465a      	mov	r2, fp
 8014026:	4601      	mov	r1, r0
 8014028:	4607      	mov	r7, r0
 801402a:	4620      	mov	r0, r4
 801402c:	f000 fd68 	bl	8014b00 <__multiply>
 8014030:	4659      	mov	r1, fp
 8014032:	9007      	str	r0, [sp, #28]
 8014034:	4620      	mov	r0, r4
 8014036:	f000 fc91 	bl	801495c <_Bfree>
 801403a:	9b07      	ldr	r3, [sp, #28]
 801403c:	469b      	mov	fp, r3
 801403e:	9b06      	ldr	r3, [sp, #24]
 8014040:	1b9a      	subs	r2, r3, r6
 8014042:	d004      	beq.n	801404e <_dtoa_r+0x7ce>
 8014044:	4659      	mov	r1, fp
 8014046:	4620      	mov	r0, r4
 8014048:	f000 fe00 	bl	8014c4c <__pow5mult>
 801404c:	4683      	mov	fp, r0
 801404e:	2101      	movs	r1, #1
 8014050:	4620      	mov	r0, r4
 8014052:	f000 fd3f 	bl	8014ad4 <__i2b>
 8014056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014058:	2b00      	cmp	r3, #0
 801405a:	4606      	mov	r6, r0
 801405c:	dd7c      	ble.n	8014158 <_dtoa_r+0x8d8>
 801405e:	461a      	mov	r2, r3
 8014060:	4601      	mov	r1, r0
 8014062:	4620      	mov	r0, r4
 8014064:	f000 fdf2 	bl	8014c4c <__pow5mult>
 8014068:	9b05      	ldr	r3, [sp, #20]
 801406a:	2b01      	cmp	r3, #1
 801406c:	4606      	mov	r6, r0
 801406e:	dd76      	ble.n	801415e <_dtoa_r+0x8de>
 8014070:	2300      	movs	r3, #0
 8014072:	9306      	str	r3, [sp, #24]
 8014074:	6933      	ldr	r3, [r6, #16]
 8014076:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801407a:	6918      	ldr	r0, [r3, #16]
 801407c:	f000 fcda 	bl	8014a34 <__hi0bits>
 8014080:	f1c0 0020 	rsb	r0, r0, #32
 8014084:	9b04      	ldr	r3, [sp, #16]
 8014086:	4418      	add	r0, r3
 8014088:	f010 001f 	ands.w	r0, r0, #31
 801408c:	f000 8086 	beq.w	801419c <_dtoa_r+0x91c>
 8014090:	f1c0 0320 	rsb	r3, r0, #32
 8014094:	2b04      	cmp	r3, #4
 8014096:	dd7f      	ble.n	8014198 <_dtoa_r+0x918>
 8014098:	f1c0 001c 	rsb	r0, r0, #28
 801409c:	9b04      	ldr	r3, [sp, #16]
 801409e:	4403      	add	r3, r0
 80140a0:	4480      	add	r8, r0
 80140a2:	4405      	add	r5, r0
 80140a4:	9304      	str	r3, [sp, #16]
 80140a6:	f1b8 0f00 	cmp.w	r8, #0
 80140aa:	dd05      	ble.n	80140b8 <_dtoa_r+0x838>
 80140ac:	4659      	mov	r1, fp
 80140ae:	4642      	mov	r2, r8
 80140b0:	4620      	mov	r0, r4
 80140b2:	f000 fe25 	bl	8014d00 <__lshift>
 80140b6:	4683      	mov	fp, r0
 80140b8:	9b04      	ldr	r3, [sp, #16]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	dd05      	ble.n	80140ca <_dtoa_r+0x84a>
 80140be:	4631      	mov	r1, r6
 80140c0:	461a      	mov	r2, r3
 80140c2:	4620      	mov	r0, r4
 80140c4:	f000 fe1c 	bl	8014d00 <__lshift>
 80140c8:	4606      	mov	r6, r0
 80140ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d069      	beq.n	80141a4 <_dtoa_r+0x924>
 80140d0:	4631      	mov	r1, r6
 80140d2:	4658      	mov	r0, fp
 80140d4:	f000 fe80 	bl	8014dd8 <__mcmp>
 80140d8:	2800      	cmp	r0, #0
 80140da:	da63      	bge.n	80141a4 <_dtoa_r+0x924>
 80140dc:	2300      	movs	r3, #0
 80140de:	4659      	mov	r1, fp
 80140e0:	220a      	movs	r2, #10
 80140e2:	4620      	mov	r0, r4
 80140e4:	f000 fc5c 	bl	80149a0 <__multadd>
 80140e8:	9b08      	ldr	r3, [sp, #32]
 80140ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80140ee:	4683      	mov	fp, r0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	f000 818f 	beq.w	8014414 <_dtoa_r+0xb94>
 80140f6:	4639      	mov	r1, r7
 80140f8:	2300      	movs	r3, #0
 80140fa:	220a      	movs	r2, #10
 80140fc:	4620      	mov	r0, r4
 80140fe:	f000 fc4f 	bl	80149a0 <__multadd>
 8014102:	f1b9 0f00 	cmp.w	r9, #0
 8014106:	4607      	mov	r7, r0
 8014108:	f300 808e 	bgt.w	8014228 <_dtoa_r+0x9a8>
 801410c:	9b05      	ldr	r3, [sp, #20]
 801410e:	2b02      	cmp	r3, #2
 8014110:	dc50      	bgt.n	80141b4 <_dtoa_r+0x934>
 8014112:	e089      	b.n	8014228 <_dtoa_r+0x9a8>
 8014114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801411a:	e75d      	b.n	8013fd8 <_dtoa_r+0x758>
 801411c:	9b01      	ldr	r3, [sp, #4]
 801411e:	1e5e      	subs	r6, r3, #1
 8014120:	9b06      	ldr	r3, [sp, #24]
 8014122:	42b3      	cmp	r3, r6
 8014124:	bfbf      	itttt	lt
 8014126:	9b06      	ldrlt	r3, [sp, #24]
 8014128:	9606      	strlt	r6, [sp, #24]
 801412a:	1af2      	sublt	r2, r6, r3
 801412c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801412e:	bfb6      	itet	lt
 8014130:	189b      	addlt	r3, r3, r2
 8014132:	1b9e      	subge	r6, r3, r6
 8014134:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014136:	9b01      	ldr	r3, [sp, #4]
 8014138:	bfb8      	it	lt
 801413a:	2600      	movlt	r6, #0
 801413c:	2b00      	cmp	r3, #0
 801413e:	bfb5      	itete	lt
 8014140:	eba8 0503 	sublt.w	r5, r8, r3
 8014144:	9b01      	ldrge	r3, [sp, #4]
 8014146:	2300      	movlt	r3, #0
 8014148:	4645      	movge	r5, r8
 801414a:	e747      	b.n	8013fdc <_dtoa_r+0x75c>
 801414c:	9e06      	ldr	r6, [sp, #24]
 801414e:	9f08      	ldr	r7, [sp, #32]
 8014150:	4645      	mov	r5, r8
 8014152:	e74c      	b.n	8013fee <_dtoa_r+0x76e>
 8014154:	9a06      	ldr	r2, [sp, #24]
 8014156:	e775      	b.n	8014044 <_dtoa_r+0x7c4>
 8014158:	9b05      	ldr	r3, [sp, #20]
 801415a:	2b01      	cmp	r3, #1
 801415c:	dc18      	bgt.n	8014190 <_dtoa_r+0x910>
 801415e:	9b02      	ldr	r3, [sp, #8]
 8014160:	b9b3      	cbnz	r3, 8014190 <_dtoa_r+0x910>
 8014162:	9b03      	ldr	r3, [sp, #12]
 8014164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014168:	b9a3      	cbnz	r3, 8014194 <_dtoa_r+0x914>
 801416a:	9b03      	ldr	r3, [sp, #12]
 801416c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014170:	0d1b      	lsrs	r3, r3, #20
 8014172:	051b      	lsls	r3, r3, #20
 8014174:	b12b      	cbz	r3, 8014182 <_dtoa_r+0x902>
 8014176:	9b04      	ldr	r3, [sp, #16]
 8014178:	3301      	adds	r3, #1
 801417a:	9304      	str	r3, [sp, #16]
 801417c:	f108 0801 	add.w	r8, r8, #1
 8014180:	2301      	movs	r3, #1
 8014182:	9306      	str	r3, [sp, #24]
 8014184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014186:	2b00      	cmp	r3, #0
 8014188:	f47f af74 	bne.w	8014074 <_dtoa_r+0x7f4>
 801418c:	2001      	movs	r0, #1
 801418e:	e779      	b.n	8014084 <_dtoa_r+0x804>
 8014190:	2300      	movs	r3, #0
 8014192:	e7f6      	b.n	8014182 <_dtoa_r+0x902>
 8014194:	9b02      	ldr	r3, [sp, #8]
 8014196:	e7f4      	b.n	8014182 <_dtoa_r+0x902>
 8014198:	d085      	beq.n	80140a6 <_dtoa_r+0x826>
 801419a:	4618      	mov	r0, r3
 801419c:	301c      	adds	r0, #28
 801419e:	e77d      	b.n	801409c <_dtoa_r+0x81c>
 80141a0:	40240000 	.word	0x40240000
 80141a4:	9b01      	ldr	r3, [sp, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	dc38      	bgt.n	801421c <_dtoa_r+0x99c>
 80141aa:	9b05      	ldr	r3, [sp, #20]
 80141ac:	2b02      	cmp	r3, #2
 80141ae:	dd35      	ble.n	801421c <_dtoa_r+0x99c>
 80141b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80141b4:	f1b9 0f00 	cmp.w	r9, #0
 80141b8:	d10d      	bne.n	80141d6 <_dtoa_r+0x956>
 80141ba:	4631      	mov	r1, r6
 80141bc:	464b      	mov	r3, r9
 80141be:	2205      	movs	r2, #5
 80141c0:	4620      	mov	r0, r4
 80141c2:	f000 fbed 	bl	80149a0 <__multadd>
 80141c6:	4601      	mov	r1, r0
 80141c8:	4606      	mov	r6, r0
 80141ca:	4658      	mov	r0, fp
 80141cc:	f000 fe04 	bl	8014dd8 <__mcmp>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	f73f adbd 	bgt.w	8013d50 <_dtoa_r+0x4d0>
 80141d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d8:	9d00      	ldr	r5, [sp, #0]
 80141da:	ea6f 0a03 	mvn.w	sl, r3
 80141de:	f04f 0800 	mov.w	r8, #0
 80141e2:	4631      	mov	r1, r6
 80141e4:	4620      	mov	r0, r4
 80141e6:	f000 fbb9 	bl	801495c <_Bfree>
 80141ea:	2f00      	cmp	r7, #0
 80141ec:	f43f aeb4 	beq.w	8013f58 <_dtoa_r+0x6d8>
 80141f0:	f1b8 0f00 	cmp.w	r8, #0
 80141f4:	d005      	beq.n	8014202 <_dtoa_r+0x982>
 80141f6:	45b8      	cmp	r8, r7
 80141f8:	d003      	beq.n	8014202 <_dtoa_r+0x982>
 80141fa:	4641      	mov	r1, r8
 80141fc:	4620      	mov	r0, r4
 80141fe:	f000 fbad 	bl	801495c <_Bfree>
 8014202:	4639      	mov	r1, r7
 8014204:	4620      	mov	r0, r4
 8014206:	f000 fba9 	bl	801495c <_Bfree>
 801420a:	e6a5      	b.n	8013f58 <_dtoa_r+0x6d8>
 801420c:	2600      	movs	r6, #0
 801420e:	4637      	mov	r7, r6
 8014210:	e7e1      	b.n	80141d6 <_dtoa_r+0x956>
 8014212:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014214:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014218:	4637      	mov	r7, r6
 801421a:	e599      	b.n	8013d50 <_dtoa_r+0x4d0>
 801421c:	9b08      	ldr	r3, [sp, #32]
 801421e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 80fd 	beq.w	8014422 <_dtoa_r+0xba2>
 8014228:	2d00      	cmp	r5, #0
 801422a:	dd05      	ble.n	8014238 <_dtoa_r+0x9b8>
 801422c:	4639      	mov	r1, r7
 801422e:	462a      	mov	r2, r5
 8014230:	4620      	mov	r0, r4
 8014232:	f000 fd65 	bl	8014d00 <__lshift>
 8014236:	4607      	mov	r7, r0
 8014238:	9b06      	ldr	r3, [sp, #24]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d05c      	beq.n	80142f8 <_dtoa_r+0xa78>
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	4620      	mov	r0, r4
 8014242:	f000 fb4b 	bl	80148dc <_Balloc>
 8014246:	4605      	mov	r5, r0
 8014248:	b928      	cbnz	r0, 8014256 <_dtoa_r+0x9d6>
 801424a:	4b80      	ldr	r3, [pc, #512]	; (801444c <_dtoa_r+0xbcc>)
 801424c:	4602      	mov	r2, r0
 801424e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014252:	f7ff bb2e 	b.w	80138b2 <_dtoa_r+0x32>
 8014256:	693a      	ldr	r2, [r7, #16]
 8014258:	3202      	adds	r2, #2
 801425a:	0092      	lsls	r2, r2, #2
 801425c:	f107 010c 	add.w	r1, r7, #12
 8014260:	300c      	adds	r0, #12
 8014262:	f7fe fba5 	bl	80129b0 <memcpy>
 8014266:	2201      	movs	r2, #1
 8014268:	4629      	mov	r1, r5
 801426a:	4620      	mov	r0, r4
 801426c:	f000 fd48 	bl	8014d00 <__lshift>
 8014270:	9b00      	ldr	r3, [sp, #0]
 8014272:	3301      	adds	r3, #1
 8014274:	9301      	str	r3, [sp, #4]
 8014276:	9b00      	ldr	r3, [sp, #0]
 8014278:	444b      	add	r3, r9
 801427a:	9307      	str	r3, [sp, #28]
 801427c:	9b02      	ldr	r3, [sp, #8]
 801427e:	f003 0301 	and.w	r3, r3, #1
 8014282:	46b8      	mov	r8, r7
 8014284:	9306      	str	r3, [sp, #24]
 8014286:	4607      	mov	r7, r0
 8014288:	9b01      	ldr	r3, [sp, #4]
 801428a:	4631      	mov	r1, r6
 801428c:	3b01      	subs	r3, #1
 801428e:	4658      	mov	r0, fp
 8014290:	9302      	str	r3, [sp, #8]
 8014292:	f7ff fa69 	bl	8013768 <quorem>
 8014296:	4603      	mov	r3, r0
 8014298:	3330      	adds	r3, #48	; 0x30
 801429a:	9004      	str	r0, [sp, #16]
 801429c:	4641      	mov	r1, r8
 801429e:	4658      	mov	r0, fp
 80142a0:	9308      	str	r3, [sp, #32]
 80142a2:	f000 fd99 	bl	8014dd8 <__mcmp>
 80142a6:	463a      	mov	r2, r7
 80142a8:	4681      	mov	r9, r0
 80142aa:	4631      	mov	r1, r6
 80142ac:	4620      	mov	r0, r4
 80142ae:	f000 fdaf 	bl	8014e10 <__mdiff>
 80142b2:	68c2      	ldr	r2, [r0, #12]
 80142b4:	9b08      	ldr	r3, [sp, #32]
 80142b6:	4605      	mov	r5, r0
 80142b8:	bb02      	cbnz	r2, 80142fc <_dtoa_r+0xa7c>
 80142ba:	4601      	mov	r1, r0
 80142bc:	4658      	mov	r0, fp
 80142be:	f000 fd8b 	bl	8014dd8 <__mcmp>
 80142c2:	9b08      	ldr	r3, [sp, #32]
 80142c4:	4602      	mov	r2, r0
 80142c6:	4629      	mov	r1, r5
 80142c8:	4620      	mov	r0, r4
 80142ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80142ce:	f000 fb45 	bl	801495c <_Bfree>
 80142d2:	9b05      	ldr	r3, [sp, #20]
 80142d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142d6:	9d01      	ldr	r5, [sp, #4]
 80142d8:	ea43 0102 	orr.w	r1, r3, r2
 80142dc:	9b06      	ldr	r3, [sp, #24]
 80142de:	430b      	orrs	r3, r1
 80142e0:	9b08      	ldr	r3, [sp, #32]
 80142e2:	d10d      	bne.n	8014300 <_dtoa_r+0xa80>
 80142e4:	2b39      	cmp	r3, #57	; 0x39
 80142e6:	d029      	beq.n	801433c <_dtoa_r+0xabc>
 80142e8:	f1b9 0f00 	cmp.w	r9, #0
 80142ec:	dd01      	ble.n	80142f2 <_dtoa_r+0xa72>
 80142ee:	9b04      	ldr	r3, [sp, #16]
 80142f0:	3331      	adds	r3, #49	; 0x31
 80142f2:	9a02      	ldr	r2, [sp, #8]
 80142f4:	7013      	strb	r3, [r2, #0]
 80142f6:	e774      	b.n	80141e2 <_dtoa_r+0x962>
 80142f8:	4638      	mov	r0, r7
 80142fa:	e7b9      	b.n	8014270 <_dtoa_r+0x9f0>
 80142fc:	2201      	movs	r2, #1
 80142fe:	e7e2      	b.n	80142c6 <_dtoa_r+0xa46>
 8014300:	f1b9 0f00 	cmp.w	r9, #0
 8014304:	db06      	blt.n	8014314 <_dtoa_r+0xa94>
 8014306:	9905      	ldr	r1, [sp, #20]
 8014308:	ea41 0909 	orr.w	r9, r1, r9
 801430c:	9906      	ldr	r1, [sp, #24]
 801430e:	ea59 0101 	orrs.w	r1, r9, r1
 8014312:	d120      	bne.n	8014356 <_dtoa_r+0xad6>
 8014314:	2a00      	cmp	r2, #0
 8014316:	ddec      	ble.n	80142f2 <_dtoa_r+0xa72>
 8014318:	4659      	mov	r1, fp
 801431a:	2201      	movs	r2, #1
 801431c:	4620      	mov	r0, r4
 801431e:	9301      	str	r3, [sp, #4]
 8014320:	f000 fcee 	bl	8014d00 <__lshift>
 8014324:	4631      	mov	r1, r6
 8014326:	4683      	mov	fp, r0
 8014328:	f000 fd56 	bl	8014dd8 <__mcmp>
 801432c:	2800      	cmp	r0, #0
 801432e:	9b01      	ldr	r3, [sp, #4]
 8014330:	dc02      	bgt.n	8014338 <_dtoa_r+0xab8>
 8014332:	d1de      	bne.n	80142f2 <_dtoa_r+0xa72>
 8014334:	07da      	lsls	r2, r3, #31
 8014336:	d5dc      	bpl.n	80142f2 <_dtoa_r+0xa72>
 8014338:	2b39      	cmp	r3, #57	; 0x39
 801433a:	d1d8      	bne.n	80142ee <_dtoa_r+0xa6e>
 801433c:	9a02      	ldr	r2, [sp, #8]
 801433e:	2339      	movs	r3, #57	; 0x39
 8014340:	7013      	strb	r3, [r2, #0]
 8014342:	462b      	mov	r3, r5
 8014344:	461d      	mov	r5, r3
 8014346:	3b01      	subs	r3, #1
 8014348:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801434c:	2a39      	cmp	r2, #57	; 0x39
 801434e:	d050      	beq.n	80143f2 <_dtoa_r+0xb72>
 8014350:	3201      	adds	r2, #1
 8014352:	701a      	strb	r2, [r3, #0]
 8014354:	e745      	b.n	80141e2 <_dtoa_r+0x962>
 8014356:	2a00      	cmp	r2, #0
 8014358:	dd03      	ble.n	8014362 <_dtoa_r+0xae2>
 801435a:	2b39      	cmp	r3, #57	; 0x39
 801435c:	d0ee      	beq.n	801433c <_dtoa_r+0xabc>
 801435e:	3301      	adds	r3, #1
 8014360:	e7c7      	b.n	80142f2 <_dtoa_r+0xa72>
 8014362:	9a01      	ldr	r2, [sp, #4]
 8014364:	9907      	ldr	r1, [sp, #28]
 8014366:	f802 3c01 	strb.w	r3, [r2, #-1]
 801436a:	428a      	cmp	r2, r1
 801436c:	d02a      	beq.n	80143c4 <_dtoa_r+0xb44>
 801436e:	4659      	mov	r1, fp
 8014370:	2300      	movs	r3, #0
 8014372:	220a      	movs	r2, #10
 8014374:	4620      	mov	r0, r4
 8014376:	f000 fb13 	bl	80149a0 <__multadd>
 801437a:	45b8      	cmp	r8, r7
 801437c:	4683      	mov	fp, r0
 801437e:	f04f 0300 	mov.w	r3, #0
 8014382:	f04f 020a 	mov.w	r2, #10
 8014386:	4641      	mov	r1, r8
 8014388:	4620      	mov	r0, r4
 801438a:	d107      	bne.n	801439c <_dtoa_r+0xb1c>
 801438c:	f000 fb08 	bl	80149a0 <__multadd>
 8014390:	4680      	mov	r8, r0
 8014392:	4607      	mov	r7, r0
 8014394:	9b01      	ldr	r3, [sp, #4]
 8014396:	3301      	adds	r3, #1
 8014398:	9301      	str	r3, [sp, #4]
 801439a:	e775      	b.n	8014288 <_dtoa_r+0xa08>
 801439c:	f000 fb00 	bl	80149a0 <__multadd>
 80143a0:	4639      	mov	r1, r7
 80143a2:	4680      	mov	r8, r0
 80143a4:	2300      	movs	r3, #0
 80143a6:	220a      	movs	r2, #10
 80143a8:	4620      	mov	r0, r4
 80143aa:	f000 faf9 	bl	80149a0 <__multadd>
 80143ae:	4607      	mov	r7, r0
 80143b0:	e7f0      	b.n	8014394 <_dtoa_r+0xb14>
 80143b2:	f1b9 0f00 	cmp.w	r9, #0
 80143b6:	9a00      	ldr	r2, [sp, #0]
 80143b8:	bfcc      	ite	gt
 80143ba:	464d      	movgt	r5, r9
 80143bc:	2501      	movle	r5, #1
 80143be:	4415      	add	r5, r2
 80143c0:	f04f 0800 	mov.w	r8, #0
 80143c4:	4659      	mov	r1, fp
 80143c6:	2201      	movs	r2, #1
 80143c8:	4620      	mov	r0, r4
 80143ca:	9301      	str	r3, [sp, #4]
 80143cc:	f000 fc98 	bl	8014d00 <__lshift>
 80143d0:	4631      	mov	r1, r6
 80143d2:	4683      	mov	fp, r0
 80143d4:	f000 fd00 	bl	8014dd8 <__mcmp>
 80143d8:	2800      	cmp	r0, #0
 80143da:	dcb2      	bgt.n	8014342 <_dtoa_r+0xac2>
 80143dc:	d102      	bne.n	80143e4 <_dtoa_r+0xb64>
 80143de:	9b01      	ldr	r3, [sp, #4]
 80143e0:	07db      	lsls	r3, r3, #31
 80143e2:	d4ae      	bmi.n	8014342 <_dtoa_r+0xac2>
 80143e4:	462b      	mov	r3, r5
 80143e6:	461d      	mov	r5, r3
 80143e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143ec:	2a30      	cmp	r2, #48	; 0x30
 80143ee:	d0fa      	beq.n	80143e6 <_dtoa_r+0xb66>
 80143f0:	e6f7      	b.n	80141e2 <_dtoa_r+0x962>
 80143f2:	9a00      	ldr	r2, [sp, #0]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d1a5      	bne.n	8014344 <_dtoa_r+0xac4>
 80143f8:	f10a 0a01 	add.w	sl, sl, #1
 80143fc:	2331      	movs	r3, #49	; 0x31
 80143fe:	e779      	b.n	80142f4 <_dtoa_r+0xa74>
 8014400:	4b13      	ldr	r3, [pc, #76]	; (8014450 <_dtoa_r+0xbd0>)
 8014402:	f7ff baaf 	b.w	8013964 <_dtoa_r+0xe4>
 8014406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014408:	2b00      	cmp	r3, #0
 801440a:	f47f aa86 	bne.w	801391a <_dtoa_r+0x9a>
 801440e:	4b11      	ldr	r3, [pc, #68]	; (8014454 <_dtoa_r+0xbd4>)
 8014410:	f7ff baa8 	b.w	8013964 <_dtoa_r+0xe4>
 8014414:	f1b9 0f00 	cmp.w	r9, #0
 8014418:	dc03      	bgt.n	8014422 <_dtoa_r+0xba2>
 801441a:	9b05      	ldr	r3, [sp, #20]
 801441c:	2b02      	cmp	r3, #2
 801441e:	f73f aec9 	bgt.w	80141b4 <_dtoa_r+0x934>
 8014422:	9d00      	ldr	r5, [sp, #0]
 8014424:	4631      	mov	r1, r6
 8014426:	4658      	mov	r0, fp
 8014428:	f7ff f99e 	bl	8013768 <quorem>
 801442c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014430:	f805 3b01 	strb.w	r3, [r5], #1
 8014434:	9a00      	ldr	r2, [sp, #0]
 8014436:	1aaa      	subs	r2, r5, r2
 8014438:	4591      	cmp	r9, r2
 801443a:	ddba      	ble.n	80143b2 <_dtoa_r+0xb32>
 801443c:	4659      	mov	r1, fp
 801443e:	2300      	movs	r3, #0
 8014440:	220a      	movs	r2, #10
 8014442:	4620      	mov	r0, r4
 8014444:	f000 faac 	bl	80149a0 <__multadd>
 8014448:	4683      	mov	fp, r0
 801444a:	e7eb      	b.n	8014424 <_dtoa_r+0xba4>
 801444c:	0801b60f 	.word	0x0801b60f
 8014450:	0801b52c 	.word	0x0801b52c
 8014454:	0801b58c 	.word	0x0801b58c

08014458 <__sflush_r>:
 8014458:	898a      	ldrh	r2, [r1, #12]
 801445a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801445e:	4605      	mov	r5, r0
 8014460:	0710      	lsls	r0, r2, #28
 8014462:	460c      	mov	r4, r1
 8014464:	d458      	bmi.n	8014518 <__sflush_r+0xc0>
 8014466:	684b      	ldr	r3, [r1, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	dc05      	bgt.n	8014478 <__sflush_r+0x20>
 801446c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801446e:	2b00      	cmp	r3, #0
 8014470:	dc02      	bgt.n	8014478 <__sflush_r+0x20>
 8014472:	2000      	movs	r0, #0
 8014474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801447a:	2e00      	cmp	r6, #0
 801447c:	d0f9      	beq.n	8014472 <__sflush_r+0x1a>
 801447e:	2300      	movs	r3, #0
 8014480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014484:	682f      	ldr	r7, [r5, #0]
 8014486:	602b      	str	r3, [r5, #0]
 8014488:	d032      	beq.n	80144f0 <__sflush_r+0x98>
 801448a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801448c:	89a3      	ldrh	r3, [r4, #12]
 801448e:	075a      	lsls	r2, r3, #29
 8014490:	d505      	bpl.n	801449e <__sflush_r+0x46>
 8014492:	6863      	ldr	r3, [r4, #4]
 8014494:	1ac0      	subs	r0, r0, r3
 8014496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014498:	b10b      	cbz	r3, 801449e <__sflush_r+0x46>
 801449a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801449c:	1ac0      	subs	r0, r0, r3
 801449e:	2300      	movs	r3, #0
 80144a0:	4602      	mov	r2, r0
 80144a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144a4:	6a21      	ldr	r1, [r4, #32]
 80144a6:	4628      	mov	r0, r5
 80144a8:	47b0      	blx	r6
 80144aa:	1c43      	adds	r3, r0, #1
 80144ac:	89a3      	ldrh	r3, [r4, #12]
 80144ae:	d106      	bne.n	80144be <__sflush_r+0x66>
 80144b0:	6829      	ldr	r1, [r5, #0]
 80144b2:	291d      	cmp	r1, #29
 80144b4:	d82c      	bhi.n	8014510 <__sflush_r+0xb8>
 80144b6:	4a2a      	ldr	r2, [pc, #168]	; (8014560 <__sflush_r+0x108>)
 80144b8:	40ca      	lsrs	r2, r1
 80144ba:	07d6      	lsls	r6, r2, #31
 80144bc:	d528      	bpl.n	8014510 <__sflush_r+0xb8>
 80144be:	2200      	movs	r2, #0
 80144c0:	6062      	str	r2, [r4, #4]
 80144c2:	04d9      	lsls	r1, r3, #19
 80144c4:	6922      	ldr	r2, [r4, #16]
 80144c6:	6022      	str	r2, [r4, #0]
 80144c8:	d504      	bpl.n	80144d4 <__sflush_r+0x7c>
 80144ca:	1c42      	adds	r2, r0, #1
 80144cc:	d101      	bne.n	80144d2 <__sflush_r+0x7a>
 80144ce:	682b      	ldr	r3, [r5, #0]
 80144d0:	b903      	cbnz	r3, 80144d4 <__sflush_r+0x7c>
 80144d2:	6560      	str	r0, [r4, #84]	; 0x54
 80144d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144d6:	602f      	str	r7, [r5, #0]
 80144d8:	2900      	cmp	r1, #0
 80144da:	d0ca      	beq.n	8014472 <__sflush_r+0x1a>
 80144dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144e0:	4299      	cmp	r1, r3
 80144e2:	d002      	beq.n	80144ea <__sflush_r+0x92>
 80144e4:	4628      	mov	r0, r5
 80144e6:	f7fe fa79 	bl	80129dc <_free_r>
 80144ea:	2000      	movs	r0, #0
 80144ec:	6360      	str	r0, [r4, #52]	; 0x34
 80144ee:	e7c1      	b.n	8014474 <__sflush_r+0x1c>
 80144f0:	6a21      	ldr	r1, [r4, #32]
 80144f2:	2301      	movs	r3, #1
 80144f4:	4628      	mov	r0, r5
 80144f6:	47b0      	blx	r6
 80144f8:	1c41      	adds	r1, r0, #1
 80144fa:	d1c7      	bne.n	801448c <__sflush_r+0x34>
 80144fc:	682b      	ldr	r3, [r5, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d0c4      	beq.n	801448c <__sflush_r+0x34>
 8014502:	2b1d      	cmp	r3, #29
 8014504:	d001      	beq.n	801450a <__sflush_r+0xb2>
 8014506:	2b16      	cmp	r3, #22
 8014508:	d101      	bne.n	801450e <__sflush_r+0xb6>
 801450a:	602f      	str	r7, [r5, #0]
 801450c:	e7b1      	b.n	8014472 <__sflush_r+0x1a>
 801450e:	89a3      	ldrh	r3, [r4, #12]
 8014510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014514:	81a3      	strh	r3, [r4, #12]
 8014516:	e7ad      	b.n	8014474 <__sflush_r+0x1c>
 8014518:	690f      	ldr	r7, [r1, #16]
 801451a:	2f00      	cmp	r7, #0
 801451c:	d0a9      	beq.n	8014472 <__sflush_r+0x1a>
 801451e:	0793      	lsls	r3, r2, #30
 8014520:	680e      	ldr	r6, [r1, #0]
 8014522:	bf08      	it	eq
 8014524:	694b      	ldreq	r3, [r1, #20]
 8014526:	600f      	str	r7, [r1, #0]
 8014528:	bf18      	it	ne
 801452a:	2300      	movne	r3, #0
 801452c:	eba6 0807 	sub.w	r8, r6, r7
 8014530:	608b      	str	r3, [r1, #8]
 8014532:	f1b8 0f00 	cmp.w	r8, #0
 8014536:	dd9c      	ble.n	8014472 <__sflush_r+0x1a>
 8014538:	6a21      	ldr	r1, [r4, #32]
 801453a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801453c:	4643      	mov	r3, r8
 801453e:	463a      	mov	r2, r7
 8014540:	4628      	mov	r0, r5
 8014542:	47b0      	blx	r6
 8014544:	2800      	cmp	r0, #0
 8014546:	dc06      	bgt.n	8014556 <__sflush_r+0xfe>
 8014548:	89a3      	ldrh	r3, [r4, #12]
 801454a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801454e:	81a3      	strh	r3, [r4, #12]
 8014550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014554:	e78e      	b.n	8014474 <__sflush_r+0x1c>
 8014556:	4407      	add	r7, r0
 8014558:	eba8 0800 	sub.w	r8, r8, r0
 801455c:	e7e9      	b.n	8014532 <__sflush_r+0xda>
 801455e:	bf00      	nop
 8014560:	20400001 	.word	0x20400001

08014564 <_fflush_r>:
 8014564:	b538      	push	{r3, r4, r5, lr}
 8014566:	690b      	ldr	r3, [r1, #16]
 8014568:	4605      	mov	r5, r0
 801456a:	460c      	mov	r4, r1
 801456c:	b913      	cbnz	r3, 8014574 <_fflush_r+0x10>
 801456e:	2500      	movs	r5, #0
 8014570:	4628      	mov	r0, r5
 8014572:	bd38      	pop	{r3, r4, r5, pc}
 8014574:	b118      	cbz	r0, 801457e <_fflush_r+0x1a>
 8014576:	6983      	ldr	r3, [r0, #24]
 8014578:	b90b      	cbnz	r3, 801457e <_fflush_r+0x1a>
 801457a:	f000 f887 	bl	801468c <__sinit>
 801457e:	4b14      	ldr	r3, [pc, #80]	; (80145d0 <_fflush_r+0x6c>)
 8014580:	429c      	cmp	r4, r3
 8014582:	d11b      	bne.n	80145bc <_fflush_r+0x58>
 8014584:	686c      	ldr	r4, [r5, #4]
 8014586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d0ef      	beq.n	801456e <_fflush_r+0xa>
 801458e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014590:	07d0      	lsls	r0, r2, #31
 8014592:	d404      	bmi.n	801459e <_fflush_r+0x3a>
 8014594:	0599      	lsls	r1, r3, #22
 8014596:	d402      	bmi.n	801459e <_fflush_r+0x3a>
 8014598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801459a:	f000 f92c 	bl	80147f6 <__retarget_lock_acquire_recursive>
 801459e:	4628      	mov	r0, r5
 80145a0:	4621      	mov	r1, r4
 80145a2:	f7ff ff59 	bl	8014458 <__sflush_r>
 80145a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145a8:	07da      	lsls	r2, r3, #31
 80145aa:	4605      	mov	r5, r0
 80145ac:	d4e0      	bmi.n	8014570 <_fflush_r+0xc>
 80145ae:	89a3      	ldrh	r3, [r4, #12]
 80145b0:	059b      	lsls	r3, r3, #22
 80145b2:	d4dd      	bmi.n	8014570 <_fflush_r+0xc>
 80145b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145b6:	f000 f91f 	bl	80147f8 <__retarget_lock_release_recursive>
 80145ba:	e7d9      	b.n	8014570 <_fflush_r+0xc>
 80145bc:	4b05      	ldr	r3, [pc, #20]	; (80145d4 <_fflush_r+0x70>)
 80145be:	429c      	cmp	r4, r3
 80145c0:	d101      	bne.n	80145c6 <_fflush_r+0x62>
 80145c2:	68ac      	ldr	r4, [r5, #8]
 80145c4:	e7df      	b.n	8014586 <_fflush_r+0x22>
 80145c6:	4b04      	ldr	r3, [pc, #16]	; (80145d8 <_fflush_r+0x74>)
 80145c8:	429c      	cmp	r4, r3
 80145ca:	bf08      	it	eq
 80145cc:	68ec      	ldreq	r4, [r5, #12]
 80145ce:	e7da      	b.n	8014586 <_fflush_r+0x22>
 80145d0:	0801b640 	.word	0x0801b640
 80145d4:	0801b660 	.word	0x0801b660
 80145d8:	0801b620 	.word	0x0801b620

080145dc <std>:
 80145dc:	2300      	movs	r3, #0
 80145de:	b510      	push	{r4, lr}
 80145e0:	4604      	mov	r4, r0
 80145e2:	e9c0 3300 	strd	r3, r3, [r0]
 80145e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145ea:	6083      	str	r3, [r0, #8]
 80145ec:	8181      	strh	r1, [r0, #12]
 80145ee:	6643      	str	r3, [r0, #100]	; 0x64
 80145f0:	81c2      	strh	r2, [r0, #14]
 80145f2:	6183      	str	r3, [r0, #24]
 80145f4:	4619      	mov	r1, r3
 80145f6:	2208      	movs	r2, #8
 80145f8:	305c      	adds	r0, #92	; 0x5c
 80145fa:	f7fe f9e7 	bl	80129cc <memset>
 80145fe:	4b05      	ldr	r3, [pc, #20]	; (8014614 <std+0x38>)
 8014600:	6263      	str	r3, [r4, #36]	; 0x24
 8014602:	4b05      	ldr	r3, [pc, #20]	; (8014618 <std+0x3c>)
 8014604:	62a3      	str	r3, [r4, #40]	; 0x28
 8014606:	4b05      	ldr	r3, [pc, #20]	; (801461c <std+0x40>)
 8014608:	62e3      	str	r3, [r4, #44]	; 0x2c
 801460a:	4b05      	ldr	r3, [pc, #20]	; (8014620 <std+0x44>)
 801460c:	6224      	str	r4, [r4, #32]
 801460e:	6323      	str	r3, [r4, #48]	; 0x30
 8014610:	bd10      	pop	{r4, pc}
 8014612:	bf00      	nop
 8014614:	0801563d 	.word	0x0801563d
 8014618:	0801565f 	.word	0x0801565f
 801461c:	08015697 	.word	0x08015697
 8014620:	080156bb 	.word	0x080156bb

08014624 <_cleanup_r>:
 8014624:	4901      	ldr	r1, [pc, #4]	; (801462c <_cleanup_r+0x8>)
 8014626:	f000 b8c1 	b.w	80147ac <_fwalk_reent>
 801462a:	bf00      	nop
 801462c:	08014565 	.word	0x08014565

08014630 <__sfmoreglue>:
 8014630:	b570      	push	{r4, r5, r6, lr}
 8014632:	1e4a      	subs	r2, r1, #1
 8014634:	2568      	movs	r5, #104	; 0x68
 8014636:	4355      	muls	r5, r2
 8014638:	460e      	mov	r6, r1
 801463a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801463e:	f7fe fa1d 	bl	8012a7c <_malloc_r>
 8014642:	4604      	mov	r4, r0
 8014644:	b140      	cbz	r0, 8014658 <__sfmoreglue+0x28>
 8014646:	2100      	movs	r1, #0
 8014648:	e9c0 1600 	strd	r1, r6, [r0]
 801464c:	300c      	adds	r0, #12
 801464e:	60a0      	str	r0, [r4, #8]
 8014650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014654:	f7fe f9ba 	bl	80129cc <memset>
 8014658:	4620      	mov	r0, r4
 801465a:	bd70      	pop	{r4, r5, r6, pc}

0801465c <__sfp_lock_acquire>:
 801465c:	4801      	ldr	r0, [pc, #4]	; (8014664 <__sfp_lock_acquire+0x8>)
 801465e:	f000 b8ca 	b.w	80147f6 <__retarget_lock_acquire_recursive>
 8014662:	bf00      	nop
 8014664:	200417b4 	.word	0x200417b4

08014668 <__sfp_lock_release>:
 8014668:	4801      	ldr	r0, [pc, #4]	; (8014670 <__sfp_lock_release+0x8>)
 801466a:	f000 b8c5 	b.w	80147f8 <__retarget_lock_release_recursive>
 801466e:	bf00      	nop
 8014670:	200417b4 	.word	0x200417b4

08014674 <__sinit_lock_acquire>:
 8014674:	4801      	ldr	r0, [pc, #4]	; (801467c <__sinit_lock_acquire+0x8>)
 8014676:	f000 b8be 	b.w	80147f6 <__retarget_lock_acquire_recursive>
 801467a:	bf00      	nop
 801467c:	200417af 	.word	0x200417af

08014680 <__sinit_lock_release>:
 8014680:	4801      	ldr	r0, [pc, #4]	; (8014688 <__sinit_lock_release+0x8>)
 8014682:	f000 b8b9 	b.w	80147f8 <__retarget_lock_release_recursive>
 8014686:	bf00      	nop
 8014688:	200417af 	.word	0x200417af

0801468c <__sinit>:
 801468c:	b510      	push	{r4, lr}
 801468e:	4604      	mov	r4, r0
 8014690:	f7ff fff0 	bl	8014674 <__sinit_lock_acquire>
 8014694:	69a3      	ldr	r3, [r4, #24]
 8014696:	b11b      	cbz	r3, 80146a0 <__sinit+0x14>
 8014698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801469c:	f7ff bff0 	b.w	8014680 <__sinit_lock_release>
 80146a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80146a4:	6523      	str	r3, [r4, #80]	; 0x50
 80146a6:	4b13      	ldr	r3, [pc, #76]	; (80146f4 <__sinit+0x68>)
 80146a8:	4a13      	ldr	r2, [pc, #76]	; (80146f8 <__sinit+0x6c>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80146ae:	42a3      	cmp	r3, r4
 80146b0:	bf04      	itt	eq
 80146b2:	2301      	moveq	r3, #1
 80146b4:	61a3      	streq	r3, [r4, #24]
 80146b6:	4620      	mov	r0, r4
 80146b8:	f000 f820 	bl	80146fc <__sfp>
 80146bc:	6060      	str	r0, [r4, #4]
 80146be:	4620      	mov	r0, r4
 80146c0:	f000 f81c 	bl	80146fc <__sfp>
 80146c4:	60a0      	str	r0, [r4, #8]
 80146c6:	4620      	mov	r0, r4
 80146c8:	f000 f818 	bl	80146fc <__sfp>
 80146cc:	2200      	movs	r2, #0
 80146ce:	60e0      	str	r0, [r4, #12]
 80146d0:	2104      	movs	r1, #4
 80146d2:	6860      	ldr	r0, [r4, #4]
 80146d4:	f7ff ff82 	bl	80145dc <std>
 80146d8:	68a0      	ldr	r0, [r4, #8]
 80146da:	2201      	movs	r2, #1
 80146dc:	2109      	movs	r1, #9
 80146de:	f7ff ff7d 	bl	80145dc <std>
 80146e2:	68e0      	ldr	r0, [r4, #12]
 80146e4:	2202      	movs	r2, #2
 80146e6:	2112      	movs	r1, #18
 80146e8:	f7ff ff78 	bl	80145dc <std>
 80146ec:	2301      	movs	r3, #1
 80146ee:	61a3      	str	r3, [r4, #24]
 80146f0:	e7d2      	b.n	8014698 <__sinit+0xc>
 80146f2:	bf00      	nop
 80146f4:	0801b518 	.word	0x0801b518
 80146f8:	08014625 	.word	0x08014625

080146fc <__sfp>:
 80146fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146fe:	4607      	mov	r7, r0
 8014700:	f7ff ffac 	bl	801465c <__sfp_lock_acquire>
 8014704:	4b1e      	ldr	r3, [pc, #120]	; (8014780 <__sfp+0x84>)
 8014706:	681e      	ldr	r6, [r3, #0]
 8014708:	69b3      	ldr	r3, [r6, #24]
 801470a:	b913      	cbnz	r3, 8014712 <__sfp+0x16>
 801470c:	4630      	mov	r0, r6
 801470e:	f7ff ffbd 	bl	801468c <__sinit>
 8014712:	3648      	adds	r6, #72	; 0x48
 8014714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014718:	3b01      	subs	r3, #1
 801471a:	d503      	bpl.n	8014724 <__sfp+0x28>
 801471c:	6833      	ldr	r3, [r6, #0]
 801471e:	b30b      	cbz	r3, 8014764 <__sfp+0x68>
 8014720:	6836      	ldr	r6, [r6, #0]
 8014722:	e7f7      	b.n	8014714 <__sfp+0x18>
 8014724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014728:	b9d5      	cbnz	r5, 8014760 <__sfp+0x64>
 801472a:	4b16      	ldr	r3, [pc, #88]	; (8014784 <__sfp+0x88>)
 801472c:	60e3      	str	r3, [r4, #12]
 801472e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014732:	6665      	str	r5, [r4, #100]	; 0x64
 8014734:	f000 f85e 	bl	80147f4 <__retarget_lock_init_recursive>
 8014738:	f7ff ff96 	bl	8014668 <__sfp_lock_release>
 801473c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014744:	6025      	str	r5, [r4, #0]
 8014746:	61a5      	str	r5, [r4, #24]
 8014748:	2208      	movs	r2, #8
 801474a:	4629      	mov	r1, r5
 801474c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014750:	f7fe f93c 	bl	80129cc <memset>
 8014754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801475c:	4620      	mov	r0, r4
 801475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014760:	3468      	adds	r4, #104	; 0x68
 8014762:	e7d9      	b.n	8014718 <__sfp+0x1c>
 8014764:	2104      	movs	r1, #4
 8014766:	4638      	mov	r0, r7
 8014768:	f7ff ff62 	bl	8014630 <__sfmoreglue>
 801476c:	4604      	mov	r4, r0
 801476e:	6030      	str	r0, [r6, #0]
 8014770:	2800      	cmp	r0, #0
 8014772:	d1d5      	bne.n	8014720 <__sfp+0x24>
 8014774:	f7ff ff78 	bl	8014668 <__sfp_lock_release>
 8014778:	230c      	movs	r3, #12
 801477a:	603b      	str	r3, [r7, #0]
 801477c:	e7ee      	b.n	801475c <__sfp+0x60>
 801477e:	bf00      	nop
 8014780:	0801b518 	.word	0x0801b518
 8014784:	ffff0001 	.word	0xffff0001

08014788 <fiprintf>:
 8014788:	b40e      	push	{r1, r2, r3}
 801478a:	b503      	push	{r0, r1, lr}
 801478c:	4601      	mov	r1, r0
 801478e:	ab03      	add	r3, sp, #12
 8014790:	4805      	ldr	r0, [pc, #20]	; (80147a8 <fiprintf+0x20>)
 8014792:	f853 2b04 	ldr.w	r2, [r3], #4
 8014796:	6800      	ldr	r0, [r0, #0]
 8014798:	9301      	str	r3, [sp, #4]
 801479a:	f000 fdd7 	bl	801534c <_vfiprintf_r>
 801479e:	b002      	add	sp, #8
 80147a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80147a4:	b003      	add	sp, #12
 80147a6:	4770      	bx	lr
 80147a8:	20000780 	.word	0x20000780

080147ac <_fwalk_reent>:
 80147ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b0:	4606      	mov	r6, r0
 80147b2:	4688      	mov	r8, r1
 80147b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80147b8:	2700      	movs	r7, #0
 80147ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147be:	f1b9 0901 	subs.w	r9, r9, #1
 80147c2:	d505      	bpl.n	80147d0 <_fwalk_reent+0x24>
 80147c4:	6824      	ldr	r4, [r4, #0]
 80147c6:	2c00      	cmp	r4, #0
 80147c8:	d1f7      	bne.n	80147ba <_fwalk_reent+0xe>
 80147ca:	4638      	mov	r0, r7
 80147cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d0:	89ab      	ldrh	r3, [r5, #12]
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d907      	bls.n	80147e6 <_fwalk_reent+0x3a>
 80147d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147da:	3301      	adds	r3, #1
 80147dc:	d003      	beq.n	80147e6 <_fwalk_reent+0x3a>
 80147de:	4629      	mov	r1, r5
 80147e0:	4630      	mov	r0, r6
 80147e2:	47c0      	blx	r8
 80147e4:	4307      	orrs	r7, r0
 80147e6:	3568      	adds	r5, #104	; 0x68
 80147e8:	e7e9      	b.n	80147be <_fwalk_reent+0x12>
	...

080147ec <_localeconv_r>:
 80147ec:	4800      	ldr	r0, [pc, #0]	; (80147f0 <_localeconv_r+0x4>)
 80147ee:	4770      	bx	lr
 80147f0:	200008d4 	.word	0x200008d4

080147f4 <__retarget_lock_init_recursive>:
 80147f4:	4770      	bx	lr

080147f6 <__retarget_lock_acquire_recursive>:
 80147f6:	4770      	bx	lr

080147f8 <__retarget_lock_release_recursive>:
 80147f8:	4770      	bx	lr

080147fa <__swhatbuf_r>:
 80147fa:	b570      	push	{r4, r5, r6, lr}
 80147fc:	460e      	mov	r6, r1
 80147fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014802:	2900      	cmp	r1, #0
 8014804:	b096      	sub	sp, #88	; 0x58
 8014806:	4614      	mov	r4, r2
 8014808:	461d      	mov	r5, r3
 801480a:	da07      	bge.n	801481c <__swhatbuf_r+0x22>
 801480c:	2300      	movs	r3, #0
 801480e:	602b      	str	r3, [r5, #0]
 8014810:	89b3      	ldrh	r3, [r6, #12]
 8014812:	061a      	lsls	r2, r3, #24
 8014814:	d410      	bmi.n	8014838 <__swhatbuf_r+0x3e>
 8014816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801481a:	e00e      	b.n	801483a <__swhatbuf_r+0x40>
 801481c:	466a      	mov	r2, sp
 801481e:	f000 ff7b 	bl	8015718 <_fstat_r>
 8014822:	2800      	cmp	r0, #0
 8014824:	dbf2      	blt.n	801480c <__swhatbuf_r+0x12>
 8014826:	9a01      	ldr	r2, [sp, #4]
 8014828:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801482c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014830:	425a      	negs	r2, r3
 8014832:	415a      	adcs	r2, r3
 8014834:	602a      	str	r2, [r5, #0]
 8014836:	e7ee      	b.n	8014816 <__swhatbuf_r+0x1c>
 8014838:	2340      	movs	r3, #64	; 0x40
 801483a:	2000      	movs	r0, #0
 801483c:	6023      	str	r3, [r4, #0]
 801483e:	b016      	add	sp, #88	; 0x58
 8014840:	bd70      	pop	{r4, r5, r6, pc}
	...

08014844 <__smakebuf_r>:
 8014844:	898b      	ldrh	r3, [r1, #12]
 8014846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014848:	079d      	lsls	r5, r3, #30
 801484a:	4606      	mov	r6, r0
 801484c:	460c      	mov	r4, r1
 801484e:	d507      	bpl.n	8014860 <__smakebuf_r+0x1c>
 8014850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014854:	6023      	str	r3, [r4, #0]
 8014856:	6123      	str	r3, [r4, #16]
 8014858:	2301      	movs	r3, #1
 801485a:	6163      	str	r3, [r4, #20]
 801485c:	b002      	add	sp, #8
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	ab01      	add	r3, sp, #4
 8014862:	466a      	mov	r2, sp
 8014864:	f7ff ffc9 	bl	80147fa <__swhatbuf_r>
 8014868:	9900      	ldr	r1, [sp, #0]
 801486a:	4605      	mov	r5, r0
 801486c:	4630      	mov	r0, r6
 801486e:	f7fe f905 	bl	8012a7c <_malloc_r>
 8014872:	b948      	cbnz	r0, 8014888 <__smakebuf_r+0x44>
 8014874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014878:	059a      	lsls	r2, r3, #22
 801487a:	d4ef      	bmi.n	801485c <__smakebuf_r+0x18>
 801487c:	f023 0303 	bic.w	r3, r3, #3
 8014880:	f043 0302 	orr.w	r3, r3, #2
 8014884:	81a3      	strh	r3, [r4, #12]
 8014886:	e7e3      	b.n	8014850 <__smakebuf_r+0xc>
 8014888:	4b0d      	ldr	r3, [pc, #52]	; (80148c0 <__smakebuf_r+0x7c>)
 801488a:	62b3      	str	r3, [r6, #40]	; 0x28
 801488c:	89a3      	ldrh	r3, [r4, #12]
 801488e:	6020      	str	r0, [r4, #0]
 8014890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014894:	81a3      	strh	r3, [r4, #12]
 8014896:	9b00      	ldr	r3, [sp, #0]
 8014898:	6163      	str	r3, [r4, #20]
 801489a:	9b01      	ldr	r3, [sp, #4]
 801489c:	6120      	str	r0, [r4, #16]
 801489e:	b15b      	cbz	r3, 80148b8 <__smakebuf_r+0x74>
 80148a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148a4:	4630      	mov	r0, r6
 80148a6:	f000 ff49 	bl	801573c <_isatty_r>
 80148aa:	b128      	cbz	r0, 80148b8 <__smakebuf_r+0x74>
 80148ac:	89a3      	ldrh	r3, [r4, #12]
 80148ae:	f023 0303 	bic.w	r3, r3, #3
 80148b2:	f043 0301 	orr.w	r3, r3, #1
 80148b6:	81a3      	strh	r3, [r4, #12]
 80148b8:	89a0      	ldrh	r0, [r4, #12]
 80148ba:	4305      	orrs	r5, r0
 80148bc:	81a5      	strh	r5, [r4, #12]
 80148be:	e7cd      	b.n	801485c <__smakebuf_r+0x18>
 80148c0:	08014625 	.word	0x08014625

080148c4 <__malloc_lock>:
 80148c4:	4801      	ldr	r0, [pc, #4]	; (80148cc <__malloc_lock+0x8>)
 80148c6:	f7ff bf96 	b.w	80147f6 <__retarget_lock_acquire_recursive>
 80148ca:	bf00      	nop
 80148cc:	200417b0 	.word	0x200417b0

080148d0 <__malloc_unlock>:
 80148d0:	4801      	ldr	r0, [pc, #4]	; (80148d8 <__malloc_unlock+0x8>)
 80148d2:	f7ff bf91 	b.w	80147f8 <__retarget_lock_release_recursive>
 80148d6:	bf00      	nop
 80148d8:	200417b0 	.word	0x200417b0

080148dc <_Balloc>:
 80148dc:	b570      	push	{r4, r5, r6, lr}
 80148de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80148e0:	4604      	mov	r4, r0
 80148e2:	460d      	mov	r5, r1
 80148e4:	b976      	cbnz	r6, 8014904 <_Balloc+0x28>
 80148e6:	2010      	movs	r0, #16
 80148e8:	f7fe f85a 	bl	80129a0 <malloc>
 80148ec:	4602      	mov	r2, r0
 80148ee:	6260      	str	r0, [r4, #36]	; 0x24
 80148f0:	b920      	cbnz	r0, 80148fc <_Balloc+0x20>
 80148f2:	4b18      	ldr	r3, [pc, #96]	; (8014954 <_Balloc+0x78>)
 80148f4:	4818      	ldr	r0, [pc, #96]	; (8014958 <_Balloc+0x7c>)
 80148f6:	2166      	movs	r1, #102	; 0x66
 80148f8:	f7fe ff18 	bl	801372c <__assert_func>
 80148fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014900:	6006      	str	r6, [r0, #0]
 8014902:	60c6      	str	r6, [r0, #12]
 8014904:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014906:	68f3      	ldr	r3, [r6, #12]
 8014908:	b183      	cbz	r3, 801492c <_Balloc+0x50>
 801490a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014912:	b9b8      	cbnz	r0, 8014944 <_Balloc+0x68>
 8014914:	2101      	movs	r1, #1
 8014916:	fa01 f605 	lsl.w	r6, r1, r5
 801491a:	1d72      	adds	r2, r6, #5
 801491c:	0092      	lsls	r2, r2, #2
 801491e:	4620      	mov	r0, r4
 8014920:	f000 fb5a 	bl	8014fd8 <_calloc_r>
 8014924:	b160      	cbz	r0, 8014940 <_Balloc+0x64>
 8014926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801492a:	e00e      	b.n	801494a <_Balloc+0x6e>
 801492c:	2221      	movs	r2, #33	; 0x21
 801492e:	2104      	movs	r1, #4
 8014930:	4620      	mov	r0, r4
 8014932:	f000 fb51 	bl	8014fd8 <_calloc_r>
 8014936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014938:	60f0      	str	r0, [r6, #12]
 801493a:	68db      	ldr	r3, [r3, #12]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d1e4      	bne.n	801490a <_Balloc+0x2e>
 8014940:	2000      	movs	r0, #0
 8014942:	bd70      	pop	{r4, r5, r6, pc}
 8014944:	6802      	ldr	r2, [r0, #0]
 8014946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801494a:	2300      	movs	r3, #0
 801494c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014950:	e7f7      	b.n	8014942 <_Balloc+0x66>
 8014952:	bf00      	nop
 8014954:	0801b599 	.word	0x0801b599
 8014958:	0801b680 	.word	0x0801b680

0801495c <_Bfree>:
 801495c:	b570      	push	{r4, r5, r6, lr}
 801495e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014960:	4605      	mov	r5, r0
 8014962:	460c      	mov	r4, r1
 8014964:	b976      	cbnz	r6, 8014984 <_Bfree+0x28>
 8014966:	2010      	movs	r0, #16
 8014968:	f7fe f81a 	bl	80129a0 <malloc>
 801496c:	4602      	mov	r2, r0
 801496e:	6268      	str	r0, [r5, #36]	; 0x24
 8014970:	b920      	cbnz	r0, 801497c <_Bfree+0x20>
 8014972:	4b09      	ldr	r3, [pc, #36]	; (8014998 <_Bfree+0x3c>)
 8014974:	4809      	ldr	r0, [pc, #36]	; (801499c <_Bfree+0x40>)
 8014976:	218a      	movs	r1, #138	; 0x8a
 8014978:	f7fe fed8 	bl	801372c <__assert_func>
 801497c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014980:	6006      	str	r6, [r0, #0]
 8014982:	60c6      	str	r6, [r0, #12]
 8014984:	b13c      	cbz	r4, 8014996 <_Bfree+0x3a>
 8014986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014988:	6862      	ldr	r2, [r4, #4]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014990:	6021      	str	r1, [r4, #0]
 8014992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014996:	bd70      	pop	{r4, r5, r6, pc}
 8014998:	0801b599 	.word	0x0801b599
 801499c:	0801b680 	.word	0x0801b680

080149a0 <__multadd>:
 80149a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a4:	690e      	ldr	r6, [r1, #16]
 80149a6:	4607      	mov	r7, r0
 80149a8:	4698      	mov	r8, r3
 80149aa:	460c      	mov	r4, r1
 80149ac:	f101 0014 	add.w	r0, r1, #20
 80149b0:	2300      	movs	r3, #0
 80149b2:	6805      	ldr	r5, [r0, #0]
 80149b4:	b2a9      	uxth	r1, r5
 80149b6:	fb02 8101 	mla	r1, r2, r1, r8
 80149ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80149be:	0c2d      	lsrs	r5, r5, #16
 80149c0:	fb02 c505 	mla	r5, r2, r5, ip
 80149c4:	b289      	uxth	r1, r1
 80149c6:	3301      	adds	r3, #1
 80149c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80149cc:	429e      	cmp	r6, r3
 80149ce:	f840 1b04 	str.w	r1, [r0], #4
 80149d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80149d6:	dcec      	bgt.n	80149b2 <__multadd+0x12>
 80149d8:	f1b8 0f00 	cmp.w	r8, #0
 80149dc:	d022      	beq.n	8014a24 <__multadd+0x84>
 80149de:	68a3      	ldr	r3, [r4, #8]
 80149e0:	42b3      	cmp	r3, r6
 80149e2:	dc19      	bgt.n	8014a18 <__multadd+0x78>
 80149e4:	6861      	ldr	r1, [r4, #4]
 80149e6:	4638      	mov	r0, r7
 80149e8:	3101      	adds	r1, #1
 80149ea:	f7ff ff77 	bl	80148dc <_Balloc>
 80149ee:	4605      	mov	r5, r0
 80149f0:	b928      	cbnz	r0, 80149fe <__multadd+0x5e>
 80149f2:	4602      	mov	r2, r0
 80149f4:	4b0d      	ldr	r3, [pc, #52]	; (8014a2c <__multadd+0x8c>)
 80149f6:	480e      	ldr	r0, [pc, #56]	; (8014a30 <__multadd+0x90>)
 80149f8:	21b5      	movs	r1, #181	; 0xb5
 80149fa:	f7fe fe97 	bl	801372c <__assert_func>
 80149fe:	6922      	ldr	r2, [r4, #16]
 8014a00:	3202      	adds	r2, #2
 8014a02:	f104 010c 	add.w	r1, r4, #12
 8014a06:	0092      	lsls	r2, r2, #2
 8014a08:	300c      	adds	r0, #12
 8014a0a:	f7fd ffd1 	bl	80129b0 <memcpy>
 8014a0e:	4621      	mov	r1, r4
 8014a10:	4638      	mov	r0, r7
 8014a12:	f7ff ffa3 	bl	801495c <_Bfree>
 8014a16:	462c      	mov	r4, r5
 8014a18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014a1c:	3601      	adds	r6, #1
 8014a1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8014a22:	6126      	str	r6, [r4, #16]
 8014a24:	4620      	mov	r0, r4
 8014a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a2a:	bf00      	nop
 8014a2c:	0801b60f 	.word	0x0801b60f
 8014a30:	0801b680 	.word	0x0801b680

08014a34 <__hi0bits>:
 8014a34:	0c03      	lsrs	r3, r0, #16
 8014a36:	041b      	lsls	r3, r3, #16
 8014a38:	b9d3      	cbnz	r3, 8014a70 <__hi0bits+0x3c>
 8014a3a:	0400      	lsls	r0, r0, #16
 8014a3c:	2310      	movs	r3, #16
 8014a3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014a42:	bf04      	itt	eq
 8014a44:	0200      	lsleq	r0, r0, #8
 8014a46:	3308      	addeq	r3, #8
 8014a48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014a4c:	bf04      	itt	eq
 8014a4e:	0100      	lsleq	r0, r0, #4
 8014a50:	3304      	addeq	r3, #4
 8014a52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014a56:	bf04      	itt	eq
 8014a58:	0080      	lsleq	r0, r0, #2
 8014a5a:	3302      	addeq	r3, #2
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	db05      	blt.n	8014a6c <__hi0bits+0x38>
 8014a60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014a64:	f103 0301 	add.w	r3, r3, #1
 8014a68:	bf08      	it	eq
 8014a6a:	2320      	moveq	r3, #32
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	4770      	bx	lr
 8014a70:	2300      	movs	r3, #0
 8014a72:	e7e4      	b.n	8014a3e <__hi0bits+0xa>

08014a74 <__lo0bits>:
 8014a74:	6803      	ldr	r3, [r0, #0]
 8014a76:	f013 0207 	ands.w	r2, r3, #7
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	d00b      	beq.n	8014a96 <__lo0bits+0x22>
 8014a7e:	07da      	lsls	r2, r3, #31
 8014a80:	d424      	bmi.n	8014acc <__lo0bits+0x58>
 8014a82:	0798      	lsls	r0, r3, #30
 8014a84:	bf49      	itett	mi
 8014a86:	085b      	lsrmi	r3, r3, #1
 8014a88:	089b      	lsrpl	r3, r3, #2
 8014a8a:	2001      	movmi	r0, #1
 8014a8c:	600b      	strmi	r3, [r1, #0]
 8014a8e:	bf5c      	itt	pl
 8014a90:	600b      	strpl	r3, [r1, #0]
 8014a92:	2002      	movpl	r0, #2
 8014a94:	4770      	bx	lr
 8014a96:	b298      	uxth	r0, r3
 8014a98:	b9b0      	cbnz	r0, 8014ac8 <__lo0bits+0x54>
 8014a9a:	0c1b      	lsrs	r3, r3, #16
 8014a9c:	2010      	movs	r0, #16
 8014a9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014aa2:	bf04      	itt	eq
 8014aa4:	0a1b      	lsreq	r3, r3, #8
 8014aa6:	3008      	addeq	r0, #8
 8014aa8:	071a      	lsls	r2, r3, #28
 8014aaa:	bf04      	itt	eq
 8014aac:	091b      	lsreq	r3, r3, #4
 8014aae:	3004      	addeq	r0, #4
 8014ab0:	079a      	lsls	r2, r3, #30
 8014ab2:	bf04      	itt	eq
 8014ab4:	089b      	lsreq	r3, r3, #2
 8014ab6:	3002      	addeq	r0, #2
 8014ab8:	07da      	lsls	r2, r3, #31
 8014aba:	d403      	bmi.n	8014ac4 <__lo0bits+0x50>
 8014abc:	085b      	lsrs	r3, r3, #1
 8014abe:	f100 0001 	add.w	r0, r0, #1
 8014ac2:	d005      	beq.n	8014ad0 <__lo0bits+0x5c>
 8014ac4:	600b      	str	r3, [r1, #0]
 8014ac6:	4770      	bx	lr
 8014ac8:	4610      	mov	r0, r2
 8014aca:	e7e8      	b.n	8014a9e <__lo0bits+0x2a>
 8014acc:	2000      	movs	r0, #0
 8014ace:	4770      	bx	lr
 8014ad0:	2020      	movs	r0, #32
 8014ad2:	4770      	bx	lr

08014ad4 <__i2b>:
 8014ad4:	b510      	push	{r4, lr}
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	2101      	movs	r1, #1
 8014ada:	f7ff feff 	bl	80148dc <_Balloc>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	b928      	cbnz	r0, 8014aee <__i2b+0x1a>
 8014ae2:	4b05      	ldr	r3, [pc, #20]	; (8014af8 <__i2b+0x24>)
 8014ae4:	4805      	ldr	r0, [pc, #20]	; (8014afc <__i2b+0x28>)
 8014ae6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014aea:	f7fe fe1f 	bl	801372c <__assert_func>
 8014aee:	2301      	movs	r3, #1
 8014af0:	6144      	str	r4, [r0, #20]
 8014af2:	6103      	str	r3, [r0, #16]
 8014af4:	bd10      	pop	{r4, pc}
 8014af6:	bf00      	nop
 8014af8:	0801b60f 	.word	0x0801b60f
 8014afc:	0801b680 	.word	0x0801b680

08014b00 <__multiply>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	4614      	mov	r4, r2
 8014b06:	690a      	ldr	r2, [r1, #16]
 8014b08:	6923      	ldr	r3, [r4, #16]
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	bfb8      	it	lt
 8014b0e:	460b      	movlt	r3, r1
 8014b10:	460d      	mov	r5, r1
 8014b12:	bfbc      	itt	lt
 8014b14:	4625      	movlt	r5, r4
 8014b16:	461c      	movlt	r4, r3
 8014b18:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014b1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b20:	68ab      	ldr	r3, [r5, #8]
 8014b22:	6869      	ldr	r1, [r5, #4]
 8014b24:	eb0a 0709 	add.w	r7, sl, r9
 8014b28:	42bb      	cmp	r3, r7
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	bfb8      	it	lt
 8014b2e:	3101      	addlt	r1, #1
 8014b30:	f7ff fed4 	bl	80148dc <_Balloc>
 8014b34:	b930      	cbnz	r0, 8014b44 <__multiply+0x44>
 8014b36:	4602      	mov	r2, r0
 8014b38:	4b42      	ldr	r3, [pc, #264]	; (8014c44 <__multiply+0x144>)
 8014b3a:	4843      	ldr	r0, [pc, #268]	; (8014c48 <__multiply+0x148>)
 8014b3c:	f240 115d 	movw	r1, #349	; 0x15d
 8014b40:	f7fe fdf4 	bl	801372c <__assert_func>
 8014b44:	f100 0614 	add.w	r6, r0, #20
 8014b48:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014b4c:	4633      	mov	r3, r6
 8014b4e:	2200      	movs	r2, #0
 8014b50:	4543      	cmp	r3, r8
 8014b52:	d31e      	bcc.n	8014b92 <__multiply+0x92>
 8014b54:	f105 0c14 	add.w	ip, r5, #20
 8014b58:	f104 0314 	add.w	r3, r4, #20
 8014b5c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014b60:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014b64:	9202      	str	r2, [sp, #8]
 8014b66:	ebac 0205 	sub.w	r2, ip, r5
 8014b6a:	3a15      	subs	r2, #21
 8014b6c:	f022 0203 	bic.w	r2, r2, #3
 8014b70:	3204      	adds	r2, #4
 8014b72:	f105 0115 	add.w	r1, r5, #21
 8014b76:	458c      	cmp	ip, r1
 8014b78:	bf38      	it	cc
 8014b7a:	2204      	movcc	r2, #4
 8014b7c:	9201      	str	r2, [sp, #4]
 8014b7e:	9a02      	ldr	r2, [sp, #8]
 8014b80:	9303      	str	r3, [sp, #12]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d808      	bhi.n	8014b98 <__multiply+0x98>
 8014b86:	2f00      	cmp	r7, #0
 8014b88:	dc55      	bgt.n	8014c36 <__multiply+0x136>
 8014b8a:	6107      	str	r7, [r0, #16]
 8014b8c:	b005      	add	sp, #20
 8014b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b92:	f843 2b04 	str.w	r2, [r3], #4
 8014b96:	e7db      	b.n	8014b50 <__multiply+0x50>
 8014b98:	f8b3 a000 	ldrh.w	sl, [r3]
 8014b9c:	f1ba 0f00 	cmp.w	sl, #0
 8014ba0:	d020      	beq.n	8014be4 <__multiply+0xe4>
 8014ba2:	f105 0e14 	add.w	lr, r5, #20
 8014ba6:	46b1      	mov	r9, r6
 8014ba8:	2200      	movs	r2, #0
 8014baa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014bae:	f8d9 b000 	ldr.w	fp, [r9]
 8014bb2:	b2a1      	uxth	r1, r4
 8014bb4:	fa1f fb8b 	uxth.w	fp, fp
 8014bb8:	fb0a b101 	mla	r1, sl, r1, fp
 8014bbc:	4411      	add	r1, r2
 8014bbe:	f8d9 2000 	ldr.w	r2, [r9]
 8014bc2:	0c24      	lsrs	r4, r4, #16
 8014bc4:	0c12      	lsrs	r2, r2, #16
 8014bc6:	fb0a 2404 	mla	r4, sl, r4, r2
 8014bca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014bce:	b289      	uxth	r1, r1
 8014bd0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014bd4:	45f4      	cmp	ip, lr
 8014bd6:	f849 1b04 	str.w	r1, [r9], #4
 8014bda:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014bde:	d8e4      	bhi.n	8014baa <__multiply+0xaa>
 8014be0:	9901      	ldr	r1, [sp, #4]
 8014be2:	5072      	str	r2, [r6, r1]
 8014be4:	9a03      	ldr	r2, [sp, #12]
 8014be6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014bea:	3304      	adds	r3, #4
 8014bec:	f1b9 0f00 	cmp.w	r9, #0
 8014bf0:	d01f      	beq.n	8014c32 <__multiply+0x132>
 8014bf2:	6834      	ldr	r4, [r6, #0]
 8014bf4:	f105 0114 	add.w	r1, r5, #20
 8014bf8:	46b6      	mov	lr, r6
 8014bfa:	f04f 0a00 	mov.w	sl, #0
 8014bfe:	880a      	ldrh	r2, [r1, #0]
 8014c00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014c04:	fb09 b202 	mla	r2, r9, r2, fp
 8014c08:	4492      	add	sl, r2
 8014c0a:	b2a4      	uxth	r4, r4
 8014c0c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014c10:	f84e 4b04 	str.w	r4, [lr], #4
 8014c14:	f851 4b04 	ldr.w	r4, [r1], #4
 8014c18:	f8be 2000 	ldrh.w	r2, [lr]
 8014c1c:	0c24      	lsrs	r4, r4, #16
 8014c1e:	fb09 2404 	mla	r4, r9, r4, r2
 8014c22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014c26:	458c      	cmp	ip, r1
 8014c28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014c2c:	d8e7      	bhi.n	8014bfe <__multiply+0xfe>
 8014c2e:	9a01      	ldr	r2, [sp, #4]
 8014c30:	50b4      	str	r4, [r6, r2]
 8014c32:	3604      	adds	r6, #4
 8014c34:	e7a3      	b.n	8014b7e <__multiply+0x7e>
 8014c36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d1a5      	bne.n	8014b8a <__multiply+0x8a>
 8014c3e:	3f01      	subs	r7, #1
 8014c40:	e7a1      	b.n	8014b86 <__multiply+0x86>
 8014c42:	bf00      	nop
 8014c44:	0801b60f 	.word	0x0801b60f
 8014c48:	0801b680 	.word	0x0801b680

08014c4c <__pow5mult>:
 8014c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c50:	4615      	mov	r5, r2
 8014c52:	f012 0203 	ands.w	r2, r2, #3
 8014c56:	4606      	mov	r6, r0
 8014c58:	460f      	mov	r7, r1
 8014c5a:	d007      	beq.n	8014c6c <__pow5mult+0x20>
 8014c5c:	4c25      	ldr	r4, [pc, #148]	; (8014cf4 <__pow5mult+0xa8>)
 8014c5e:	3a01      	subs	r2, #1
 8014c60:	2300      	movs	r3, #0
 8014c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c66:	f7ff fe9b 	bl	80149a0 <__multadd>
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	10ad      	asrs	r5, r5, #2
 8014c6e:	d03d      	beq.n	8014cec <__pow5mult+0xa0>
 8014c70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c72:	b97c      	cbnz	r4, 8014c94 <__pow5mult+0x48>
 8014c74:	2010      	movs	r0, #16
 8014c76:	f7fd fe93 	bl	80129a0 <malloc>
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	6270      	str	r0, [r6, #36]	; 0x24
 8014c7e:	b928      	cbnz	r0, 8014c8c <__pow5mult+0x40>
 8014c80:	4b1d      	ldr	r3, [pc, #116]	; (8014cf8 <__pow5mult+0xac>)
 8014c82:	481e      	ldr	r0, [pc, #120]	; (8014cfc <__pow5mult+0xb0>)
 8014c84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014c88:	f7fe fd50 	bl	801372c <__assert_func>
 8014c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c90:	6004      	str	r4, [r0, #0]
 8014c92:	60c4      	str	r4, [r0, #12]
 8014c94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c9c:	b94c      	cbnz	r4, 8014cb2 <__pow5mult+0x66>
 8014c9e:	f240 2171 	movw	r1, #625	; 0x271
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	f7ff ff16 	bl	8014ad4 <__i2b>
 8014ca8:	2300      	movs	r3, #0
 8014caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cae:	4604      	mov	r4, r0
 8014cb0:	6003      	str	r3, [r0, #0]
 8014cb2:	f04f 0900 	mov.w	r9, #0
 8014cb6:	07eb      	lsls	r3, r5, #31
 8014cb8:	d50a      	bpl.n	8014cd0 <__pow5mult+0x84>
 8014cba:	4639      	mov	r1, r7
 8014cbc:	4622      	mov	r2, r4
 8014cbe:	4630      	mov	r0, r6
 8014cc0:	f7ff ff1e 	bl	8014b00 <__multiply>
 8014cc4:	4639      	mov	r1, r7
 8014cc6:	4680      	mov	r8, r0
 8014cc8:	4630      	mov	r0, r6
 8014cca:	f7ff fe47 	bl	801495c <_Bfree>
 8014cce:	4647      	mov	r7, r8
 8014cd0:	106d      	asrs	r5, r5, #1
 8014cd2:	d00b      	beq.n	8014cec <__pow5mult+0xa0>
 8014cd4:	6820      	ldr	r0, [r4, #0]
 8014cd6:	b938      	cbnz	r0, 8014ce8 <__pow5mult+0x9c>
 8014cd8:	4622      	mov	r2, r4
 8014cda:	4621      	mov	r1, r4
 8014cdc:	4630      	mov	r0, r6
 8014cde:	f7ff ff0f 	bl	8014b00 <__multiply>
 8014ce2:	6020      	str	r0, [r4, #0]
 8014ce4:	f8c0 9000 	str.w	r9, [r0]
 8014ce8:	4604      	mov	r4, r0
 8014cea:	e7e4      	b.n	8014cb6 <__pow5mult+0x6a>
 8014cec:	4638      	mov	r0, r7
 8014cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cf2:	bf00      	nop
 8014cf4:	0801b7d0 	.word	0x0801b7d0
 8014cf8:	0801b599 	.word	0x0801b599
 8014cfc:	0801b680 	.word	0x0801b680

08014d00 <__lshift>:
 8014d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d04:	460c      	mov	r4, r1
 8014d06:	6849      	ldr	r1, [r1, #4]
 8014d08:	6923      	ldr	r3, [r4, #16]
 8014d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d0e:	68a3      	ldr	r3, [r4, #8]
 8014d10:	4607      	mov	r7, r0
 8014d12:	4691      	mov	r9, r2
 8014d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d18:	f108 0601 	add.w	r6, r8, #1
 8014d1c:	42b3      	cmp	r3, r6
 8014d1e:	db0b      	blt.n	8014d38 <__lshift+0x38>
 8014d20:	4638      	mov	r0, r7
 8014d22:	f7ff fddb 	bl	80148dc <_Balloc>
 8014d26:	4605      	mov	r5, r0
 8014d28:	b948      	cbnz	r0, 8014d3e <__lshift+0x3e>
 8014d2a:	4602      	mov	r2, r0
 8014d2c:	4b28      	ldr	r3, [pc, #160]	; (8014dd0 <__lshift+0xd0>)
 8014d2e:	4829      	ldr	r0, [pc, #164]	; (8014dd4 <__lshift+0xd4>)
 8014d30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d34:	f7fe fcfa 	bl	801372c <__assert_func>
 8014d38:	3101      	adds	r1, #1
 8014d3a:	005b      	lsls	r3, r3, #1
 8014d3c:	e7ee      	b.n	8014d1c <__lshift+0x1c>
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f100 0114 	add.w	r1, r0, #20
 8014d44:	f100 0210 	add.w	r2, r0, #16
 8014d48:	4618      	mov	r0, r3
 8014d4a:	4553      	cmp	r3, sl
 8014d4c:	db33      	blt.n	8014db6 <__lshift+0xb6>
 8014d4e:	6920      	ldr	r0, [r4, #16]
 8014d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d54:	f104 0314 	add.w	r3, r4, #20
 8014d58:	f019 091f 	ands.w	r9, r9, #31
 8014d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d64:	d02b      	beq.n	8014dbe <__lshift+0xbe>
 8014d66:	f1c9 0e20 	rsb	lr, r9, #32
 8014d6a:	468a      	mov	sl, r1
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	6818      	ldr	r0, [r3, #0]
 8014d70:	fa00 f009 	lsl.w	r0, r0, r9
 8014d74:	4302      	orrs	r2, r0
 8014d76:	f84a 2b04 	str.w	r2, [sl], #4
 8014d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d7e:	459c      	cmp	ip, r3
 8014d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d84:	d8f3      	bhi.n	8014d6e <__lshift+0x6e>
 8014d86:	ebac 0304 	sub.w	r3, ip, r4
 8014d8a:	3b15      	subs	r3, #21
 8014d8c:	f023 0303 	bic.w	r3, r3, #3
 8014d90:	3304      	adds	r3, #4
 8014d92:	f104 0015 	add.w	r0, r4, #21
 8014d96:	4584      	cmp	ip, r0
 8014d98:	bf38      	it	cc
 8014d9a:	2304      	movcc	r3, #4
 8014d9c:	50ca      	str	r2, [r1, r3]
 8014d9e:	b10a      	cbz	r2, 8014da4 <__lshift+0xa4>
 8014da0:	f108 0602 	add.w	r6, r8, #2
 8014da4:	3e01      	subs	r6, #1
 8014da6:	4638      	mov	r0, r7
 8014da8:	612e      	str	r6, [r5, #16]
 8014daa:	4621      	mov	r1, r4
 8014dac:	f7ff fdd6 	bl	801495c <_Bfree>
 8014db0:	4628      	mov	r0, r5
 8014db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8014dba:	3301      	adds	r3, #1
 8014dbc:	e7c5      	b.n	8014d4a <__lshift+0x4a>
 8014dbe:	3904      	subs	r1, #4
 8014dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8014dc8:	459c      	cmp	ip, r3
 8014dca:	d8f9      	bhi.n	8014dc0 <__lshift+0xc0>
 8014dcc:	e7ea      	b.n	8014da4 <__lshift+0xa4>
 8014dce:	bf00      	nop
 8014dd0:	0801b60f 	.word	0x0801b60f
 8014dd4:	0801b680 	.word	0x0801b680

08014dd8 <__mcmp>:
 8014dd8:	b530      	push	{r4, r5, lr}
 8014dda:	6902      	ldr	r2, [r0, #16]
 8014ddc:	690c      	ldr	r4, [r1, #16]
 8014dde:	1b12      	subs	r2, r2, r4
 8014de0:	d10e      	bne.n	8014e00 <__mcmp+0x28>
 8014de2:	f100 0314 	add.w	r3, r0, #20
 8014de6:	3114      	adds	r1, #20
 8014de8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014dec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014df0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014df4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014df8:	42a5      	cmp	r5, r4
 8014dfa:	d003      	beq.n	8014e04 <__mcmp+0x2c>
 8014dfc:	d305      	bcc.n	8014e0a <__mcmp+0x32>
 8014dfe:	2201      	movs	r2, #1
 8014e00:	4610      	mov	r0, r2
 8014e02:	bd30      	pop	{r4, r5, pc}
 8014e04:	4283      	cmp	r3, r0
 8014e06:	d3f3      	bcc.n	8014df0 <__mcmp+0x18>
 8014e08:	e7fa      	b.n	8014e00 <__mcmp+0x28>
 8014e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e0e:	e7f7      	b.n	8014e00 <__mcmp+0x28>

08014e10 <__mdiff>:
 8014e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e14:	460c      	mov	r4, r1
 8014e16:	4606      	mov	r6, r0
 8014e18:	4611      	mov	r1, r2
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	4617      	mov	r7, r2
 8014e1e:	f7ff ffdb 	bl	8014dd8 <__mcmp>
 8014e22:	1e05      	subs	r5, r0, #0
 8014e24:	d110      	bne.n	8014e48 <__mdiff+0x38>
 8014e26:	4629      	mov	r1, r5
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f7ff fd57 	bl	80148dc <_Balloc>
 8014e2e:	b930      	cbnz	r0, 8014e3e <__mdiff+0x2e>
 8014e30:	4b39      	ldr	r3, [pc, #228]	; (8014f18 <__mdiff+0x108>)
 8014e32:	4602      	mov	r2, r0
 8014e34:	f240 2132 	movw	r1, #562	; 0x232
 8014e38:	4838      	ldr	r0, [pc, #224]	; (8014f1c <__mdiff+0x10c>)
 8014e3a:	f7fe fc77 	bl	801372c <__assert_func>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e48:	bfa4      	itt	ge
 8014e4a:	463b      	movge	r3, r7
 8014e4c:	4627      	movge	r7, r4
 8014e4e:	4630      	mov	r0, r6
 8014e50:	6879      	ldr	r1, [r7, #4]
 8014e52:	bfa6      	itte	ge
 8014e54:	461c      	movge	r4, r3
 8014e56:	2500      	movge	r5, #0
 8014e58:	2501      	movlt	r5, #1
 8014e5a:	f7ff fd3f 	bl	80148dc <_Balloc>
 8014e5e:	b920      	cbnz	r0, 8014e6a <__mdiff+0x5a>
 8014e60:	4b2d      	ldr	r3, [pc, #180]	; (8014f18 <__mdiff+0x108>)
 8014e62:	4602      	mov	r2, r0
 8014e64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014e68:	e7e6      	b.n	8014e38 <__mdiff+0x28>
 8014e6a:	693e      	ldr	r6, [r7, #16]
 8014e6c:	60c5      	str	r5, [r0, #12]
 8014e6e:	6925      	ldr	r5, [r4, #16]
 8014e70:	f107 0114 	add.w	r1, r7, #20
 8014e74:	f104 0914 	add.w	r9, r4, #20
 8014e78:	f100 0e14 	add.w	lr, r0, #20
 8014e7c:	f107 0210 	add.w	r2, r7, #16
 8014e80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014e84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014e88:	46f2      	mov	sl, lr
 8014e8a:	2700      	movs	r7, #0
 8014e8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014e90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014e94:	fa1f f883 	uxth.w	r8, r3
 8014e98:	fa17 f78b 	uxtah	r7, r7, fp
 8014e9c:	0c1b      	lsrs	r3, r3, #16
 8014e9e:	eba7 0808 	sub.w	r8, r7, r8
 8014ea2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014ea6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014eaa:	fa1f f888 	uxth.w	r8, r8
 8014eae:	141f      	asrs	r7, r3, #16
 8014eb0:	454d      	cmp	r5, r9
 8014eb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014eb6:	f84a 3b04 	str.w	r3, [sl], #4
 8014eba:	d8e7      	bhi.n	8014e8c <__mdiff+0x7c>
 8014ebc:	1b2b      	subs	r3, r5, r4
 8014ebe:	3b15      	subs	r3, #21
 8014ec0:	f023 0303 	bic.w	r3, r3, #3
 8014ec4:	3304      	adds	r3, #4
 8014ec6:	3415      	adds	r4, #21
 8014ec8:	42a5      	cmp	r5, r4
 8014eca:	bf38      	it	cc
 8014ecc:	2304      	movcc	r3, #4
 8014ece:	4419      	add	r1, r3
 8014ed0:	4473      	add	r3, lr
 8014ed2:	469e      	mov	lr, r3
 8014ed4:	460d      	mov	r5, r1
 8014ed6:	4565      	cmp	r5, ip
 8014ed8:	d30e      	bcc.n	8014ef8 <__mdiff+0xe8>
 8014eda:	f10c 0203 	add.w	r2, ip, #3
 8014ede:	1a52      	subs	r2, r2, r1
 8014ee0:	f022 0203 	bic.w	r2, r2, #3
 8014ee4:	3903      	subs	r1, #3
 8014ee6:	458c      	cmp	ip, r1
 8014ee8:	bf38      	it	cc
 8014eea:	2200      	movcc	r2, #0
 8014eec:	441a      	add	r2, r3
 8014eee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014ef2:	b17b      	cbz	r3, 8014f14 <__mdiff+0x104>
 8014ef4:	6106      	str	r6, [r0, #16]
 8014ef6:	e7a5      	b.n	8014e44 <__mdiff+0x34>
 8014ef8:	f855 8b04 	ldr.w	r8, [r5], #4
 8014efc:	fa17 f488 	uxtah	r4, r7, r8
 8014f00:	1422      	asrs	r2, r4, #16
 8014f02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014f06:	b2a4      	uxth	r4, r4
 8014f08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014f0c:	f84e 4b04 	str.w	r4, [lr], #4
 8014f10:	1417      	asrs	r7, r2, #16
 8014f12:	e7e0      	b.n	8014ed6 <__mdiff+0xc6>
 8014f14:	3e01      	subs	r6, #1
 8014f16:	e7ea      	b.n	8014eee <__mdiff+0xde>
 8014f18:	0801b60f 	.word	0x0801b60f
 8014f1c:	0801b680 	.word	0x0801b680

08014f20 <__d2b>:
 8014f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f24:	4689      	mov	r9, r1
 8014f26:	2101      	movs	r1, #1
 8014f28:	ec57 6b10 	vmov	r6, r7, d0
 8014f2c:	4690      	mov	r8, r2
 8014f2e:	f7ff fcd5 	bl	80148dc <_Balloc>
 8014f32:	4604      	mov	r4, r0
 8014f34:	b930      	cbnz	r0, 8014f44 <__d2b+0x24>
 8014f36:	4602      	mov	r2, r0
 8014f38:	4b25      	ldr	r3, [pc, #148]	; (8014fd0 <__d2b+0xb0>)
 8014f3a:	4826      	ldr	r0, [pc, #152]	; (8014fd4 <__d2b+0xb4>)
 8014f3c:	f240 310a 	movw	r1, #778	; 0x30a
 8014f40:	f7fe fbf4 	bl	801372c <__assert_func>
 8014f44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f4c:	bb35      	cbnz	r5, 8014f9c <__d2b+0x7c>
 8014f4e:	2e00      	cmp	r6, #0
 8014f50:	9301      	str	r3, [sp, #4]
 8014f52:	d028      	beq.n	8014fa6 <__d2b+0x86>
 8014f54:	4668      	mov	r0, sp
 8014f56:	9600      	str	r6, [sp, #0]
 8014f58:	f7ff fd8c 	bl	8014a74 <__lo0bits>
 8014f5c:	9900      	ldr	r1, [sp, #0]
 8014f5e:	b300      	cbz	r0, 8014fa2 <__d2b+0x82>
 8014f60:	9a01      	ldr	r2, [sp, #4]
 8014f62:	f1c0 0320 	rsb	r3, r0, #32
 8014f66:	fa02 f303 	lsl.w	r3, r2, r3
 8014f6a:	430b      	orrs	r3, r1
 8014f6c:	40c2      	lsrs	r2, r0
 8014f6e:	6163      	str	r3, [r4, #20]
 8014f70:	9201      	str	r2, [sp, #4]
 8014f72:	9b01      	ldr	r3, [sp, #4]
 8014f74:	61a3      	str	r3, [r4, #24]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	bf14      	ite	ne
 8014f7a:	2202      	movne	r2, #2
 8014f7c:	2201      	moveq	r2, #1
 8014f7e:	6122      	str	r2, [r4, #16]
 8014f80:	b1d5      	cbz	r5, 8014fb8 <__d2b+0x98>
 8014f82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014f86:	4405      	add	r5, r0
 8014f88:	f8c9 5000 	str.w	r5, [r9]
 8014f8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014f90:	f8c8 0000 	str.w	r0, [r8]
 8014f94:	4620      	mov	r0, r4
 8014f96:	b003      	add	sp, #12
 8014f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014fa0:	e7d5      	b.n	8014f4e <__d2b+0x2e>
 8014fa2:	6161      	str	r1, [r4, #20]
 8014fa4:	e7e5      	b.n	8014f72 <__d2b+0x52>
 8014fa6:	a801      	add	r0, sp, #4
 8014fa8:	f7ff fd64 	bl	8014a74 <__lo0bits>
 8014fac:	9b01      	ldr	r3, [sp, #4]
 8014fae:	6163      	str	r3, [r4, #20]
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	6122      	str	r2, [r4, #16]
 8014fb4:	3020      	adds	r0, #32
 8014fb6:	e7e3      	b.n	8014f80 <__d2b+0x60>
 8014fb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014fc0:	f8c9 0000 	str.w	r0, [r9]
 8014fc4:	6918      	ldr	r0, [r3, #16]
 8014fc6:	f7ff fd35 	bl	8014a34 <__hi0bits>
 8014fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014fce:	e7df      	b.n	8014f90 <__d2b+0x70>
 8014fd0:	0801b60f 	.word	0x0801b60f
 8014fd4:	0801b680 	.word	0x0801b680

08014fd8 <_calloc_r>:
 8014fd8:	b513      	push	{r0, r1, r4, lr}
 8014fda:	434a      	muls	r2, r1
 8014fdc:	4611      	mov	r1, r2
 8014fde:	9201      	str	r2, [sp, #4]
 8014fe0:	f7fd fd4c 	bl	8012a7c <_malloc_r>
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	b118      	cbz	r0, 8014ff0 <_calloc_r+0x18>
 8014fe8:	9a01      	ldr	r2, [sp, #4]
 8014fea:	2100      	movs	r1, #0
 8014fec:	f7fd fcee 	bl	80129cc <memset>
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	b002      	add	sp, #8
 8014ff4:	bd10      	pop	{r4, pc}

08014ff6 <_realloc_r>:
 8014ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ff8:	4607      	mov	r7, r0
 8014ffa:	4614      	mov	r4, r2
 8014ffc:	460e      	mov	r6, r1
 8014ffe:	b921      	cbnz	r1, 801500a <_realloc_r+0x14>
 8015000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015004:	4611      	mov	r1, r2
 8015006:	f7fd bd39 	b.w	8012a7c <_malloc_r>
 801500a:	b922      	cbnz	r2, 8015016 <_realloc_r+0x20>
 801500c:	f7fd fce6 	bl	80129dc <_free_r>
 8015010:	4625      	mov	r5, r4
 8015012:	4628      	mov	r0, r5
 8015014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015016:	f000 fbdf 	bl	80157d8 <_malloc_usable_size_r>
 801501a:	42a0      	cmp	r0, r4
 801501c:	d20f      	bcs.n	801503e <_realloc_r+0x48>
 801501e:	4621      	mov	r1, r4
 8015020:	4638      	mov	r0, r7
 8015022:	f7fd fd2b 	bl	8012a7c <_malloc_r>
 8015026:	4605      	mov	r5, r0
 8015028:	2800      	cmp	r0, #0
 801502a:	d0f2      	beq.n	8015012 <_realloc_r+0x1c>
 801502c:	4631      	mov	r1, r6
 801502e:	4622      	mov	r2, r4
 8015030:	f7fd fcbe 	bl	80129b0 <memcpy>
 8015034:	4631      	mov	r1, r6
 8015036:	4638      	mov	r0, r7
 8015038:	f7fd fcd0 	bl	80129dc <_free_r>
 801503c:	e7e9      	b.n	8015012 <_realloc_r+0x1c>
 801503e:	4635      	mov	r5, r6
 8015040:	e7e7      	b.n	8015012 <_realloc_r+0x1c>

08015042 <__ssputs_r>:
 8015042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015046:	688e      	ldr	r6, [r1, #8]
 8015048:	429e      	cmp	r6, r3
 801504a:	4682      	mov	sl, r0
 801504c:	460c      	mov	r4, r1
 801504e:	4690      	mov	r8, r2
 8015050:	461f      	mov	r7, r3
 8015052:	d838      	bhi.n	80150c6 <__ssputs_r+0x84>
 8015054:	898a      	ldrh	r2, [r1, #12]
 8015056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801505a:	d032      	beq.n	80150c2 <__ssputs_r+0x80>
 801505c:	6825      	ldr	r5, [r4, #0]
 801505e:	6909      	ldr	r1, [r1, #16]
 8015060:	eba5 0901 	sub.w	r9, r5, r1
 8015064:	6965      	ldr	r5, [r4, #20]
 8015066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801506a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801506e:	3301      	adds	r3, #1
 8015070:	444b      	add	r3, r9
 8015072:	106d      	asrs	r5, r5, #1
 8015074:	429d      	cmp	r5, r3
 8015076:	bf38      	it	cc
 8015078:	461d      	movcc	r5, r3
 801507a:	0553      	lsls	r3, r2, #21
 801507c:	d531      	bpl.n	80150e2 <__ssputs_r+0xa0>
 801507e:	4629      	mov	r1, r5
 8015080:	f7fd fcfc 	bl	8012a7c <_malloc_r>
 8015084:	4606      	mov	r6, r0
 8015086:	b950      	cbnz	r0, 801509e <__ssputs_r+0x5c>
 8015088:	230c      	movs	r3, #12
 801508a:	f8ca 3000 	str.w	r3, [sl]
 801508e:	89a3      	ldrh	r3, [r4, #12]
 8015090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015094:	81a3      	strh	r3, [r4, #12]
 8015096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801509e:	6921      	ldr	r1, [r4, #16]
 80150a0:	464a      	mov	r2, r9
 80150a2:	f7fd fc85 	bl	80129b0 <memcpy>
 80150a6:	89a3      	ldrh	r3, [r4, #12]
 80150a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80150ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150b0:	81a3      	strh	r3, [r4, #12]
 80150b2:	6126      	str	r6, [r4, #16]
 80150b4:	6165      	str	r5, [r4, #20]
 80150b6:	444e      	add	r6, r9
 80150b8:	eba5 0509 	sub.w	r5, r5, r9
 80150bc:	6026      	str	r6, [r4, #0]
 80150be:	60a5      	str	r5, [r4, #8]
 80150c0:	463e      	mov	r6, r7
 80150c2:	42be      	cmp	r6, r7
 80150c4:	d900      	bls.n	80150c8 <__ssputs_r+0x86>
 80150c6:	463e      	mov	r6, r7
 80150c8:	4632      	mov	r2, r6
 80150ca:	6820      	ldr	r0, [r4, #0]
 80150cc:	4641      	mov	r1, r8
 80150ce:	f000 fb69 	bl	80157a4 <memmove>
 80150d2:	68a3      	ldr	r3, [r4, #8]
 80150d4:	6822      	ldr	r2, [r4, #0]
 80150d6:	1b9b      	subs	r3, r3, r6
 80150d8:	4432      	add	r2, r6
 80150da:	60a3      	str	r3, [r4, #8]
 80150dc:	6022      	str	r2, [r4, #0]
 80150de:	2000      	movs	r0, #0
 80150e0:	e7db      	b.n	801509a <__ssputs_r+0x58>
 80150e2:	462a      	mov	r2, r5
 80150e4:	f7ff ff87 	bl	8014ff6 <_realloc_r>
 80150e8:	4606      	mov	r6, r0
 80150ea:	2800      	cmp	r0, #0
 80150ec:	d1e1      	bne.n	80150b2 <__ssputs_r+0x70>
 80150ee:	6921      	ldr	r1, [r4, #16]
 80150f0:	4650      	mov	r0, sl
 80150f2:	f7fd fc73 	bl	80129dc <_free_r>
 80150f6:	e7c7      	b.n	8015088 <__ssputs_r+0x46>

080150f8 <_svfiprintf_r>:
 80150f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fc:	4698      	mov	r8, r3
 80150fe:	898b      	ldrh	r3, [r1, #12]
 8015100:	061b      	lsls	r3, r3, #24
 8015102:	b09d      	sub	sp, #116	; 0x74
 8015104:	4607      	mov	r7, r0
 8015106:	460d      	mov	r5, r1
 8015108:	4614      	mov	r4, r2
 801510a:	d50e      	bpl.n	801512a <_svfiprintf_r+0x32>
 801510c:	690b      	ldr	r3, [r1, #16]
 801510e:	b963      	cbnz	r3, 801512a <_svfiprintf_r+0x32>
 8015110:	2140      	movs	r1, #64	; 0x40
 8015112:	f7fd fcb3 	bl	8012a7c <_malloc_r>
 8015116:	6028      	str	r0, [r5, #0]
 8015118:	6128      	str	r0, [r5, #16]
 801511a:	b920      	cbnz	r0, 8015126 <_svfiprintf_r+0x2e>
 801511c:	230c      	movs	r3, #12
 801511e:	603b      	str	r3, [r7, #0]
 8015120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015124:	e0d1      	b.n	80152ca <_svfiprintf_r+0x1d2>
 8015126:	2340      	movs	r3, #64	; 0x40
 8015128:	616b      	str	r3, [r5, #20]
 801512a:	2300      	movs	r3, #0
 801512c:	9309      	str	r3, [sp, #36]	; 0x24
 801512e:	2320      	movs	r3, #32
 8015130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015134:	f8cd 800c 	str.w	r8, [sp, #12]
 8015138:	2330      	movs	r3, #48	; 0x30
 801513a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80152e4 <_svfiprintf_r+0x1ec>
 801513e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015142:	f04f 0901 	mov.w	r9, #1
 8015146:	4623      	mov	r3, r4
 8015148:	469a      	mov	sl, r3
 801514a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801514e:	b10a      	cbz	r2, 8015154 <_svfiprintf_r+0x5c>
 8015150:	2a25      	cmp	r2, #37	; 0x25
 8015152:	d1f9      	bne.n	8015148 <_svfiprintf_r+0x50>
 8015154:	ebba 0b04 	subs.w	fp, sl, r4
 8015158:	d00b      	beq.n	8015172 <_svfiprintf_r+0x7a>
 801515a:	465b      	mov	r3, fp
 801515c:	4622      	mov	r2, r4
 801515e:	4629      	mov	r1, r5
 8015160:	4638      	mov	r0, r7
 8015162:	f7ff ff6e 	bl	8015042 <__ssputs_r>
 8015166:	3001      	adds	r0, #1
 8015168:	f000 80aa 	beq.w	80152c0 <_svfiprintf_r+0x1c8>
 801516c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801516e:	445a      	add	r2, fp
 8015170:	9209      	str	r2, [sp, #36]	; 0x24
 8015172:	f89a 3000 	ldrb.w	r3, [sl]
 8015176:	2b00      	cmp	r3, #0
 8015178:	f000 80a2 	beq.w	80152c0 <_svfiprintf_r+0x1c8>
 801517c:	2300      	movs	r3, #0
 801517e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015186:	f10a 0a01 	add.w	sl, sl, #1
 801518a:	9304      	str	r3, [sp, #16]
 801518c:	9307      	str	r3, [sp, #28]
 801518e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015192:	931a      	str	r3, [sp, #104]	; 0x68
 8015194:	4654      	mov	r4, sl
 8015196:	2205      	movs	r2, #5
 8015198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801519c:	4851      	ldr	r0, [pc, #324]	; (80152e4 <_svfiprintf_r+0x1ec>)
 801519e:	f7eb f83f 	bl	8000220 <memchr>
 80151a2:	9a04      	ldr	r2, [sp, #16]
 80151a4:	b9d8      	cbnz	r0, 80151de <_svfiprintf_r+0xe6>
 80151a6:	06d0      	lsls	r0, r2, #27
 80151a8:	bf44      	itt	mi
 80151aa:	2320      	movmi	r3, #32
 80151ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151b0:	0711      	lsls	r1, r2, #28
 80151b2:	bf44      	itt	mi
 80151b4:	232b      	movmi	r3, #43	; 0x2b
 80151b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151ba:	f89a 3000 	ldrb.w	r3, [sl]
 80151be:	2b2a      	cmp	r3, #42	; 0x2a
 80151c0:	d015      	beq.n	80151ee <_svfiprintf_r+0xf6>
 80151c2:	9a07      	ldr	r2, [sp, #28]
 80151c4:	4654      	mov	r4, sl
 80151c6:	2000      	movs	r0, #0
 80151c8:	f04f 0c0a 	mov.w	ip, #10
 80151cc:	4621      	mov	r1, r4
 80151ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151d2:	3b30      	subs	r3, #48	; 0x30
 80151d4:	2b09      	cmp	r3, #9
 80151d6:	d94e      	bls.n	8015276 <_svfiprintf_r+0x17e>
 80151d8:	b1b0      	cbz	r0, 8015208 <_svfiprintf_r+0x110>
 80151da:	9207      	str	r2, [sp, #28]
 80151dc:	e014      	b.n	8015208 <_svfiprintf_r+0x110>
 80151de:	eba0 0308 	sub.w	r3, r0, r8
 80151e2:	fa09 f303 	lsl.w	r3, r9, r3
 80151e6:	4313      	orrs	r3, r2
 80151e8:	9304      	str	r3, [sp, #16]
 80151ea:	46a2      	mov	sl, r4
 80151ec:	e7d2      	b.n	8015194 <_svfiprintf_r+0x9c>
 80151ee:	9b03      	ldr	r3, [sp, #12]
 80151f0:	1d19      	adds	r1, r3, #4
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	9103      	str	r1, [sp, #12]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	bfbb      	ittet	lt
 80151fa:	425b      	neglt	r3, r3
 80151fc:	f042 0202 	orrlt.w	r2, r2, #2
 8015200:	9307      	strge	r3, [sp, #28]
 8015202:	9307      	strlt	r3, [sp, #28]
 8015204:	bfb8      	it	lt
 8015206:	9204      	strlt	r2, [sp, #16]
 8015208:	7823      	ldrb	r3, [r4, #0]
 801520a:	2b2e      	cmp	r3, #46	; 0x2e
 801520c:	d10c      	bne.n	8015228 <_svfiprintf_r+0x130>
 801520e:	7863      	ldrb	r3, [r4, #1]
 8015210:	2b2a      	cmp	r3, #42	; 0x2a
 8015212:	d135      	bne.n	8015280 <_svfiprintf_r+0x188>
 8015214:	9b03      	ldr	r3, [sp, #12]
 8015216:	1d1a      	adds	r2, r3, #4
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	9203      	str	r2, [sp, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	bfb8      	it	lt
 8015220:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015224:	3402      	adds	r4, #2
 8015226:	9305      	str	r3, [sp, #20]
 8015228:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80152f4 <_svfiprintf_r+0x1fc>
 801522c:	7821      	ldrb	r1, [r4, #0]
 801522e:	2203      	movs	r2, #3
 8015230:	4650      	mov	r0, sl
 8015232:	f7ea fff5 	bl	8000220 <memchr>
 8015236:	b140      	cbz	r0, 801524a <_svfiprintf_r+0x152>
 8015238:	2340      	movs	r3, #64	; 0x40
 801523a:	eba0 000a 	sub.w	r0, r0, sl
 801523e:	fa03 f000 	lsl.w	r0, r3, r0
 8015242:	9b04      	ldr	r3, [sp, #16]
 8015244:	4303      	orrs	r3, r0
 8015246:	3401      	adds	r4, #1
 8015248:	9304      	str	r3, [sp, #16]
 801524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801524e:	4826      	ldr	r0, [pc, #152]	; (80152e8 <_svfiprintf_r+0x1f0>)
 8015250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015254:	2206      	movs	r2, #6
 8015256:	f7ea ffe3 	bl	8000220 <memchr>
 801525a:	2800      	cmp	r0, #0
 801525c:	d038      	beq.n	80152d0 <_svfiprintf_r+0x1d8>
 801525e:	4b23      	ldr	r3, [pc, #140]	; (80152ec <_svfiprintf_r+0x1f4>)
 8015260:	bb1b      	cbnz	r3, 80152aa <_svfiprintf_r+0x1b2>
 8015262:	9b03      	ldr	r3, [sp, #12]
 8015264:	3307      	adds	r3, #7
 8015266:	f023 0307 	bic.w	r3, r3, #7
 801526a:	3308      	adds	r3, #8
 801526c:	9303      	str	r3, [sp, #12]
 801526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015270:	4433      	add	r3, r6
 8015272:	9309      	str	r3, [sp, #36]	; 0x24
 8015274:	e767      	b.n	8015146 <_svfiprintf_r+0x4e>
 8015276:	fb0c 3202 	mla	r2, ip, r2, r3
 801527a:	460c      	mov	r4, r1
 801527c:	2001      	movs	r0, #1
 801527e:	e7a5      	b.n	80151cc <_svfiprintf_r+0xd4>
 8015280:	2300      	movs	r3, #0
 8015282:	3401      	adds	r4, #1
 8015284:	9305      	str	r3, [sp, #20]
 8015286:	4619      	mov	r1, r3
 8015288:	f04f 0c0a 	mov.w	ip, #10
 801528c:	4620      	mov	r0, r4
 801528e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015292:	3a30      	subs	r2, #48	; 0x30
 8015294:	2a09      	cmp	r2, #9
 8015296:	d903      	bls.n	80152a0 <_svfiprintf_r+0x1a8>
 8015298:	2b00      	cmp	r3, #0
 801529a:	d0c5      	beq.n	8015228 <_svfiprintf_r+0x130>
 801529c:	9105      	str	r1, [sp, #20]
 801529e:	e7c3      	b.n	8015228 <_svfiprintf_r+0x130>
 80152a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80152a4:	4604      	mov	r4, r0
 80152a6:	2301      	movs	r3, #1
 80152a8:	e7f0      	b.n	801528c <_svfiprintf_r+0x194>
 80152aa:	ab03      	add	r3, sp, #12
 80152ac:	9300      	str	r3, [sp, #0]
 80152ae:	462a      	mov	r2, r5
 80152b0:	4b0f      	ldr	r3, [pc, #60]	; (80152f0 <_svfiprintf_r+0x1f8>)
 80152b2:	a904      	add	r1, sp, #16
 80152b4:	4638      	mov	r0, r7
 80152b6:	f7fd fcdb 	bl	8012c70 <_printf_float>
 80152ba:	1c42      	adds	r2, r0, #1
 80152bc:	4606      	mov	r6, r0
 80152be:	d1d6      	bne.n	801526e <_svfiprintf_r+0x176>
 80152c0:	89ab      	ldrh	r3, [r5, #12]
 80152c2:	065b      	lsls	r3, r3, #25
 80152c4:	f53f af2c 	bmi.w	8015120 <_svfiprintf_r+0x28>
 80152c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152ca:	b01d      	add	sp, #116	; 0x74
 80152cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d0:	ab03      	add	r3, sp, #12
 80152d2:	9300      	str	r3, [sp, #0]
 80152d4:	462a      	mov	r2, r5
 80152d6:	4b06      	ldr	r3, [pc, #24]	; (80152f0 <_svfiprintf_r+0x1f8>)
 80152d8:	a904      	add	r1, sp, #16
 80152da:	4638      	mov	r0, r7
 80152dc:	f7fd ff6c 	bl	80131b8 <_printf_i>
 80152e0:	e7eb      	b.n	80152ba <_svfiprintf_r+0x1c2>
 80152e2:	bf00      	nop
 80152e4:	0801b7dc 	.word	0x0801b7dc
 80152e8:	0801b7e6 	.word	0x0801b7e6
 80152ec:	08012c71 	.word	0x08012c71
 80152f0:	08015043 	.word	0x08015043
 80152f4:	0801b7e2 	.word	0x0801b7e2

080152f8 <__sfputc_r>:
 80152f8:	6893      	ldr	r3, [r2, #8]
 80152fa:	3b01      	subs	r3, #1
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	b410      	push	{r4}
 8015300:	6093      	str	r3, [r2, #8]
 8015302:	da08      	bge.n	8015316 <__sfputc_r+0x1e>
 8015304:	6994      	ldr	r4, [r2, #24]
 8015306:	42a3      	cmp	r3, r4
 8015308:	db01      	blt.n	801530e <__sfputc_r+0x16>
 801530a:	290a      	cmp	r1, #10
 801530c:	d103      	bne.n	8015316 <__sfputc_r+0x1e>
 801530e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015312:	f7fe b94b 	b.w	80135ac <__swbuf_r>
 8015316:	6813      	ldr	r3, [r2, #0]
 8015318:	1c58      	adds	r0, r3, #1
 801531a:	6010      	str	r0, [r2, #0]
 801531c:	7019      	strb	r1, [r3, #0]
 801531e:	4608      	mov	r0, r1
 8015320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015324:	4770      	bx	lr

08015326 <__sfputs_r>:
 8015326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015328:	4606      	mov	r6, r0
 801532a:	460f      	mov	r7, r1
 801532c:	4614      	mov	r4, r2
 801532e:	18d5      	adds	r5, r2, r3
 8015330:	42ac      	cmp	r4, r5
 8015332:	d101      	bne.n	8015338 <__sfputs_r+0x12>
 8015334:	2000      	movs	r0, #0
 8015336:	e007      	b.n	8015348 <__sfputs_r+0x22>
 8015338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801533c:	463a      	mov	r2, r7
 801533e:	4630      	mov	r0, r6
 8015340:	f7ff ffda 	bl	80152f8 <__sfputc_r>
 8015344:	1c43      	adds	r3, r0, #1
 8015346:	d1f3      	bne.n	8015330 <__sfputs_r+0xa>
 8015348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801534c <_vfiprintf_r>:
 801534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015350:	460d      	mov	r5, r1
 8015352:	b09d      	sub	sp, #116	; 0x74
 8015354:	4614      	mov	r4, r2
 8015356:	4698      	mov	r8, r3
 8015358:	4606      	mov	r6, r0
 801535a:	b118      	cbz	r0, 8015364 <_vfiprintf_r+0x18>
 801535c:	6983      	ldr	r3, [r0, #24]
 801535e:	b90b      	cbnz	r3, 8015364 <_vfiprintf_r+0x18>
 8015360:	f7ff f994 	bl	801468c <__sinit>
 8015364:	4b89      	ldr	r3, [pc, #548]	; (801558c <_vfiprintf_r+0x240>)
 8015366:	429d      	cmp	r5, r3
 8015368:	d11b      	bne.n	80153a2 <_vfiprintf_r+0x56>
 801536a:	6875      	ldr	r5, [r6, #4]
 801536c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801536e:	07d9      	lsls	r1, r3, #31
 8015370:	d405      	bmi.n	801537e <_vfiprintf_r+0x32>
 8015372:	89ab      	ldrh	r3, [r5, #12]
 8015374:	059a      	lsls	r2, r3, #22
 8015376:	d402      	bmi.n	801537e <_vfiprintf_r+0x32>
 8015378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801537a:	f7ff fa3c 	bl	80147f6 <__retarget_lock_acquire_recursive>
 801537e:	89ab      	ldrh	r3, [r5, #12]
 8015380:	071b      	lsls	r3, r3, #28
 8015382:	d501      	bpl.n	8015388 <_vfiprintf_r+0x3c>
 8015384:	692b      	ldr	r3, [r5, #16]
 8015386:	b9eb      	cbnz	r3, 80153c4 <_vfiprintf_r+0x78>
 8015388:	4629      	mov	r1, r5
 801538a:	4630      	mov	r0, r6
 801538c:	f7fe f960 	bl	8013650 <__swsetup_r>
 8015390:	b1c0      	cbz	r0, 80153c4 <_vfiprintf_r+0x78>
 8015392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015394:	07dc      	lsls	r4, r3, #31
 8015396:	d50e      	bpl.n	80153b6 <_vfiprintf_r+0x6a>
 8015398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801539c:	b01d      	add	sp, #116	; 0x74
 801539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153a2:	4b7b      	ldr	r3, [pc, #492]	; (8015590 <_vfiprintf_r+0x244>)
 80153a4:	429d      	cmp	r5, r3
 80153a6:	d101      	bne.n	80153ac <_vfiprintf_r+0x60>
 80153a8:	68b5      	ldr	r5, [r6, #8]
 80153aa:	e7df      	b.n	801536c <_vfiprintf_r+0x20>
 80153ac:	4b79      	ldr	r3, [pc, #484]	; (8015594 <_vfiprintf_r+0x248>)
 80153ae:	429d      	cmp	r5, r3
 80153b0:	bf08      	it	eq
 80153b2:	68f5      	ldreq	r5, [r6, #12]
 80153b4:	e7da      	b.n	801536c <_vfiprintf_r+0x20>
 80153b6:	89ab      	ldrh	r3, [r5, #12]
 80153b8:	0598      	lsls	r0, r3, #22
 80153ba:	d4ed      	bmi.n	8015398 <_vfiprintf_r+0x4c>
 80153bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153be:	f7ff fa1b 	bl	80147f8 <__retarget_lock_release_recursive>
 80153c2:	e7e9      	b.n	8015398 <_vfiprintf_r+0x4c>
 80153c4:	2300      	movs	r3, #0
 80153c6:	9309      	str	r3, [sp, #36]	; 0x24
 80153c8:	2320      	movs	r3, #32
 80153ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80153d2:	2330      	movs	r3, #48	; 0x30
 80153d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015598 <_vfiprintf_r+0x24c>
 80153d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80153dc:	f04f 0901 	mov.w	r9, #1
 80153e0:	4623      	mov	r3, r4
 80153e2:	469a      	mov	sl, r3
 80153e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153e8:	b10a      	cbz	r2, 80153ee <_vfiprintf_r+0xa2>
 80153ea:	2a25      	cmp	r2, #37	; 0x25
 80153ec:	d1f9      	bne.n	80153e2 <_vfiprintf_r+0x96>
 80153ee:	ebba 0b04 	subs.w	fp, sl, r4
 80153f2:	d00b      	beq.n	801540c <_vfiprintf_r+0xc0>
 80153f4:	465b      	mov	r3, fp
 80153f6:	4622      	mov	r2, r4
 80153f8:	4629      	mov	r1, r5
 80153fa:	4630      	mov	r0, r6
 80153fc:	f7ff ff93 	bl	8015326 <__sfputs_r>
 8015400:	3001      	adds	r0, #1
 8015402:	f000 80aa 	beq.w	801555a <_vfiprintf_r+0x20e>
 8015406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015408:	445a      	add	r2, fp
 801540a:	9209      	str	r2, [sp, #36]	; 0x24
 801540c:	f89a 3000 	ldrb.w	r3, [sl]
 8015410:	2b00      	cmp	r3, #0
 8015412:	f000 80a2 	beq.w	801555a <_vfiprintf_r+0x20e>
 8015416:	2300      	movs	r3, #0
 8015418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801541c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015420:	f10a 0a01 	add.w	sl, sl, #1
 8015424:	9304      	str	r3, [sp, #16]
 8015426:	9307      	str	r3, [sp, #28]
 8015428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801542c:	931a      	str	r3, [sp, #104]	; 0x68
 801542e:	4654      	mov	r4, sl
 8015430:	2205      	movs	r2, #5
 8015432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015436:	4858      	ldr	r0, [pc, #352]	; (8015598 <_vfiprintf_r+0x24c>)
 8015438:	f7ea fef2 	bl	8000220 <memchr>
 801543c:	9a04      	ldr	r2, [sp, #16]
 801543e:	b9d8      	cbnz	r0, 8015478 <_vfiprintf_r+0x12c>
 8015440:	06d1      	lsls	r1, r2, #27
 8015442:	bf44      	itt	mi
 8015444:	2320      	movmi	r3, #32
 8015446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801544a:	0713      	lsls	r3, r2, #28
 801544c:	bf44      	itt	mi
 801544e:	232b      	movmi	r3, #43	; 0x2b
 8015450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015454:	f89a 3000 	ldrb.w	r3, [sl]
 8015458:	2b2a      	cmp	r3, #42	; 0x2a
 801545a:	d015      	beq.n	8015488 <_vfiprintf_r+0x13c>
 801545c:	9a07      	ldr	r2, [sp, #28]
 801545e:	4654      	mov	r4, sl
 8015460:	2000      	movs	r0, #0
 8015462:	f04f 0c0a 	mov.w	ip, #10
 8015466:	4621      	mov	r1, r4
 8015468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801546c:	3b30      	subs	r3, #48	; 0x30
 801546e:	2b09      	cmp	r3, #9
 8015470:	d94e      	bls.n	8015510 <_vfiprintf_r+0x1c4>
 8015472:	b1b0      	cbz	r0, 80154a2 <_vfiprintf_r+0x156>
 8015474:	9207      	str	r2, [sp, #28]
 8015476:	e014      	b.n	80154a2 <_vfiprintf_r+0x156>
 8015478:	eba0 0308 	sub.w	r3, r0, r8
 801547c:	fa09 f303 	lsl.w	r3, r9, r3
 8015480:	4313      	orrs	r3, r2
 8015482:	9304      	str	r3, [sp, #16]
 8015484:	46a2      	mov	sl, r4
 8015486:	e7d2      	b.n	801542e <_vfiprintf_r+0xe2>
 8015488:	9b03      	ldr	r3, [sp, #12]
 801548a:	1d19      	adds	r1, r3, #4
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	9103      	str	r1, [sp, #12]
 8015490:	2b00      	cmp	r3, #0
 8015492:	bfbb      	ittet	lt
 8015494:	425b      	neglt	r3, r3
 8015496:	f042 0202 	orrlt.w	r2, r2, #2
 801549a:	9307      	strge	r3, [sp, #28]
 801549c:	9307      	strlt	r3, [sp, #28]
 801549e:	bfb8      	it	lt
 80154a0:	9204      	strlt	r2, [sp, #16]
 80154a2:	7823      	ldrb	r3, [r4, #0]
 80154a4:	2b2e      	cmp	r3, #46	; 0x2e
 80154a6:	d10c      	bne.n	80154c2 <_vfiprintf_r+0x176>
 80154a8:	7863      	ldrb	r3, [r4, #1]
 80154aa:	2b2a      	cmp	r3, #42	; 0x2a
 80154ac:	d135      	bne.n	801551a <_vfiprintf_r+0x1ce>
 80154ae:	9b03      	ldr	r3, [sp, #12]
 80154b0:	1d1a      	adds	r2, r3, #4
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	9203      	str	r2, [sp, #12]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	bfb8      	it	lt
 80154ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80154be:	3402      	adds	r4, #2
 80154c0:	9305      	str	r3, [sp, #20]
 80154c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80155a8 <_vfiprintf_r+0x25c>
 80154c6:	7821      	ldrb	r1, [r4, #0]
 80154c8:	2203      	movs	r2, #3
 80154ca:	4650      	mov	r0, sl
 80154cc:	f7ea fea8 	bl	8000220 <memchr>
 80154d0:	b140      	cbz	r0, 80154e4 <_vfiprintf_r+0x198>
 80154d2:	2340      	movs	r3, #64	; 0x40
 80154d4:	eba0 000a 	sub.w	r0, r0, sl
 80154d8:	fa03 f000 	lsl.w	r0, r3, r0
 80154dc:	9b04      	ldr	r3, [sp, #16]
 80154de:	4303      	orrs	r3, r0
 80154e0:	3401      	adds	r4, #1
 80154e2:	9304      	str	r3, [sp, #16]
 80154e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154e8:	482c      	ldr	r0, [pc, #176]	; (801559c <_vfiprintf_r+0x250>)
 80154ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80154ee:	2206      	movs	r2, #6
 80154f0:	f7ea fe96 	bl	8000220 <memchr>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	d03f      	beq.n	8015578 <_vfiprintf_r+0x22c>
 80154f8:	4b29      	ldr	r3, [pc, #164]	; (80155a0 <_vfiprintf_r+0x254>)
 80154fa:	bb1b      	cbnz	r3, 8015544 <_vfiprintf_r+0x1f8>
 80154fc:	9b03      	ldr	r3, [sp, #12]
 80154fe:	3307      	adds	r3, #7
 8015500:	f023 0307 	bic.w	r3, r3, #7
 8015504:	3308      	adds	r3, #8
 8015506:	9303      	str	r3, [sp, #12]
 8015508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801550a:	443b      	add	r3, r7
 801550c:	9309      	str	r3, [sp, #36]	; 0x24
 801550e:	e767      	b.n	80153e0 <_vfiprintf_r+0x94>
 8015510:	fb0c 3202 	mla	r2, ip, r2, r3
 8015514:	460c      	mov	r4, r1
 8015516:	2001      	movs	r0, #1
 8015518:	e7a5      	b.n	8015466 <_vfiprintf_r+0x11a>
 801551a:	2300      	movs	r3, #0
 801551c:	3401      	adds	r4, #1
 801551e:	9305      	str	r3, [sp, #20]
 8015520:	4619      	mov	r1, r3
 8015522:	f04f 0c0a 	mov.w	ip, #10
 8015526:	4620      	mov	r0, r4
 8015528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801552c:	3a30      	subs	r2, #48	; 0x30
 801552e:	2a09      	cmp	r2, #9
 8015530:	d903      	bls.n	801553a <_vfiprintf_r+0x1ee>
 8015532:	2b00      	cmp	r3, #0
 8015534:	d0c5      	beq.n	80154c2 <_vfiprintf_r+0x176>
 8015536:	9105      	str	r1, [sp, #20]
 8015538:	e7c3      	b.n	80154c2 <_vfiprintf_r+0x176>
 801553a:	fb0c 2101 	mla	r1, ip, r1, r2
 801553e:	4604      	mov	r4, r0
 8015540:	2301      	movs	r3, #1
 8015542:	e7f0      	b.n	8015526 <_vfiprintf_r+0x1da>
 8015544:	ab03      	add	r3, sp, #12
 8015546:	9300      	str	r3, [sp, #0]
 8015548:	462a      	mov	r2, r5
 801554a:	4b16      	ldr	r3, [pc, #88]	; (80155a4 <_vfiprintf_r+0x258>)
 801554c:	a904      	add	r1, sp, #16
 801554e:	4630      	mov	r0, r6
 8015550:	f7fd fb8e 	bl	8012c70 <_printf_float>
 8015554:	4607      	mov	r7, r0
 8015556:	1c78      	adds	r0, r7, #1
 8015558:	d1d6      	bne.n	8015508 <_vfiprintf_r+0x1bc>
 801555a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801555c:	07d9      	lsls	r1, r3, #31
 801555e:	d405      	bmi.n	801556c <_vfiprintf_r+0x220>
 8015560:	89ab      	ldrh	r3, [r5, #12]
 8015562:	059a      	lsls	r2, r3, #22
 8015564:	d402      	bmi.n	801556c <_vfiprintf_r+0x220>
 8015566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015568:	f7ff f946 	bl	80147f8 <__retarget_lock_release_recursive>
 801556c:	89ab      	ldrh	r3, [r5, #12]
 801556e:	065b      	lsls	r3, r3, #25
 8015570:	f53f af12 	bmi.w	8015398 <_vfiprintf_r+0x4c>
 8015574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015576:	e711      	b.n	801539c <_vfiprintf_r+0x50>
 8015578:	ab03      	add	r3, sp, #12
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	462a      	mov	r2, r5
 801557e:	4b09      	ldr	r3, [pc, #36]	; (80155a4 <_vfiprintf_r+0x258>)
 8015580:	a904      	add	r1, sp, #16
 8015582:	4630      	mov	r0, r6
 8015584:	f7fd fe18 	bl	80131b8 <_printf_i>
 8015588:	e7e4      	b.n	8015554 <_vfiprintf_r+0x208>
 801558a:	bf00      	nop
 801558c:	0801b640 	.word	0x0801b640
 8015590:	0801b660 	.word	0x0801b660
 8015594:	0801b620 	.word	0x0801b620
 8015598:	0801b7dc 	.word	0x0801b7dc
 801559c:	0801b7e6 	.word	0x0801b7e6
 80155a0:	08012c71 	.word	0x08012c71
 80155a4:	08015327 	.word	0x08015327
 80155a8:	0801b7e2 	.word	0x0801b7e2

080155ac <_putc_r>:
 80155ac:	b570      	push	{r4, r5, r6, lr}
 80155ae:	460d      	mov	r5, r1
 80155b0:	4614      	mov	r4, r2
 80155b2:	4606      	mov	r6, r0
 80155b4:	b118      	cbz	r0, 80155be <_putc_r+0x12>
 80155b6:	6983      	ldr	r3, [r0, #24]
 80155b8:	b90b      	cbnz	r3, 80155be <_putc_r+0x12>
 80155ba:	f7ff f867 	bl	801468c <__sinit>
 80155be:	4b1c      	ldr	r3, [pc, #112]	; (8015630 <_putc_r+0x84>)
 80155c0:	429c      	cmp	r4, r3
 80155c2:	d124      	bne.n	801560e <_putc_r+0x62>
 80155c4:	6874      	ldr	r4, [r6, #4]
 80155c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155c8:	07d8      	lsls	r0, r3, #31
 80155ca:	d405      	bmi.n	80155d8 <_putc_r+0x2c>
 80155cc:	89a3      	ldrh	r3, [r4, #12]
 80155ce:	0599      	lsls	r1, r3, #22
 80155d0:	d402      	bmi.n	80155d8 <_putc_r+0x2c>
 80155d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155d4:	f7ff f90f 	bl	80147f6 <__retarget_lock_acquire_recursive>
 80155d8:	68a3      	ldr	r3, [r4, #8]
 80155da:	3b01      	subs	r3, #1
 80155dc:	2b00      	cmp	r3, #0
 80155de:	60a3      	str	r3, [r4, #8]
 80155e0:	da05      	bge.n	80155ee <_putc_r+0x42>
 80155e2:	69a2      	ldr	r2, [r4, #24]
 80155e4:	4293      	cmp	r3, r2
 80155e6:	db1c      	blt.n	8015622 <_putc_r+0x76>
 80155e8:	b2eb      	uxtb	r3, r5
 80155ea:	2b0a      	cmp	r3, #10
 80155ec:	d019      	beq.n	8015622 <_putc_r+0x76>
 80155ee:	6823      	ldr	r3, [r4, #0]
 80155f0:	1c5a      	adds	r2, r3, #1
 80155f2:	6022      	str	r2, [r4, #0]
 80155f4:	701d      	strb	r5, [r3, #0]
 80155f6:	b2ed      	uxtb	r5, r5
 80155f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155fa:	07da      	lsls	r2, r3, #31
 80155fc:	d405      	bmi.n	801560a <_putc_r+0x5e>
 80155fe:	89a3      	ldrh	r3, [r4, #12]
 8015600:	059b      	lsls	r3, r3, #22
 8015602:	d402      	bmi.n	801560a <_putc_r+0x5e>
 8015604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015606:	f7ff f8f7 	bl	80147f8 <__retarget_lock_release_recursive>
 801560a:	4628      	mov	r0, r5
 801560c:	bd70      	pop	{r4, r5, r6, pc}
 801560e:	4b09      	ldr	r3, [pc, #36]	; (8015634 <_putc_r+0x88>)
 8015610:	429c      	cmp	r4, r3
 8015612:	d101      	bne.n	8015618 <_putc_r+0x6c>
 8015614:	68b4      	ldr	r4, [r6, #8]
 8015616:	e7d6      	b.n	80155c6 <_putc_r+0x1a>
 8015618:	4b07      	ldr	r3, [pc, #28]	; (8015638 <_putc_r+0x8c>)
 801561a:	429c      	cmp	r4, r3
 801561c:	bf08      	it	eq
 801561e:	68f4      	ldreq	r4, [r6, #12]
 8015620:	e7d1      	b.n	80155c6 <_putc_r+0x1a>
 8015622:	4629      	mov	r1, r5
 8015624:	4622      	mov	r2, r4
 8015626:	4630      	mov	r0, r6
 8015628:	f7fd ffc0 	bl	80135ac <__swbuf_r>
 801562c:	4605      	mov	r5, r0
 801562e:	e7e3      	b.n	80155f8 <_putc_r+0x4c>
 8015630:	0801b640 	.word	0x0801b640
 8015634:	0801b660 	.word	0x0801b660
 8015638:	0801b620 	.word	0x0801b620

0801563c <__sread>:
 801563c:	b510      	push	{r4, lr}
 801563e:	460c      	mov	r4, r1
 8015640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015644:	f000 f8d0 	bl	80157e8 <_read_r>
 8015648:	2800      	cmp	r0, #0
 801564a:	bfab      	itete	ge
 801564c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801564e:	89a3      	ldrhlt	r3, [r4, #12]
 8015650:	181b      	addge	r3, r3, r0
 8015652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015656:	bfac      	ite	ge
 8015658:	6563      	strge	r3, [r4, #84]	; 0x54
 801565a:	81a3      	strhlt	r3, [r4, #12]
 801565c:	bd10      	pop	{r4, pc}

0801565e <__swrite>:
 801565e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015662:	461f      	mov	r7, r3
 8015664:	898b      	ldrh	r3, [r1, #12]
 8015666:	05db      	lsls	r3, r3, #23
 8015668:	4605      	mov	r5, r0
 801566a:	460c      	mov	r4, r1
 801566c:	4616      	mov	r6, r2
 801566e:	d505      	bpl.n	801567c <__swrite+0x1e>
 8015670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015674:	2302      	movs	r3, #2
 8015676:	2200      	movs	r2, #0
 8015678:	f000 f870 	bl	801575c <_lseek_r>
 801567c:	89a3      	ldrh	r3, [r4, #12]
 801567e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015686:	81a3      	strh	r3, [r4, #12]
 8015688:	4632      	mov	r2, r6
 801568a:	463b      	mov	r3, r7
 801568c:	4628      	mov	r0, r5
 801568e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015692:	f000 b817 	b.w	80156c4 <_write_r>

08015696 <__sseek>:
 8015696:	b510      	push	{r4, lr}
 8015698:	460c      	mov	r4, r1
 801569a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801569e:	f000 f85d 	bl	801575c <_lseek_r>
 80156a2:	1c43      	adds	r3, r0, #1
 80156a4:	89a3      	ldrh	r3, [r4, #12]
 80156a6:	bf15      	itete	ne
 80156a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80156aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80156ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80156b2:	81a3      	strheq	r3, [r4, #12]
 80156b4:	bf18      	it	ne
 80156b6:	81a3      	strhne	r3, [r4, #12]
 80156b8:	bd10      	pop	{r4, pc}

080156ba <__sclose>:
 80156ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156be:	f000 b81b 	b.w	80156f8 <_close_r>
	...

080156c4 <_write_r>:
 80156c4:	b538      	push	{r3, r4, r5, lr}
 80156c6:	4d07      	ldr	r5, [pc, #28]	; (80156e4 <_write_r+0x20>)
 80156c8:	4604      	mov	r4, r0
 80156ca:	4608      	mov	r0, r1
 80156cc:	4611      	mov	r1, r2
 80156ce:	2200      	movs	r2, #0
 80156d0:	602a      	str	r2, [r5, #0]
 80156d2:	461a      	mov	r2, r3
 80156d4:	f7ee f829 	bl	800372a <_write>
 80156d8:	1c43      	adds	r3, r0, #1
 80156da:	d102      	bne.n	80156e2 <_write_r+0x1e>
 80156dc:	682b      	ldr	r3, [r5, #0]
 80156de:	b103      	cbz	r3, 80156e2 <_write_r+0x1e>
 80156e0:	6023      	str	r3, [r4, #0]
 80156e2:	bd38      	pop	{r3, r4, r5, pc}
 80156e4:	200417b8 	.word	0x200417b8

080156e8 <abort>:
 80156e8:	b508      	push	{r3, lr}
 80156ea:	2006      	movs	r0, #6
 80156ec:	f000 f8b6 	bl	801585c <raise>
 80156f0:	2001      	movs	r0, #1
 80156f2:	f7ed fff3 	bl	80036dc <_exit>
	...

080156f8 <_close_r>:
 80156f8:	b538      	push	{r3, r4, r5, lr}
 80156fa:	4d06      	ldr	r5, [pc, #24]	; (8015714 <_close_r+0x1c>)
 80156fc:	2300      	movs	r3, #0
 80156fe:	4604      	mov	r4, r0
 8015700:	4608      	mov	r0, r1
 8015702:	602b      	str	r3, [r5, #0]
 8015704:	f7ee f82d 	bl	8003762 <_close>
 8015708:	1c43      	adds	r3, r0, #1
 801570a:	d102      	bne.n	8015712 <_close_r+0x1a>
 801570c:	682b      	ldr	r3, [r5, #0]
 801570e:	b103      	cbz	r3, 8015712 <_close_r+0x1a>
 8015710:	6023      	str	r3, [r4, #0]
 8015712:	bd38      	pop	{r3, r4, r5, pc}
 8015714:	200417b8 	.word	0x200417b8

08015718 <_fstat_r>:
 8015718:	b538      	push	{r3, r4, r5, lr}
 801571a:	4d07      	ldr	r5, [pc, #28]	; (8015738 <_fstat_r+0x20>)
 801571c:	2300      	movs	r3, #0
 801571e:	4604      	mov	r4, r0
 8015720:	4608      	mov	r0, r1
 8015722:	4611      	mov	r1, r2
 8015724:	602b      	str	r3, [r5, #0]
 8015726:	f7ee f828 	bl	800377a <_fstat>
 801572a:	1c43      	adds	r3, r0, #1
 801572c:	d102      	bne.n	8015734 <_fstat_r+0x1c>
 801572e:	682b      	ldr	r3, [r5, #0]
 8015730:	b103      	cbz	r3, 8015734 <_fstat_r+0x1c>
 8015732:	6023      	str	r3, [r4, #0]
 8015734:	bd38      	pop	{r3, r4, r5, pc}
 8015736:	bf00      	nop
 8015738:	200417b8 	.word	0x200417b8

0801573c <_isatty_r>:
 801573c:	b538      	push	{r3, r4, r5, lr}
 801573e:	4d06      	ldr	r5, [pc, #24]	; (8015758 <_isatty_r+0x1c>)
 8015740:	2300      	movs	r3, #0
 8015742:	4604      	mov	r4, r0
 8015744:	4608      	mov	r0, r1
 8015746:	602b      	str	r3, [r5, #0]
 8015748:	f7ee f827 	bl	800379a <_isatty>
 801574c:	1c43      	adds	r3, r0, #1
 801574e:	d102      	bne.n	8015756 <_isatty_r+0x1a>
 8015750:	682b      	ldr	r3, [r5, #0]
 8015752:	b103      	cbz	r3, 8015756 <_isatty_r+0x1a>
 8015754:	6023      	str	r3, [r4, #0]
 8015756:	bd38      	pop	{r3, r4, r5, pc}
 8015758:	200417b8 	.word	0x200417b8

0801575c <_lseek_r>:
 801575c:	b538      	push	{r3, r4, r5, lr}
 801575e:	4d07      	ldr	r5, [pc, #28]	; (801577c <_lseek_r+0x20>)
 8015760:	4604      	mov	r4, r0
 8015762:	4608      	mov	r0, r1
 8015764:	4611      	mov	r1, r2
 8015766:	2200      	movs	r2, #0
 8015768:	602a      	str	r2, [r5, #0]
 801576a:	461a      	mov	r2, r3
 801576c:	f7ee f820 	bl	80037b0 <_lseek>
 8015770:	1c43      	adds	r3, r0, #1
 8015772:	d102      	bne.n	801577a <_lseek_r+0x1e>
 8015774:	682b      	ldr	r3, [r5, #0]
 8015776:	b103      	cbz	r3, 801577a <_lseek_r+0x1e>
 8015778:	6023      	str	r3, [r4, #0]
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	200417b8 	.word	0x200417b8

08015780 <__ascii_mbtowc>:
 8015780:	b082      	sub	sp, #8
 8015782:	b901      	cbnz	r1, 8015786 <__ascii_mbtowc+0x6>
 8015784:	a901      	add	r1, sp, #4
 8015786:	b142      	cbz	r2, 801579a <__ascii_mbtowc+0x1a>
 8015788:	b14b      	cbz	r3, 801579e <__ascii_mbtowc+0x1e>
 801578a:	7813      	ldrb	r3, [r2, #0]
 801578c:	600b      	str	r3, [r1, #0]
 801578e:	7812      	ldrb	r2, [r2, #0]
 8015790:	1e10      	subs	r0, r2, #0
 8015792:	bf18      	it	ne
 8015794:	2001      	movne	r0, #1
 8015796:	b002      	add	sp, #8
 8015798:	4770      	bx	lr
 801579a:	4610      	mov	r0, r2
 801579c:	e7fb      	b.n	8015796 <__ascii_mbtowc+0x16>
 801579e:	f06f 0001 	mvn.w	r0, #1
 80157a2:	e7f8      	b.n	8015796 <__ascii_mbtowc+0x16>

080157a4 <memmove>:
 80157a4:	4288      	cmp	r0, r1
 80157a6:	b510      	push	{r4, lr}
 80157a8:	eb01 0402 	add.w	r4, r1, r2
 80157ac:	d902      	bls.n	80157b4 <memmove+0x10>
 80157ae:	4284      	cmp	r4, r0
 80157b0:	4623      	mov	r3, r4
 80157b2:	d807      	bhi.n	80157c4 <memmove+0x20>
 80157b4:	1e43      	subs	r3, r0, #1
 80157b6:	42a1      	cmp	r1, r4
 80157b8:	d008      	beq.n	80157cc <memmove+0x28>
 80157ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157c2:	e7f8      	b.n	80157b6 <memmove+0x12>
 80157c4:	4402      	add	r2, r0
 80157c6:	4601      	mov	r1, r0
 80157c8:	428a      	cmp	r2, r1
 80157ca:	d100      	bne.n	80157ce <memmove+0x2a>
 80157cc:	bd10      	pop	{r4, pc}
 80157ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80157d6:	e7f7      	b.n	80157c8 <memmove+0x24>

080157d8 <_malloc_usable_size_r>:
 80157d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157dc:	1f18      	subs	r0, r3, #4
 80157de:	2b00      	cmp	r3, #0
 80157e0:	bfbc      	itt	lt
 80157e2:	580b      	ldrlt	r3, [r1, r0]
 80157e4:	18c0      	addlt	r0, r0, r3
 80157e6:	4770      	bx	lr

080157e8 <_read_r>:
 80157e8:	b538      	push	{r3, r4, r5, lr}
 80157ea:	4d07      	ldr	r5, [pc, #28]	; (8015808 <_read_r+0x20>)
 80157ec:	4604      	mov	r4, r0
 80157ee:	4608      	mov	r0, r1
 80157f0:	4611      	mov	r1, r2
 80157f2:	2200      	movs	r2, #0
 80157f4:	602a      	str	r2, [r5, #0]
 80157f6:	461a      	mov	r2, r3
 80157f8:	f7ed ff7a 	bl	80036f0 <_read>
 80157fc:	1c43      	adds	r3, r0, #1
 80157fe:	d102      	bne.n	8015806 <_read_r+0x1e>
 8015800:	682b      	ldr	r3, [r5, #0]
 8015802:	b103      	cbz	r3, 8015806 <_read_r+0x1e>
 8015804:	6023      	str	r3, [r4, #0]
 8015806:	bd38      	pop	{r3, r4, r5, pc}
 8015808:	200417b8 	.word	0x200417b8

0801580c <_raise_r>:
 801580c:	291f      	cmp	r1, #31
 801580e:	b538      	push	{r3, r4, r5, lr}
 8015810:	4604      	mov	r4, r0
 8015812:	460d      	mov	r5, r1
 8015814:	d904      	bls.n	8015820 <_raise_r+0x14>
 8015816:	2316      	movs	r3, #22
 8015818:	6003      	str	r3, [r0, #0]
 801581a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801581e:	bd38      	pop	{r3, r4, r5, pc}
 8015820:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015822:	b112      	cbz	r2, 801582a <_raise_r+0x1e>
 8015824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015828:	b94b      	cbnz	r3, 801583e <_raise_r+0x32>
 801582a:	4620      	mov	r0, r4
 801582c:	f000 f830 	bl	8015890 <_getpid_r>
 8015830:	462a      	mov	r2, r5
 8015832:	4601      	mov	r1, r0
 8015834:	4620      	mov	r0, r4
 8015836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801583a:	f000 b817 	b.w	801586c <_kill_r>
 801583e:	2b01      	cmp	r3, #1
 8015840:	d00a      	beq.n	8015858 <_raise_r+0x4c>
 8015842:	1c59      	adds	r1, r3, #1
 8015844:	d103      	bne.n	801584e <_raise_r+0x42>
 8015846:	2316      	movs	r3, #22
 8015848:	6003      	str	r3, [r0, #0]
 801584a:	2001      	movs	r0, #1
 801584c:	e7e7      	b.n	801581e <_raise_r+0x12>
 801584e:	2400      	movs	r4, #0
 8015850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015854:	4628      	mov	r0, r5
 8015856:	4798      	blx	r3
 8015858:	2000      	movs	r0, #0
 801585a:	e7e0      	b.n	801581e <_raise_r+0x12>

0801585c <raise>:
 801585c:	4b02      	ldr	r3, [pc, #8]	; (8015868 <raise+0xc>)
 801585e:	4601      	mov	r1, r0
 8015860:	6818      	ldr	r0, [r3, #0]
 8015862:	f7ff bfd3 	b.w	801580c <_raise_r>
 8015866:	bf00      	nop
 8015868:	20000780 	.word	0x20000780

0801586c <_kill_r>:
 801586c:	b538      	push	{r3, r4, r5, lr}
 801586e:	4d07      	ldr	r5, [pc, #28]	; (801588c <_kill_r+0x20>)
 8015870:	2300      	movs	r3, #0
 8015872:	4604      	mov	r4, r0
 8015874:	4608      	mov	r0, r1
 8015876:	4611      	mov	r1, r2
 8015878:	602b      	str	r3, [r5, #0]
 801587a:	f7ed ff1f 	bl	80036bc <_kill>
 801587e:	1c43      	adds	r3, r0, #1
 8015880:	d102      	bne.n	8015888 <_kill_r+0x1c>
 8015882:	682b      	ldr	r3, [r5, #0]
 8015884:	b103      	cbz	r3, 8015888 <_kill_r+0x1c>
 8015886:	6023      	str	r3, [r4, #0]
 8015888:	bd38      	pop	{r3, r4, r5, pc}
 801588a:	bf00      	nop
 801588c:	200417b8 	.word	0x200417b8

08015890 <_getpid_r>:
 8015890:	f7ed bf0c 	b.w	80036ac <_getpid>

08015894 <__ascii_wctomb>:
 8015894:	b149      	cbz	r1, 80158aa <__ascii_wctomb+0x16>
 8015896:	2aff      	cmp	r2, #255	; 0xff
 8015898:	bf85      	ittet	hi
 801589a:	238a      	movhi	r3, #138	; 0x8a
 801589c:	6003      	strhi	r3, [r0, #0]
 801589e:	700a      	strbls	r2, [r1, #0]
 80158a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80158a4:	bf98      	it	ls
 80158a6:	2001      	movls	r0, #1
 80158a8:	4770      	bx	lr
 80158aa:	4608      	mov	r0, r1
 80158ac:	4770      	bx	lr

080158ae <fabsf>:
 80158ae:	ee10 3a10 	vmov	r3, s0
 80158b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158b6:	ee00 3a10 	vmov	s0, r3
 80158ba:	4770      	bx	lr

080158bc <tanhf>:
 80158bc:	b510      	push	{r4, lr}
 80158be:	ee10 4a10 	vmov	r4, s0
 80158c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80158c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158ca:	ed2d 8b02 	vpush	{d8}
 80158ce:	eeb0 7a40 	vmov.f32	s14, s0
 80158d2:	db0c      	blt.n	80158ee <tanhf+0x32>
 80158d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80158d8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80158dc:	2c00      	cmp	r4, #0
 80158de:	bfac      	ite	ge
 80158e0:	ee37 0a80 	vaddge.f32	s0, s15, s0
 80158e4:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 80158e8:	ecbd 8b02 	vpop	{d8}
 80158ec:	bd10      	pop	{r4, pc}
 80158ee:	4a1b      	ldr	r2, [pc, #108]	; (801595c <tanhf+0xa0>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	dc30      	bgt.n	8015956 <tanhf+0x9a>
 80158f4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80158f8:	da06      	bge.n	8015908 <tanhf+0x4c>
 80158fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80158fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015902:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015906:	e7ef      	b.n	80158e8 <tanhf+0x2c>
 8015908:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801590c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015910:	db12      	blt.n	8015938 <tanhf+0x7c>
 8015912:	f7ff ffcc 	bl	80158ae <fabsf>
 8015916:	ee30 0a00 	vadd.f32	s0, s0, s0
 801591a:	f000 fa31 	bl	8015d80 <expm1f>
 801591e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015922:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8015926:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801592a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801592e:	2c00      	cmp	r4, #0
 8015930:	bfb8      	it	lt
 8015932:	eeb1 0a40 	vneglt.f32	s0, s0
 8015936:	e7d7      	b.n	80158e8 <tanhf+0x2c>
 8015938:	f7ff ffb9 	bl	80158ae <fabsf>
 801593c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015940:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015944:	f000 fa1c 	bl	8015d80 <expm1f>
 8015948:	ee70 7a08 	vadd.f32	s15, s0, s16
 801594c:	eeb1 7a40 	vneg.f32	s14, s0
 8015950:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015954:	e7eb      	b.n	801592e <tanhf+0x72>
 8015956:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801595a:	e7e8      	b.n	801592e <tanhf+0x72>
 801595c:	41afffff 	.word	0x41afffff

08015960 <log10>:
 8015960:	b538      	push	{r3, r4, r5, lr}
 8015962:	ed2d 8b02 	vpush	{d8}
 8015966:	ec55 4b10 	vmov	r4, r5, d0
 801596a:	f000 f881 	bl	8015a70 <__ieee754_log10>
 801596e:	4b1e      	ldr	r3, [pc, #120]	; (80159e8 <log10+0x88>)
 8015970:	eeb0 8a40 	vmov.f32	s16, s0
 8015974:	eef0 8a60 	vmov.f32	s17, s1
 8015978:	f993 3000 	ldrsb.w	r3, [r3]
 801597c:	3301      	adds	r3, #1
 801597e:	d01a      	beq.n	80159b6 <log10+0x56>
 8015980:	4622      	mov	r2, r4
 8015982:	462b      	mov	r3, r5
 8015984:	4620      	mov	r0, r4
 8015986:	4629      	mov	r1, r5
 8015988:	f7eb f8f0 	bl	8000b6c <__aeabi_dcmpun>
 801598c:	b998      	cbnz	r0, 80159b6 <log10+0x56>
 801598e:	2200      	movs	r2, #0
 8015990:	2300      	movs	r3, #0
 8015992:	4620      	mov	r0, r4
 8015994:	4629      	mov	r1, r5
 8015996:	f7eb f8cb 	bl	8000b30 <__aeabi_dcmple>
 801599a:	b160      	cbz	r0, 80159b6 <log10+0x56>
 801599c:	2200      	movs	r2, #0
 801599e:	2300      	movs	r3, #0
 80159a0:	4620      	mov	r0, r4
 80159a2:	4629      	mov	r1, r5
 80159a4:	f7eb f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80159a8:	b160      	cbz	r0, 80159c4 <log10+0x64>
 80159aa:	f7fc ffcf 	bl	801294c <__errno>
 80159ae:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80159e0 <log10+0x80>
 80159b2:	2322      	movs	r3, #34	; 0x22
 80159b4:	6003      	str	r3, [r0, #0]
 80159b6:	eeb0 0a48 	vmov.f32	s0, s16
 80159ba:	eef0 0a68 	vmov.f32	s1, s17
 80159be:	ecbd 8b02 	vpop	{d8}
 80159c2:	bd38      	pop	{r3, r4, r5, pc}
 80159c4:	f7fc ffc2 	bl	801294c <__errno>
 80159c8:	ecbd 8b02 	vpop	{d8}
 80159cc:	2321      	movs	r3, #33	; 0x21
 80159ce:	6003      	str	r3, [r0, #0]
 80159d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159d4:	4805      	ldr	r0, [pc, #20]	; (80159ec <log10+0x8c>)
 80159d6:	f000 b9cb 	b.w	8015d70 <nan>
 80159da:	bf00      	nop
 80159dc:	f3af 8000 	nop.w
 80159e0:	00000000 	.word	0x00000000
 80159e4:	fff00000 	.word	0xfff00000
 80159e8:	20000950 	.word	0x20000950
 80159ec:	0801b58b 	.word	0x0801b58b

080159f0 <expf>:
 80159f0:	b508      	push	{r3, lr}
 80159f2:	ed2d 8b02 	vpush	{d8}
 80159f6:	eef0 8a40 	vmov.f32	s17, s0
 80159fa:	f000 f8c3 	bl	8015b84 <__ieee754_expf>
 80159fe:	4b16      	ldr	r3, [pc, #88]	; (8015a58 <expf+0x68>)
 8015a00:	f993 3000 	ldrsb.w	r3, [r3]
 8015a04:	3301      	adds	r3, #1
 8015a06:	eeb0 8a40 	vmov.f32	s16, s0
 8015a0a:	d011      	beq.n	8015a30 <expf+0x40>
 8015a0c:	eeb0 0a68 	vmov.f32	s0, s17
 8015a10:	f000 fad6 	bl	8015fc0 <finitef>
 8015a14:	b160      	cbz	r0, 8015a30 <expf+0x40>
 8015a16:	eddf 7a11 	vldr	s15, [pc, #68]	; 8015a5c <expf+0x6c>
 8015a1a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a22:	dd0a      	ble.n	8015a3a <expf+0x4a>
 8015a24:	f7fc ff92 	bl	801294c <__errno>
 8015a28:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8015a60 <expf+0x70>
 8015a2c:	2322      	movs	r3, #34	; 0x22
 8015a2e:	6003      	str	r3, [r0, #0]
 8015a30:	eeb0 0a48 	vmov.f32	s0, s16
 8015a34:	ecbd 8b02 	vpop	{d8}
 8015a38:	bd08      	pop	{r3, pc}
 8015a3a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015a64 <expf+0x74>
 8015a3e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a46:	d5f3      	bpl.n	8015a30 <expf+0x40>
 8015a48:	f7fc ff80 	bl	801294c <__errno>
 8015a4c:	2322      	movs	r3, #34	; 0x22
 8015a4e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8015a68 <expf+0x78>
 8015a52:	6003      	str	r3, [r0, #0]
 8015a54:	e7ec      	b.n	8015a30 <expf+0x40>
 8015a56:	bf00      	nop
 8015a58:	20000950 	.word	0x20000950
 8015a5c:	42b17180 	.word	0x42b17180
 8015a60:	7f800000 	.word	0x7f800000
 8015a64:	c2cff1b5 	.word	0xc2cff1b5
	...

08015a70 <__ieee754_log10>:
 8015a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a74:	ec55 4b10 	vmov	r4, r5, d0
 8015a78:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015a7c:	462b      	mov	r3, r5
 8015a7e:	da2f      	bge.n	8015ae0 <__ieee754_log10+0x70>
 8015a80:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8015a84:	4322      	orrs	r2, r4
 8015a86:	d109      	bne.n	8015a9c <__ieee754_log10+0x2c>
 8015a88:	493b      	ldr	r1, [pc, #236]	; (8015b78 <__ieee754_log10+0x108>)
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	2000      	movs	r0, #0
 8015a90:	f7ea fefc 	bl	800088c <__aeabi_ddiv>
 8015a94:	ec41 0b10 	vmov	d0, r0, r1
 8015a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a9c:	2d00      	cmp	r5, #0
 8015a9e:	da09      	bge.n	8015ab4 <__ieee754_log10+0x44>
 8015aa0:	ee10 2a10 	vmov	r2, s0
 8015aa4:	ee10 0a10 	vmov	r0, s0
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	f7ea fc0d 	bl	80002c8 <__aeabi_dsub>
 8015aae:	2200      	movs	r2, #0
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	e7ed      	b.n	8015a90 <__ieee754_log10+0x20>
 8015ab4:	4b31      	ldr	r3, [pc, #196]	; (8015b7c <__ieee754_log10+0x10c>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	4629      	mov	r1, r5
 8015aba:	ee10 0a10 	vmov	r0, s0
 8015abe:	f7ea fdbb 	bl	8000638 <__aeabi_dmul>
 8015ac2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	460d      	mov	r5, r1
 8015aca:	460b      	mov	r3, r1
 8015acc:	492c      	ldr	r1, [pc, #176]	; (8015b80 <__ieee754_log10+0x110>)
 8015ace:	428b      	cmp	r3, r1
 8015ad0:	dd08      	ble.n	8015ae4 <__ieee754_log10+0x74>
 8015ad2:	4622      	mov	r2, r4
 8015ad4:	462b      	mov	r3, r5
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7ea fbf7 	bl	80002cc <__adddf3>
 8015ade:	e7d9      	b.n	8015a94 <__ieee754_log10+0x24>
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	e7f3      	b.n	8015acc <__ieee754_log10+0x5c>
 8015ae4:	1518      	asrs	r0, r3, #20
 8015ae6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8015aea:	4410      	add	r0, r2
 8015aec:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8015af0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8015af4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8015af8:	f7ea fd34 	bl	8000564 <__aeabi_i2d>
 8015afc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8015b00:	3303      	adds	r3, #3
 8015b02:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8015b06:	ec45 4b10 	vmov	d0, r4, r5
 8015b0a:	4606      	mov	r6, r0
 8015b0c:	460f      	mov	r7, r1
 8015b0e:	f000 fa67 	bl	8015fe0 <__ieee754_log>
 8015b12:	a313      	add	r3, pc, #76	; (adr r3, 8015b60 <__ieee754_log10+0xf0>)
 8015b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b18:	4630      	mov	r0, r6
 8015b1a:	4639      	mov	r1, r7
 8015b1c:	ec59 8b10 	vmov	r8, r9, d0
 8015b20:	f7ea fd8a 	bl	8000638 <__aeabi_dmul>
 8015b24:	a310      	add	r3, pc, #64	; (adr r3, 8015b68 <__ieee754_log10+0xf8>)
 8015b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b2a:	4604      	mov	r4, r0
 8015b2c:	460d      	mov	r5, r1
 8015b2e:	4640      	mov	r0, r8
 8015b30:	4649      	mov	r1, r9
 8015b32:	f7ea fd81 	bl	8000638 <__aeabi_dmul>
 8015b36:	4602      	mov	r2, r0
 8015b38:	460b      	mov	r3, r1
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	4629      	mov	r1, r5
 8015b3e:	f7ea fbc5 	bl	80002cc <__adddf3>
 8015b42:	a30b      	add	r3, pc, #44	; (adr r3, 8015b70 <__ieee754_log10+0x100>)
 8015b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b48:	4604      	mov	r4, r0
 8015b4a:	460d      	mov	r5, r1
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	4639      	mov	r1, r7
 8015b50:	f7ea fd72 	bl	8000638 <__aeabi_dmul>
 8015b54:	4602      	mov	r2, r0
 8015b56:	460b      	mov	r3, r1
 8015b58:	4620      	mov	r0, r4
 8015b5a:	4629      	mov	r1, r5
 8015b5c:	e7bd      	b.n	8015ada <__ieee754_log10+0x6a>
 8015b5e:	bf00      	nop
 8015b60:	11f12b36 	.word	0x11f12b36
 8015b64:	3d59fef3 	.word	0x3d59fef3
 8015b68:	1526e50e 	.word	0x1526e50e
 8015b6c:	3fdbcb7b 	.word	0x3fdbcb7b
 8015b70:	509f6000 	.word	0x509f6000
 8015b74:	3fd34413 	.word	0x3fd34413
 8015b78:	c3500000 	.word	0xc3500000
 8015b7c:	43500000 	.word	0x43500000
 8015b80:	7fefffff 	.word	0x7fefffff

08015b84 <__ieee754_expf>:
 8015b84:	ee10 2a10 	vmov	r2, s0
 8015b88:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015b8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015b90:	d902      	bls.n	8015b98 <__ieee754_expf+0x14>
 8015b92:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015b96:	4770      	bx	lr
 8015b98:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8015b9c:	d106      	bne.n	8015bac <__ieee754_expf+0x28>
 8015b9e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8015ce4 <__ieee754_expf+0x160>
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	bf18      	it	ne
 8015ba6:	eeb0 0a67 	vmovne.f32	s0, s15
 8015baa:	4770      	bx	lr
 8015bac:	484e      	ldr	r0, [pc, #312]	; (8015ce8 <__ieee754_expf+0x164>)
 8015bae:	4282      	cmp	r2, r0
 8015bb0:	dd04      	ble.n	8015bbc <__ieee754_expf+0x38>
 8015bb2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015cec <__ieee754_expf+0x168>
 8015bb6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015bba:	4770      	bx	lr
 8015bbc:	2a00      	cmp	r2, #0
 8015bbe:	da03      	bge.n	8015bc8 <__ieee754_expf+0x44>
 8015bc0:	4a4b      	ldr	r2, [pc, #300]	; (8015cf0 <__ieee754_expf+0x16c>)
 8015bc2:	4291      	cmp	r1, r2
 8015bc4:	f200 808a 	bhi.w	8015cdc <__ieee754_expf+0x158>
 8015bc8:	4a4a      	ldr	r2, [pc, #296]	; (8015cf4 <__ieee754_expf+0x170>)
 8015bca:	4291      	cmp	r1, r2
 8015bcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015bd0:	d954      	bls.n	8015c7c <__ieee754_expf+0xf8>
 8015bd2:	4a49      	ldr	r2, [pc, #292]	; (8015cf8 <__ieee754_expf+0x174>)
 8015bd4:	4291      	cmp	r1, r2
 8015bd6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8015bda:	d836      	bhi.n	8015c4a <__ieee754_expf+0xc6>
 8015bdc:	4947      	ldr	r1, [pc, #284]	; (8015cfc <__ieee754_expf+0x178>)
 8015bde:	4411      	add	r1, r2
 8015be0:	ed91 7a00 	vldr	s14, [r1]
 8015be4:	4946      	ldr	r1, [pc, #280]	; (8015d00 <__ieee754_expf+0x17c>)
 8015be6:	440a      	add	r2, r1
 8015be8:	edd2 7a00 	vldr	s15, [r2]
 8015bec:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015bf0:	f1c3 0201 	rsb	r2, r3, #1
 8015bf4:	1ad2      	subs	r2, r2, r3
 8015bf6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015bfa:	ee60 6a00 	vmul.f32	s13, s0, s0
 8015bfe:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015d04 <__ieee754_expf+0x180>
 8015c02:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015d08 <__ieee754_expf+0x184>
 8015c06:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015c0a:	eddf 5a40 	vldr	s11, [pc, #256]	; 8015d0c <__ieee754_expf+0x188>
 8015c0e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015c12:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8015d10 <__ieee754_expf+0x18c>
 8015c16:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8015c1a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015d14 <__ieee754_expf+0x190>
 8015c1e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015c22:	eeb0 5a40 	vmov.f32	s10, s0
 8015c26:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8015c2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015c2e:	eef0 6a45 	vmov.f32	s13, s10
 8015c32:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015c36:	bb92      	cbnz	r2, 8015c9e <__ieee754_expf+0x11a>
 8015c38:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8015c3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015c40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015c44:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015c48:	4770      	bx	lr
 8015c4a:	4b33      	ldr	r3, [pc, #204]	; (8015d18 <__ieee754_expf+0x194>)
 8015c4c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8015d1c <__ieee754_expf+0x198>
 8015c50:	4413      	add	r3, r2
 8015c52:	edd3 7a00 	vldr	s15, [r3]
 8015c56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015c5a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015d20 <__ieee754_expf+0x19c>
 8015c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015c62:	ee17 2a90 	vmov	r2, s15
 8015c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015c6a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8015c72:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015d24 <__ieee754_expf+0x1a0>
 8015c76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015c7a:	e7bc      	b.n	8015bf6 <__ieee754_expf+0x72>
 8015c7c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8015c80:	d20b      	bcs.n	8015c9a <__ieee754_expf+0x116>
 8015c82:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015cec <__ieee754_expf+0x168>
 8015c86:	ee70 6a26 	vadd.f32	s13, s0, s13
 8015c8a:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c92:	dd02      	ble.n	8015c9a <__ieee754_expf+0x116>
 8015c94:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015c98:	4770      	bx	lr
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	e7ad      	b.n	8015bfa <__ieee754_expf+0x76>
 8015c9e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8015ca2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8015ca6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8015caa:	bfb8      	it	lt
 8015cac:	3264      	addlt	r2, #100	; 0x64
 8015cae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cb2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015cb6:	ee76 7a40 	vsub.f32	s15, s12, s0
 8015cba:	ee17 3a90 	vmov	r3, s15
 8015cbe:	bfab      	itete	ge
 8015cc0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015cc4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015cc8:	ee00 3a10 	vmovge	s0, r3
 8015ccc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015d28 <__ieee754_expf+0x1a4>
 8015cd0:	bfbc      	itt	lt
 8015cd2:	ee00 3a10 	vmovlt	s0, r3
 8015cd6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015cda:	4770      	bx	lr
 8015cdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015ce4 <__ieee754_expf+0x160>
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	00000000 	.word	0x00000000
 8015ce8:	42b17217 	.word	0x42b17217
 8015cec:	7149f2ca 	.word	0x7149f2ca
 8015cf0:	42cff1b5 	.word	0x42cff1b5
 8015cf4:	3eb17218 	.word	0x3eb17218
 8015cf8:	3f851591 	.word	0x3f851591
 8015cfc:	0801b900 	.word	0x0801b900
 8015d00:	0801b908 	.word	0x0801b908
 8015d04:	3331bb4c 	.word	0x3331bb4c
 8015d08:	b5ddea0e 	.word	0xb5ddea0e
 8015d0c:	388ab355 	.word	0x388ab355
 8015d10:	bb360b61 	.word	0xbb360b61
 8015d14:	3e2aaaab 	.word	0x3e2aaaab
 8015d18:	0801b8f8 	.word	0x0801b8f8
 8015d1c:	3fb8aa3b 	.word	0x3fb8aa3b
 8015d20:	3f317180 	.word	0x3f317180
 8015d24:	3717f7d1 	.word	0x3717f7d1
 8015d28:	0d800000 	.word	0x0d800000

08015d2c <with_errnof>:
 8015d2c:	b513      	push	{r0, r1, r4, lr}
 8015d2e:	4604      	mov	r4, r0
 8015d30:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015d34:	f7fc fe0a 	bl	801294c <__errno>
 8015d38:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015d3c:	6004      	str	r4, [r0, #0]
 8015d3e:	b002      	add	sp, #8
 8015d40:	bd10      	pop	{r4, pc}
	...

08015d44 <xflowf.constprop.0>:
 8015d44:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015d60 <xflowf.constprop.0+0x1c>
 8015d48:	eddf 7a06 	vldr	s15, [pc, #24]	; 8015d64 <xflowf.constprop.0+0x20>
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	bf08      	it	eq
 8015d50:	eef0 7a40 	vmoveq.f32	s15, s0
 8015d54:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d58:	2022      	movs	r0, #34	; 0x22
 8015d5a:	f7ff bfe7 	b.w	8015d2c <with_errnof>
 8015d5e:	bf00      	nop
 8015d60:	70000000 	.word	0x70000000
 8015d64:	f0000000 	.word	0xf0000000

08015d68 <__math_oflowf>:
 8015d68:	f7ff bfec 	b.w	8015d44 <xflowf.constprop.0>
 8015d6c:	0000      	movs	r0, r0
	...

08015d70 <nan>:
 8015d70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015d78 <nan+0x8>
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop
 8015d78:	00000000 	.word	0x00000000
 8015d7c:	7ff80000 	.word	0x7ff80000

08015d80 <expm1f>:
 8015d80:	ee10 2a10 	vmov	r2, s0
 8015d84:	497f      	ldr	r1, [pc, #508]	; (8015f84 <expm1f+0x204>)
 8015d86:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015d8a:	428b      	cmp	r3, r1
 8015d8c:	d921      	bls.n	8015dd2 <expm1f+0x52>
 8015d8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d92:	d902      	bls.n	8015d9a <expm1f+0x1a>
 8015d94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d98:	4770      	bx	lr
 8015d9a:	d106      	bne.n	8015daa <expm1f+0x2a>
 8015d9c:	2a00      	cmp	r2, #0
 8015d9e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015da2:	bfb8      	it	lt
 8015da4:	eeb0 0a67 	vmovlt.f32	s0, s15
 8015da8:	4770      	bx	lr
 8015daa:	2a00      	cmp	r2, #0
 8015dac:	db05      	blt.n	8015dba <expm1f+0x3a>
 8015dae:	4976      	ldr	r1, [pc, #472]	; (8015f88 <expm1f+0x208>)
 8015db0:	428b      	cmp	r3, r1
 8015db2:	d960      	bls.n	8015e76 <expm1f+0xf6>
 8015db4:	2000      	movs	r0, #0
 8015db6:	f7ff bfd7 	b.w	8015d68 <__math_oflowf>
 8015dba:	eddf 7a74 	vldr	s15, [pc, #464]	; 8015f8c <expm1f+0x20c>
 8015dbe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dca:	d554      	bpl.n	8015e76 <expm1f+0xf6>
 8015dcc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015dd0:	4770      	bx	lr
 8015dd2:	496f      	ldr	r1, [pc, #444]	; (8015f90 <expm1f+0x210>)
 8015dd4:	428b      	cmp	r3, r1
 8015dd6:	d96b      	bls.n	8015eb0 <expm1f+0x130>
 8015dd8:	496e      	ldr	r1, [pc, #440]	; (8015f94 <expm1f+0x214>)
 8015dda:	428b      	cmp	r3, r1
 8015ddc:	d84b      	bhi.n	8015e76 <expm1f+0xf6>
 8015dde:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8015f98 <expm1f+0x218>
 8015de2:	2a00      	cmp	r2, #0
 8015de4:	bfa7      	ittee	ge
 8015de6:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8015dea:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 8015f9c <expm1f+0x21c>
 8015dee:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 8015fa0 <expm1f+0x220>
 8015df2:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8015df6:	bfac      	ite	ge
 8015df8:	2301      	movge	r3, #1
 8015dfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015dfe:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015e02:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e0a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015e0e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8015e12:	eddf 6a64 	vldr	s13, [pc, #400]	; 8015fa4 <expm1f+0x224>
 8015e16:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8015fa8 <expm1f+0x228>
 8015e1a:	ee20 7a05 	vmul.f32	s14, s0, s10
 8015e1e:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015e22:	eddf 6a62 	vldr	s13, [pc, #392]	; 8015fac <expm1f+0x22c>
 8015e26:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015e2a:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8015fb0 <expm1f+0x230>
 8015e2e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015e32:	eddf 6a60 	vldr	s13, [pc, #384]	; 8015fb4 <expm1f+0x234>
 8015e36:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015e3a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015e3e:	eef0 4a46 	vmov.f32	s9, s12
 8015e42:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015e46:	eef0 6a64 	vmov.f32	s13, s9
 8015e4a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8015e4e:	eee5 4a66 	vfms.f32	s9, s10, s13
 8015e52:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8015e56:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8015e5a:	eee0 6a64 	vfms.f32	s13, s0, s9
 8015e5e:	eef0 4a66 	vmov.f32	s9, s13
 8015e62:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8015e66:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015e6a:	bb7b      	cbnz	r3, 8015ecc <expm1f+0x14c>
 8015e6c:	eef0 7a47 	vmov.f32	s15, s14
 8015e70:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8015e74:	e025      	b.n	8015ec2 <expm1f+0x142>
 8015e76:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015e7a:	2a00      	cmp	r2, #0
 8015e7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015e80:	bfb8      	it	lt
 8015e82:	eef0 7a47 	vmovlt.f32	s15, s14
 8015e86:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8015fb8 <expm1f+0x238>
 8015e8a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015f9c <expm1f+0x21c>
 8015e8e:	ee40 7a07 	vmla.f32	s15, s0, s14
 8015e92:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8015f98 <expm1f+0x218>
 8015e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e9a:	ee17 3a90 	vmov	r3, s15
 8015e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ea2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015ea6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015eaa:	eeb0 7a40 	vmov.f32	s14, s0
 8015eae:	e7a6      	b.n	8015dfe <expm1f+0x7e>
 8015eb0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8015eb4:	d208      	bcs.n	8015ec8 <expm1f+0x148>
 8015eb6:	eddf 7a41 	vldr	s15, [pc, #260]	; 8015fbc <expm1f+0x23c>
 8015eba:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015ebe:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8015ec2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015ec6:	4770      	bx	lr
 8015ec8:	2300      	movs	r3, #0
 8015eca:	e79e      	b.n	8015e0a <expm1f+0x8a>
 8015ecc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015ed0:	1c5a      	adds	r2, r3, #1
 8015ed2:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8015ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015eda:	d106      	bne.n	8015eea <expm1f+0x16a>
 8015edc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015ee0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015ee4:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015ee8:	4770      	bx	lr
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d118      	bne.n	8015f20 <expm1f+0x1a0>
 8015eee:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8015ef2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efa:	bf41      	itttt	mi
 8015efc:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8015f00:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8015f04:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8015f08:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8015f0c:	bf5f      	itttt	pl
 8015f0e:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8015f12:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8015f16:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8015f1a:	eeb0 0a46 	vmovpl.f32	s0, s12
 8015f1e:	4770      	bx	lr
 8015f20:	1c5a      	adds	r2, r3, #1
 8015f22:	2a39      	cmp	r2, #57	; 0x39
 8015f24:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8015f28:	d90b      	bls.n	8015f42 <expm1f+0x1c2>
 8015f2a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015f2e:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015f32:	ee10 3a10 	vmov	r3, s0
 8015f36:	440b      	add	r3, r1
 8015f38:	ee00 3a10 	vmov	s0, r3
 8015f3c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015f40:	4770      	bx	lr
 8015f42:	2b16      	cmp	r3, #22
 8015f44:	dc11      	bgt.n	8015f6a <expm1f+0x1ea>
 8015f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015f4a:	fa42 f303 	asr.w	r3, r2, r3
 8015f4e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8015f52:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015f56:	ee07 3a90 	vmov	s15, r3
 8015f5a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015f5e:	ee10 3a10 	vmov	r3, s0
 8015f62:	440b      	add	r3, r1
 8015f64:	ee00 3a10 	vmov	s0, r3
 8015f68:	4770      	bx	lr
 8015f6a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8015f6e:	05db      	lsls	r3, r3, #23
 8015f70:	ee07 3a10 	vmov	s14, r3
 8015f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015f7c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015f80:	e7ed      	b.n	8015f5e <expm1f+0x1de>
 8015f82:	bf00      	nop
 8015f84:	4195b843 	.word	0x4195b843
 8015f88:	42b17217 	.word	0x42b17217
 8015f8c:	0da24260 	.word	0x0da24260
 8015f90:	3eb17218 	.word	0x3eb17218
 8015f94:	3f851591 	.word	0x3f851591
 8015f98:	3f317180 	.word	0x3f317180
 8015f9c:	3717f7d1 	.word	0x3717f7d1
 8015fa0:	b717f7d1 	.word	0xb717f7d1
 8015fa4:	b457edbb 	.word	0xb457edbb
 8015fa8:	36867e54 	.word	0x36867e54
 8015fac:	b8a670cd 	.word	0xb8a670cd
 8015fb0:	3ad00d01 	.word	0x3ad00d01
 8015fb4:	bd088889 	.word	0xbd088889
 8015fb8:	3fb8aa3b 	.word	0x3fb8aa3b
 8015fbc:	7149f2ca 	.word	0x7149f2ca

08015fc0 <finitef>:
 8015fc0:	b082      	sub	sp, #8
 8015fc2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015fc6:	9801      	ldr	r0, [sp, #4]
 8015fc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015fcc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015fd0:	bfac      	ite	ge
 8015fd2:	2000      	movge	r0, #0
 8015fd4:	2001      	movlt	r0, #1
 8015fd6:	b002      	add	sp, #8
 8015fd8:	4770      	bx	lr
 8015fda:	0000      	movs	r0, r0
 8015fdc:	0000      	movs	r0, r0
	...

08015fe0 <__ieee754_log>:
 8015fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe4:	ec51 0b10 	vmov	r0, r1, d0
 8015fe8:	ed2d 8b04 	vpush	{d8-d9}
 8015fec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8015ff0:	b083      	sub	sp, #12
 8015ff2:	460d      	mov	r5, r1
 8015ff4:	da29      	bge.n	801604a <__ieee754_log+0x6a>
 8015ff6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015ffa:	4303      	orrs	r3, r0
 8015ffc:	ee10 2a10 	vmov	r2, s0
 8016000:	d10c      	bne.n	801601c <__ieee754_log+0x3c>
 8016002:	49cf      	ldr	r1, [pc, #828]	; (8016340 <__ieee754_log+0x360>)
 8016004:	2200      	movs	r2, #0
 8016006:	2300      	movs	r3, #0
 8016008:	2000      	movs	r0, #0
 801600a:	f7ea fc3f 	bl	800088c <__aeabi_ddiv>
 801600e:	ec41 0b10 	vmov	d0, r0, r1
 8016012:	b003      	add	sp, #12
 8016014:	ecbd 8b04 	vpop	{d8-d9}
 8016018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601c:	2900      	cmp	r1, #0
 801601e:	da05      	bge.n	801602c <__ieee754_log+0x4c>
 8016020:	460b      	mov	r3, r1
 8016022:	f7ea f951 	bl	80002c8 <__aeabi_dsub>
 8016026:	2200      	movs	r2, #0
 8016028:	2300      	movs	r3, #0
 801602a:	e7ee      	b.n	801600a <__ieee754_log+0x2a>
 801602c:	4bc5      	ldr	r3, [pc, #788]	; (8016344 <__ieee754_log+0x364>)
 801602e:	2200      	movs	r2, #0
 8016030:	f7ea fb02 	bl	8000638 <__aeabi_dmul>
 8016034:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8016038:	460d      	mov	r5, r1
 801603a:	4ac3      	ldr	r2, [pc, #780]	; (8016348 <__ieee754_log+0x368>)
 801603c:	4295      	cmp	r5, r2
 801603e:	dd06      	ble.n	801604e <__ieee754_log+0x6e>
 8016040:	4602      	mov	r2, r0
 8016042:	460b      	mov	r3, r1
 8016044:	f7ea f942 	bl	80002cc <__adddf3>
 8016048:	e7e1      	b.n	801600e <__ieee754_log+0x2e>
 801604a:	2300      	movs	r3, #0
 801604c:	e7f5      	b.n	801603a <__ieee754_log+0x5a>
 801604e:	152c      	asrs	r4, r5, #20
 8016050:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8016054:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8016058:	441c      	add	r4, r3
 801605a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801605e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8016062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016066:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801606a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801606e:	ea42 0105 	orr.w	r1, r2, r5
 8016072:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8016076:	2200      	movs	r2, #0
 8016078:	4bb4      	ldr	r3, [pc, #720]	; (801634c <__ieee754_log+0x36c>)
 801607a:	f7ea f925 	bl	80002c8 <__aeabi_dsub>
 801607e:	1cab      	adds	r3, r5, #2
 8016080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016084:	2b02      	cmp	r3, #2
 8016086:	4682      	mov	sl, r0
 8016088:	468b      	mov	fp, r1
 801608a:	f04f 0200 	mov.w	r2, #0
 801608e:	dc53      	bgt.n	8016138 <__ieee754_log+0x158>
 8016090:	2300      	movs	r3, #0
 8016092:	f7ea fd39 	bl	8000b08 <__aeabi_dcmpeq>
 8016096:	b1d0      	cbz	r0, 80160ce <__ieee754_log+0xee>
 8016098:	2c00      	cmp	r4, #0
 801609a:	f000 8122 	beq.w	80162e2 <__ieee754_log+0x302>
 801609e:	4620      	mov	r0, r4
 80160a0:	f7ea fa60 	bl	8000564 <__aeabi_i2d>
 80160a4:	a390      	add	r3, pc, #576	; (adr r3, 80162e8 <__ieee754_log+0x308>)
 80160a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160aa:	4606      	mov	r6, r0
 80160ac:	460f      	mov	r7, r1
 80160ae:	f7ea fac3 	bl	8000638 <__aeabi_dmul>
 80160b2:	a38f      	add	r3, pc, #572	; (adr r3, 80162f0 <__ieee754_log+0x310>)
 80160b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b8:	4604      	mov	r4, r0
 80160ba:	460d      	mov	r5, r1
 80160bc:	4630      	mov	r0, r6
 80160be:	4639      	mov	r1, r7
 80160c0:	f7ea faba 	bl	8000638 <__aeabi_dmul>
 80160c4:	4602      	mov	r2, r0
 80160c6:	460b      	mov	r3, r1
 80160c8:	4620      	mov	r0, r4
 80160ca:	4629      	mov	r1, r5
 80160cc:	e7ba      	b.n	8016044 <__ieee754_log+0x64>
 80160ce:	a38a      	add	r3, pc, #552	; (adr r3, 80162f8 <__ieee754_log+0x318>)
 80160d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d4:	4650      	mov	r0, sl
 80160d6:	4659      	mov	r1, fp
 80160d8:	f7ea faae 	bl	8000638 <__aeabi_dmul>
 80160dc:	4602      	mov	r2, r0
 80160de:	460b      	mov	r3, r1
 80160e0:	2000      	movs	r0, #0
 80160e2:	499b      	ldr	r1, [pc, #620]	; (8016350 <__ieee754_log+0x370>)
 80160e4:	f7ea f8f0 	bl	80002c8 <__aeabi_dsub>
 80160e8:	4652      	mov	r2, sl
 80160ea:	4606      	mov	r6, r0
 80160ec:	460f      	mov	r7, r1
 80160ee:	465b      	mov	r3, fp
 80160f0:	4650      	mov	r0, sl
 80160f2:	4659      	mov	r1, fp
 80160f4:	f7ea faa0 	bl	8000638 <__aeabi_dmul>
 80160f8:	4602      	mov	r2, r0
 80160fa:	460b      	mov	r3, r1
 80160fc:	4630      	mov	r0, r6
 80160fe:	4639      	mov	r1, r7
 8016100:	f7ea fa9a 	bl	8000638 <__aeabi_dmul>
 8016104:	4606      	mov	r6, r0
 8016106:	460f      	mov	r7, r1
 8016108:	b914      	cbnz	r4, 8016110 <__ieee754_log+0x130>
 801610a:	4632      	mov	r2, r6
 801610c:	463b      	mov	r3, r7
 801610e:	e0a2      	b.n	8016256 <__ieee754_log+0x276>
 8016110:	4620      	mov	r0, r4
 8016112:	f7ea fa27 	bl	8000564 <__aeabi_i2d>
 8016116:	a374      	add	r3, pc, #464	; (adr r3, 80162e8 <__ieee754_log+0x308>)
 8016118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801611c:	4680      	mov	r8, r0
 801611e:	4689      	mov	r9, r1
 8016120:	f7ea fa8a 	bl	8000638 <__aeabi_dmul>
 8016124:	a372      	add	r3, pc, #456	; (adr r3, 80162f0 <__ieee754_log+0x310>)
 8016126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612a:	4604      	mov	r4, r0
 801612c:	460d      	mov	r5, r1
 801612e:	4640      	mov	r0, r8
 8016130:	4649      	mov	r1, r9
 8016132:	f7ea fa81 	bl	8000638 <__aeabi_dmul>
 8016136:	e0a7      	b.n	8016288 <__ieee754_log+0x2a8>
 8016138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801613c:	f7ea f8c6 	bl	80002cc <__adddf3>
 8016140:	4602      	mov	r2, r0
 8016142:	460b      	mov	r3, r1
 8016144:	4650      	mov	r0, sl
 8016146:	4659      	mov	r1, fp
 8016148:	f7ea fba0 	bl	800088c <__aeabi_ddiv>
 801614c:	ec41 0b18 	vmov	d8, r0, r1
 8016150:	4620      	mov	r0, r4
 8016152:	f7ea fa07 	bl	8000564 <__aeabi_i2d>
 8016156:	ec53 2b18 	vmov	r2, r3, d8
 801615a:	ec41 0b19 	vmov	d9, r0, r1
 801615e:	ec51 0b18 	vmov	r0, r1, d8
 8016162:	f7ea fa69 	bl	8000638 <__aeabi_dmul>
 8016166:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801616a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801616e:	9301      	str	r3, [sp, #4]
 8016170:	4602      	mov	r2, r0
 8016172:	460b      	mov	r3, r1
 8016174:	4680      	mov	r8, r0
 8016176:	4689      	mov	r9, r1
 8016178:	f7ea fa5e 	bl	8000638 <__aeabi_dmul>
 801617c:	a360      	add	r3, pc, #384	; (adr r3, 8016300 <__ieee754_log+0x320>)
 801617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016182:	4606      	mov	r6, r0
 8016184:	460f      	mov	r7, r1
 8016186:	f7ea fa57 	bl	8000638 <__aeabi_dmul>
 801618a:	a35f      	add	r3, pc, #380	; (adr r3, 8016308 <__ieee754_log+0x328>)
 801618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016190:	f7ea f89c 	bl	80002cc <__adddf3>
 8016194:	4632      	mov	r2, r6
 8016196:	463b      	mov	r3, r7
 8016198:	f7ea fa4e 	bl	8000638 <__aeabi_dmul>
 801619c:	a35c      	add	r3, pc, #368	; (adr r3, 8016310 <__ieee754_log+0x330>)
 801619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a2:	f7ea f893 	bl	80002cc <__adddf3>
 80161a6:	4632      	mov	r2, r6
 80161a8:	463b      	mov	r3, r7
 80161aa:	f7ea fa45 	bl	8000638 <__aeabi_dmul>
 80161ae:	a35a      	add	r3, pc, #360	; (adr r3, 8016318 <__ieee754_log+0x338>)
 80161b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b4:	f7ea f88a 	bl	80002cc <__adddf3>
 80161b8:	4642      	mov	r2, r8
 80161ba:	464b      	mov	r3, r9
 80161bc:	f7ea fa3c 	bl	8000638 <__aeabi_dmul>
 80161c0:	a357      	add	r3, pc, #348	; (adr r3, 8016320 <__ieee754_log+0x340>)
 80161c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c6:	4680      	mov	r8, r0
 80161c8:	4689      	mov	r9, r1
 80161ca:	4630      	mov	r0, r6
 80161cc:	4639      	mov	r1, r7
 80161ce:	f7ea fa33 	bl	8000638 <__aeabi_dmul>
 80161d2:	a355      	add	r3, pc, #340	; (adr r3, 8016328 <__ieee754_log+0x348>)
 80161d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d8:	f7ea f878 	bl	80002cc <__adddf3>
 80161dc:	4632      	mov	r2, r6
 80161de:	463b      	mov	r3, r7
 80161e0:	f7ea fa2a 	bl	8000638 <__aeabi_dmul>
 80161e4:	a352      	add	r3, pc, #328	; (adr r3, 8016330 <__ieee754_log+0x350>)
 80161e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ea:	f7ea f86f 	bl	80002cc <__adddf3>
 80161ee:	4632      	mov	r2, r6
 80161f0:	463b      	mov	r3, r7
 80161f2:	f7ea fa21 	bl	8000638 <__aeabi_dmul>
 80161f6:	460b      	mov	r3, r1
 80161f8:	4602      	mov	r2, r0
 80161fa:	4649      	mov	r1, r9
 80161fc:	4640      	mov	r0, r8
 80161fe:	f7ea f865 	bl	80002cc <__adddf3>
 8016202:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8016206:	9b01      	ldr	r3, [sp, #4]
 8016208:	3551      	adds	r5, #81	; 0x51
 801620a:	431d      	orrs	r5, r3
 801620c:	2d00      	cmp	r5, #0
 801620e:	4680      	mov	r8, r0
 8016210:	4689      	mov	r9, r1
 8016212:	dd48      	ble.n	80162a6 <__ieee754_log+0x2c6>
 8016214:	4b4e      	ldr	r3, [pc, #312]	; (8016350 <__ieee754_log+0x370>)
 8016216:	2200      	movs	r2, #0
 8016218:	4650      	mov	r0, sl
 801621a:	4659      	mov	r1, fp
 801621c:	f7ea fa0c 	bl	8000638 <__aeabi_dmul>
 8016220:	4652      	mov	r2, sl
 8016222:	465b      	mov	r3, fp
 8016224:	f7ea fa08 	bl	8000638 <__aeabi_dmul>
 8016228:	4602      	mov	r2, r0
 801622a:	460b      	mov	r3, r1
 801622c:	4606      	mov	r6, r0
 801622e:	460f      	mov	r7, r1
 8016230:	4640      	mov	r0, r8
 8016232:	4649      	mov	r1, r9
 8016234:	f7ea f84a 	bl	80002cc <__adddf3>
 8016238:	ec53 2b18 	vmov	r2, r3, d8
 801623c:	f7ea f9fc 	bl	8000638 <__aeabi_dmul>
 8016240:	4680      	mov	r8, r0
 8016242:	4689      	mov	r9, r1
 8016244:	b964      	cbnz	r4, 8016260 <__ieee754_log+0x280>
 8016246:	4602      	mov	r2, r0
 8016248:	460b      	mov	r3, r1
 801624a:	4630      	mov	r0, r6
 801624c:	4639      	mov	r1, r7
 801624e:	f7ea f83b 	bl	80002c8 <__aeabi_dsub>
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	4650      	mov	r0, sl
 8016258:	4659      	mov	r1, fp
 801625a:	f7ea f835 	bl	80002c8 <__aeabi_dsub>
 801625e:	e6d6      	b.n	801600e <__ieee754_log+0x2e>
 8016260:	a321      	add	r3, pc, #132	; (adr r3, 80162e8 <__ieee754_log+0x308>)
 8016262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016266:	ec51 0b19 	vmov	r0, r1, d9
 801626a:	f7ea f9e5 	bl	8000638 <__aeabi_dmul>
 801626e:	a320      	add	r3, pc, #128	; (adr r3, 80162f0 <__ieee754_log+0x310>)
 8016270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016274:	4604      	mov	r4, r0
 8016276:	460d      	mov	r5, r1
 8016278:	ec51 0b19 	vmov	r0, r1, d9
 801627c:	f7ea f9dc 	bl	8000638 <__aeabi_dmul>
 8016280:	4642      	mov	r2, r8
 8016282:	464b      	mov	r3, r9
 8016284:	f7ea f822 	bl	80002cc <__adddf3>
 8016288:	4602      	mov	r2, r0
 801628a:	460b      	mov	r3, r1
 801628c:	4630      	mov	r0, r6
 801628e:	4639      	mov	r1, r7
 8016290:	f7ea f81a 	bl	80002c8 <__aeabi_dsub>
 8016294:	4652      	mov	r2, sl
 8016296:	465b      	mov	r3, fp
 8016298:	f7ea f816 	bl	80002c8 <__aeabi_dsub>
 801629c:	4602      	mov	r2, r0
 801629e:	460b      	mov	r3, r1
 80162a0:	4620      	mov	r0, r4
 80162a2:	4629      	mov	r1, r5
 80162a4:	e7d9      	b.n	801625a <__ieee754_log+0x27a>
 80162a6:	4602      	mov	r2, r0
 80162a8:	460b      	mov	r3, r1
 80162aa:	4650      	mov	r0, sl
 80162ac:	4659      	mov	r1, fp
 80162ae:	f7ea f80b 	bl	80002c8 <__aeabi_dsub>
 80162b2:	ec53 2b18 	vmov	r2, r3, d8
 80162b6:	f7ea f9bf 	bl	8000638 <__aeabi_dmul>
 80162ba:	4606      	mov	r6, r0
 80162bc:	460f      	mov	r7, r1
 80162be:	2c00      	cmp	r4, #0
 80162c0:	f43f af23 	beq.w	801610a <__ieee754_log+0x12a>
 80162c4:	a308      	add	r3, pc, #32	; (adr r3, 80162e8 <__ieee754_log+0x308>)
 80162c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ca:	ec51 0b19 	vmov	r0, r1, d9
 80162ce:	f7ea f9b3 	bl	8000638 <__aeabi_dmul>
 80162d2:	a307      	add	r3, pc, #28	; (adr r3, 80162f0 <__ieee754_log+0x310>)
 80162d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d8:	4604      	mov	r4, r0
 80162da:	460d      	mov	r5, r1
 80162dc:	ec51 0b19 	vmov	r0, r1, d9
 80162e0:	e727      	b.n	8016132 <__ieee754_log+0x152>
 80162e2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8016338 <__ieee754_log+0x358>
 80162e6:	e694      	b.n	8016012 <__ieee754_log+0x32>
 80162e8:	fee00000 	.word	0xfee00000
 80162ec:	3fe62e42 	.word	0x3fe62e42
 80162f0:	35793c76 	.word	0x35793c76
 80162f4:	3dea39ef 	.word	0x3dea39ef
 80162f8:	55555555 	.word	0x55555555
 80162fc:	3fd55555 	.word	0x3fd55555
 8016300:	df3e5244 	.word	0xdf3e5244
 8016304:	3fc2f112 	.word	0x3fc2f112
 8016308:	96cb03de 	.word	0x96cb03de
 801630c:	3fc74664 	.word	0x3fc74664
 8016310:	94229359 	.word	0x94229359
 8016314:	3fd24924 	.word	0x3fd24924
 8016318:	55555593 	.word	0x55555593
 801631c:	3fe55555 	.word	0x3fe55555
 8016320:	d078c69f 	.word	0xd078c69f
 8016324:	3fc39a09 	.word	0x3fc39a09
 8016328:	1d8e78af 	.word	0x1d8e78af
 801632c:	3fcc71c5 	.word	0x3fcc71c5
 8016330:	9997fa04 	.word	0x9997fa04
 8016334:	3fd99999 	.word	0x3fd99999
	...
 8016340:	c3500000 	.word	0xc3500000
 8016344:	43500000 	.word	0x43500000
 8016348:	7fefffff 	.word	0x7fefffff
 801634c:	3ff00000 	.word	0x3ff00000
 8016350:	3fe00000 	.word	0x3fe00000

08016354 <_init>:
 8016354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016356:	bf00      	nop
 8016358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801635a:	bc08      	pop	{r3}
 801635c:	469e      	mov	lr, r3
 801635e:	4770      	bx	lr

08016360 <_fini>:
 8016360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016362:	bf00      	nop
 8016364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016366:	bc08      	pop	{r3}
 8016368:	469e      	mov	lr, r3
 801636a:	4770      	bx	lr
