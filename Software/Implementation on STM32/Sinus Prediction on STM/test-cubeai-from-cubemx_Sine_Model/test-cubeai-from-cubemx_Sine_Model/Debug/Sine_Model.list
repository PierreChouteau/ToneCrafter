
Sine_Model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08014580  08014580  00024580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c44  08014c44  000307d4  2**0
                  CONTENTS
  4 .ARM          00000008  08014c44  08014c44  00024c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c4c  08014c4c  000307d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c4c  08014c4c  00024c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c50  08014c50  00024c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d4  20000000  08014c54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e0  200007d4  08015428  000307d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001bb4  08015428  00031bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000307d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a391  00000000  00000000  00030804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ed0  00000000  00000000  0006ab95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002948  00000000  00000000  00071a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002678  00000000  00000000  000743b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000355a4  00000000  00000000  00076a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035d23  00000000  00000000  000abfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d484  00000000  00000000  000e1cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0020f173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c210  00000000  00000000  0020f244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0021b454  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0021b520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200007d4 	.word	0x200007d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014564 	.word	0x08014564

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200007d8 	.word	0x200007d8
 800020c:	08014564 	.word	0x08014564

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fda:	f3bf 8f4f 	dsb	sy
}
 8000fde:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0b5b      	lsrs	r3, r3, #13
 8000fec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001004:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <SCB_EnableDCache+0x84>)
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ef      	bne.n	8000ffc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	60fa      	str	r2, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e5      	bne.n	8000ff2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SCB_EnableDCache+0x84>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SCB_EnableDCache+0x84>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103e:	f3bf 8f6f 	isb	sy
}
 8001042:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	00000000 	.word	0x00000000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b0d2      	sub	sp, #328	; 0x148
 800105c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  ai_error ai_err;
  ai_i32 nbatch;
  uint32_t timestamp;
  float test = 0.0f;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 800106c:	2300      	movs	r3, #0
 800106e:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8001070:	4bad      	ldr	r3, [pc, #692]	; (8001328 <main+0x2d0>)
 8001072:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001076:	461d      	mov	r5, r3
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001080:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8001084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001088:	4aa7      	ldr	r2, [pc, #668]	; (8001328 <main+0x2d0>)
 800108a:	461c      	mov	r4, r3
 800108c:	4615      	mov	r5, r2
 800108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001096:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4aa3      	ldr	r2, [pc, #652]	; (800132c <main+0x2d4>)
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2201      	movs	r2, #1
 80010a4:	809a      	strh	r2, [r3, #4]
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2201      	movs	r2, #1
 80010aa:	80da      	strh	r2, [r3, #6]
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2201      	movs	r2, #1
 80010b0:	811a      	strh	r2, [r3, #8]
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 80010b8:	60da      	str	r2, [r3, #12]
    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 80010ba:	f00e ff79 	bl	800ffb0 <ai_sine_model_data_weights_get>
 80010be:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4a98      	ldr	r2, [pc, #608]	; (8001330 <main+0x2d8>)
 80010ce:	619a      	str	r2, [r3, #24]
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2201      	movs	r2, #1
 80010d4:	839a      	strh	r2, [r3, #28]
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2201      	movs	r2, #1
 80010da:	83da      	strh	r2, [r3, #30]
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2201      	movs	r2, #1
 80010e0:	841a      	strh	r2, [r3, #32]
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
  ai_output[0].n_batches = 1;
 8001102:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001106:	2201      	movs	r2, #1
 8001108:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800110a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800110e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001112:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001114:	f7ff ff34 	bl	8000f80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001118:	f7ff ff58 	bl	8000fcc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f002 fa79 	bl	8003612 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f916 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f001 f8d6 	bl	80022d4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001128:	f000 f9d2 	bl	80014d0 <MX_ADC3_Init>
  MX_CRC_Init();
 800112c:	f000 fa22 	bl	8001574 <MX_CRC_Init>
  MX_DCMI_Init();
 8001130:	f000 fa42 	bl	80015b8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001134:	f000 fa74 	bl	8001620 <MX_DMA2D_Init>
//  MX_ETH_Init();
  MX_FMC_Init();
 8001138:	f001 f87c 	bl	8002234 <MX_FMC_Init>
  MX_I2C1_Init();
 800113c:	f000 faa2 	bl	8001684 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001140:	f000 fae0 	bl	8001704 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001144:	f000 fb1e 	bl	8001784 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001148:	f000 fb9e 	bl	8001888 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800114c:	f000 fbc8 	bl	80018e0 <MX_RTC_Init>
  MX_SAI2_Init();
 8001150:	f000 fc6c 	bl	8001a2c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001154:	f000 fd12 	bl	8001b7c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001158:	f000 fd30 	bl	8001bbc <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800115c:	f000 fd5e 	bl	8001c1c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001160:	f000 fe08 	bl	8001d74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001164:	f000 fe7c 	bl	8001e60 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001168:	f000 fef2 	bl	8001f50 <MX_TIM5_Init>
  MX_TIM8_Init();
 800116c:	f000 ff68 	bl	8002040 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001170:	f000 ffba 	bl	80020e8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001174:	f000 fffe 	bl	8002174 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001178:	f001 f82c 	bl	80021d4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800117c:	f00c fa10 	bl	800d5a0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001180:	f00e fafc 	bl	800f77c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  // Start timer/counter
  HAL_TIM_Base_Start(&htim12);
 8001184:	486b      	ldr	r0, [pc, #428]	; (8001334 <main+0x2dc>)
 8001186:	f009 f873 	bl	800a270 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800118a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800118e:	496a      	ldr	r1, [pc, #424]	; (8001338 <main+0x2e0>)
 8001190:	4618      	mov	r0, r3
 8001192:	f011 f84d 	bl	8012230 <siprintf>
 8001196:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800119a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	4865      	ldr	r0, [pc, #404]	; (800133c <main+0x2e4>)
 80011a8:	f009 fff2 	bl	800b190 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80011ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00e fe96 	bl	800fee4 <ai_sine_model_create>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (ai_err.type != AI_ERROR_NONE)
 80011be:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d011      	beq.n	80011ea <main+0x192>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80011c6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011ca:	495d      	ldr	r1, [pc, #372]	; (8001340 <main+0x2e8>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f011 f82f 	bl	8012230 <siprintf>
 80011d2:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	4856      	ldr	r0, [pc, #344]	; (800133c <main+0x2e4>)
 80011e4:	f009 ffd4 	bl	800b190 <HAL_UART_Transmit>
    while(1);
 80011e8:	e7fe      	b.n	80011e8 <main+0x190>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 80011ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011ec:	1d3a      	adds	r2, r7, #4
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e fe8d 	bl	800ff10 <ai_sine_model_init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d011      	beq.n	8001226 <main+0x1ce>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001202:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001206:	494f      	ldr	r1, [pc, #316]	; (8001344 <main+0x2ec>)
 8001208:	4618      	mov	r0, r3
 800120a:	f011 f811 	bl	8012230 <siprintf>
 800120e:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001212:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001216:	b29a      	uxth	r2, r3
 8001218:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800121c:	2364      	movs	r3, #100	; 0x64
 800121e:	4847      	ldr	r0, [pc, #284]	; (800133c <main+0x2e4>)
 8001220:	f009 ffb6 	bl	800b190 <HAL_UART_Transmit>
    while(1);
 8001224:	e7fe      	b.n	8001224 <main+0x1cc>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001226:	f00e facf 	bl	800f7c8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 800122a:	f001 fa25 	bl	8002678 <LED_Toggle>
    HAL_Delay(500);
 800122e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001232:	f002 fa4b 	bl	80036cc <HAL_Delay>

    // Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800123c:	e00d      	b.n	800125a <main+0x202>
	{
	  ((ai_float *)in_data)[i] = (ai_float)test;
 800123e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001248:	4413      	add	r3, r2
 800124a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800124e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001250:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001254:	3301      	adds	r3, #1
 8001256:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800125a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0ed      	beq.n	800123e <main+0x1e6>
	}

	// Get current timestamp
	timestamp = htim12.Instance->CNT;
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <main+0x2dc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	// Perform inference
	nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 800126c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800126e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001272:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001276:	4618      	mov	r0, r3
 8001278:	f00e fe89 	bl	800ff8e <ai_sine_model_run>
 800127c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	if (nbatch != 1) {
 8001280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001284:	2b01      	cmp	r3, #1
 8001286:	d010      	beq.n	80012aa <main+0x252>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001288:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800128c:	492e      	ldr	r1, [pc, #184]	; (8001348 <main+0x2f0>)
 800128e:	4618      	mov	r0, r3
 8001290:	f010 ffce 	bl	8012230 <siprintf>
 8001294:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001298:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800129c:	b29a      	uxth	r2, r3
 800129e:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	4825      	ldr	r0, [pc, #148]	; (800133c <main+0x2e4>)
 80012a6:	f009 ff73 	bl	800b190 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 80012aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 80012b4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80012b8:	f7ff f966 	bl	8000588 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	491c      	ldr	r1, [pc, #112]	; (8001334 <main+0x2dc>)
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80012c6:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80012ca:	1a41      	subs	r1, r0, r1
 80012cc:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80012d0:	9100      	str	r1, [sp, #0]
 80012d2:	491e      	ldr	r1, [pc, #120]	; (800134c <main+0x2f4>)
 80012d4:	f010 ffac 	bl	8012230 <siprintf>
 80012d8:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80012dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <main+0x2e4>)
 80012ea:	f009 ff51 	bl	800b190 <HAL_UART_Transmit>

	test += 3.1415 / 2;
 80012ee:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80012f2:	f7ff f949 	bl	8000588 <__aeabi_f2d>
 80012f6:	a30a      	add	r3, pc, #40	; (adr r3, 8001320 <main+0x2c8>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7fe ffe6 	bl	80002cc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc6e 	bl	8000be8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// Wait before doing it again
	HAL_Delay(500);
 8001312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001316:	f002 f9d9 	bl	80036cc <HAL_Delay>
    MX_USB_HOST_Process();
 800131a:	e784      	b.n	8001226 <main+0x1ce>
 800131c:	f3af 8000 	nop.w
 8001320:	c083126f 	.word	0xc083126f
 8001324:	3ff921ca 	.word	0x3ff921ca
 8001328:	0801462c 	.word	0x0801462c
 800132c:	40040440 	.word	0x40040440
 8001330:	00040440 	.word	0x00040440
 8001334:	20000f48 	.word	0x20000f48
 8001338:	08014580 	.word	0x08014580
 800133c:	20000e38 	.word	0x20000e38
 8001340:	0801459c 	.word	0x0801459c
 8001344:	080145c4 	.word	0x080145c4
 8001348:	080145e8 	.word	0x080145e8
 800134c:	0801460c 	.word	0x0801460c

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b4      	sub	sp, #208	; 0xd0
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800135a:	2230      	movs	r2, #48	; 0x30
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f010 fa3a 	bl	80117d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2284      	movs	r2, #132	; 0x84
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f010 fa2b 	bl	80117d8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001382:	f005 fc9f 	bl	8006cc4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <SystemClock_Config+0x174>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a4e      	ldr	r2, [pc, #312]	; (80014c4 <SystemClock_Config+0x174>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <SystemClock_Config+0x174>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <SystemClock_Config+0x178>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <SystemClock_Config+0x178>)
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <SystemClock_Config+0x178>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013b6:	2309      	movs	r3, #9
 80013b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013d8:	2319      	movs	r3, #25
 80013da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80013de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013ec:	2309      	movs	r3, #9
 80013ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 fd86 	bl	8006f08 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001402:	f001 f943 	bl	800268c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001406:	f005 fc6d 	bl	8006ce4 <HAL_PWREx_EnableOverDrive>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001410:	f001 f93c 	bl	800268c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001426:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800142a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001436:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800143a:	2106      	movs	r1, #6
 800143c:	4618      	mov	r0, r3
 800143e:	f006 f807 	bl	8007450 <HAL_RCC_ClockConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001448:	f001 f920 	bl	800268c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <SystemClock_Config+0x17c>)
 800144e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001450:	2364      	movs	r3, #100	; 0x64
 8001452:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001460:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001464:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001466:	2305      	movs	r3, #5
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001472:	2301      	movs	r3, #1
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800147a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001486:	2300      	movs	r3, #0
 8001488:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800148a:	2300      	movs	r3, #0
 800148c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800148e:	2300      	movs	r3, #0
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001492:	2300      	movs	r3, #0
 8001494:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001496:	2300      	movs	r3, #0
 8001498:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800149a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800149e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4618      	mov	r0, r3
 80014ae:	f006 f9a5 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80014b8:	f001 f8e8 	bl	800268c <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	37d0      	adds	r7, #208	; 0xd0
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000
 80014cc:	01b14868 	.word	0x01b14868

080014d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_ADC3_Init+0x98>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <MX_ADC3_Init+0x9c>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_ADC3_Init+0x98>)
 80014ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_ADC3_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_ADC3_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_ADC3_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_ADC3_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_ADC3_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_ADC3_Init+0x98>)
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <MX_ADC3_Init+0xa0>)
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_ADC3_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_ADC3_Init+0x98>)
 800151e:	2201      	movs	r2, #1
 8001520:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_ADC3_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_ADC3_Init+0x98>)
 800152c:	2201      	movs	r2, #1
 800152e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_ADC3_Init+0x98>)
 8001532:	f002 f8ef 	bl	8003714 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800153c:	f001 f8a6 	bl	800268c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001540:	2304      	movs	r3, #4
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2301      	movs	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_ADC3_Init+0x98>)
 8001552:	f002 f923 	bl	800379c <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800155c:	f001 f896 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000cb0 	.word	0x20000cb0
 800156c:	40012200 	.word	0x40012200
 8001570:	0f000001 	.word	0x0f000001

08001574 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MX_CRC_Init+0x3c>)
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <MX_CRC_Init+0x40>)
 800157c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_CRC_Init+0x3c>)
 8001580:	2200      	movs	r2, #0
 8001582:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <MX_CRC_Init+0x3c>)
 8001586:	2200      	movs	r2, #0
 8001588:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_CRC_Init+0x3c>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_CRC_Init+0x3c>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_CRC_Init+0x3c>)
 8001598:	2201      	movs	r2, #1
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_CRC_Init+0x3c>)
 800159e:	f002 fc53 	bl	8003e48 <HAL_CRC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015a8:	f001 f870 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000ac8 	.word	0x20000ac8
 80015b4:	40023000 	.word	0x40023000

080015b8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_DCMI_Init+0x60>)
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <MX_DCMI_Init+0x64>)
 80015c0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_DCMI_Init+0x60>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_DCMI_Init+0x60>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_DCMI_Init+0x60>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_DCMI_Init+0x60>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_DCMI_Init+0x60>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <MX_DCMI_Init+0x60>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_DCMI_Init+0x60>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MX_DCMI_Init+0x60>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_DCMI_Init+0x60>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_DCMI_Init+0x60>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_DCMI_Init+0x60>)
 8001600:	2200      	movs	r2, #0
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_DCMI_Init+0x60>)
 8001606:	f002 fd09 	bl	800401c <HAL_DCMI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001610:	f001 f83c 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000cf8 	.word	0x20000cf8
 800161c:	50050000 	.word	0x50050000

08001620 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <MX_DMA2D_Init+0x60>)
 8001628:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_DMA2D_Init+0x5c>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_DMA2D_Init+0x5c>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_DMA2D_Init+0x5c>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001650:	2200      	movs	r2, #0
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001656:	f002 fd5b 	bl	8004110 <HAL_DMA2D_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001660:	f001 f814 	bl	800268c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001664:	2101      	movs	r1, #1
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_DMA2D_Init+0x5c>)
 8001668:	f002 feac 	bl	80043c4 <HAL_DMA2D_ConfigLayer>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001672:	f001 f80b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000ebc 	.word	0x20000ebc
 8001680:	4002b000 	.word	0x4002b000

08001684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_I2C1_Init+0x74>)
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <MX_I2C1_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_I2C1_Init+0x74>)
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <MX_I2C1_Init+0x7c>)
 8001692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_I2C1_Init+0x74>)
 800169c:	2201      	movs	r2, #1
 800169e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016c0:	f004 fe6e 	bl	80063a0 <HAL_I2C_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ca:	f000 ffdf 	bl	800268c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016d2:	f004 fef5 	bl	80064c0 <HAL_I2CEx_ConfigAnalogFilter>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016dc:	f000 ffd6 	bl	800268c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_I2C1_Init+0x74>)
 80016e4:	f004 ff37 	bl	8006556 <HAL_I2CEx_ConfigDigitalFilter>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ee:	f000 ffcd 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000a7c 	.word	0x20000a7c
 80016fc:	40005400 	.word	0x40005400
 8001700:	00c0eaff 	.word	0x00c0eaff

08001704 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_I2C3_Init+0x74>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <MX_I2C3_Init+0x78>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_I2C3_Init+0x74>)
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <MX_I2C3_Init+0x7c>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_I2C3_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_I2C3_Init+0x74>)
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_I2C3_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_I2C3_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C3_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C3_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C3_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800173e:	480e      	ldr	r0, [pc, #56]	; (8001778 <MX_I2C3_Init+0x74>)
 8001740:	f004 fe2e 	bl	80063a0 <HAL_I2C_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800174a:	f000 ff9f 	bl	800268c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <MX_I2C3_Init+0x74>)
 8001752:	f004 feb5 	bl	80064c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800175c:	f000 ff96 	bl	800268c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_I2C3_Init+0x74>)
 8001764:	f004 fef7 	bl	8006556 <HAL_I2CEx_ConfigDigitalFilter>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800176e:	f000 ff8d 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000914 	.word	0x20000914
 800177c:	40005c00 	.word	0x40005c00
 8001780:	00c0eaff 	.word	0x00c0eaff

08001784 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2234      	movs	r2, #52	; 0x34
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f010 f821 	bl	80117d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <MX_LTDC_Init+0xfc>)
 8001798:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <MX_LTDC_Init+0x100>)
 800179a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <MX_LTDC_Init+0xfc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017b6:	2228      	movs	r2, #40	; 0x28
 80017b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017bc:	2209      	movs	r2, #9
 80017be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017c2:	2235      	movs	r2, #53	; 0x35
 80017c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017c8:	220b      	movs	r2, #11
 80017ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017ce:	f240 2215 	movw	r2, #533	; 0x215
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017d6:	f240 121b 	movw	r2, #283	; 0x11b
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017de:	f240 2235 	movw	r2, #565	; 0x235
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017e6:	f240 121d 	movw	r2, #285	; 0x11d
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_LTDC_Init+0xfc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001804:	481e      	ldr	r0, [pc, #120]	; (8001880 <MX_LTDC_Init+0xfc>)
 8001806:	f004 fef3 	bl	80065f0 <HAL_LTDC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001810:	f000 ff3c 	bl	800268c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001818:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800181c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001822:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001826:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800182c:	23ff      	movs	r3, #255	; 0xff
 800182e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001834:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001838:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800183a:	2307      	movs	r3, #7
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800183e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001844:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800184a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_LTDC_Init+0xfc>)
 800186a:	f005 f853 	bl	8006914 <HAL_LTDC_ConfigLayer>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001874:	f000 ff0a 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3738      	adds	r7, #56	; 0x38
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000c08 	.word	0x20000c08
 8001884:	40016800 	.word	0x40016800

08001888 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <MX_QUADSPI_Init+0x54>)
 8001890:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 8001894:	2201      	movs	r2, #1
 8001896:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 800189a:	2204      	movs	r2, #4
 800189c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018a0:	2210      	movs	r2, #16
 80018a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018a6:	2218      	movs	r2, #24
 80018a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018ac:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018b0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_QUADSPI_Init+0x50>)
 80018c6:	f005 fa5d 	bl	8006d84 <HAL_QSPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018d0:	f000 fedc 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20001010 	.word	0x20001010
 80018dc:	a0001000 	.word	0xa0001000

080018e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b092      	sub	sp, #72	; 0x48
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	222c      	movs	r2, #44	; 0x2c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f00f ff68 	bl	80117d8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <MX_RTC_Init+0x144>)
 800190a:	4a47      	ldr	r2, [pc, #284]	; (8001a28 <MX_RTC_Init+0x148>)
 800190c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800190e:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <MX_RTC_Init+0x144>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <MX_RTC_Init+0x144>)
 8001916:	227f      	movs	r2, #127	; 0x7f
 8001918:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800191a:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <MX_RTC_Init+0x144>)
 800191c:	22ff      	movs	r2, #255	; 0xff
 800191e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <MX_RTC_Init+0x144>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <MX_RTC_Init+0x144>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <MX_RTC_Init+0x144>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001932:	483c      	ldr	r0, [pc, #240]	; (8001a24 <MX_RTC_Init+0x144>)
 8001934:	f006 fc96 	bl	8008264 <HAL_RTC_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800193e:	f000 fea5 	bl	800268c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800195c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	482f      	ldr	r0, [pc, #188]	; (8001a24 <MX_RTC_Init+0x144>)
 8001966:	f006 fd0f 	bl	8008388 <HAL_RTC_SetTime>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001970:	f000 fe8c 	bl	800268c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800197a:	2301      	movs	r3, #1
 800197c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	2201      	movs	r2, #1
 8001992:	4619      	mov	r1, r3
 8001994:	4823      	ldr	r0, [pc, #140]	; (8001a24 <MX_RTC_Init+0x144>)
 8001996:	f006 fdb5 	bl	8008504 <HAL_RTC_SetDate>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80019a0:	f000 fe74 	bl	800268c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80019ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	2201      	movs	r2, #1
 80019d8:	4619      	mov	r1, r3
 80019da:	4812      	ldr	r0, [pc, #72]	; (8001a24 <MX_RTC_Init+0x144>)
 80019dc:	f006 fe3a 	bl	8008654 <HAL_RTC_SetAlarm>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80019e6:	f000 fe51 	bl	800268c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80019ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	2201      	movs	r2, #1
 80019f4:	4619      	mov	r1, r3
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <MX_RTC_Init+0x144>)
 80019f8:	f006 fe2c 	bl	8008654 <HAL_RTC_SetAlarm>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001a02:	f000 fe43 	bl	800268c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a06:	2202      	movs	r2, #2
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_RTC_Init+0x144>)
 8001a0c:	f006 ffac 	bl	8008968 <HAL_RTCEx_SetTimeStamp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001a16:	f000 fe39 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3748      	adds	r7, #72	; 0x48
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000dcc 	.word	0x20000dcc
 8001a28:	40002800 	.word	0x40002800

08001a2c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a32:	4a4e      	ldr	r2, [pc, #312]	; (8001b6c <MX_SAI2_Init+0x140>)
 8001a34:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a3c:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a48:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a6e:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <MX_SAI2_Init+0x144>)
 8001a70:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001ac0:	4829      	ldr	r0, [pc, #164]	; (8001b68 <MX_SAI2_Init+0x13c>)
 8001ac2:	f006 ffa7 	bl	8008a14 <HAL_SAI_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001acc:	f000 fdde 	bl	800268c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001ad2:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <MX_SAI2_Init+0x14c>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001ade:	2203      	movs	r2, #3
 8001ae0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b20:	2208      	movs	r2, #8
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_SAI2_Init+0x148>)
 8001b56:	f006 ff5d 	bl	8008a14 <HAL_SAI_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001b60:	f000 fd94 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200009f8 	.word	0x200009f8
 8001b6c:	40015c04 	.word	0x40015c04
 8001b70:	0002ee00 	.word	0x0002ee00
 8001b74:	20000890 	.word	0x20000890
 8001b78:	40015c24 	.word	0x40015c24

08001b7c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001b82:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <MX_SDMMC1_SD_Init+0x3c>)
 8001b84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <MX_SDMMC1_SD_Init+0x38>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	20000aec 	.word	0x20000aec
 8001bb8:	40012c00 	.word	0x40012c00

08001bbc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bc2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bc6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_SPDIFRX_Init+0x5c>)
 8001c06:	f008 fa7f 	bl	800a108 <HAL_SPDIFRX_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c10:	f000 fd3c 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200009ac 	.word	0x200009ac

08001c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b09a      	sub	sp, #104	; 0x68
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	615a      	str	r2, [r3, #20]
 8001c4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	222c      	movs	r2, #44	; 0x2c
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00f fdbe 	bl	80117d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c5c:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c5e:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <MX_TIM1_Init+0x154>)
 8001c60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c88:	4838      	ldr	r0, [pc, #224]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001c8a:	f008 fa99 	bl	800a1c0 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c94:	f000 fcfa 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4831      	ldr	r0, [pc, #196]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001ca6:	f008 fcbb 	bl	800a620 <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001cb0:	f000 fcec 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cb4:	482d      	ldr	r0, [pc, #180]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001cb6:	f008 fb4b 	bl	800a350 <HAL_TIM_PWM_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cc0:	f000 fce4 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4825      	ldr	r0, [pc, #148]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001cd8:	f009 f900 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ce2:	f000 fcd3 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2360      	movs	r3, #96	; 0x60
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4818      	ldr	r0, [pc, #96]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001d0c:	f008 fb78 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d16:	f000 fcb9 	bl	800268c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001d50:	f009 f952 	bl	800aff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001d5a:	f000 fc97 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <MX_TIM1_Init+0x150>)
 8001d60:	f001 f938 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8001d64:	bf00      	nop
 8001d66:	3768      	adds	r7, #104	; 0x68
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000dec 	.word	0x20000dec
 8001d70:	40010000 	.word	0x40010000

08001d74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08e      	sub	sp, #56	; 0x38
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dce:	4823      	ldr	r0, [pc, #140]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001dd0:	f008 f9f6 	bl	800a1c0 <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001dda:	f000 fc57 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de8:	4619      	mov	r1, r3
 8001dea:	481c      	ldr	r0, [pc, #112]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001dec:	f008 fc18 	bl	800a620 <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001df6:	f000 fc49 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dfa:	4818      	ldr	r0, [pc, #96]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001dfc:	f008 faa8 	bl	800a350 <HAL_TIM_PWM_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e06:	f000 fc41 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	4810      	ldr	r0, [pc, #64]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001e1a:	f009 f85f 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e24:	f000 fc32 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e28:	2360      	movs	r3, #96	; 0x60
 8001e2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001e40:	f008 fade 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e4a:	f000 fc1f 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <MX_TIM2_Init+0xe8>)
 8001e50:	f001 f8c0 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8001e54:	bf00      	nop
 8001e56:	3738      	adds	r7, #56	; 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000efc 	.word	0x20000efc

08001e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	463b      	mov	r3, r7
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	615a      	str	r2, [r3, #20]
 8001e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001e94:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <MX_TIM3_Init+0xec>)
 8001e96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb8:	4823      	ldr	r0, [pc, #140]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001eba:	f008 f981 	bl	800a1c0 <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ec4:	f000 fbe2 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481c      	ldr	r0, [pc, #112]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001ed6:	f008 fba3 	bl	800a620 <HAL_TIM_ConfigClockSource>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ee0:	f000 fbd4 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001ee6:	f008 fa33 	bl	800a350 <HAL_TIM_PWM_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ef0:	f000 fbcc 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4811      	ldr	r0, [pc, #68]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001f04:	f008 ffea 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f0e:	f000 fbbd 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f12:	2360      	movs	r3, #96	; 0x60
 8001f14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001f2a:	f008 fa69 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f34:	f000 fbaa 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM3_Init+0xe8>)
 8001f3a:	f001 f84b 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8001f3e:	bf00      	nop
 8001f40:	3738      	adds	r7, #56	; 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000bbc 	.word	0x20000bbc
 8001f4c:	40000400 	.word	0x40000400

08001f50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f70:	463b      	mov	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <MX_TIM5_Init+0xec>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b26      	ldr	r3, [pc, #152]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fa8:	4823      	ldr	r0, [pc, #140]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001faa:	f008 f909 	bl	800a1c0 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001fb4:	f000 fb6a 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	481c      	ldr	r0, [pc, #112]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001fc6:	f008 fb2b 	bl	800a620 <HAL_TIM_ConfigClockSource>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001fd0:	f000 fb5c 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fd4:	4818      	ldr	r0, [pc, #96]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001fd6:	f008 f9bb 	bl	800a350 <HAL_TIM_PWM_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001fe0:	f000 fb54 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4811      	ldr	r0, [pc, #68]	; (8002038 <MX_TIM5_Init+0xe8>)
 8001ff4:	f008 ff72 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001ffe:	f000 fb45 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002002:	2360      	movs	r3, #96	; 0x60
 8002004:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002012:	463b      	mov	r3, r7
 8002014:	220c      	movs	r2, #12
 8002016:	4619      	mov	r1, r3
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <MX_TIM5_Init+0xe8>)
 800201a:	f008 f9f1 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002024:	f000 fb32 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <MX_TIM5_Init+0xe8>)
 800202a:	f000 ffd3 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 800202e:	bf00      	nop
 8002030:	3738      	adds	r7, #56	; 0x38
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000b70 	.word	0x20000b70
 800203c:	40000c00 	.word	0x40000c00

08002040 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_TIM8_Init+0xa0>)
 8002060:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <MX_TIM8_Init+0xa4>)
 8002062:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <MX_TIM8_Init+0xa0>)
 8002066:	2200      	movs	r2, #0
 8002068:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_TIM8_Init+0xa0>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_TIM8_Init+0xa0>)
 8002072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002076:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <MX_TIM8_Init+0xa0>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM8_Init+0xa0>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_TIM8_Init+0xa0>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800208a:	4815      	ldr	r0, [pc, #84]	; (80020e0 <MX_TIM8_Init+0xa0>)
 800208c:	f008 f898 	bl	800a1c0 <HAL_TIM_Base_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002096:	f000 faf9 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	480e      	ldr	r0, [pc, #56]	; (80020e0 <MX_TIM8_Init+0xa0>)
 80020a8:	f008 faba 	bl	800a620 <HAL_TIM_ConfigClockSource>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80020b2:	f000 faeb 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <MX_TIM8_Init+0xa0>)
 80020c8:	f008 ff08 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020d2:	f000 fadb 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000960 	.word	0x20000960
 80020e4:	40010400 	.word	0x40010400

080020e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_TIM12_Init+0x84>)
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <MX_TIM12_Init+0x88>)
 8002104:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <MX_TIM12_Init+0x84>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <MX_TIM12_Init+0x84>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <MX_TIM12_Init+0x84>)
 8002114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002118:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_TIM12_Init+0x84>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_TIM12_Init+0x84>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002126:	4811      	ldr	r0, [pc, #68]	; (800216c <MX_TIM12_Init+0x84>)
 8002128:	f008 f912 	bl	800a350 <HAL_TIM_PWM_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002132:	f000 faab 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	; 0x60
 8002138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM12_Init+0x84>)
 800214e:	f008 f957 	bl	800a400 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002158:	f000 fa98 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM12_Init+0x84>)
 800215e:	f000 ff39 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000f48 	.word	0x20000f48
 8002170:	40001800 	.word	0x40001800

08002174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <MX_USART1_UART_Init+0x58>)
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <MX_USART1_UART_Init+0x5c>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <MX_USART1_UART_Init+0x58>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MX_USART1_UART_Init+0x58>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <MX_USART1_UART_Init+0x58>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <MX_USART1_UART_Init+0x58>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_USART1_UART_Init+0x58>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <MX_USART1_UART_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_USART1_UART_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <MX_USART1_UART_Init+0x58>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_USART1_UART_Init+0x58>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_USART1_UART_Init+0x58>)
 80021b8:	f008 ff9c 	bl	800b0f4 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021c2:	f000 fa63 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000d48 	.word	0x20000d48
 80021d0:	40011000 	.word	0x40011000

080021d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <MX_USART6_UART_Init+0x58>)
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <MX_USART6_UART_Init+0x5c>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <MX_USART6_UART_Init+0x58>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_USART6_UART_Init+0x58>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <MX_USART6_UART_Init+0x58>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_USART6_UART_Init+0x58>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_USART6_UART_Init+0x58>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_USART6_UART_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_USART6_UART_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_USART6_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_USART6_UART_Init+0x58>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_USART6_UART_Init+0x58>)
 8002218:	f008 ff6c 	bl	800b0f4 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002222:	f000 fa33 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000e38 	.word	0x20000e38
 8002230:	40011400 	.word	0x40011400

08002234 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
 8002248:	615a      	str	r2, [r3, #20]
 800224a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <MX_FMC_Init+0x98>)
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <MX_FMC_Init+0x9c>)
 8002250:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <MX_FMC_Init+0x98>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <MX_FMC_Init+0x98>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <MX_FMC_Init+0x98>)
 8002260:	2204      	movs	r2, #4
 8002262:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <MX_FMC_Init+0x98>)
 8002266:	2210      	movs	r2, #16
 8002268:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <MX_FMC_Init+0x98>)
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <MX_FMC_Init+0x98>)
 8002272:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002276:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <MX_FMC_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <MX_FMC_Init+0x98>)
 8002280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002284:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <MX_FMC_Init+0x98>)
 8002288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_FMC_Init+0x98>)
 8002290:	2200      	movs	r2, #0
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002294:	2302      	movs	r3, #2
 8002296:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002298:	2307      	movs	r3, #7
 800229a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800229c:	2304      	movs	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80022a0:	2307      	movs	r3, #7
 80022a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80022a4:	2303      	movs	r3, #3
 80022a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80022a8:	2302      	movs	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_FMC_Init+0x98>)
 80022b6:	f007 fef2 	bl	800a09e <HAL_SDRAM_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80022c0:	f000 f9e4 	bl	800268c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022c4:	bf00      	nop
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000f94 	.word	0x20000f94
 80022d0:	a0000140 	.word	0xa0000140

080022d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ea:	4baf      	ldr	r3, [pc, #700]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4aae      	ldr	r2, [pc, #696]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4bac      	ldr	r3, [pc, #688]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002302:	4ba9      	ldr	r3, [pc, #676]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4aa8      	ldr	r2, [pc, #672]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4ba6      	ldr	r3, [pc, #664]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	4ba3      	ldr	r3, [pc, #652]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4aa2      	ldr	r2, [pc, #648]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002332:	4b9d      	ldr	r3, [pc, #628]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a9c      	ldr	r2, [pc, #624]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b9a      	ldr	r3, [pc, #616]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a96      	ldr	r2, [pc, #600]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b8e      	ldr	r3, [pc, #568]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a84      	ldr	r2, [pc, #528]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c2:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a78      	ldr	r2, [pc, #480]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023c8:	f043 0320 	orr.w	r3, r3, #32
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023f2:	2201      	movs	r2, #1
 80023f4:	2120      	movs	r1, #32
 80023f6:	486d      	ldr	r0, [pc, #436]	; (80025ac <MX_GPIO_Init+0x2d8>)
 80023f8:	f002 fa3a 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	210e      	movs	r1, #14
 8002400:	486b      	ldr	r0, [pc, #428]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 8002402:	f002 fa35 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002406:	2201      	movs	r2, #1
 8002408:	2108      	movs	r1, #8
 800240a:	486a      	ldr	r0, [pc, #424]	; (80025b4 <MX_GPIO_Init+0x2e0>)
 800240c:	f002 fa30 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002416:	4866      	ldr	r0, [pc, #408]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 8002418:	f002 fa2a 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002422:	4865      	ldr	r0, [pc, #404]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 8002424:	f002 fa24 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	21c8      	movs	r1, #200	; 0xc8
 800242c:	4863      	ldr	r0, [pc, #396]	; (80025bc <MX_GPIO_Init+0x2e8>)
 800242e:	f002 fa1f 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002432:	2308      	movs	r3, #8
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002442:	4619      	mov	r1, r3
 8002444:	485e      	ldr	r0, [pc, #376]	; (80025c0 <MX_GPIO_Init+0x2ec>)
 8002446:	f002 f84f 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800244a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800245c:	230a      	movs	r3, #10
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	4857      	ldr	r0, [pc, #348]	; (80025c4 <MX_GPIO_Init+0x2f0>)
 8002468:	f002 f83e 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	2300      	movs	r3, #0
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247e:	4619      	mov	r1, r3
 8002480:	4851      	ldr	r0, [pc, #324]	; (80025c8 <MX_GPIO_Init+0x2f4>)
 8002482:	f002 f831 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002486:	2340      	movs	r3, #64	; 0x40
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800248a:	4b50      	ldr	r3, [pc, #320]	; (80025cc <MX_GPIO_Init+0x2f8>)
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4844      	ldr	r0, [pc, #272]	; (80025ac <MX_GPIO_Init+0x2d8>)
 800249a:	f002 f825 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800249e:	2320      	movs	r3, #32
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	483d      	ldr	r0, [pc, #244]	; (80025ac <MX_GPIO_Init+0x2d8>)
 80024b6:	f002 f817 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80024ba:	f241 030e 	movw	r3, #4110	; 0x100e
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d0:	4619      	mov	r1, r3
 80024d2:	4837      	ldr	r0, [pc, #220]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 80024d4:	f002 f808 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80024d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ea:	4619      	mov	r1, r3
 80024ec:	4838      	ldr	r0, [pc, #224]	; (80025d0 <MX_GPIO_Init+0x2fc>)
 80024ee:	f001 fffb 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80024f2:	2308      	movs	r3, #8
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f6:	2301      	movs	r3, #1
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002506:	4619      	mov	r1, r3
 8002508:	482a      	ldr	r0, [pc, #168]	; (80025b4 <MX_GPIO_Init+0x2e0>)
 800250a:	f001 ffed 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800250e:	2310      	movs	r3, #16
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002512:	2300      	movs	r3, #0
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	4822      	ldr	r0, [pc, #136]	; (80025ac <MX_GPIO_Init+0x2d8>)
 8002522:	f001 ffe1 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002526:	f248 0304 	movw	r3, #32772	; 0x8004
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	2300      	movs	r3, #0
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002538:	4619      	mov	r1, r3
 800253a:	481f      	ldr	r0, [pc, #124]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 800253c:	f001 ffd4 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002556:	4619      	mov	r1, r3
 8002558:	4817      	ldr	r0, [pc, #92]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 800255a:	f001 ffc5 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800255e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <MX_GPIO_Init+0x2f8>)
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002570:	4619      	mov	r1, r3
 8002572:	480f      	ldr	r0, [pc, #60]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 8002574:	f001 ffb8 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002578:	2310      	movs	r3, #16
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002588:	230a      	movs	r3, #10
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002590:	4619      	mov	r1, r3
 8002592:	4809      	ldr	r0, [pc, #36]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 8002594:	f001 ffa8 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002598:	23c8      	movs	r3, #200	; 0xc8
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	2301      	movs	r3, #1
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
 80025a4:	e016      	b.n	80025d4 <MX_GPIO_Init+0x300>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40022800 	.word	0x40022800
 80025b8:	40021c00 	.word	0x40021c00
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40022400 	.word	0x40022400
 80025cc:	10120000 	.word	0x10120000
 80025d0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025dc:	4619      	mov	r1, r3
 80025de:	4822      	ldr	r0, [pc, #136]	; (8002668 <MX_GPIO_Init+0x394>)
 80025e0:	f001 ff82 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80025e4:	2305      	movs	r3, #5
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025f4:	230a      	movs	r3, #10
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fc:	4619      	mov	r1, r3
 80025fe:	481b      	ldr	r0, [pc, #108]	; (800266c <MX_GPIO_Init+0x398>)
 8002600:	f001 ff72 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002604:	2304      	movs	r3, #4
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002608:	2300      	movs	r3, #0
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <MX_GPIO_Init+0x394>)
 8002618:	f001 ff66 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800261c:	2328      	movs	r3, #40	; 0x28
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800262c:	230a      	movs	r3, #10
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	480e      	ldr	r0, [pc, #56]	; (8002670 <MX_GPIO_Init+0x39c>)
 8002638:	f001 ff56 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800263c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800264e:	2305      	movs	r3, #5
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002656:	4619      	mov	r1, r3
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_GPIO_Init+0x3a0>)
 800265a:	f001 ff45 	bl	80044e8 <HAL_GPIO_Init>

}
 800265e:	bf00      	nop
 8002660:	3740      	adds	r7, #64	; 0x40
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021800 	.word	0x40021800
 800266c:	40020800 	.word	0x40020800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400

08002678 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 800267c:	2102      	movs	r1, #2
 800267e:	4802      	ldr	r0, [pc, #8]	; (8002688 <LED_Toggle+0x10>)
 8002680:	f002 f90f 	bl	80048a2 <HAL_GPIO_TogglePin>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002694:	e7fe      	b.n	8002694 <Error_Handler+0x8>
	...

08002698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_MspInit+0x44>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_MspInit+0x44>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_MspInit+0x44>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_MspInit+0x44>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_MspInit+0x44>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_MspInit+0x44>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_ADC_MspInit+0xa4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d13c      	bne.n	800277c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002720:	f043 0320 	orr.w	r3, r3, #32
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_ADC_MspInit+0xa8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800274a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800274e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002750:	2303      	movs	r3, #3
 8002752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	480b      	ldr	r0, [pc, #44]	; (800278c <HAL_ADC_MspInit+0xac>)
 8002760:	f001 fec2 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002768:	2303      	movs	r3, #3
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <HAL_ADC_MspInit+0xb0>)
 8002778:	f001 feb6 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40012200 	.word	0x40012200
 8002788:	40023800 	.word	0x40023800
 800278c:	40021400 	.word	0x40021400
 8002790:	40020000 	.word	0x40020000

08002794 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_CRC_MspInit+0x38>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10b      	bne.n	80027be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_CRC_MspInit+0x3c>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_CRC_MspInit+0x3c>)
 80027ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_CRC_MspInit+0x3c>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023000 	.word	0x40023000
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a50      	ldr	r2, [pc, #320]	; (8002934 <HAL_DCMI_MspInit+0x160>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	f040 809a 	bne.w	800292c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80027f8:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6353      	str	r3, [r2, #52]	; 0x34
 8002804:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002810:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002816:	f043 0310 	orr.w	r3, r3, #16
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a42      	ldr	r2, [pc, #264]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	6313      	str	r3, [r2, #48]	; 0x30
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a36      	ldr	r2, [pc, #216]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800285e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a30      	ldr	r2, [pc, #192]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6313      	str	r3, [r2, #48]	; 0x30
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_DCMI_MspInit+0x164>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002888:	2360      	movs	r3, #96	; 0x60
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002898:	230d      	movs	r3, #13
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a0:	4619      	mov	r1, r3
 80028a2:	4826      	ldr	r0, [pc, #152]	; (800293c <HAL_DCMI_MspInit+0x168>)
 80028a4:	f001 fe20 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028a8:	2308      	movs	r3, #8
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028b8:	230d      	movs	r3, #13
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	481f      	ldr	r0, [pc, #124]	; (8002940 <HAL_DCMI_MspInit+0x16c>)
 80028c4:	f001 fe10 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028da:	230d      	movs	r3, #13
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4817      	ldr	r0, [pc, #92]	; (8002944 <HAL_DCMI_MspInit+0x170>)
 80028e6:	f001 fdff 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80028ea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028fc:	230d      	movs	r3, #13
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	4810      	ldr	r0, [pc, #64]	; (8002948 <HAL_DCMI_MspInit+0x174>)
 8002908:	f001 fdee 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800290c:	2350      	movs	r3, #80	; 0x50
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800291c:	230d      	movs	r3, #13
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	4809      	ldr	r0, [pc, #36]	; (800294c <HAL_DCMI_MspInit+0x178>)
 8002928:	f001 fdde 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800292c:	bf00      	nop
 800292e:	3738      	adds	r7, #56	; 0x38
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	50050000 	.word	0x50050000
 8002938:	40023800 	.word	0x40023800
 800293c:	40021000 	.word	0x40021000
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_DMA2D_MspInit+0x44>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d113      	bne.n	800298a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_DMA2D_MspInit+0x48>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <HAL_DMA2D_MspInit+0x48>)
 8002968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_DMA2D_MspInit+0x48>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	205a      	movs	r0, #90	; 0x5a
 8002980:	f001 fa2b 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002984:	205a      	movs	r0, #90	; 0x5a
 8002986:	f001 fa44 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	4002b000 	.word	0x4002b000
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_I2C_MspInit+0xdc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d129      	bne.n	8002a12 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80029d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029dc:	2312      	movs	r3, #18
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e8:	2304      	movs	r3, #4
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	4823      	ldr	r0, [pc, #140]	; (8002a80 <HAL_I2C_MspInit+0xe4>)
 80029f4:	f001 fd78 	bl	80044e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 80029fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a10:	e02d      	b.n	8002a6e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <HAL_I2C_MspInit+0xe8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d128      	bne.n	8002a6e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002a34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3a:	2312      	movs	r3, #18
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a46:	2304      	movs	r3, #4
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <HAL_I2C_MspInit+0xec>)
 8002a52:	f001 fd49 	bl	80044e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_I2C_MspInit+0xe0>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	3730      	adds	r7, #48	; 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40005400 	.word	0x40005400
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40005c00 	.word	0x40005c00
 8002a88:	40021c00 	.word	0x40021c00

08002a8c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a55      	ldr	r2, [pc, #340]	; (8002c00 <HAL_LTDC_MspInit+0x174>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f040 80a3 	bne.w	8002bf6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ab0:	4b54      	ldr	r3, [pc, #336]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	4a53      	ldr	r2, [pc, #332]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aba:	6453      	str	r3, [r2, #68]	; 0x44
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a4d      	ldr	r2, [pc, #308]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4a47      	ldr	r2, [pc, #284]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6313      	str	r3, [r2, #48]	; 0x30
 8002aec:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002af8:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b10:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_LTDC_MspInit+0x178>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b40:	2310      	movs	r3, #16
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b50:	230e      	movs	r3, #14
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	482b      	ldr	r0, [pc, #172]	; (8002c08 <HAL_LTDC_MspInit+0x17c>)
 8002b5c:	f001 fcc4 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002b60:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b72:	230e      	movs	r3, #14
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4823      	ldr	r0, [pc, #140]	; (8002c0c <HAL_LTDC_MspInit+0x180>)
 8002b7e:	f001 fcb3 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002b82:	23f7      	movs	r3, #247	; 0xf7
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b92:	230e      	movs	r3, #14
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	481c      	ldr	r0, [pc, #112]	; (8002c10 <HAL_LTDC_MspInit+0x184>)
 8002b9e:	f001 fca3 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bb4:	2309      	movs	r3, #9
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4815      	ldr	r0, [pc, #84]	; (8002c14 <HAL_LTDC_MspInit+0x188>)
 8002bc0:	f001 fc92 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bc4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bd6:	230e      	movs	r3, #14
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	4619      	mov	r1, r3
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <HAL_LTDC_MspInit+0x18c>)
 8002be2:	f001 fc81 	bl	80044e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2058      	movs	r0, #88	; 0x58
 8002bec:	f001 f8f5 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002bf0:	2058      	movs	r0, #88	; 0x58
 8002bf2:	f001 f90e 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	3738      	adds	r7, #56	; 0x38
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40016800 	.word	0x40016800
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40022400 	.word	0x40022400
 8002c10:	40022800 	.word	0x40022800
 8002c14:	40021800 	.word	0x40021800
 8002c18:	40022000 	.word	0x40022000

08002c1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3b      	ldr	r2, [pc, #236]	; (8002d28 <HAL_QSPI_MspInit+0x10c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d170      	bne.n	8002d20 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	6393      	str	r3, [r2, #56]	; 0x38
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a34      	ldr	r2, [pc, #208]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c5c:	f043 0310 	orr.w	r3, r3, #16
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_QSPI_MspInit+0x110>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cae:	2309      	movs	r3, #9
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481d      	ldr	r0, [pc, #116]	; (8002d30 <HAL_QSPI_MspInit+0x114>)
 8002cba:	f001 fc15 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cce:	230a      	movs	r3, #10
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4816      	ldr	r0, [pc, #88]	; (8002d34 <HAL_QSPI_MspInit+0x118>)
 8002cda:	f001 fc05 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cee:	2309      	movs	r3, #9
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480e      	ldr	r0, [pc, #56]	; (8002d34 <HAL_QSPI_MspInit+0x118>)
 8002cfa:	f001 fbf5 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002cfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d10:	2309      	movs	r3, #9
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4807      	ldr	r0, [pc, #28]	; (8002d38 <HAL_QSPI_MspInit+0x11c>)
 8002d1c:	f001 fbe4 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d20:	bf00      	nop
 8002d22:	3730      	adds	r7, #48	; 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	a0001000 	.word	0xa0001000
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40020c00 	.word	0x40020c00

08002d3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RTC_MspInit+0x2c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d105      	bne.n	8002d5a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <HAL_RTC_MspInit+0x30>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <HAL_RTC_MspInit+0x30>)
 8002d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40002800 	.word	0x40002800
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <HAL_SD_MspInit+0xb4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d144      	bne.n	8002e1c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002daa:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_SD_MspInit+0xb8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002dda:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002dde:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dec:	230c      	movs	r3, #12
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	480d      	ldr	r0, [pc, #52]	; (8002e2c <HAL_SD_MspInit+0xbc>)
 8002df8:	f001 fb76 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	4806      	ldr	r0, [pc, #24]	; (8002e30 <HAL_SD_MspInit+0xc0>)
 8002e18:	f001 fb66 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e1c:	bf00      	nop
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	40020c00 	.word	0x40020c00

08002e34 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e54:	d127      	bne.n	8002ea6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e96:	2308      	movs	r3, #8
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <HAL_SPDIFRX_MspInit+0x80>)
 8002ea2:	f001 fb21 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020c00 	.word	0x40020c00

08002eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <HAL_TIM_Base_MspInit+0xc8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ee2:	e046      	b.n	8002f72 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d10c      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	69bb      	ldr	r3, [r7, #24]
}
 8002f06:	e034      	b.n	8002f72 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_TIM_Base_MspInit+0xd0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10c      	bne.n	8002f2c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]
}
 8002f2a:	e022      	b.n	8002f72 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_TIM_Base_MspInit+0xd4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10c      	bne.n	8002f50 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
}
 8002f4e:	e010      	b.n	8002f72 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <HAL_TIM_Base_MspInit+0xd8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10b      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6453      	str	r3, [r2, #68]	; 0x44
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_TIM_Base_MspInit+0xcc>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	bf00      	nop
 8002f74:	3724      	adds	r7, #36	; 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_TIM_PWM_MspInit+0x38>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40001800 	.word	0x40001800
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_TIM_MspPostInit+0x178>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d11d      	bne.n	8003032 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff6:	4b56      	ldr	r3, [pc, #344]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a55      	ldr	r2, [pc, #340]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800300e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	4619      	mov	r1, r3
 800302a:	484a      	ldr	r0, [pc, #296]	; (8003154 <HAL_TIM_MspPostInit+0x180>)
 800302c:	f001 fa5c 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003030:	e087      	b.n	8003142 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d11d      	bne.n	8003078 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	4b44      	ldr	r3, [pc, #272]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	4b41      	ldr	r3, [pc, #260]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003066:	2301      	movs	r3, #1
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	4838      	ldr	r0, [pc, #224]	; (8003154 <HAL_TIM_MspPostInit+0x180>)
 8003072:	f001 fa39 	bl	80044e8 <HAL_GPIO_Init>
}
 8003076:	e064      	b.n	8003142 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_TIM_MspPostInit+0x184>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d11c      	bne.n	80030bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003082:	4b33      	ldr	r3, [pc, #204]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a32      	ldr	r2, [pc, #200]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800309a:	2310      	movs	r3, #16
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030aa:	2302      	movs	r3, #2
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	4829      	ldr	r0, [pc, #164]	; (800315c <HAL_TIM_MspPostInit+0x188>)
 80030b6:	f001 fa17 	bl	80044e8 <HAL_GPIO_Init>
}
 80030ba:	e042      	b.n	8003142 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_TIM_MspPostInit+0x18c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d11c      	bne.n	8003100 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030c6:	4b22      	ldr	r3, [pc, #136]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030ee:	2302      	movs	r3, #2
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	4619      	mov	r1, r3
 80030f8:	481a      	ldr	r0, [pc, #104]	; (8003164 <HAL_TIM_MspPostInit+0x190>)
 80030fa:	f001 f9f5 	bl	80044e8 <HAL_GPIO_Init>
}
 80030fe:	e020      	b.n	8003142 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_TIM_MspPostInit+0x194>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d11b      	bne.n	8003142 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_TIM_MspPostInit+0x17c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003122:	2340      	movs	r3, #64	; 0x40
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003132:	2309      	movs	r3, #9
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	480b      	ldr	r0, [pc, #44]	; (800316c <HAL_TIM_MspPostInit+0x198>)
 800313e:	f001 f9d3 	bl	80044e8 <HAL_GPIO_Init>
}
 8003142:	bf00      	nop
 8003144:	3730      	adds	r7, #48	; 0x30
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40010000 	.word	0x40010000
 8003150:	40023800 	.word	0x40023800
 8003154:	40020000 	.word	0x40020000
 8003158:	40000400 	.word	0x40000400
 800315c:	40020400 	.word	0x40020400
 8003160:	40000c00 	.word	0x40000c00
 8003164:	40022000 	.word	0x40022000
 8003168:	40001800 	.word	0x40001800
 800316c:	40021c00 	.word	0x40021c00

08003170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <HAL_UART_MspInit+0x110>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d145      	bne.n	800321e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003192:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <HAL_UART_MspInit+0x114>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <HAL_UART_MspInit+0x114>)
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a35      	ldr	r2, [pc, #212]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_UART_MspInit+0x114>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031ea:	2307      	movs	r3, #7
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	4619      	mov	r1, r3
 80031f4:	4824      	ldr	r0, [pc, #144]	; (8003288 <HAL_UART_MspInit+0x118>)
 80031f6:	f001 f977 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80031fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800320c:	2307      	movs	r3, #7
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	481d      	ldr	r0, [pc, #116]	; (800328c <HAL_UART_MspInit+0x11c>)
 8003218:	f001 f966 	bl	80044e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800321c:	e02c      	b.n	8003278 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_UART_MspInit+0x120>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d127      	bne.n	8003278 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_UART_MspInit+0x114>)
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <HAL_UART_MspInit+0x114>)
 800322e:	f043 0320 	orr.w	r3, r3, #32
 8003232:	6453      	str	r3, [r2, #68]	; 0x44
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_UART_MspInit+0x114>)
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_UART_MspInit+0x114>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <HAL_UART_MspInit+0x114>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6313      	str	r3, [r2, #48]	; 0x30
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_UART_MspInit+0x114>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003258:	23c0      	movs	r3, #192	; 0xc0
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003268:	2308      	movs	r3, #8
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	4619      	mov	r1, r3
 8003272:	4808      	ldr	r0, [pc, #32]	; (8003294 <HAL_UART_MspInit+0x124>)
 8003274:	f001 f938 	bl	80044e8 <HAL_GPIO_Init>
}
 8003278:	bf00      	nop
 800327a:	3730      	adds	r7, #48	; 0x30
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40011000 	.word	0x40011000
 8003284:	40023800 	.word	0x40023800
 8003288:	40020400 	.word	0x40020400
 800328c:	40020000 	.word	0x40020000
 8003290:	40011400 	.word	0x40011400
 8003294:	40020800 	.word	0x40020800

08003298 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032ac:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_FMC_MspInit+0x100>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d16d      	bne.n	8003390 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032b4:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_FMC_MspInit+0x100>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_FMC_MspInit+0x104>)
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	4a37      	ldr	r2, [pc, #220]	; (800339c <HAL_FMC_MspInit+0x104>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6393      	str	r3, [r2, #56]	; 0x38
 80032c6:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_FMC_MspInit+0x104>)
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80032d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032d6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e0:	2303      	movs	r3, #3
 80032e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032e4:	230c      	movs	r3, #12
 80032e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	482c      	ldr	r0, [pc, #176]	; (80033a0 <HAL_FMC_MspInit+0x108>)
 80032ee:	f001 f8fb 	bl	80044e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80032f2:	f248 1333 	movw	r3, #33075	; 0x8133
 80032f6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003304:	230c      	movs	r3, #12
 8003306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4825      	ldr	r0, [pc, #148]	; (80033a4 <HAL_FMC_MspInit+0x10c>)
 800330e:	f001 f8eb 	bl	80044e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003312:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003316:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003324:	230c      	movs	r3, #12
 8003326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	4619      	mov	r1, r3
 800332c:	481e      	ldr	r0, [pc, #120]	; (80033a8 <HAL_FMC_MspInit+0x110>)
 800332e:	f001 f8db 	bl	80044e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003332:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003336:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003340:	2303      	movs	r3, #3
 8003342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003344:	230c      	movs	r3, #12
 8003346:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4817      	ldr	r0, [pc, #92]	; (80033ac <HAL_FMC_MspInit+0x114>)
 800334e:	f001 f8cb 	bl	80044e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003352:	2328      	movs	r3, #40	; 0x28
 8003354:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003362:	230c      	movs	r3, #12
 8003364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4811      	ldr	r0, [pc, #68]	; (80033b0 <HAL_FMC_MspInit+0x118>)
 800336c:	f001 f8bc 	bl	80044e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003370:	2308      	movs	r3, #8
 8003372:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003380:	230c      	movs	r3, #12
 8003382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	4619      	mov	r1, r3
 8003388:	480a      	ldr	r0, [pc, #40]	; (80033b4 <HAL_FMC_MspInit+0x11c>)
 800338a:	f001 f8ad 	bl	80044e8 <HAL_GPIO_Init>
 800338e:	e000      	b.n	8003392 <HAL_FMC_MspInit+0xfa>
    return;
 8003390:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200007f0 	.word	0x200007f0
 800339c:	40023800 	.word	0x40023800
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40021800 	.word	0x40021800
 80033a8:	40020c00 	.word	0x40020c00
 80033ac:	40021400 	.word	0x40021400
 80033b0:	40021c00 	.word	0x40021c00
 80033b4:	40020800 	.word	0x40020800

080033b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033c0:	f7ff ff6a 	bl	8003298 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <HAL_SAI_MspInit+0xbc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d124      	bne.n	8003428 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_SAI_MspInit+0xc0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80033e6:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_SAI_MspInit+0xc4>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <HAL_SAI_MspInit+0xc4>)
 80033ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_SAI_MspInit+0xc4>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_SAI_MspInit+0xc0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_SAI_MspInit+0xc0>)
 8003406:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003408:	23f0      	movs	r3, #240	; 0xf0
 800340a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003418:	230a      	movs	r3, #10
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4619      	mov	r1, r3
 8003422:	481c      	ldr	r0, [pc, #112]	; (8003494 <HAL_SAI_MspInit+0xc8>)
 8003424:	f001 f860 	bl	80044e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_SAI_MspInit+0xcc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d125      	bne.n	800347e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_SAI_MspInit+0xc0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_SAI_MspInit+0xc4>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <HAL_SAI_MspInit+0xc4>)
 8003440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_SAI_MspInit+0xc4>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_SAI_MspInit+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	4a0c      	ldr	r2, [pc, #48]	; (800348c <HAL_SAI_MspInit+0xc0>)
 800345a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800345c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800346e:	230a      	movs	r3, #10
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	4808      	ldr	r0, [pc, #32]	; (800349c <HAL_SAI_MspInit+0xd0>)
 800347a:	f001 f835 	bl	80044e8 <HAL_GPIO_Init>

    }
}
 800347e:	bf00      	nop
 8003480:	3728      	adds	r7, #40	; 0x28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40015c04 	.word	0x40015c04
 800348c:	200007f4 	.word	0x200007f4
 8003490:	40023800 	.word	0x40023800
 8003494:	40022000 	.word	0x40022000
 8003498:	40015c24 	.word	0x40015c24
 800349c:	40021800 	.word	0x40021800

080034a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <NMI_Handler+0x4>

080034a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034aa:	e7fe      	b.n	80034aa <HardFault_Handler+0x4>

080034ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <MemManage_Handler+0x4>

080034b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <BusFault_Handler+0x4>

080034b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <UsageFault_Handler+0x4>

080034be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ec:	f000 f8ce 	bl	800368c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <OTG_FS_IRQHandler+0x10>)
 80034fa:	f001 fc57 	bl	8004dac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200018a0 	.word	0x200018a0

08003508 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <LTDC_IRQHandler+0x10>)
 800350e:	f003 f93f 	bl	8006790 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000c08 	.word	0x20000c08

0800351c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <DMA2D_IRQHandler+0x10>)
 8003522:	f000 fe3f 	bl	80041a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000ebc 	.word	0x20000ebc

08003530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <_sbrk+0x5c>)
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <_sbrk+0x60>)
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <_sbrk+0x64>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <_sbrk+0x64>)
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <_sbrk+0x68>)
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <_sbrk+0x64>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d207      	bcs.n	8003570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003560:	f00e f8f2 	bl	8011748 <__errno>
 8003564:	4603      	mov	r3, r0
 8003566:	220c      	movs	r2, #12
 8003568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800356e:	e009      	b.n	8003584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <_sbrk+0x64>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <_sbrk+0x64>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <_sbrk+0x64>)
 8003580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20050000 	.word	0x20050000
 8003590:	00000800 	.word	0x00000800
 8003594:	200007f8 	.word	0x200007f8
 8003598:	20001bb8 	.word	0x20001bb8

0800359c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <SystemInit+0x20>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <SystemInit+0x20>)
 80035a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035c6:	490e      	ldr	r1, [pc, #56]	; (8003600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035cc:	e002      	b.n	80035d4 <LoopCopyDataInit>

080035ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d2:	3304      	adds	r3, #4

080035d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d8:	d3f9      	bcc.n	80035ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035dc:	4c0b      	ldr	r4, [pc, #44]	; (800360c <LoopFillZerobss+0x26>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e0:	e001      	b.n	80035e6 <LoopFillZerobss>

080035e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e4:	3204      	adds	r2, #4

080035e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e8:	d3fb      	bcc.n	80035e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ea:	f7ff ffd7 	bl	800359c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ee:	f00e f8b1 	bl	8011754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035f2:	f7fd fd31 	bl	8001058 <main>
  bx  lr    
 80035f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003600:	200007d4 	.word	0x200007d4
  ldr r2, =_sidata
 8003604:	08014c54 	.word	0x08014c54
  ldr r2, =_sbss
 8003608:	200007d4 	.word	0x200007d4
  ldr r4, =_ebss
 800360c:	20001bb4 	.word	0x20001bb4

08003610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003610:	e7fe      	b.n	8003610 <ADC_IRQHandler>

08003612 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003616:	2003      	movs	r0, #3
 8003618:	f000 fbd4 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361c:	200f      	movs	r0, #15
 800361e:	f000 f805 	bl	800362c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003622:	f7ff f839 	bl	8002698 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_InitTick+0x54>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_InitTick+0x58>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4619      	mov	r1, r3
 800363e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003642:	fbb3 f3f1 	udiv	r3, r3, r1
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fbef 	bl	8003e2e <HAL_SYSTICK_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00e      	b.n	8003678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d80a      	bhi.n	8003676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003660:	2200      	movs	r2, #0
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003668:	f000 fbb7 	bl	8003dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_InitTick+0x5c>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000000 	.word	0x20000000
 8003684:	20000008 	.word	0x20000008
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x20>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_IncTick+0x24>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4413      	add	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <HAL_IncTick+0x24>)
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000008 	.word	0x20000008
 80036b0:	2000105c 	.word	0x2000105c

080036b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_GetTick+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	2000105c 	.word	0x2000105c

080036cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff ffee 	bl	80036b4 <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e4:	d005      	beq.n	80036f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_Delay+0x44>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036f2:	bf00      	nop
 80036f4:	f7ff ffde 	bl	80036b4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	429a      	cmp	r2, r3
 8003702:	d8f7      	bhi.n	80036f4 <HAL_Delay+0x28>
  {
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000008 	.word	0x20000008

08003714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e031      	b.n	800378e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe ffd4 	bl	80026e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_ADC_Init+0x84>)
 8003758:	4013      	ands	r3, r2
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f964 	bl	8003a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
 800377e:	e001      	b.n	8003784 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	ffffeefd 	.word	0xffffeefd

0800379c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e12a      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x272>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d93a      	bls.n	800383e <HAL_ADC_ConfigChannel+0xa2>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d035      	beq.n	800383e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68d9      	ldr	r1, [r3, #12]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	3b1e      	subs	r3, #30
 80037e8:	2207      	movs	r2, #7
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43da      	mvns	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	400a      	ands	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a87      	ldr	r2, [pc, #540]	; (8003a1c <HAL_ADC_ConfigChannel+0x280>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10a      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68d9      	ldr	r1, [r3, #12]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	061a      	lsls	r2, r3, #24
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003816:	e035      	b.n	8003884 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68d9      	ldr	r1, [r3, #12]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	4618      	mov	r0, r3
 800382a:	4603      	mov	r3, r0
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4403      	add	r3, r0
 8003830:	3b1e      	subs	r3, #30
 8003832:	409a      	lsls	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800383c:	e022      	b.n	8003884 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6919      	ldr	r1, [r3, #16]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	2207      	movs	r2, #7
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43da      	mvns	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	400a      	ands	r2, r1
 8003860:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6919      	ldr	r1, [r3, #16]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	4618      	mov	r0, r3
 8003874:	4603      	mov	r3, r0
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4403      	add	r3, r0
 800387a:	409a      	lsls	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b06      	cmp	r3, #6
 800388a:	d824      	bhi.n	80038d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	3b05      	subs	r3, #5
 800389e:	221f      	movs	r2, #31
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43da      	mvns	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	400a      	ands	r2, r1
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b05      	subs	r3, #5
 80038c8:	fa00 f203 	lsl.w	r2, r0, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
 80038d4:	e04c      	b.n	8003970 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d824      	bhi.n	8003928 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	3b23      	subs	r3, #35	; 0x23
 80038f0:	221f      	movs	r2, #31
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	400a      	ands	r2, r1
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4618      	mov	r0, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	3b23      	subs	r3, #35	; 0x23
 800391a:	fa00 f203 	lsl.w	r2, r0, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
 8003926:	e023      	b.n	8003970 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	3b41      	subs	r3, #65	; 0x41
 800393a:	221f      	movs	r2, #31
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43da      	mvns	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	400a      	ands	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	4618      	mov	r0, r3
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	3b41      	subs	r3, #65	; 0x41
 8003964:	fa00 f203 	lsl.w	r2, r0, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <HAL_ADC_ConfigChannel+0x284>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10a      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1f4>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003982:	d105      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_ADC_ConfigChannel+0x288>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <HAL_ADC_ConfigChannel+0x288>)
 800398a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800398e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_ADC_ConfigChannel+0x284>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d109      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x212>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b12      	cmp	r3, #18
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_ADC_ConfigChannel+0x288>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_ADC_ConfigChannel+0x288>)
 80039a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_ADC_ConfigChannel+0x284>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d125      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x268>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <HAL_ADC_ConfigChannel+0x280>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x22e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b11      	cmp	r3, #17
 80039c8:	d11c      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_ADC_ConfigChannel+0x288>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_ADC_ConfigChannel+0x288>)
 80039d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <HAL_ADC_ConfigChannel+0x280>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_ADC_ConfigChannel+0x28c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_ADC_ConfigChannel+0x290>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	0c9a      	lsrs	r2, r3, #18
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039f6:	e002      	b.n	80039fe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	10000012 	.word	0x10000012
 8003a20:	40012000 	.word	0x40012000
 8003a24:	40012300 	.word	0x40012300
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	431bde83 	.word	0x431bde83

08003a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a38:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <ADC_Init+0x1ec>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a77      	ldr	r2, [pc, #476]	; (8003c1c <ADC_Init+0x1ec>)
 8003a3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a42:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a44:	4b75      	ldr	r3, [pc, #468]	; (8003c1c <ADC_Init+0x1ec>)
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4973      	ldr	r1, [pc, #460]	; (8003c1c <ADC_Init+0x1ec>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <ADC_Init+0x1f0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6899      	ldr	r1, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	e00f      	b.n	8003b2a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0202 	bic.w	r2, r2, #2
 8003b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	005a      	lsls	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01b      	beq.n	8003b90 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	3b01      	subs	r3, #1
 8003b84:	035a      	lsls	r2, r3, #13
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e007      	b.n	8003ba0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	051a      	lsls	r2, r3, #20
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003be2:	025a      	lsls	r2, r3, #9
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	029a      	lsls	r2, r3, #10
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40012300 	.word	0x40012300
 8003c20:	0f000001 	.word	0x0f000001

08003c24 <__NVIC_SetPriorityGrouping>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <__NVIC_SetPriorityGrouping+0x40>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <__NVIC_SetPriorityGrouping+0x40>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00
 8003c68:	05fa0000 	.word	0x05fa0000

08003c6c <__NVIC_GetPriorityGrouping>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <__NVIC_GetPriorityGrouping+0x18>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0307 	and.w	r3, r3, #7
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_EnableIRQ>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db0b      	blt.n	8003cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4907      	ldr	r1, [pc, #28]	; (8003cc0 <__NVIC_EnableIRQ+0x38>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <__NVIC_SetPriority>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db0a      	blt.n	8003cee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	490c      	ldr	r1, [pc, #48]	; (8003d10 <__NVIC_SetPriority+0x4c>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cec:	e00a      	b.n	8003d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4908      	ldr	r1, [pc, #32]	; (8003d14 <__NVIC_SetPriority+0x50>)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	440b      	add	r3, r1
 8003d02:	761a      	strb	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <NVIC_EncodePriority>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f1c3 0307 	rsb	r3, r3, #7
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf28      	it	cs
 8003d36:	2304      	movcs	r3, #4
 8003d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <NVIC_EncodePriority+0x30>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3b03      	subs	r3, #3
 8003d46:	e000      	b.n	8003d4a <NVIC_EncodePriority+0x32>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43d9      	mvns	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	4313      	orrs	r3, r2
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da4:	f7ff ff8e 	bl	8003cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff29 	bl	8003c24 <__NVIC_SetPriorityGrouping>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dec:	f7ff ff3e 	bl	8003c6c <__NVIC_GetPriorityGrouping>
 8003df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff8e 	bl	8003d18 <NVIC_EncodePriority>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff5d 	bl	8003cc4 <__NVIC_SetPriority>
}
 8003e0a:	bf00      	nop
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	4603      	mov	r3, r0
 8003e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff31 	bl	8003c88 <__NVIC_EnableIRQ>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffa2 	bl	8003d80 <SysTick_Config>
 8003e3c:	4603      	mov	r3, r0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e054      	b.n	8003f04 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7f5b      	ldrb	r3, [r3, #29]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fe fc92 	bl	8002794 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	791b      	ldrb	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_CRC_Init+0xc4>)
 8003e84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0218 	bic.w	r2, r2, #24
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	e00c      	b.n	8003eb2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f834 	bl	8003f10 <HAL_CRCEx_Polynomial_Set>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e028      	b.n	8003f04 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	795b      	ldrb	r3, [r3, #5]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ec2:	611a      	str	r2, [r3, #16]
 8003ec4:	e004      	b.n	8003ed0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6912      	ldr	r2, [r2, #16]
 8003ece:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699a      	ldr	r2, [r3, #24]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	04c11db7 	.word	0x04c11db7

08003f10 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f20:	231f      	movs	r3, #31
 8003f22:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f24:	bf00      	nop
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	613a      	str	r2, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_CRCEx_Polynomial_Set+0x34>
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_CRCEx_Polynomial_Set+0x16>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b18      	cmp	r3, #24
 8003f48:	d846      	bhi.n	8003fd8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003fdf 	.word	0x08003fdf
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	08003fd9 	.word	0x08003fd9
 8003f5c:	08003fd9 	.word	0x08003fd9
 8003f60:	08003fd9 	.word	0x08003fd9
 8003f64:	08003fd9 	.word	0x08003fd9
 8003f68:	08003fd9 	.word	0x08003fd9
 8003f6c:	08003fd9 	.word	0x08003fd9
 8003f70:	08003fcd 	.word	0x08003fcd
 8003f74:	08003fd9 	.word	0x08003fd9
 8003f78:	08003fd9 	.word	0x08003fd9
 8003f7c:	08003fd9 	.word	0x08003fd9
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003fd9 	.word	0x08003fd9
 8003f8c:	08003fd9 	.word	0x08003fd9
 8003f90:	08003fc1 	.word	0x08003fc1
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fd9 	.word	0x08003fd9
 8003fa0:	08003fd9 	.word	0x08003fd9
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	08003fb5 	.word	0x08003fb5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d913      	bls.n	8003fe2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fbe:	e010      	b.n	8003fe2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b07      	cmp	r3, #7
 8003fc4:	d90f      	bls.n	8003fe6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fca:	e00c      	b.n	8003fe6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	d90b      	bls.n	8003fea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fd6:	e008      	b.n	8003fea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	e006      	b.n	8003fec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003fea:	bf00      	nop
  }
  if (status == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 0118 	bic.w	r1, r3, #24
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e069      	b.n	8004102 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fe fbca 	bl	80027d4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_DCMI_Init+0xf0>)
 8004062:	400b      	ands	r3, r1
 8004064:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800407a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004086:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004092:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800409e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040aa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d112      	bne.n	80040e2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7f1b      	ldrb	r3, [r3, #28]
 80040c0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7f5b      	ldrb	r3, [r3, #29]
 80040c6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040c8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7f9b      	ldrb	r3, [r3, #30]
 80040ce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040d0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7fdb      	ldrb	r3, [r3, #31]
 80040d8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040de:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040e0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 021e 	orr.w	r2, r2, #30
 80040f0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	ffe0f007 	.word	0xffe0f007

08004110 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e039      	b.n	8004196 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe fc0a 	bl	8002950 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	f023 0107 	bic.w	r1, r3, #7
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_DMA2D_Init+0x90>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68d1      	ldr	r1, [r2, #12]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	430b      	orrs	r3, r1
 8004184:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	ffffc000 	.word	0xffffc000

080041a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d026      	beq.n	8004214 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d021      	beq.n	8004214 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	f043 0201 	orr.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2204      	movs	r2, #4
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d026      	beq.n	800426c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d021      	beq.n	800426c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004236:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2220      	movs	r2, #32
 800423e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	f043 0202 	orr.w	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2204      	movs	r2, #4
 8004250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d026      	beq.n	80042c4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427c:	2b00      	cmp	r3, #0
 800427e:	d021      	beq.n	80042c4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800428e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2208      	movs	r2, #8
 8004296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	f043 0204 	orr.w	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2204      	movs	r2, #4
 80042a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d013      	beq.n	80042f6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2204      	movs	r2, #4
 80042ee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f853 	bl	800439c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d024      	beq.n	800434a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01f      	beq.n	800434a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004318:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2202      	movs	r2, #2
 8004320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01f      	beq.n	8004394 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01a      	beq.n	8004394 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800436c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2210      	movs	r2, #16
 8004374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f80e 	bl	80043b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_DMA2D_ConfigLayer+0x20>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e079      	b.n	80044d8 <HAL_DMA2D_ConfigLayer+0x114>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	3318      	adds	r3, #24
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800440e:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004410:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b0a      	cmp	r3, #10
 8004418:	d003      	beq.n	8004422 <HAL_DMA2D_ConfigLayer+0x5e>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b09      	cmp	r3, #9
 8004420:	d107      	bne.n	8004432 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e005      	b.n	800443e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d120      	bne.n	8004486 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	43db      	mvns	r3, r3
 800444e:	ea02 0103 	and.w	r1, r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	430a      	orrs	r2, r1
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b0a      	cmp	r3, #10
 800446c:	d003      	beq.n	8004476 <HAL_DMA2D_ConfigLayer+0xb2>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b09      	cmp	r3, #9
 8004474:	d127      	bne.n	80044c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
 8004484:	e01f      	b.n	80044c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	43db      	mvns	r3, r3
 8004490:	ea02 0103 	and.w	r1, r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b0a      	cmp	r3, #10
 80044ae:	d003      	beq.n	80044b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b09      	cmp	r3, #9
 80044b6:	d106      	bne.n	80044c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	ff03000f 	.word	0xff03000f

080044e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e175      	b.n	80047f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	f040 8164 	bne.w	80047ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00b      	beq.n	8004546 <HAL_GPIO_Init+0x5e>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d007      	beq.n	8004546 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453a:	2b11      	cmp	r3, #17
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b12      	cmp	r3, #18
 8004544:	d130      	bne.n	80045a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800457c:	2201      	movs	r2, #1
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 0201 	and.w	r2, r3, #1
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	2203      	movs	r2, #3
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x100>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b12      	cmp	r3, #18
 80045e6:	d123      	bne.n	8004630 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	08da      	lsrs	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3208      	adds	r2, #8
 80045f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	220f      	movs	r2, #15
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	08da      	lsrs	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3208      	adds	r2, #8
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2203      	movs	r2, #3
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0203 	and.w	r2, r3, #3
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80be 	beq.w	80047ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004672:	4b66      	ldr	r3, [pc, #408]	; (800480c <HAL_GPIO_Init+0x324>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	4a65      	ldr	r2, [pc, #404]	; (800480c <HAL_GPIO_Init+0x324>)
 8004678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800467c:	6453      	str	r3, [r2, #68]	; 0x44
 800467e:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_GPIO_Init+0x324>)
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800468a:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_GPIO_Init+0x328>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	3302      	adds	r3, #2
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_GPIO_Init+0x32c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d037      	beq.n	8004726 <HAL_GPIO_Init+0x23e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a57      	ldr	r2, [pc, #348]	; (8004818 <HAL_GPIO_Init+0x330>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d031      	beq.n	8004722 <HAL_GPIO_Init+0x23a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a56      	ldr	r2, [pc, #344]	; (800481c <HAL_GPIO_Init+0x334>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02b      	beq.n	800471e <HAL_GPIO_Init+0x236>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a55      	ldr	r2, [pc, #340]	; (8004820 <HAL_GPIO_Init+0x338>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d025      	beq.n	800471a <HAL_GPIO_Init+0x232>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a54      	ldr	r2, [pc, #336]	; (8004824 <HAL_GPIO_Init+0x33c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01f      	beq.n	8004716 <HAL_GPIO_Init+0x22e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a53      	ldr	r2, [pc, #332]	; (8004828 <HAL_GPIO_Init+0x340>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d019      	beq.n	8004712 <HAL_GPIO_Init+0x22a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a52      	ldr	r2, [pc, #328]	; (800482c <HAL_GPIO_Init+0x344>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0x226>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a51      	ldr	r2, [pc, #324]	; (8004830 <HAL_GPIO_Init+0x348>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00d      	beq.n	800470a <HAL_GPIO_Init+0x222>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a50      	ldr	r2, [pc, #320]	; (8004834 <HAL_GPIO_Init+0x34c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x21e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4f      	ldr	r2, [pc, #316]	; (8004838 <HAL_GPIO_Init+0x350>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_GPIO_Init+0x21a>
 80046fe:	2309      	movs	r3, #9
 8004700:	e012      	b.n	8004728 <HAL_GPIO_Init+0x240>
 8004702:	230a      	movs	r3, #10
 8004704:	e010      	b.n	8004728 <HAL_GPIO_Init+0x240>
 8004706:	2308      	movs	r3, #8
 8004708:	e00e      	b.n	8004728 <HAL_GPIO_Init+0x240>
 800470a:	2307      	movs	r3, #7
 800470c:	e00c      	b.n	8004728 <HAL_GPIO_Init+0x240>
 800470e:	2306      	movs	r3, #6
 8004710:	e00a      	b.n	8004728 <HAL_GPIO_Init+0x240>
 8004712:	2305      	movs	r3, #5
 8004714:	e008      	b.n	8004728 <HAL_GPIO_Init+0x240>
 8004716:	2304      	movs	r3, #4
 8004718:	e006      	b.n	8004728 <HAL_GPIO_Init+0x240>
 800471a:	2303      	movs	r3, #3
 800471c:	e004      	b.n	8004728 <HAL_GPIO_Init+0x240>
 800471e:	2302      	movs	r3, #2
 8004720:	e002      	b.n	8004728 <HAL_GPIO_Init+0x240>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_GPIO_Init+0x240>
 8004726:	2300      	movs	r3, #0
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	f002 0203 	and.w	r2, r2, #3
 800472e:	0092      	lsls	r2, r2, #2
 8004730:	4093      	lsls	r3, r2
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004738:	4935      	ldr	r1, [pc, #212]	; (8004810 <HAL_GPIO_Init+0x328>)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004746:	4b3d      	ldr	r3, [pc, #244]	; (800483c <HAL_GPIO_Init+0x354>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800476a:	4a34      	ldr	r2, [pc, #208]	; (800483c <HAL_GPIO_Init+0x354>)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_GPIO_Init+0x354>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004794:	4a29      	ldr	r2, [pc, #164]	; (800483c <HAL_GPIO_Init+0x354>)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800479a:	4b28      	ldr	r3, [pc, #160]	; (800483c <HAL_GPIO_Init+0x354>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_GPIO_Init+0x354>)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_GPIO_Init+0x354>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4013      	ands	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <HAL_GPIO_Init+0x354>)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	f67f ae86 	bls.w	8004508 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	3724      	adds	r7, #36	; 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	40013800 	.word	0x40013800
 8004814:	40020000 	.word	0x40020000
 8004818:	40020400 	.word	0x40020400
 800481c:	40020800 	.word	0x40020800
 8004820:	40020c00 	.word	0x40020c00
 8004824:	40021000 	.word	0x40021000
 8004828:	40021400 	.word	0x40021400
 800482c:	40021800 	.word	0x40021800
 8004830:	40021c00 	.word	0x40021c00
 8004834:	40022000 	.word	0x40022000
 8004838:	40022400 	.word	0x40022400
 800483c:	40013c00 	.word	0x40013c00

08004840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e001      	b.n	8004862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004880:	787b      	ldrb	r3, [r7, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800488c:	e003      	b.n	8004896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	041a      	lsls	r2, r3, #16
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	619a      	str	r2, [r3, #24]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048b4:	887a      	ldrh	r2, [r7, #2]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	041a      	lsls	r2, r3, #16
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	43d9      	mvns	r1, r3
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	400b      	ands	r3, r1
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	619a      	str	r2, [r3, #24]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d8:	b08f      	sub	sp, #60	; 0x3c
 80048da:	af0a      	add	r7, sp, #40	; 0x28
 80048dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e054      	b.n	8004992 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f00a ff98 	bl	800f838 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2203      	movs	r2, #3
 800490c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f007 ff4d 	bl	800c7c6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	687e      	ldr	r6, [r7, #4]
 8004934:	466d      	mov	r5, sp
 8004936:	f106 0410 	add.w	r4, r6, #16
 800493a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004946:	e885 0003 	stmia.w	r5, {r0, r1}
 800494a:	1d33      	adds	r3, r6, #4
 800494c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494e:	6838      	ldr	r0, [r7, #0]
 8004950:	f007 fed0 	bl	800c6f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	4618      	mov	r0, r3
 800495c:	f007 ff44 	bl	800c7e8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	687e      	ldr	r6, [r7, #4]
 8004968:	466d      	mov	r5, sp
 800496a:	f106 0410 	add.w	r4, r6, #16
 800496e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800497a:	e885 0003 	stmia.w	r5, {r0, r1}
 800497e:	1d33      	adds	r3, r6, #4
 8004980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	f008 f856 	bl	800ca34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800499a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800499a:	b590      	push	{r4, r7, lr}
 800499c:	b089      	sub	sp, #36	; 0x24
 800499e:	af04      	add	r7, sp, #16
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	4608      	mov	r0, r1
 80049a4:	4611      	mov	r1, r2
 80049a6:	461a      	mov	r2, r3
 80049a8:	4603      	mov	r3, r0
 80049aa:	70fb      	strb	r3, [r7, #3]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70bb      	strb	r3, [r7, #2]
 80049b0:	4613      	mov	r3, r2
 80049b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_HCD_HC_Init+0x28>
 80049be:	2302      	movs	r3, #2
 80049c0:	e076      	b.n	8004ab0 <HAL_HCD_HC_Init+0x116>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	333d      	adds	r3, #61	; 0x3d
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	3338      	adds	r3, #56	; 0x38
 80049ea:	787a      	ldrb	r2, [r7, #1]
 80049ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3340      	adds	r3, #64	; 0x40
 80049fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	212c      	movs	r1, #44	; 0x2c
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3339      	adds	r3, #57	; 0x39
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	212c      	movs	r1, #44	; 0x2c
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	333f      	adds	r3, #63	; 0x3f
 8004a20:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	78ba      	ldrb	r2, [r7, #2]
 8004a2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a2e:	b2d0      	uxtb	r0, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	212c      	movs	r1, #44	; 0x2c
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	333a      	adds	r3, #58	; 0x3a
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da09      	bge.n	8004a5c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	333b      	adds	r3, #59	; 0x3b
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e008      	b.n	8004a6e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	333b      	adds	r3, #59	; 0x3b
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	212c      	movs	r1, #44	; 0x2c
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	333c      	adds	r3, #60	; 0x3c
 8004a7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a80:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	787c      	ldrb	r4, [r7, #1]
 8004a88:	78ba      	ldrb	r2, [r7, #2]
 8004a8a:	78f9      	ldrb	r1, [r7, #3]
 8004a8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	f008 f93f 	bl	800cd20 <USB_HC_Init>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd90      	pop	{r4, r7, pc}

08004ab8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_HCD_HC_Halt+0x1e>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e00f      	b.n	8004af6 <HAL_HCD_HC_Halt+0x3e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f008 fb7b 	bl	800d1e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	70fb      	strb	r3, [r7, #3]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70bb      	strb	r3, [r7, #2]
 8004b16:	4613      	mov	r3, r2
 8004b18:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	333b      	adds	r3, #59	; 0x3b
 8004b28:	78ba      	ldrb	r2, [r7, #2]
 8004b2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	212c      	movs	r1, #44	; 0x2c
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	4413      	add	r3, r2
 8004b38:	333f      	adds	r3, #63	; 0x3f
 8004b3a:	787a      	ldrb	r2, [r7, #1]
 8004b3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b3e:	7c3b      	ldrb	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d112      	bne.n	8004b6a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3342      	adds	r3, #66	; 0x42
 8004b52:	2203      	movs	r2, #3
 8004b54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	333d      	adds	r3, #61	; 0x3d
 8004b64:	7f3a      	ldrb	r2, [r7, #28]
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	e008      	b.n	8004b7c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	3342      	adds	r3, #66	; 0x42
 8004b78:	2202      	movs	r2, #2
 8004b7a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b7c:	787b      	ldrb	r3, [r7, #1]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	f200 80c6 	bhi.w	8004d10 <HAL_HCD_HC_SubmitRequest+0x210>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004cfd 	.word	0x08004cfd
 8004b94:	08004c01 	.word	0x08004c01
 8004b98:	08004c7f 	.word	0x08004c7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b9c:	7c3b      	ldrb	r3, [r7, #16]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	f040 80b8 	bne.w	8004d14 <HAL_HCD_HC_SubmitRequest+0x214>
 8004ba4:	78bb      	ldrb	r3, [r7, #2]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 80b4 	bne.w	8004d14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004bac:	8b3b      	ldrh	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3355      	adds	r3, #85	; 0x55
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	212c      	movs	r1, #44	; 0x2c
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	3355      	adds	r3, #85	; 0x55
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	212c      	movs	r1, #44	; 0x2c
 8004bde:	fb01 f303 	mul.w	r3, r1, r3
 8004be2:	4413      	add	r3, r2
 8004be4:	3342      	adds	r3, #66	; 0x42
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004bea:	e093      	b.n	8004d14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	212c      	movs	r1, #44	; 0x2c
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3342      	adds	r3, #66	; 0x42
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
      break;
 8004bfe:	e089      	b.n	8004d14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004c00:	78bb      	ldrb	r3, [r7, #2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3355      	adds	r3, #85	; 0x55
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3342      	adds	r3, #66	; 0x42
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c2c:	e073      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3342      	adds	r3, #66	; 0x42
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	701a      	strb	r2, [r3, #0]
      break;
 8004c40:	e069      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3354      	adds	r3, #84	; 0x54
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3342      	adds	r3, #66	; 0x42
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
      break;
 8004c68:	e055      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3342      	adds	r3, #66	; 0x42
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
      break;
 8004c7c:	e04b      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c7e:	78bb      	ldrb	r3, [r7, #2]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11d      	bne.n	8004cc0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	212c      	movs	r1, #44	; 0x2c
 8004c8a:	fb01 f303 	mul.w	r3, r1, r3
 8004c8e:	4413      	add	r3, r2
 8004c90:	3355      	adds	r3, #85	; 0x55
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	212c      	movs	r1, #44	; 0x2c
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3342      	adds	r3, #66	; 0x42
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004caa:	e034      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	212c      	movs	r1, #44	; 0x2c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3342      	adds	r3, #66	; 0x42
 8004cba:	2202      	movs	r2, #2
 8004cbc:	701a      	strb	r2, [r3, #0]
      break;
 8004cbe:	e02a      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	212c      	movs	r1, #44	; 0x2c
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3354      	adds	r3, #84	; 0x54
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	212c      	movs	r1, #44	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	3342      	adds	r3, #66	; 0x42
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
      break;
 8004ce6:	e016      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	212c      	movs	r1, #44	; 0x2c
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3342      	adds	r3, #66	; 0x42
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	e00c      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	212c      	movs	r1, #44	; 0x2c
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	3342      	adds	r3, #66	; 0x42
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
      break;
 8004d0e:	e002      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004d10:	bf00      	nop
 8004d12:	e000      	b.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004d14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3344      	adds	r3, #68	; 0x44
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	8b3a      	ldrh	r2, [r7, #24]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	202c      	movs	r0, #44	; 0x2c
 8004d30:	fb00 f303 	mul.w	r3, r0, r3
 8004d34:	440b      	add	r3, r1
 8004d36:	334c      	adds	r3, #76	; 0x4c
 8004d38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	212c      	movs	r1, #44	; 0x2c
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	3360      	adds	r3, #96	; 0x60
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	212c      	movs	r1, #44	; 0x2c
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	3350      	adds	r3, #80	; 0x50
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	212c      	movs	r1, #44	; 0x2c
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	3339      	adds	r3, #57	; 0x39
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	212c      	movs	r1, #44	; 0x2c
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3361      	adds	r3, #97	; 0x61
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	222c      	movs	r2, #44	; 0x2c
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	3338      	adds	r3, #56	; 0x38
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	18d1      	adds	r1, r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f008 f8ce 	bl	800cf3c <USB_HC_StartXfer>
 8004da0:	4603      	mov	r3, r0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop

08004dac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f007 fdf3 	bl	800c9ae <USB_GetMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	f040 80ef 	bne.w	8004fae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f007 fdd7 	bl	800c988 <USB_ReadInterrupts>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80e5 	beq.w	8004fac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f007 fdce 	bl	800c988 <USB_ReadInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df6:	d104      	bne.n	8004e02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f007 fdbe 	bl	800c988 <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d104      	bne.n	8004e22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f007 fdae 	bl	800c988 <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e36:	d104      	bne.n	8004e42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f007 fd9e 	bl	800c988 <USB_ReadInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d103      	bne.n	8004e5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f007 fd90 	bl	800c988 <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e72:	d115      	bne.n	8004ea0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f00a fd44 	bl	800f91c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f007 fe7a 	bl	800cb94 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f007 fd6f 	bl	800c988 <USB_ReadInterrupts>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eb4:	d102      	bne.n	8004ebc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 f9ff 	bl	80062ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f007 fd61 	bl	800c988 <USB_ReadInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d106      	bne.n	8004ede <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f00a fd07 	bl	800f8e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2208      	movs	r2, #8
 8004edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f007 fd50 	bl	800c988 <USB_ReadInterrupts>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d101      	bne.n	8004ef6 <HAL_HCD_IRQHandler+0x14a>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <HAL_HCD_IRQHandler+0x14c>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d012      	beq.n	8004f22 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0210 	bic.w	r2, r2, #16
 8004f0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 f902 	bl	8006116 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0210 	orr.w	r2, r2, #16
 8004f20:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f007 fd2e 	bl	800c988 <USB_ReadInterrupts>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f36:	d13a      	bne.n	8004fae <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f008 f93f 	bl	800d1c0 <USB_HC_ReadInterrupt>
 8004f42:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e025      	b.n	8004f96 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f74:	d106      	bne.n	8004f84 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f8ab 	bl	80050d8 <HCD_HC_IN_IRQHandler>
 8004f82:	e005      	b.n	8004f90 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fcc6 	bl	800591c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3301      	adds	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3d4      	bcc.n	8004f4a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fa8:	615a      	str	r2, [r3, #20]
 8004faa:	e000      	b.n	8004fae <HAL_HCD_IRQHandler+0x202>
      return;
 8004fac:	bf00      	nop
    }
  }
}
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_HCD_Start+0x16>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e013      	b.n	8004ff2 <HAL_HCD_Start+0x3e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f007 fbe4 	bl	800c7a4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f007 fe3a 	bl	800cc5c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_HCD_Stop+0x16>
 800500c:	2302      	movs	r3, #2
 800500e:	e00d      	b.n	800502c <HAL_HCD_Stop+0x32>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f008 fa39 	bl	800d494 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f007 fde1 	bl	800cc08 <USB_ResetPort>
 8005046:	4603      	mov	r3, r0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3360      	adds	r3, #96	; 0x60
 800506a:	781b      	ldrb	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	212c      	movs	r1, #44	; 0x2c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3350      	adds	r3, #80	; 0x50
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f007 fe25 	bl	800ccfc <USB_GetCurrentFrame>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f007 fe00 	bl	800ccce <USB_GetHostSpeed>
 80050ce:	4603      	mov	r3, r0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d119      	bne.n	800513c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	2304      	movs	r3, #4
 8005118:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	440a      	add	r2, r1
 8005130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	60d3      	str	r3, [r2, #12]
 800513a:	e101      	b.n	8005340 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005152:	d12b      	bne.n	80051ac <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	461a      	mov	r2, r3
 8005162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005166:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3361      	adds	r3, #97	; 0x61
 8005176:	2207      	movs	r2, #7
 8005178:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	440a      	add	r2, r1
 8005190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f008 f81c 	bl	800d1e2 <USB_HC_Halt>
 80051aa:	e0c9      	b.n	8005340 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d109      	bne.n	80051d6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	461a      	mov	r2, r3
 80051d0:	2320      	movs	r3, #32
 80051d2:	6093      	str	r3, [r2, #8]
 80051d4:	e0b4      	b.n	8005340 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d133      	bne.n	8005254 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f043 0302 	orr.w	r3, r3, #2
 800520a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3361      	adds	r3, #97	; 0x61
 800521a:	2205      	movs	r2, #5
 800521c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	461a      	mov	r2, r3
 800522c:	2310      	movs	r3, #16
 800522e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	2308      	movs	r3, #8
 8005240:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f007 ffc8 	bl	800d1e2 <USB_HC_Halt>
 8005252:	e075      	b.n	8005340 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d134      	bne.n	80052d6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3361      	adds	r3, #97	; 0x61
 800529a:	2208      	movs	r2, #8
 800529c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052aa:	461a      	mov	r2, r3
 80052ac:	2310      	movs	r3, #16
 80052ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	461a      	mov	r2, r3
 80052be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f007 ff87 	bl	800d1e2 <USB_HC_Halt>
 80052d4:	e034      	b.n	8005340 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b80      	cmp	r3, #128	; 0x80
 80052ea:	d129      	bne.n	8005340 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	440a      	add	r2, r1
 8005302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005306:	f043 0302 	orr.w	r3, r3, #2
 800530a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	3361      	adds	r3, #97	; 0x61
 800531a:	2206      	movs	r2, #6
 800531c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f007 ff5a 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533a:	461a      	mov	r2, r3
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005356:	d122      	bne.n	800539e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	440a      	add	r2, r1
 800536e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005372:	f043 0302 	orr.w	r3, r3, #2
 8005376:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f007 ff2d 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	461a      	mov	r2, r3
 8005396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800539a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800539c:	e2ba      	b.n	8005914 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 811b 	bne.w	80055ec <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d019      	beq.n	80053f2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3348      	adds	r3, #72	; 0x48
 80053cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0159      	lsls	r1, r3, #5
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	440b      	add	r3, r1
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	202c      	movs	r0, #44	; 0x2c
 80053e8:	fb00 f303 	mul.w	r3, r0, r3
 80053ec:	440b      	add	r3, r1
 80053ee:	3350      	adds	r3, #80	; 0x50
 80053f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	212c      	movs	r1, #44	; 0x2c
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	3361      	adds	r3, #97	; 0x61
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	212c      	movs	r1, #44	; 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	335c      	adds	r3, #92	; 0x5c
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	461a      	mov	r2, r3
 8005424:	2301      	movs	r3, #1
 8005426:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	212c      	movs	r1, #44	; 0x2c
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	4413      	add	r3, r2
 8005434:	333f      	adds	r3, #63	; 0x3f
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	212c      	movs	r1, #44	; 0x2c
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	333f      	adds	r3, #63	; 0x3f
 800544a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800544c:	2b02      	cmp	r3, #2
 800544e:	d121      	bne.n	8005494 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	440a      	add	r2, r1
 8005466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546a:	f043 0302 	orr.w	r3, r3, #2
 800546e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f007 feb1 	bl	800d1e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	461a      	mov	r2, r3
 800548e:	2310      	movs	r3, #16
 8005490:	6093      	str	r3, [r2, #8]
 8005492:	e066      	b.n	8005562 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	212c      	movs	r1, #44	; 0x2c
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
 80054a0:	333f      	adds	r3, #63	; 0x3f
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d127      	bne.n	80054f8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	3360      	adds	r3, #96	; 0x60
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	b2d9      	uxtb	r1, r3
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	202c      	movs	r0, #44	; 0x2c
 80054e4:	fb00 f303 	mul.w	r3, r0, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	3360      	adds	r3, #96	; 0x60
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f00a fa21 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054f6:	e034      	b.n	8005562 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	212c      	movs	r1, #44	; 0x2c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	333f      	adds	r3, #63	; 0x3f
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d12a      	bne.n	8005562 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	3360      	adds	r3, #96	; 0x60
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	3354      	adds	r3, #84	; 0x54
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	f083 0301 	eor.w	r3, r3, #1
 8005532:	b2d8      	uxtb	r0, r3
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	212c      	movs	r1, #44	; 0x2c
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	4413      	add	r3, r2
 8005540:	3354      	adds	r3, #84	; 0x54
 8005542:	4602      	mov	r2, r0
 8005544:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	b2d9      	uxtb	r1, r3
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	202c      	movs	r0, #44	; 0x2c
 8005550:	fb00 f303 	mul.w	r3, r0, r3
 8005554:	4413      	add	r3, r2
 8005556:	3360      	adds	r3, #96	; 0x60
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f00a f9eb 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d12b      	bne.n	80055c2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	212c      	movs	r1, #44	; 0x2c
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	3348      	adds	r3, #72	; 0x48
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	202c      	movs	r0, #44	; 0x2c
 8005580:	fb00 f202 	mul.w	r2, r0, r2
 8005584:	440a      	add	r2, r1
 8005586:	3240      	adds	r2, #64	; 0x40
 8005588:	8812      	ldrh	r2, [r2, #0]
 800558a:	fbb3 f3f2 	udiv	r3, r3, r2
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 81be 	beq.w	8005914 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	212c      	movs	r1, #44	; 0x2c
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	3354      	adds	r3, #84	; 0x54
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f083 0301 	eor.w	r3, r3, #1
 80055ac:	b2d8      	uxtb	r0, r3
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	212c      	movs	r1, #44	; 0x2c
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	3354      	adds	r3, #84	; 0x54
 80055bc:	4602      	mov	r2, r0
 80055be:	701a      	strb	r2, [r3, #0]
}
 80055c0:	e1a8      	b.n	8005914 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	212c      	movs	r1, #44	; 0x2c
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	3354      	adds	r3, #84	; 0x54
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	f083 0301 	eor.w	r3, r3, #1
 80055d6:	b2d8      	uxtb	r0, r3
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	3354      	adds	r3, #84	; 0x54
 80055e6:	4602      	mov	r2, r0
 80055e8:	701a      	strb	r2, [r3, #0]
}
 80055ea:	e193      	b.n	8005914 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	f040 8106 	bne.w	8005810 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	440a      	add	r2, r1
 800561a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561e:	f023 0302 	bic.w	r3, r3, #2
 8005622:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	212c      	movs	r1, #44	; 0x2c
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	4413      	add	r3, r2
 8005630:	3361      	adds	r3, #97	; 0x61
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d109      	bne.n	800564c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	212c      	movs	r1, #44	; 0x2c
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	3360      	adds	r3, #96	; 0x60
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e0c9      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	212c      	movs	r1, #44	; 0x2c
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	3361      	adds	r3, #97	; 0x61
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b05      	cmp	r3, #5
 800565e:	d109      	bne.n	8005674 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	212c      	movs	r1, #44	; 0x2c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	3360      	adds	r3, #96	; 0x60
 800566e:	2205      	movs	r2, #5
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e0b5      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3361      	adds	r3, #97	; 0x61
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b06      	cmp	r3, #6
 8005686:	d009      	beq.n	800569c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	212c      	movs	r1, #44	; 0x2c
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4413      	add	r3, r2
 8005694:	3361      	adds	r3, #97	; 0x61
 8005696:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005698:	2b08      	cmp	r3, #8
 800569a:	d150      	bne.n	800573e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	212c      	movs	r1, #44	; 0x2c
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	335c      	adds	r3, #92	; 0x5c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	202c      	movs	r0, #44	; 0x2c
 80056b4:	fb00 f303 	mul.w	r3, r0, r3
 80056b8:	440b      	add	r3, r1
 80056ba:	335c      	adds	r3, #92	; 0x5c
 80056bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	212c      	movs	r1, #44	; 0x2c
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	335c      	adds	r3, #92	; 0x5c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d912      	bls.n	80056f8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	335c      	adds	r3, #92	; 0x5c
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	212c      	movs	r1, #44	; 0x2c
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	3360      	adds	r3, #96	; 0x60
 80056f2:	2204      	movs	r2, #4
 80056f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056f6:	e073      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	212c      	movs	r1, #44	; 0x2c
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	3360      	adds	r3, #96	; 0x60
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005720:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005728:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005736:	461a      	mov	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800573c:	e050      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	212c      	movs	r1, #44	; 0x2c
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	4413      	add	r3, r2
 800574a:	3361      	adds	r3, #97	; 0x61
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d122      	bne.n	8005798 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	212c      	movs	r1, #44	; 0x2c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	3360      	adds	r3, #96	; 0x60
 8005760:	2202      	movs	r2, #2
 8005762:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800577a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005782:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	461a      	mov	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e023      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	212c      	movs	r1, #44	; 0x2c
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	4413      	add	r3, r2
 80057a4:	3361      	adds	r3, #97	; 0x61
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b07      	cmp	r3, #7
 80057aa:	d119      	bne.n	80057e0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	212c      	movs	r1, #44	; 0x2c
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	335c      	adds	r3, #92	; 0x5c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	202c      	movs	r0, #44	; 0x2c
 80057c4:	fb00 f303 	mul.w	r3, r0, r3
 80057c8:	440b      	add	r3, r1
 80057ca:	335c      	adds	r3, #92	; 0x5c
 80057cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	212c      	movs	r1, #44	; 0x2c
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	3360      	adds	r3, #96	; 0x60
 80057dc:	2204      	movs	r2, #4
 80057de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	461a      	mov	r2, r3
 80057ee:	2302      	movs	r3, #2
 80057f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	b2d9      	uxtb	r1, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	202c      	movs	r0, #44	; 0x2c
 80057fc:	fb00 f303 	mul.w	r3, r0, r3
 8005800:	4413      	add	r3, r2
 8005802:	3360      	adds	r3, #96	; 0x60
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f00a f895 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800580e:	e081      	b.n	8005914 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d176      	bne.n	8005914 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	333f      	adds	r3, #63	; 0x3f
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d121      	bne.n	800587e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	212c      	movs	r1, #44	; 0x2c
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	335c      	adds	r3, #92	; 0x5c
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	440a      	add	r2, r1
 8005862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005866:	f043 0302 	orr.w	r3, r3, #2
 800586a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f007 fcb3 	bl	800d1e2 <USB_HC_Halt>
 800587c:	e041      	b.n	8005902 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	212c      	movs	r1, #44	; 0x2c
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	4413      	add	r3, r2
 800588a:	333f      	adds	r3, #63	; 0x3f
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	212c      	movs	r1, #44	; 0x2c
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	4413      	add	r3, r2
 800589e:	333f      	adds	r3, #63	; 0x3f
 80058a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d12d      	bne.n	8005902 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	212c      	movs	r1, #44	; 0x2c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	335c      	adds	r3, #92	; 0x5c
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d120      	bne.n	8005902 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	212c      	movs	r1, #44	; 0x2c
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	3361      	adds	r3, #97	; 0x61
 80058ce:	2203      	movs	r2, #3
 80058d0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f007 fc70 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	461a      	mov	r2, r3
 8005910:	2310      	movs	r3, #16
 8005912:	6093      	str	r3, [r2, #8]
}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b04      	cmp	r3, #4
 800594a:	d119      	bne.n	8005980 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	461a      	mov	r2, r3
 800595a:	2304      	movs	r3, #4
 800595c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	4413      	add	r3, r2
 8005966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	440a      	add	r2, r1
 8005974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800597e:	e3c6      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d13e      	bne.n	8005a14 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	461a      	mov	r2, r3
 80059a4:	2320      	movs	r3, #32
 80059a6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	212c      	movs	r1, #44	; 0x2c
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	4413      	add	r3, r2
 80059b4:	333d      	adds	r3, #61	; 0x3d
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 83a8 	bne.w	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	212c      	movs	r1, #44	; 0x2c
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	333d      	adds	r3, #61	; 0x3d
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	212c      	movs	r1, #44	; 0x2c
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	3360      	adds	r3, #96	; 0x60
 80059de:	2202      	movs	r2, #2
 80059e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f007 fbe8 	bl	800d1e2 <USB_HC_Halt>
}
 8005a12:	e37c      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2a:	d122      	bne.n	8005a72 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	4611      	mov	r1, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f007 fbc3 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6e:	6093      	str	r3, [r2, #8]
}
 8005a70:	e34d      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d150      	bne.n	8005b2a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	212c      	movs	r1, #44	; 0x2c
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	335c      	adds	r3, #92	; 0x5c
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d111      	bne.n	8005ad4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	333d      	adds	r3, #61	; 0x3d
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f007 fb6f 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b10:	461a      	mov	r2, r3
 8005b12:	2301      	movs	r3, #1
 8005b14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	212c      	movs	r1, #44	; 0x2c
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	3361      	adds	r3, #97	; 0x61
 8005b24:	2201      	movs	r2, #1
 8005b26:	701a      	strb	r2, [r3, #0]
}
 8005b28:	e2f1      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d13c      	bne.n	8005bba <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	212c      	movs	r1, #44	; 0x2c
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3361      	adds	r3, #97	; 0x61
 8005b4e:	2204      	movs	r2, #4
 8005b50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	212c      	movs	r1, #44	; 0x2c
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	333d      	adds	r3, #61	; 0x3d
 8005b60:	2201      	movs	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	212c      	movs	r1, #44	; 0x2c
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	335c      	adds	r3, #92	; 0x5c
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b90:	f043 0302 	orr.w	r3, r3, #2
 8005b94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f007 fb1e 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	6093      	str	r3, [r2, #8]
}
 8005bb8:	e2a9      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d12a      	bne.n	8005c26 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2308      	movs	r3, #8
 8005be0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f007 fae8 	bl	800d1e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	212c      	movs	r1, #44	; 0x2c
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3361      	adds	r3, #97	; 0x61
 8005c20:	2205      	movs	r2, #5
 8005c22:	701a      	strb	r2, [r3, #0]
}
 8005c24:	e273      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d150      	bne.n	8005cde <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	212c      	movs	r1, #44	; 0x2c
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	335c      	adds	r3, #92	; 0x5c
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	212c      	movs	r1, #44	; 0x2c
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	3361      	adds	r3, #97	; 0x61
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	333d      	adds	r3, #61	; 0x3d
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d112      	bne.n	8005c9a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	333c      	adds	r3, #60	; 0x3c
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d108      	bne.n	8005c9a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	212c      	movs	r1, #44	; 0x2c
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	333d      	adds	r3, #61	; 0x3d
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f007 fa8c 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2310      	movs	r3, #16
 8005cda:	6093      	str	r3, [r2, #8]
}
 8005cdc:	e217      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d174      	bne.n	8005dde <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d121      	bne.n	8005d40 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	212c      	movs	r1, #44	; 0x2c
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	3361      	adds	r3, #97	; 0x61
 8005d0a:	2206      	movs	r2, #6
 8005d0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f007 fa52 	bl	800d1e2 <USB_HC_Halt>
 8005d3e:	e044      	b.n	8005dca <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	212c      	movs	r1, #44	; 0x2c
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	335c      	adds	r3, #92	; 0x5c
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	202c      	movs	r0, #44	; 0x2c
 8005d58:	fb00 f303 	mul.w	r3, r0, r3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	335c      	adds	r3, #92	; 0x5c
 8005d60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	212c      	movs	r1, #44	; 0x2c
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	335c      	adds	r3, #92	; 0x5c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d920      	bls.n	8005db8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	212c      	movs	r1, #44	; 0x2c
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	335c      	adds	r3, #92	; 0x5c
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	212c      	movs	r1, #44	; 0x2c
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	4413      	add	r3, r2
 8005d94:	3360      	adds	r3, #96	; 0x60
 8005d96:	2204      	movs	r2, #4
 8005d98:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	b2d9      	uxtb	r1, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	202c      	movs	r0, #44	; 0x2c
 8005da4:	fb00 f303 	mul.w	r3, r0, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	3360      	adds	r3, #96	; 0x60
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f009 fdc1 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005db6:	e008      	b.n	8005dca <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3360      	adds	r3, #96	; 0x60
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	6093      	str	r3, [r2, #8]
}
 8005ddc:	e197      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d134      	bne.n	8005e60 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f007 f9de 	bl	800d1e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	461a      	mov	r2, r3
 8005e34:	2310      	movs	r3, #16
 8005e36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e44:	461a      	mov	r2, r3
 8005e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	212c      	movs	r1, #44	; 0x2c
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	3361      	adds	r3, #97	; 0x61
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	701a      	strb	r2, [r3, #0]
}
 8005e5e:	e156      	b.n	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	f040 814b 	bne.w	800610e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e92:	f023 0302 	bic.w	r3, r3, #2
 8005e96:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	212c      	movs	r1, #44	; 0x2c
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3361      	adds	r3, #97	; 0x61
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d179      	bne.n	8005fa0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	212c      	movs	r1, #44	; 0x2c
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3360      	adds	r3, #96	; 0x60
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	212c      	movs	r1, #44	; 0x2c
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	333f      	adds	r3, #63	; 0x3f
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d00a      	beq.n	8005ee8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	212c      	movs	r1, #44	; 0x2c
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	333f      	adds	r3, #63	; 0x3f
 8005ee0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	f040 80fc 	bne.w	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d142      	bne.n	8005f76 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	212c      	movs	r1, #44	; 0x2c
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	4413      	add	r3, r2
 8005efc:	334c      	adds	r3, #76	; 0x4c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80ed 	beq.w	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	212c      	movs	r1, #44	; 0x2c
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	4413      	add	r3, r2
 8005f12:	334c      	adds	r3, #76	; 0x4c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	202c      	movs	r0, #44	; 0x2c
 8005f1c:	fb00 f202 	mul.w	r2, r0, r2
 8005f20:	440a      	add	r2, r1
 8005f22:	3240      	adds	r2, #64	; 0x40
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	4413      	add	r3, r2
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	202c      	movs	r0, #44	; 0x2c
 8005f30:	fb00 f202 	mul.w	r2, r0, r2
 8005f34:	440a      	add	r2, r1
 8005f36:	3240      	adds	r2, #64	; 0x40
 8005f38:	8812      	ldrh	r2, [r2, #0]
 8005f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80ca 	beq.w	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	212c      	movs	r1, #44	; 0x2c
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3355      	adds	r3, #85	; 0x55
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f083 0301 	eor.w	r3, r3, #1
 8005f60:	b2d8      	uxtb	r0, r3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	212c      	movs	r1, #44	; 0x2c
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3355      	adds	r3, #85	; 0x55
 8005f70:	4602      	mov	r2, r0
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e0b4      	b.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	212c      	movs	r1, #44	; 0x2c
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	3355      	adds	r3, #85	; 0x55
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	f083 0301 	eor.w	r3, r3, #1
 8005f8a:	b2d8      	uxtb	r0, r3
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	212c      	movs	r1, #44	; 0x2c
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	4413      	add	r3, r2
 8005f98:	3355      	adds	r3, #85	; 0x55
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e09f      	b.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	212c      	movs	r1, #44	; 0x2c
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	3361      	adds	r3, #97	; 0x61
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d109      	bne.n	8005fc8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	212c      	movs	r1, #44	; 0x2c
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3360      	adds	r3, #96	; 0x60
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e08b      	b.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	212c      	movs	r1, #44	; 0x2c
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3361      	adds	r3, #97	; 0x61
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d109      	bne.n	8005ff0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	212c      	movs	r1, #44	; 0x2c
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3360      	adds	r3, #96	; 0x60
 8005fea:	2202      	movs	r2, #2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e077      	b.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	212c      	movs	r1, #44	; 0x2c
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3361      	adds	r3, #97	; 0x61
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b05      	cmp	r3, #5
 8006002:	d109      	bne.n	8006018 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	212c      	movs	r1, #44	; 0x2c
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	4413      	add	r3, r2
 8006010:	3360      	adds	r3, #96	; 0x60
 8006012:	2205      	movs	r2, #5
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e063      	b.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	3361      	adds	r3, #97	; 0x61
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b06      	cmp	r3, #6
 800602a:	d009      	beq.n	8006040 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	212c      	movs	r1, #44	; 0x2c
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	4413      	add	r3, r2
 8006038:	3361      	adds	r3, #97	; 0x61
 800603a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800603c:	2b08      	cmp	r3, #8
 800603e:	d14f      	bne.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	212c      	movs	r1, #44	; 0x2c
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	335c      	adds	r3, #92	; 0x5c
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	202c      	movs	r0, #44	; 0x2c
 8006058:	fb00 f303 	mul.w	r3, r0, r3
 800605c:	440b      	add	r3, r1
 800605e:	335c      	adds	r3, #92	; 0x5c
 8006060:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	212c      	movs	r1, #44	; 0x2c
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	4413      	add	r3, r2
 800606e:	335c      	adds	r3, #92	; 0x5c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d912      	bls.n	800609c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	212c      	movs	r1, #44	; 0x2c
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	335c      	adds	r3, #92	; 0x5c
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3360      	adds	r3, #96	; 0x60
 8006096:	2204      	movs	r2, #4
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e021      	b.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	212c      	movs	r1, #44	; 0x2c
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	3360      	adds	r3, #96	; 0x60
 80060aa:	2202      	movs	r2, #2
 80060ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060da:	461a      	mov	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ec:	461a      	mov	r2, r3
 80060ee:	2302      	movs	r3, #2
 80060f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	b2d9      	uxtb	r1, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	202c      	movs	r0, #44	; 0x2c
 80060fc:	fb00 f303 	mul.w	r3, r0, r3
 8006100:	4413      	add	r3, r2
 8006102:	3360      	adds	r3, #96	; 0x60
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f009 fc15 	bl	800f938 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800610e:	bf00      	nop
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b08a      	sub	sp, #40	; 0x28
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	0c5b      	lsrs	r3, r3, #17
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d004      	beq.n	800615c <HCD_RXQLVL_IRQHandler+0x46>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b05      	cmp	r3, #5
 8006156:	f000 80a9 	beq.w	80062ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800615a:	e0aa      	b.n	80062b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80a6 	beq.w	80062b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	212c      	movs	r1, #44	; 0x2c
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	4413      	add	r3, r2
 8006170:	3344      	adds	r3, #68	; 0x44
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 809b 	beq.w	80062b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	212c      	movs	r1, #44	; 0x2c
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	4413      	add	r3, r2
 8006186:	3350      	adds	r3, #80	; 0x50
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	441a      	add	r2, r3
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	202c      	movs	r0, #44	; 0x2c
 8006194:	fb00 f303 	mul.w	r3, r0, r3
 8006198:	440b      	add	r3, r1
 800619a:	334c      	adds	r3, #76	; 0x4c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d87a      	bhi.n	8006298 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	212c      	movs	r1, #44	; 0x2c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	3344      	adds	r3, #68	; 0x44
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	b292      	uxth	r2, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	f006 fbbb 	bl	800c936 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	212c      	movs	r1, #44	; 0x2c
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
 80061ca:	4413      	add	r3, r2
 80061cc:	3344      	adds	r3, #68	; 0x44
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	441a      	add	r2, r3
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	202c      	movs	r0, #44	; 0x2c
 80061da:	fb00 f303 	mul.w	r3, r0, r3
 80061de:	440b      	add	r3, r1
 80061e0:	3344      	adds	r3, #68	; 0x44
 80061e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	212c      	movs	r1, #44	; 0x2c
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	3350      	adds	r3, #80	; 0x50
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	441a      	add	r2, r3
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	202c      	movs	r0, #44	; 0x2c
 80061fe:	fb00 f303 	mul.w	r3, r0, r3
 8006202:	440b      	add	r3, r1
 8006204:	3350      	adds	r3, #80	; 0x50
 8006206:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	0cdb      	lsrs	r3, r3, #19
 8006218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800621c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	212c      	movs	r1, #44	; 0x2c
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	4413      	add	r3, r2
 800622a:	3340      	adds	r3, #64	; 0x40
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4293      	cmp	r3, r2
 8006234:	d13c      	bne.n	80062b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d039      	beq.n	80062b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006252:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800625a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	461a      	mov	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	212c      	movs	r1, #44	; 0x2c
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	3354      	adds	r3, #84	; 0x54
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f083 0301 	eor.w	r3, r3, #1
 8006282:	b2d8      	uxtb	r0, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	212c      	movs	r1, #44	; 0x2c
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	3354      	adds	r3, #84	; 0x54
 8006292:	4602      	mov	r2, r0
 8006294:	701a      	strb	r2, [r3, #0]
      break;
 8006296:	e00b      	b.n	80062b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	212c      	movs	r1, #44	; 0x2c
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	3360      	adds	r3, #96	; 0x60
 80062a6:	2204      	movs	r2, #4
 80062a8:	701a      	strb	r2, [r3, #0]
      break;
 80062aa:	e001      	b.n	80062b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80062ac:	bf00      	nop
 80062ae:	e000      	b.n	80062b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80062b0:	bf00      	nop
  }
}
 80062b2:	bf00      	nop
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d10b      	bne.n	800630a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d102      	bne.n	8006302 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f009 faff 	bl	800f900 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f043 0302 	orr.w	r3, r3, #2
 8006308:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d132      	bne.n	800637a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f043 0308 	orr.w	r3, r3, #8
 800631a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b04      	cmp	r3, #4
 8006324:	d126      	bne.n	8006374 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d113      	bne.n	8006356 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006338:	d106      	bne.n	8006348 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2102      	movs	r1, #2
 8006340:	4618      	mov	r0, r3
 8006342:	f006 fc27 	bl	800cb94 <USB_InitFSLSPClkSel>
 8006346:	e011      	b.n	800636c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2101      	movs	r1, #1
 800634e:	4618      	mov	r0, r3
 8006350:	f006 fc20 	bl	800cb94 <USB_InitFSLSPClkSel>
 8006354:	e00a      	b.n	800636c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d106      	bne.n	800636c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006364:	461a      	mov	r2, r3
 8006366:	f64e 2360 	movw	r3, #60000	; 0xea60
 800636a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f009 faf1 	bl	800f954 <HAL_HCD_PortEnabled_Callback>
 8006372:	e002      	b.n	800637a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f009 fafb 	bl	800f970 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b20      	cmp	r3, #32
 8006382:	d103      	bne.n	800638c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f043 0320 	orr.w	r3, r3, #32
 800638a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006392:	461a      	mov	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6013      	str	r3, [r2, #0]
}
 8006398:	bf00      	nop
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e07f      	b.n	80064b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc fae8 	bl	800299c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0201 	bic.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d107      	bne.n	800641a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	e006      	b.n	8006428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d104      	bne.n	800643a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <HAL_I2C_Init+0x11c>)
 8006446:	430b      	orrs	r3, r1
 8006448:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006458:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	ea42 0103 	orr.w	r1, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	021a      	lsls	r2, r3, #8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69d9      	ldr	r1, [r3, #28]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1a      	ldr	r2, [r3, #32]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	02008000 	.word	0x02008000

080064c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d138      	bne.n	8006548 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e032      	b.n	800654a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	; 0x24
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006512:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b20      	cmp	r3, #32
 800656a:	d139      	bne.n	80065e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006576:	2302      	movs	r3, #2
 8006578:	e033      	b.n	80065e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0bf      	b.n	8006782 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc fa38 	bl	8002a8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006632:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006648:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b4a      	ldr	r3, [pc, #296]	; (800678c <HAL_LTDC_Init+0x19c>)
 8006664:	400b      	ands	r3, r1
 8006666:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68d9      	ldr	r1, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b3e      	ldr	r3, [pc, #248]	; (800678c <HAL_LTDC_Init+0x19c>)
 8006692:	400b      	ands	r3, r1
 8006694:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68d9      	ldr	r1, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1a      	ldr	r2, [r3, #32]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6919      	ldr	r1, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b33      	ldr	r3, [pc, #204]	; (800678c <HAL_LTDC_Init+0x19c>)
 80066c0:	400b      	ands	r3, r1
 80066c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6919      	ldr	r1, [r3, #16]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6959      	ldr	r1, [r3, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b27      	ldr	r3, [pc, #156]	; (800678c <HAL_LTDC_Init+0x19c>)
 80066ee:	400b      	ands	r3, r1
 80066f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0206 	orr.w	r2, r2, #6
 800675e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	f000f800 	.word	0xf000f800

08006790 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d023      	beq.n	80067fa <HAL_LTDC_IRQHandler+0x6a>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2204      	movs	r2, #4
 80067d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067da:	f043 0201 	orr.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2204      	movs	r2, #4
 80067e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f86f 	bl	80068d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d023      	beq.n	800684c <HAL_LTDC_IRQHandler+0xbc>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01e      	beq.n	800684c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0202 	bic.w	r2, r2, #2
 800681c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2202      	movs	r2, #2
 8006824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800682c:	f043 0202 	orr.w	r2, r3, #2
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f846 	bl	80068d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_LTDC_IRQHandler+0xfe>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2201      	movs	r2, #1
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f82f 	bl	80068ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <HAL_LTDC_IRQHandler+0x140>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d016      	beq.n	80068d0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0208 	bic.w	r2, r2, #8
 80068b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2208      	movs	r2, #8
 80068b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f818 	bl	8006900 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006914:	b5b0      	push	{r4, r5, r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_LTDC_ConfigLayer+0x1a>
 800692a:	2302      	movs	r3, #2
 800692c:	e02c      	b.n	8006988 <HAL_LTDC_ConfigLayer+0x74>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2202      	movs	r2, #2
 800693a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2134      	movs	r1, #52	; 0x34
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	4413      	add	r3, r2
 800694a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4614      	mov	r4, r2
 8006952:	461d      	mov	r5, r3
 8006954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800695c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f811 	bl	8006990 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2201      	movs	r2, #1
 8006974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bdb0      	pop	{r4, r5, r7, pc}

08006990 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ac:	4413      	add	r3, r2
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	4413      	add	r3, r2
 80069be:	3384      	adds	r3, #132	; 0x84
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	4611      	mov	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	01d2      	lsls	r2, r2, #7
 80069cc:	440a      	add	r2, r1
 80069ce:	3284      	adds	r2, #132	; 0x84
 80069d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e6:	4413      	add	r3, r2
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	440b      	add	r3, r1
 80069f6:	3384      	adds	r3, #132	; 0x84
 80069f8:	4619      	mov	r1, r3
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0e:	4413      	add	r3, r2
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	4413      	add	r3, r2
 8006a20:	3384      	adds	r3, #132	; 0x84
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	01d2      	lsls	r2, r2, #7
 8006a2e:	440a      	add	r2, r1
 8006a30:	3284      	adds	r2, #132	; 0x84
 8006a32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a46:	4413      	add	r3, r2
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	01db      	lsls	r3, r3, #7
 8006a54:	440b      	add	r3, r1
 8006a56:	3384      	adds	r3, #132	; 0x84
 8006a58:	4619      	mov	r1, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	01db      	lsls	r3, r3, #7
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3384      	adds	r3, #132	; 0x84
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	4611      	mov	r1, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	01d2      	lsls	r2, r2, #7
 8006a7a:	440a      	add	r2, r1
 8006a7c:	3284      	adds	r2, #132	; 0x84
 8006a7e:	f023 0307 	bic.w	r3, r3, #7
 8006a82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	01db      	lsls	r3, r3, #7
 8006a8e:	4413      	add	r3, r2
 8006a90:	3384      	adds	r3, #132	; 0x84
 8006a92:	461a      	mov	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	01db      	lsls	r3, r3, #7
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3384      	adds	r3, #132	; 0x84
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3384      	adds	r3, #132	; 0x84
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	440b      	add	r3, r1
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	4619      	mov	r1, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	01db      	lsls	r3, r3, #7
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3384      	adds	r3, #132	; 0x84
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4611      	mov	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	01d2      	lsls	r2, r2, #7
 8006b1a:	440a      	add	r2, r1
 8006b1c:	3284      	adds	r2, #132	; 0x84
 8006b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	01db      	lsls	r3, r3, #7
 8006b2e:	4413      	add	r3, r2
 8006b30:	3384      	adds	r3, #132	; 0x84
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	4413      	add	r3, r2
 8006b46:	3384      	adds	r3, #132	; 0x84
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	01db      	lsls	r3, r3, #7
 8006b54:	440b      	add	r3, r1
 8006b56:	3384      	adds	r3, #132	; 0x84
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <LTDC_SetConfig+0x32c>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	68f9      	ldr	r1, [r7, #12]
 8006b6a:	6809      	ldr	r1, [r1, #0]
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	01c9      	lsls	r1, r1, #7
 8006b72:	4401      	add	r1, r0
 8006b74:	3184      	adds	r1, #132	; 0x84
 8006b76:	4313      	orrs	r3, r2
 8006b78:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	01db      	lsls	r3, r3, #7
 8006b84:	4413      	add	r3, r2
 8006b86:	3384      	adds	r3, #132	; 0x84
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	01db      	lsls	r3, r3, #7
 8006b94:	4413      	add	r3, r2
 8006b96:	3384      	adds	r3, #132	; 0x84
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	01db      	lsls	r3, r3, #7
 8006ba8:	4413      	add	r3, r2
 8006baa:	3384      	adds	r3, #132	; 0x84
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	e01b      	b.n	8006bfa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d102      	bne.n	8006bd0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	e014      	b.n	8006bfa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d00b      	beq.n	8006bf0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d007      	beq.n	8006bf0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d003      	beq.n	8006bf0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bec:	2b07      	cmp	r3, #7
 8006bee:	d102      	bne.n	8006bf6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	e001      	b.n	8006bfa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	01db      	lsls	r3, r3, #7
 8006c04:	4413      	add	r3, r2
 8006c06:	3384      	adds	r3, #132	; 0x84
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	01d2      	lsls	r2, r2, #7
 8006c14:	440a      	add	r2, r1
 8006c16:	3284      	adds	r2, #132	; 0x84
 8006c18:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	041a      	lsls	r2, r3, #16
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	1acb      	subs	r3, r1, r3
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	6809      	ldr	r1, [r1, #0]
 8006c40:	4608      	mov	r0, r1
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	01c9      	lsls	r1, r1, #7
 8006c46:	4401      	add	r1, r0
 8006c48:	3184      	adds	r1, #132	; 0x84
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	4413      	add	r3, r2
 8006c5a:	3384      	adds	r3, #132	; 0x84
 8006c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	440b      	add	r3, r1
 8006c6a:	3384      	adds	r3, #132	; 0x84
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <LTDC_SetConfig+0x330>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	01db      	lsls	r3, r3, #7
 8006c7e:	4413      	add	r3, r2
 8006c80:	3384      	adds	r3, #132	; 0x84
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	4413      	add	r3, r2
 8006c96:	3384      	adds	r3, #132	; 0x84
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	01d2      	lsls	r2, r2, #7
 8006ca4:	440a      	add	r2, r1
 8006ca6:	3284      	adds	r2, #132	; 0x84
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	6013      	str	r3, [r2, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	3724      	adds	r7, #36	; 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	fffff8f8 	.word	0xfffff8f8
 8006cc0:	fffff800 	.word	0xfffff800

08006cc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a04      	ldr	r2, [pc, #16]	; (8006ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40007000 	.word	0x40007000

08006ce4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006cee:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	4a22      	ldr	r2, [pc, #136]	; (8006d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d06:	4b1e      	ldr	r3, [pc, #120]	; (8006d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d12:	f7fc fccf 	bl	80036b4 <HAL_GetTick>
 8006d16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d18:	e009      	b.n	8006d2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d1a:	f7fc fccb 	bl	80036b4 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d28:	d901      	bls.n	8006d2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e022      	b.n	8006d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d2e:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d1ee      	bne.n	8006d1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d48:	f7fc fcb4 	bl	80036b4 <HAL_GetTick>
 8006d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d4e:	e009      	b.n	8006d64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d50:	f7fc fcb0 	bl	80036b4 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5e:	d901      	bls.n	8006d64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e007      	b.n	8006d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d70:	d1ee      	bne.n	8006d50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	40007000 	.word	0x40007000

08006d84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d8c:	f7fc fc92 	bl	80036b4 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e067      	b.n	8006e6c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7fb ff33 	bl	8002c1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006db6:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f85e 	bl	8006e7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	021a      	lsls	r2, r3, #8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	2120      	movs	r1, #32
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f856 	bl	8006e98 <QSPI_WaitFlagStateUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d135      	bne.n	8006e62 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_QSPI_Init+0xf0>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6852      	ldr	r2, [r2, #4]
 8006e04:	0611      	lsls	r1, r2, #24
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68d2      	ldr	r2, [r2, #12]
 8006e0a:	4311      	orrs	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	69d2      	ldr	r2, [r2, #28]
 8006e10:	4311      	orrs	r1, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6a12      	ldr	r2, [r2, #32]
 8006e16:	4311      	orrs	r1, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6812      	ldr	r2, [r2, #0]
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <HAL_QSPI_Init+0xf4>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6912      	ldr	r2, [r2, #16]
 8006e2e:	0411      	lsls	r1, r2, #16
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6952      	ldr	r2, [r2, #20]
 8006e34:	4311      	orrs	r1, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6992      	ldr	r2, [r2, #24]
 8006e3a:	4311      	orrs	r1, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	00ffff2f 	.word	0x00ffff2f
 8006e78:	ffe0f8fe 	.word	0xffe0f8fe

08006e7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ea8:	e01a      	b.n	8006ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb0:	d016      	beq.n	8006ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb2:	f7fc fbff 	bl	80036b4 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d302      	bcc.n	8006ec8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10b      	bne.n	8006ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed4:	f043 0201 	orr.w	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e00e      	b.n	8006efe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf14      	ite	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	2300      	moveq	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d1d6      	bne.n	8006eaa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f10:	2300      	movs	r3, #0
 8006f12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e291      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8087 	beq.w	800703a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f2c:	4b96      	ldr	r3, [pc, #600]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 030c 	and.w	r3, r3, #12
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d00c      	beq.n	8006f52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f38:	4b93      	ldr	r3, [pc, #588]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 030c 	and.w	r3, r3, #12
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d112      	bne.n	8006f6a <HAL_RCC_OscConfig+0x62>
 8006f44:	4b90      	ldr	r3, [pc, #576]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f50:	d10b      	bne.n	8006f6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f52:	4b8d      	ldr	r3, [pc, #564]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06c      	beq.n	8007038 <HAL_RCC_OscConfig+0x130>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d168      	bne.n	8007038 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e26b      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f72:	d106      	bne.n	8006f82 <HAL_RCC_OscConfig+0x7a>
 8006f74:	4b84      	ldr	r3, [pc, #528]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a83      	ldr	r2, [pc, #524]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	e02e      	b.n	8006fe0 <HAL_RCC_OscConfig+0xd8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x9c>
 8006f8a:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7e      	ldr	r2, [pc, #504]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4b7c      	ldr	r3, [pc, #496]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a7b      	ldr	r2, [pc, #492]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e01d      	b.n	8006fe0 <HAL_RCC_OscConfig+0xd8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fac:	d10c      	bne.n	8006fc8 <HAL_RCC_OscConfig+0xc0>
 8006fae:	4b76      	ldr	r3, [pc, #472]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a75      	ldr	r2, [pc, #468]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b73      	ldr	r3, [pc, #460]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a72      	ldr	r2, [pc, #456]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e00b      	b.n	8006fe0 <HAL_RCC_OscConfig+0xd8>
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6e      	ldr	r2, [pc, #440]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b6c      	ldr	r3, [pc, #432]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a6b      	ldr	r2, [pc, #428]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8006fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d013      	beq.n	8007010 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fc fb64 	bl	80036b4 <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ff0:	f7fc fb60 	bl	80036b4 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b64      	cmp	r3, #100	; 0x64
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e21f      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	4b61      	ldr	r3, [pc, #388]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <HAL_RCC_OscConfig+0xe8>
 800700e:	e014      	b.n	800703a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fc fb50 	bl	80036b4 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007018:	f7fc fb4c 	bl	80036b4 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e20b      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702a:	4b57      	ldr	r3, [pc, #348]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x110>
 8007036:	e000      	b.n	800703a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d069      	beq.n	800711a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007046:	4b50      	ldr	r3, [pc, #320]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 030c 	and.w	r3, r3, #12
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007052:	4b4d      	ldr	r3, [pc, #308]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 030c 	and.w	r3, r3, #12
 800705a:	2b08      	cmp	r3, #8
 800705c:	d11c      	bne.n	8007098 <HAL_RCC_OscConfig+0x190>
 800705e:	4b4a      	ldr	r3, [pc, #296]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d116      	bne.n	8007098 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800706a:	4b47      	ldr	r3, [pc, #284]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_RCC_OscConfig+0x17a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d001      	beq.n	8007082 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e1df      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007082:	4b41      	ldr	r3, [pc, #260]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	493d      	ldr	r1, [pc, #244]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007092:	4313      	orrs	r3, r2
 8007094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007096:	e040      	b.n	800711a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d023      	beq.n	80070e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070a0:	4b39      	ldr	r3, [pc, #228]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a38      	ldr	r2, [pc, #224]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fc fb02 	bl	80036b4 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b4:	f7fc fafe 	bl	80036b4 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e1bd      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c6:	4b30      	ldr	r3, [pc, #192]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f0      	beq.n	80070b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d2:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4929      	ldr	r1, [pc, #164]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]
 80070e6:	e018      	b.n	800711a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e8:	4b27      	ldr	r3, [pc, #156]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a26      	ldr	r2, [pc, #152]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f4:	f7fc fade 	bl	80036b4 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fc:	f7fc fada 	bl	80036b4 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e199      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800710e:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d038      	beq.n	8007198 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d019      	beq.n	8007162 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800712e:	4b16      	ldr	r3, [pc, #88]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713a:	f7fc fabb 	bl	80036b4 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007142:	f7fc fab7 	bl	80036b4 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e176      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x23a>
 8007160:	e01a      	b.n	8007198 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007166:	4a08      	ldr	r2, [pc, #32]	; (8007188 <HAL_RCC_OscConfig+0x280>)
 8007168:	f023 0301 	bic.w	r3, r3, #1
 800716c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716e:	f7fc faa1 	bl	80036b4 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007174:	e00a      	b.n	800718c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007176:	f7fc fa9d 	bl	80036b4 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d903      	bls.n	800718c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e15c      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
 8007188:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800718c:	4b91      	ldr	r3, [pc, #580]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800718e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1ee      	bne.n	8007176 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80a4 	beq.w	80072ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071a6:	4b8b      	ldr	r3, [pc, #556]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10d      	bne.n	80071ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b2:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	4a87      	ldr	r2, [pc, #540]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80071b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071bc:	6413      	str	r3, [r2, #64]	; 0x40
 80071be:	4b85      	ldr	r3, [pc, #532]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c6:	60bb      	str	r3, [r7, #8]
 80071c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ce:	4b82      	ldr	r3, [pc, #520]	; (80073d8 <HAL_RCC_OscConfig+0x4d0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d118      	bne.n	800720c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071da:	4b7f      	ldr	r3, [pc, #508]	; (80073d8 <HAL_RCC_OscConfig+0x4d0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a7e      	ldr	r2, [pc, #504]	; (80073d8 <HAL_RCC_OscConfig+0x4d0>)
 80071e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071e6:	f7fc fa65 	bl	80036b4 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ee:	f7fc fa61 	bl	80036b4 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b64      	cmp	r3, #100	; 0x64
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e120      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007200:	4b75      	ldr	r3, [pc, #468]	; (80073d8 <HAL_RCC_OscConfig+0x4d0>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f0      	beq.n	80071ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d106      	bne.n	8007222 <HAL_RCC_OscConfig+0x31a>
 8007214:	4b6f      	ldr	r3, [pc, #444]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007218:	4a6e      	ldr	r2, [pc, #440]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	6713      	str	r3, [r2, #112]	; 0x70
 8007220:	e02d      	b.n	800727e <HAL_RCC_OscConfig+0x376>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x33c>
 800722a:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a69      	ldr	r2, [pc, #420]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
 8007236:	4b67      	ldr	r3, [pc, #412]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	4a66      	ldr	r2, [pc, #408]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	6713      	str	r3, [r2, #112]	; 0x70
 8007242:	e01c      	b.n	800727e <HAL_RCC_OscConfig+0x376>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d10c      	bne.n	8007266 <HAL_RCC_OscConfig+0x35e>
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a60      	ldr	r2, [pc, #384]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007252:	f043 0304 	orr.w	r3, r3, #4
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
 8007258:	4b5e      	ldr	r3, [pc, #376]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	4a5d      	ldr	r2, [pc, #372]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	6713      	str	r3, [r2, #112]	; 0x70
 8007264:	e00b      	b.n	800727e <HAL_RCC_OscConfig+0x376>
 8007266:	4b5b      	ldr	r3, [pc, #364]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a5a      	ldr	r2, [pc, #360]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	6713      	str	r3, [r2, #112]	; 0x70
 8007272:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	4a57      	ldr	r2, [pc, #348]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007278:	f023 0304 	bic.w	r3, r3, #4
 800727c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d015      	beq.n	80072b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007286:	f7fc fa15 	bl	80036b4 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728c:	e00a      	b.n	80072a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728e:	f7fc fa11 	bl	80036b4 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	f241 3288 	movw	r2, #5000	; 0x1388
 800729c:	4293      	cmp	r3, r2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e0ce      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a4:	4b4b      	ldr	r3, [pc, #300]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ee      	beq.n	800728e <HAL_RCC_OscConfig+0x386>
 80072b0:	e014      	b.n	80072dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b2:	f7fc f9ff 	bl	80036b4 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b8:	e00a      	b.n	80072d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fc f9fb 	bl	80036b4 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e0b8      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072d0:	4b40      	ldr	r3, [pc, #256]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1ee      	bne.n	80072ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d105      	bne.n	80072ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e2:	4b3c      	ldr	r3, [pc, #240]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	4a3b      	ldr	r2, [pc, #236]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80072e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80a4 	beq.w	8007440 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072f8:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 030c 	and.w	r3, r3, #12
 8007300:	2b08      	cmp	r3, #8
 8007302:	d06b      	beq.n	80073dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d149      	bne.n	80073a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730c:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fc f9cc 	bl	80036b4 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007320:	f7fc f9c8 	bl	80036b4 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e087      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007332:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	3b01      	subs	r3, #1
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	061b      	lsls	r3, r3, #24
 8007362:	4313      	orrs	r3, r2
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800736a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800736c:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fc f99c 	bl	80036b4 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007380:	f7fc f998 	bl	80036b4 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e057      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007392:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x478>
 800739e:	e04f      	b.n	8007440 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a0b      	ldr	r2, [pc, #44]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80073a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7fc f982 	bl	80036b4 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fc f97e 	bl	80036b4 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e03d      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c6:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <HAL_RCC_OscConfig+0x4cc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x4ac>
 80073d2:	e035      	b.n	8007440 <HAL_RCC_OscConfig+0x538>
 80073d4:	40023800 	.word	0x40023800
 80073d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <HAL_RCC_OscConfig+0x544>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d028      	beq.n	800743c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d121      	bne.n	800743c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007402:	429a      	cmp	r2, r3
 8007404:	d11a      	bne.n	800743c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007412:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007414:	4293      	cmp	r3, r2
 8007416:	d111      	bne.n	800743c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	3b01      	subs	r3, #1
 8007426:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d107      	bne.n	800743c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007438:	429a      	cmp	r2, r3
 800743a:	d001      	beq.n	8007440 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40023800 	.word	0x40023800

08007450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0d0      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007468:	4b6a      	ldr	r3, [pc, #424]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d910      	bls.n	8007498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b67      	ldr	r3, [pc, #412]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 020f 	bic.w	r2, r3, #15
 800747e:	4965      	ldr	r1, [pc, #404]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	4b63      	ldr	r3, [pc, #396]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d001      	beq.n	8007498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0b8      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d020      	beq.n	80074e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074b0:	4b59      	ldr	r3, [pc, #356]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	4a58      	ldr	r2, [pc, #352]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074c8:	4b53      	ldr	r3, [pc, #332]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	4a52      	ldr	r2, [pc, #328]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d4:	4b50      	ldr	r3, [pc, #320]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	494d      	ldr	r1, [pc, #308]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d040      	beq.n	8007574 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fa:	4b47      	ldr	r3, [pc, #284]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d115      	bne.n	8007532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e07f      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d107      	bne.n	8007522 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007512:	4b41      	ldr	r3, [pc, #260]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e073      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007522:	4b3d      	ldr	r3, [pc, #244]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e06b      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007532:	4b39      	ldr	r3, [pc, #228]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f023 0203 	bic.w	r2, r3, #3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4936      	ldr	r1, [pc, #216]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 8007540:	4313      	orrs	r3, r2
 8007542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007544:	f7fc f8b6 	bl	80036b4 <HAL_GetTick>
 8007548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754a:	e00a      	b.n	8007562 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754c:	f7fc f8b2 	bl	80036b4 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	f241 3288 	movw	r2, #5000	; 0x1388
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e053      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007562:	4b2d      	ldr	r3, [pc, #180]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 020c 	and.w	r2, r3, #12
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	429a      	cmp	r2, r3
 8007572:	d1eb      	bne.n	800754c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007574:	4b27      	ldr	r3, [pc, #156]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d210      	bcs.n	80075a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f023 020f 	bic.w	r2, r3, #15
 800758a:	4922      	ldr	r1, [pc, #136]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007592:	4b20      	ldr	r3, [pc, #128]	; (8007614 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e032      	b.n	800760a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075b0:	4b19      	ldr	r3, [pc, #100]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	4916      	ldr	r1, [pc, #88]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075ce:	4b12      	ldr	r3, [pc, #72]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	490e      	ldr	r1, [pc, #56]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075e2:	f000 f821 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 80075e6:	4602      	mov	r2, r0
 80075e8:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <HAL_RCC_ClockConfig+0x1c8>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	091b      	lsrs	r3, r3, #4
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	490a      	ldr	r1, [pc, #40]	; (800761c <HAL_RCC_ClockConfig+0x1cc>)
 80075f4:	5ccb      	ldrb	r3, [r1, r3]
 80075f6:	fa22 f303 	lsr.w	r3, r2, r3
 80075fa:	4a09      	ldr	r2, [pc, #36]	; (8007620 <HAL_RCC_ClockConfig+0x1d0>)
 80075fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <HAL_RCC_ClockConfig+0x1d4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f7fc f812 	bl	800362c <HAL_InitTick>

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40023c00 	.word	0x40023c00
 8007618:	40023800 	.word	0x40023800
 800761c:	0801464c 	.word	0x0801464c
 8007620:	20000000 	.word	0x20000000
 8007624:	20000004 	.word	0x20000004

08007628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007628:	b5b0      	push	{r4, r5, r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800762e:	2100      	movs	r1, #0
 8007630:	6079      	str	r1, [r7, #4]
 8007632:	2100      	movs	r1, #0
 8007634:	60f9      	str	r1, [r7, #12]
 8007636:	2100      	movs	r1, #0
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800763a:	2100      	movs	r1, #0
 800763c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800763e:	4952      	ldr	r1, [pc, #328]	; (8007788 <HAL_RCC_GetSysClockFreq+0x160>)
 8007640:	6889      	ldr	r1, [r1, #8]
 8007642:	f001 010c 	and.w	r1, r1, #12
 8007646:	2908      	cmp	r1, #8
 8007648:	d00d      	beq.n	8007666 <HAL_RCC_GetSysClockFreq+0x3e>
 800764a:	2908      	cmp	r1, #8
 800764c:	f200 8094 	bhi.w	8007778 <HAL_RCC_GetSysClockFreq+0x150>
 8007650:	2900      	cmp	r1, #0
 8007652:	d002      	beq.n	800765a <HAL_RCC_GetSysClockFreq+0x32>
 8007654:	2904      	cmp	r1, #4
 8007656:	d003      	beq.n	8007660 <HAL_RCC_GetSysClockFreq+0x38>
 8007658:	e08e      	b.n	8007778 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800765a:	4b4c      	ldr	r3, [pc, #304]	; (800778c <HAL_RCC_GetSysClockFreq+0x164>)
 800765c:	60bb      	str	r3, [r7, #8]
      break;
 800765e:	e08e      	b.n	800777e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007660:	4b4b      	ldr	r3, [pc, #300]	; (8007790 <HAL_RCC_GetSysClockFreq+0x168>)
 8007662:	60bb      	str	r3, [r7, #8]
      break;
 8007664:	e08b      	b.n	800777e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007666:	4948      	ldr	r1, [pc, #288]	; (8007788 <HAL_RCC_GetSysClockFreq+0x160>)
 8007668:	6849      	ldr	r1, [r1, #4]
 800766a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800766e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007670:	4945      	ldr	r1, [pc, #276]	; (8007788 <HAL_RCC_GetSysClockFreq+0x160>)
 8007672:	6849      	ldr	r1, [r1, #4]
 8007674:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007678:	2900      	cmp	r1, #0
 800767a:	d024      	beq.n	80076c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767c:	4942      	ldr	r1, [pc, #264]	; (8007788 <HAL_RCC_GetSysClockFreq+0x160>)
 800767e:	6849      	ldr	r1, [r1, #4]
 8007680:	0989      	lsrs	r1, r1, #6
 8007682:	4608      	mov	r0, r1
 8007684:	f04f 0100 	mov.w	r1, #0
 8007688:	f240 14ff 	movw	r4, #511	; 0x1ff
 800768c:	f04f 0500 	mov.w	r5, #0
 8007690:	ea00 0204 	and.w	r2, r0, r4
 8007694:	ea01 0305 	and.w	r3, r1, r5
 8007698:	493d      	ldr	r1, [pc, #244]	; (8007790 <HAL_RCC_GetSysClockFreq+0x168>)
 800769a:	fb01 f003 	mul.w	r0, r1, r3
 800769e:	2100      	movs	r1, #0
 80076a0:	fb01 f102 	mul.w	r1, r1, r2
 80076a4:	1844      	adds	r4, r0, r1
 80076a6:	493a      	ldr	r1, [pc, #232]	; (8007790 <HAL_RCC_GetSysClockFreq+0x168>)
 80076a8:	fba2 0101 	umull	r0, r1, r2, r1
 80076ac:	1863      	adds	r3, r4, r1
 80076ae:	4619      	mov	r1, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	f7f9 fae6 	bl	8000c88 <__aeabi_uldivmod>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4613      	mov	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e04a      	b.n	800775c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c6:	4b30      	ldr	r3, [pc, #192]	; (8007788 <HAL_RCC_GetSysClockFreq+0x160>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	099b      	lsrs	r3, r3, #6
 80076cc:	461a      	mov	r2, r3
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076d6:	f04f 0100 	mov.w	r1, #0
 80076da:	ea02 0400 	and.w	r4, r2, r0
 80076de:	ea03 0501 	and.w	r5, r3, r1
 80076e2:	4620      	mov	r0, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	f04f 0300 	mov.w	r3, #0
 80076ee:	014b      	lsls	r3, r1, #5
 80076f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076f4:	0142      	lsls	r2, r0, #5
 80076f6:	4610      	mov	r0, r2
 80076f8:	4619      	mov	r1, r3
 80076fa:	1b00      	subs	r0, r0, r4
 80076fc:	eb61 0105 	sbc.w	r1, r1, r5
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	018b      	lsls	r3, r1, #6
 800770a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800770e:	0182      	lsls	r2, r0, #6
 8007710:	1a12      	subs	r2, r2, r0
 8007712:	eb63 0301 	sbc.w	r3, r3, r1
 8007716:	f04f 0000 	mov.w	r0, #0
 800771a:	f04f 0100 	mov.w	r1, #0
 800771e:	00d9      	lsls	r1, r3, #3
 8007720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007724:	00d0      	lsls	r0, r2, #3
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	1912      	adds	r2, r2, r4
 800772c:	eb45 0303 	adc.w	r3, r5, r3
 8007730:	f04f 0000 	mov.w	r0, #0
 8007734:	f04f 0100 	mov.w	r1, #0
 8007738:	0299      	lsls	r1, r3, #10
 800773a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800773e:	0290      	lsls	r0, r2, #10
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	461a      	mov	r2, r3
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	f7f9 fa9a 	bl	8000c88 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4613      	mov	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <HAL_RCC_GetSysClockFreq+0x160>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	0c1b      	lsrs	r3, r3, #16
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	3301      	adds	r3, #1
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	fbb2 f3f3 	udiv	r3, r2, r3
 8007774:	60bb      	str	r3, [r7, #8]
      break;
 8007776:	e002      	b.n	800777e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <HAL_RCC_GetSysClockFreq+0x164>)
 800777a:	60bb      	str	r3, [r7, #8]
      break;
 800777c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800777e:	68bb      	ldr	r3, [r7, #8]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bdb0      	pop	{r4, r5, r7, pc}
 8007788:	40023800 	.word	0x40023800
 800778c:	00f42400 	.word	0x00f42400
 8007790:	017d7840 	.word	0x017d7840

08007794 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007798:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800779a:	681b      	ldr	r3, [r3, #0]
}
 800779c:	4618      	mov	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000000 	.word	0x20000000

080077ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077b0:	f7ff fff0 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	0a9b      	lsrs	r3, r3, #10
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4903      	ldr	r1, [pc, #12]	; (80077d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40023800 	.word	0x40023800
 80077d0:	0801465c 	.word	0x0801465c

080077d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077d8:	f7ff ffdc 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 80077dc:	4602      	mov	r2, r0
 80077de:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	0b5b      	lsrs	r3, r3, #13
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	4903      	ldr	r1, [pc, #12]	; (80077f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ea:	5ccb      	ldrb	r3, [r1, r3]
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40023800 	.word	0x40023800
 80077f8:	0801465c 	.word	0x0801465c

080077fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d012      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007824:	4b69      	ldr	r3, [pc, #420]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a68      	ldr	r2, [pc, #416]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800782e:	6093      	str	r3, [r2, #8]
 8007830:	4b66      	ldr	r3, [pc, #408]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	4964      	ldr	r1, [pc, #400]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783a:	4313      	orrs	r3, r2
 800783c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007846:	2301      	movs	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d017      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007856:	4b5d      	ldr	r3, [pc, #372]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800785c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	4959      	ldr	r1, [pc, #356]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007874:	d101      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007876:	2301      	movs	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007882:	2301      	movs	r3, #1
 8007884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d017      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007892:	4b4e      	ldr	r3, [pc, #312]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	494a      	ldr	r1, [pc, #296]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b0:	d101      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078be:	2301      	movs	r3, #1
 80078c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078ce:	2301      	movs	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 808b 	beq.w	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078e0:	4b3a      	ldr	r3, [pc, #232]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	4a39      	ldr	r2, [pc, #228]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ea:	6413      	str	r3, [r2, #64]	; 0x40
 80078ec:	4b37      	ldr	r3, [pc, #220]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078f8:	4b35      	ldr	r3, [pc, #212]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a34      	ldr	r2, [pc, #208]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007904:	f7fb fed6 	bl	80036b4 <HAL_GetTick>
 8007908:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800790a:	e008      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800790c:	f7fb fed2 	bl	80036b4 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b64      	cmp	r3, #100	; 0x64
 8007918:	d901      	bls.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e357      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800791e:	4b2c      	ldr	r3, [pc, #176]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0f0      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800792a:	4b28      	ldr	r3, [pc, #160]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007932:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d035      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	429a      	cmp	r2, r3
 8007946:	d02e      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007948:	4b20      	ldr	r3, [pc, #128]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007950:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007952:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800795c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800795e:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007968:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800796a:	4a18      	ldr	r2, [pc, #96]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007970:	4b16      	ldr	r3, [pc, #88]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b01      	cmp	r3, #1
 800797a:	d114      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7fb fe9a 	bl	80036b4 <HAL_GetTick>
 8007980:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007982:	e00a      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007984:	f7fb fe96 	bl	80036b4 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007992:	4293      	cmp	r3, r2
 8007994:	d901      	bls.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e319      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799a:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0ee      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b2:	d111      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079c2:	400b      	ands	r3, r1
 80079c4:	4901      	ldr	r1, [pc, #4]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	608b      	str	r3, [r1, #8]
 80079ca:	e00b      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079cc:	40023800 	.word	0x40023800
 80079d0:	40007000 	.word	0x40007000
 80079d4:	0ffffcff 	.word	0x0ffffcff
 80079d8:	4bb1      	ldr	r3, [pc, #708]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	4ab0      	ldr	r2, [pc, #704]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079e2:	6093      	str	r3, [r2, #8]
 80079e4:	4bae      	ldr	r3, [pc, #696]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079f0:	49ab      	ldr	r1, [pc, #684]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d010      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a02:	4ba7      	ldr	r3, [pc, #668]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a08:	4aa5      	ldr	r2, [pc, #660]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007a12:	4ba3      	ldr	r3, [pc, #652]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	49a0      	ldr	r1, [pc, #640]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a30:	4b9b      	ldr	r3, [pc, #620]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3e:	4998      	ldr	r1, [pc, #608]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a52:	4b93      	ldr	r3, [pc, #588]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a60:	498f      	ldr	r1, [pc, #572]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a74:	4b8a      	ldr	r3, [pc, #552]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a82:	4987      	ldr	r1, [pc, #540]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a96:	4b82      	ldr	r3, [pc, #520]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	497e      	ldr	r1, [pc, #504]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ab8:	4b79      	ldr	r3, [pc, #484]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abe:	f023 0203 	bic.w	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	4976      	ldr	r1, [pc, #472]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ada:	4b71      	ldr	r3, [pc, #452]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae0:	f023 020c 	bic.w	r2, r3, #12
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae8:	496d      	ldr	r1, [pc, #436]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007afc:	4b68      	ldr	r3, [pc, #416]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0a:	4965      	ldr	r1, [pc, #404]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b1e:	4b60      	ldr	r3, [pc, #384]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2c:	495c      	ldr	r1, [pc, #368]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b40:	4b57      	ldr	r3, [pc, #348]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	4954      	ldr	r1, [pc, #336]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b62:	4b4f      	ldr	r3, [pc, #316]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b70:	494b      	ldr	r1, [pc, #300]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b84:	4b46      	ldr	r3, [pc, #280]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b92:	4943      	ldr	r1, [pc, #268]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ba6:	4b3e      	ldr	r3, [pc, #248]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb4:	493a      	ldr	r1, [pc, #232]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bc8:	4b35      	ldr	r3, [pc, #212]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bd6:	4932      	ldr	r1, [pc, #200]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d011      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bea:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf8:	4929      	ldr	r1, [pc, #164]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c08:	d101      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c38:	4919      	ldr	r1, [pc, #100]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c4c:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c5c:	4910      	ldr	r1, [pc, #64]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d006      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 80d9 	beq.w	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c78:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c84:	f7fb fd16 	bl	80036b4 <HAL_GetTick>
 8007c88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c8a:	e00b      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c8c:	f7fb fd12 	bl	80036b4 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b64      	cmp	r3, #100	; 0x64
 8007c98:	d904      	bls.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e197      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c9e:	bf00      	nop
 8007ca0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ca4:	4b6c      	ldr	r3, [pc, #432]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1ed      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d021      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11d      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cc4:	4b64      	ldr	r3, [pc, #400]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cd2:	4b61      	ldr	r3, [pc, #388]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd8:	0e1b      	lsrs	r3, r3, #24
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	019a      	lsls	r2, r3, #6
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	431a      	orrs	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	071b      	lsls	r3, r3, #28
 8007cf8:	4957      	ldr	r1, [pc, #348]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d02e      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d2a:	d129      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d2c:	4b4a      	ldr	r3, [pc, #296]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d3a:	4b47      	ldr	r3, [pc, #284]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d40:	0f1b      	lsrs	r3, r3, #28
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	019a      	lsls	r2, r3, #6
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	061b      	lsls	r3, r3, #24
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	071b      	lsls	r3, r3, #28
 8007d60:	493d      	ldr	r1, [pc, #244]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d68:	4b3b      	ldr	r3, [pc, #236]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d6e:	f023 021f 	bic.w	r2, r3, #31
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	3b01      	subs	r3, #1
 8007d78:	4937      	ldr	r1, [pc, #220]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01d      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d8c:	4b32      	ldr	r3, [pc, #200]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d92:	0e1b      	lsrs	r3, r3, #24
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d9a:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da0:	0f1b      	lsrs	r3, r3, #28
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	019a      	lsls	r2, r3, #6
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	041b      	lsls	r3, r3, #16
 8007db4:	431a      	orrs	r2, r3
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	061b      	lsls	r3, r3, #24
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	071b      	lsls	r3, r3, #28
 8007dc0:	4925      	ldr	r1, [pc, #148]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d011      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	019a      	lsls	r2, r3, #6
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	061b      	lsls	r3, r3, #24
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	071b      	lsls	r3, r3, #28
 8007df0:	4919      	ldr	r1, [pc, #100]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e04:	f7fb fc56 	bl	80036b4 <HAL_GetTick>
 8007e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e0c:	f7fb fc52 	bl	80036b4 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e0d7      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	f040 80cd 	bne.w	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3e:	f7fb fc39 	bl	80036b4 <HAL_GetTick>
 8007e42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e44:	e00a      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e46:	f7fb fc35 	bl	80036b4 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b64      	cmp	r3, #100	; 0x64
 8007e52:	d903      	bls.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e0ba      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007e58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e5c:	4b5e      	ldr	r3, [pc, #376]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e68:	d0ed      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d02e      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d12a      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e92:	4b51      	ldr	r3, [pc, #324]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ea0:	4b4d      	ldr	r3, [pc, #308]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea6:	0f1b      	lsrs	r3, r3, #28
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	019a      	lsls	r2, r3, #6
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	041b      	lsls	r3, r3, #16
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	061b      	lsls	r3, r3, #24
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	071b      	lsls	r3, r3, #28
 8007ec6:	4944      	ldr	r1, [pc, #272]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ece:	4b42      	ldr	r3, [pc, #264]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	3b01      	subs	r3, #1
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	493d      	ldr	r1, [pc, #244]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d022      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007efc:	d11d      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007efe:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f04:	0e1b      	lsrs	r3, r3, #24
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f0c:	4b32      	ldr	r3, [pc, #200]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f12:	0f1b      	lsrs	r3, r3, #28
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	019a      	lsls	r2, r3, #6
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	041b      	lsls	r3, r3, #16
 8007f26:	431a      	orrs	r2, r3
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	071b      	lsls	r3, r3, #28
 8007f32:	4929      	ldr	r1, [pc, #164]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d028      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f46:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f54:	4b20      	ldr	r3, [pc, #128]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	019a      	lsls	r2, r3, #6
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	061b      	lsls	r3, r3, #24
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	071b      	lsls	r3, r3, #28
 8007f7a:	4917      	ldr	r1, [pc, #92]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	4911      	ldr	r1, [pc, #68]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007f98:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a0e      	ldr	r2, [pc, #56]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa4:	f7fb fb86 	bl	80036b4 <HAL_GetTick>
 8007fa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007faa:	e008      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fac:	f7fb fb82 	bl	80036b4 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b64      	cmp	r3, #100	; 0x64
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e007      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fbe:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fca:	d1ef      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3720      	adds	r7, #32
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800

08007fdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ffa:	f040 808c 	bne.w	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007ffe:	4b95      	ldr	r3, [pc, #596]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008004:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800800c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008014:	d07c      	beq.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800801c:	d87d      	bhi.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800802a:	d039      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800802c:	e075      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800802e:	4b89      	ldr	r3, [pc, #548]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d108      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800803a:	4b86      	ldr	r3, [pc, #536]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008042:	4a85      	ldr	r2, [pc, #532]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008044:	fbb2 f3f3 	udiv	r3, r2, r3
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	e007      	b.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800804c:	4b81      	ldr	r3, [pc, #516]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008054:	4a81      	ldr	r2, [pc, #516]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008056:	fbb2 f3f3 	udiv	r3, r2, r3
 800805a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800805c:	4b7d      	ldr	r3, [pc, #500]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800805e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008062:	0e1b      	lsrs	r3, r3, #24
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800806a:	4b7a      	ldr	r3, [pc, #488]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	099b      	lsrs	r3, r3, #6
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	fb02 f203 	mul.w	r2, r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008082:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008084:	4b73      	ldr	r3, [pc, #460]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	fbb2 f3f3 	udiv	r3, r2, r3
 800809c:	617b      	str	r3, [r7, #20]
        break;
 800809e:	e03d      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080a0:	4b6c      	ldr	r3, [pc, #432]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080ac:	4b69      	ldr	r3, [pc, #420]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080b4:	4a68      	ldr	r2, [pc, #416]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	e007      	b.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080be:	4b65      	ldr	r3, [pc, #404]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c6:	4a65      	ldr	r2, [pc, #404]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080ce:	4b61      	ldr	r3, [pc, #388]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d4:	0e1b      	lsrs	r3, r3, #24
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080dc:	4b5d      	ldr	r3, [pc, #372]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e2:	099b      	lsrs	r3, r3, #6
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	fb02 f203 	mul.w	r2, r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80080f6:	4b57      	ldr	r3, [pc, #348]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080fc:	f003 031f 	and.w	r3, r3, #31
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	617b      	str	r3, [r7, #20]
        break;
 800810e:	e005      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008110:	4b53      	ldr	r3, [pc, #332]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008112:	617b      	str	r3, [r7, #20]
        break;
 8008114:	e002      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800811a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008122:	f040 808c 	bne.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008126:	4b4b      	ldr	r3, [pc, #300]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008134:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813c:	d07c      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008144:	d87d      	bhi.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008152:	d039      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008154:	e075      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008156:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d108      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008162:	4b3c      	ldr	r3, [pc, #240]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816a:	4a3b      	ldr	r2, [pc, #236]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e007      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008174:	4b37      	ldr	r3, [pc, #220]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800817c:	4a37      	ldr	r2, [pc, #220]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008184:	4b33      	ldr	r3, [pc, #204]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	0e1b      	lsrs	r3, r3, #24
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008192:	4b30      	ldr	r3, [pc, #192]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008198:	099b      	lsrs	r3, r3, #6
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	fb02 f203 	mul.w	r2, r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80081ac:	4b29      	ldr	r3, [pc, #164]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	0a1b      	lsrs	r3, r3, #8
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c4:	617b      	str	r3, [r7, #20]
        break;
 80081c6:	e03d      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081c8:	4b22      	ldr	r3, [pc, #136]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d108      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081d4:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	4a1e      	ldr	r2, [pc, #120]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	e007      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081e6:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ee:	4a1b      	ldr	r2, [pc, #108]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80081f6:	4b17      	ldr	r3, [pc, #92]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	fb02 f203 	mul.w	r2, r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	fbb2 f3f3 	udiv	r3, r2, r3
 800821c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	3301      	adds	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	fbb2 f3f3 	udiv	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
        break;
 8008236:	e005      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008238:	4b09      	ldr	r3, [pc, #36]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800823a:	617b      	str	r3, [r7, #20]
        break;
 800823c:	e002      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800823e:	bf00      	nop
 8008240:	e000      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8008242:	bf00      	nop

  return frequency;
 8008244:	697b      	ldr	r3, [r7, #20]
}
 8008246:	4618      	mov	r0, r3
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800
 8008258:	00f42400 	.word	0x00f42400
 800825c:	017d7840 	.word	0x017d7840
 8008260:	00bb8000 	.word	0x00bb8000

08008264 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e081      	b.n	800837a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7f5b      	ldrb	r3, [r3, #29]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fa fd58 	bl	8002d3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	22ca      	movs	r2, #202	; 0xca
 8008298:	625a      	str	r2, [r3, #36]	; 0x24
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2253      	movs	r2, #83	; 0x53
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fb16 	bl	80088d4 <RTC_EnterInitMode>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	22ff      	movs	r2, #255	; 0xff
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e05c      	b.n	800837a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6899      	ldr	r1, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b2e      	ldr	r3, [pc, #184]	; (8008384 <HAL_RTC_Init+0x120>)
 80082cc:	400b      	ands	r3, r1
 80082ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6899      	ldr	r1, [r3, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68d2      	ldr	r2, [r2, #12]
 80082f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6919      	ldr	r1, [r3, #16]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	041a      	lsls	r2, r3, #16
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800831a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10e      	bne.n	8008348 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 faaa 	bl	8008884 <HAL_RTC_WaitForSynchro>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d008      	beq.n	8008348 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	22ff      	movs	r2, #255	; 0xff
 800833c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e018      	b.n	800837a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0208 	bic.w	r2, r2, #8
 8008356:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	22ff      	movs	r2, #255	; 0xff
 8008370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	ff8fffbf 	.word	0xff8fffbf

08008388 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	7f1b      	ldrb	r3, [r3, #28]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_RTC_SetTime+0x1c>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e0a8      	b.n	80084f6 <HAL_RTC_SetTime+0x16e>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2202      	movs	r2, #2
 80083ae:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d126      	bne.n	8008404 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2200      	movs	r2, #0
 80083c8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 faac 	bl	800892c <RTC_ByteToBcd2>
 80083d4:	4603      	mov	r3, r0
 80083d6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 faa5 	bl	800892c <RTC_ByteToBcd2>
 80083e2:	4603      	mov	r3, r0
 80083e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083e6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	789b      	ldrb	r3, [r3, #2]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fa9d 	bl	800892c <RTC_ByteToBcd2>
 80083f2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7b1b      	ldrb	r3, [r3, #12]
 80083fc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e018      	b.n	8008436 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008424:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800842a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	7b1b      	ldrb	r3, [r3, #12]
 8008430:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	22ca      	movs	r2, #202	; 0xca
 800843c:	625a      	str	r2, [r3, #36]	; 0x24
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2253      	movs	r2, #83	; 0x53
 8008444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 fa44 	bl	80088d4 <RTC_EnterInitMode>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	22ff      	movs	r2, #255	; 0xff
 8008458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2204      	movs	r2, #4
 800845e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e045      	b.n	80084f6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	6979      	ldr	r1, [r7, #20]
 8008470:	4b23      	ldr	r3, [pc, #140]	; (8008500 <HAL_RTC_SetTime+0x178>)
 8008472:	400b      	ands	r3, r1
 8008474:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008484:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6899      	ldr	r1, [r3, #8]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	431a      	orrs	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d111      	bne.n	80084e0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f9e1 	bl	8008884 <HAL_RTC_WaitForSynchro>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	22ff      	movs	r2, #255	; 0xff
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2204      	movs	r2, #4
 80084d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e00a      	b.n	80084f6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80084f4:	2300      	movs	r3, #0
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd90      	pop	{r4, r7, pc}
 80084fe:	bf00      	nop
 8008500:	007f7f7f 	.word	0x007f7f7f

08008504 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	7f1b      	ldrb	r3, [r3, #28]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_RTC_SetDate+0x1c>
 800851c:	2302      	movs	r3, #2
 800851e:	e092      	b.n	8008646 <HAL_RTC_SetDate+0x142>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2202      	movs	r2, #2
 800852a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10e      	bne.n	8008550 <HAL_RTC_SetDate+0x4c>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	d008      	beq.n	8008550 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	f023 0310 	bic.w	r3, r3, #16
 8008546:	b2db      	uxtb	r3, r3
 8008548:	330a      	adds	r3, #10
 800854a:	b2da      	uxtb	r2, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d11c      	bne.n	8008590 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	78db      	ldrb	r3, [r3, #3]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f9e6 	bl	800892c <RTC_ByteToBcd2>
 8008560:	4603      	mov	r3, r0
 8008562:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f9df 	bl	800892c <RTC_ByteToBcd2>
 800856e:	4603      	mov	r3, r0
 8008570:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008572:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	789b      	ldrb	r3, [r3, #2]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f9d7 	bl	800892c <RTC_ByteToBcd2>
 800857e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008580:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	e00e      	b.n	80085ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	78db      	ldrb	r3, [r3, #3]
 8008594:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800859c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80085a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	22ca      	movs	r2, #202	; 0xca
 80085b4:	625a      	str	r2, [r3, #36]	; 0x24
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2253      	movs	r2, #83	; 0x53
 80085bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f988 	bl	80088d4 <RTC_EnterInitMode>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	22ff      	movs	r2, #255	; 0xff
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2204      	movs	r2, #4
 80085d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e031      	b.n	8008646 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	6979      	ldr	r1, [r7, #20]
 80085e8:	4b19      	ldr	r3, [pc, #100]	; (8008650 <HAL_RTC_SetDate+0x14c>)
 80085ea:	400b      	ands	r3, r1
 80085ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b00      	cmp	r3, #0
 800860a:	d111      	bne.n	8008630 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f939 	bl	8008884 <HAL_RTC_WaitForSynchro>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	22ff      	movs	r2, #255	; 0xff
 800861e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2204      	movs	r2, #4
 8008624:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e00a      	b.n	8008646 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	22ff      	movs	r2, #255	; 0xff
 8008636:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008644:	2300      	movs	r3, #0
  }
}
 8008646:	4618      	mov	r0, r3
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd90      	pop	{r4, r7, pc}
 800864e:	bf00      	nop
 8008650:	00ffff3f 	.word	0x00ffff3f

08008654 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b089      	sub	sp, #36	; 0x24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	7f1b      	ldrb	r3, [r3, #28]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_RTC_SetAlarm+0x24>
 8008674:	2302      	movs	r3, #2
 8008676:	e101      	b.n	800887c <HAL_RTC_SetAlarm+0x228>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2202      	movs	r2, #2
 8008682:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d137      	bne.n	80086fa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f942 	bl	800892c <RTC_ByteToBcd2>
 80086a8:	4603      	mov	r3, r0
 80086aa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f93b 	bl	800892c <RTC_ByteToBcd2>
 80086b6:	4603      	mov	r3, r0
 80086b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086ba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	789b      	ldrb	r3, [r3, #2]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f933 	bl	800892c <RTC_ByteToBcd2>
 80086c6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	7b1b      	ldrb	r3, [r3, #12]
 80086d0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086d2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 f925 	bl	800892c <RTC_ByteToBcd2>
 80086e2:	4603      	mov	r3, r0
 80086e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086f4:	4313      	orrs	r3, r2
 80086f6:	61fb      	str	r3, [r7, #28]
 80086f8:	e023      	b.n	8008742 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800871a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008720:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	7b1b      	ldrb	r3, [r3, #12]
 8008726:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008728:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008730:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008732:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008738:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800873e:	4313      	orrs	r3, r2
 8008740:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	22ca      	movs	r2, #202	; 0xca
 8008754:	625a      	str	r2, [r3, #36]	; 0x24
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2253      	movs	r2, #83	; 0x53
 800875c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008766:	d13f      	bne.n	80087e8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008776:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689a      	ldr	r2, [r3, #8]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008786:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008788:	f7fa ff94 	bl	80036b4 <HAL_GetTick>
 800878c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800878e:	e013      	b.n	80087b8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008790:	f7fa ff90 	bl	80036b4 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879e:	d90b      	bls.n	80087b8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	22ff      	movs	r2, #255	; 0xff
 80087a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2203      	movs	r2, #3
 80087ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e061      	b.n	800887c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0e4      	beq.n	8008790 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087e4:	609a      	str	r2, [r3, #8]
 80087e6:	e03e      	b.n	8008866 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008806:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008808:	f7fa ff54 	bl	80036b4 <HAL_GetTick>
 800880c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800880e:	e013      	b.n	8008838 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008810:	f7fa ff50 	bl	80036b4 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800881e:	d90b      	bls.n	8008838 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	22ff      	movs	r2, #255	; 0xff
 8008826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2203      	movs	r2, #3
 800882c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e021      	b.n	800887c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0e4      	beq.n	8008810 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008864:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	22ff      	movs	r2, #255	; 0xff
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3724      	adds	r7, #36	; 0x24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd90      	pop	{r4, r7, pc}

08008884 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800889e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088a0:	f7fa ff08 	bl	80036b4 <HAL_GetTick>
 80088a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088a6:	e009      	b.n	80088bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088a8:	f7fa ff04 	bl	80036b4 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088b6:	d901      	bls.n	80088bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e007      	b.n	80088cc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0ee      	beq.n	80088a8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d119      	bne.n	8008922 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088f8:	f7fa fedc 	bl	80036b4 <HAL_GetTick>
 80088fc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088fe:	e009      	b.n	8008914 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008900:	f7fa fed8 	bl	80036b4 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800890e:	d901      	bls.n	8008914 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e007      	b.n	8008924 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0ee      	beq.n	8008900 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800893a:	e005      	b.n	8008948 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	3b0a      	subs	r3, #10
 8008946:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	2b09      	cmp	r3, #9
 800894c:	d8f6      	bhi.n	800893c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	b2da      	uxtb	r2, r3
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	4313      	orrs	r3, r2
 800895a:	b2db      	uxtb	r3, r3
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	7f1b      	ldrb	r3, [r3, #28]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008980:	2302      	movs	r3, #2
 8008982:	e03e      	b.n	8008a02 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2202      	movs	r2, #2
 800898e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	4b1e      	ldr	r3, [pc, #120]	; (8008a10 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008998:	4013      	ands	r3, r2
 800899a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	22ca      	movs	r2, #202	; 0xca
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2253      	movs	r2, #83	; 0x53
 80089b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0206 	bic.w	r2, r2, #6
 80089c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	fffff7f7 	.word	0xfffff7f7

08008a14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e156      	b.n	8008ce0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fa fcc0 	bl	80033cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f95b 	bl	8008d10 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d00c      	beq.n	8008a7c <HAL_SAI_Init+0x68>
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d80d      	bhi.n	8008a82 <HAL_SAI_Init+0x6e>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_SAI_Init+0x5c>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d003      	beq.n	8008a76 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008a6e:	e008      	b.n	8008a82 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]
      break;
 8008a74:	e006      	b.n	8008a84 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a76:	2310      	movs	r3, #16
 8008a78:	61fb      	str	r3, [r7, #28]
      break;
 8008a7a:	e003      	b.n	8008a84 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a7c:	2320      	movs	r3, #32
 8008a7e:	61fb      	str	r3, [r7, #28]
      break;
 8008a80:	e000      	b.n	8008a84 <HAL_SAI_Init+0x70>
      break;
 8008a82:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d81e      	bhi.n	8008aca <HAL_SAI_Init+0xb6>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <HAL_SAI_Init+0x80>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008aab 	.word	0x08008aab
 8008a9c:	08008ab3 	.word	0x08008ab3
 8008aa0:	08008abb 	.word	0x08008abb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]
    }
    break;
 8008aa8:	e010      	b.n	8008acc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aae:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ab0:	e00c      	b.n	8008acc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab6:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ab8:	e008      	b.n	8008acc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008abe:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f043 0301 	orr.w	r3, r3, #1
 8008ac6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008ac8:	e000      	b.n	8008acc <HAL_SAI_Init+0xb8>
    default:
      break;
 8008aca:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a85      	ldr	r2, [pc, #532]	; (8008ce8 <HAL_SAI_Init+0x2d4>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d004      	beq.n	8008ae0 <HAL_SAI_Init+0xcc>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a84      	ldr	r2, [pc, #528]	; (8008cec <HAL_SAI_Init+0x2d8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d103      	bne.n	8008ae8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008ae0:	4a83      	ldr	r2, [pc, #524]	; (8008cf0 <HAL_SAI_Init+0x2dc>)
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	e002      	b.n	8008aee <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008ae8:	4a82      	ldr	r2, [pc, #520]	; (8008cf4 <HAL_SAI_Init+0x2e0>)
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d04c      	beq.n	8008b90 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a7a      	ldr	r2, [pc, #488]	; (8008ce8 <HAL_SAI_Init+0x2d4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_SAI_Init+0xfa>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a78      	ldr	r2, [pc, #480]	; (8008cec <HAL_SAI_Init+0x2d8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d104      	bne.n	8008b18 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b12:	f7ff fa63 	bl	8007fdc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b16:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a76      	ldr	r2, [pc, #472]	; (8008cf8 <HAL_SAI_Init+0x2e4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d004      	beq.n	8008b2c <HAL_SAI_Init+0x118>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a75      	ldr	r2, [pc, #468]	; (8008cfc <HAL_SAI_Init+0x2e8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d104      	bne.n	8008b36 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b2c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b30:	f7ff fa54 	bl	8007fdc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b34:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	025b      	lsls	r3, r3, #9
 8008b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4a6b      	ldr	r2, [pc, #428]	; (8008d00 <HAL_SAI_Init+0x2ec>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	08da      	lsrs	r2, r3, #3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008b5c:	68f9      	ldr	r1, [r7, #12]
 8008b5e:	4b68      	ldr	r3, [pc, #416]	; (8008d00 <HAL_SAI_Init+0x2ec>)
 8008b60:	fba3 2301 	umull	r2, r3, r3, r1
 8008b64:	08da      	lsrs	r2, r3, #3
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	1aca      	subs	r2, r1, r3
 8008b70:	2a08      	cmp	r2, #8
 8008b72:	d904      	bls.n	8008b7e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d104      	bne.n	8008b90 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	085a      	lsrs	r2, r3, #1
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_SAI_Init+0x18c>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d109      	bne.n	8008bb4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d101      	bne.n	8008bac <HAL_SAI_Init+0x198>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e001      	b.n	8008bb0 <HAL_SAI_Init+0x19c>
 8008bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e008      	b.n	8008bc6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d102      	bne.n	8008bc2 <HAL_SAI_Init+0x1ae>
 8008bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc0:	e000      	b.n	8008bc4 <HAL_SAI_Init+0x1b0>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6819      	ldr	r1, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4b4c      	ldr	r3, [pc, #304]	; (8008d04 <HAL_SAI_Init+0x2f0>)
 8008bd2:	400b      	ands	r3, r1
 8008bd4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6819      	ldr	r1, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bea:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008bfe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c0a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	051b      	lsls	r3, r3, #20
 8008c12:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6859      	ldr	r1, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4b38      	ldr	r3, [pc, #224]	; (8008d08 <HAL_SAI_Init+0x2f4>)
 8008c28:	400b      	ands	r3, r1
 8008c2a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6859      	ldr	r1, [r3, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6899      	ldr	r1, [r3, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	4b2d      	ldr	r3, [pc, #180]	; (8008d0c <HAL_SAI_Init+0x2f8>)
 8008c56:	400b      	ands	r3, r1
 8008c58:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6899      	ldr	r1, [r3, #8]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008c70:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008c76:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c80:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68d9      	ldr	r1, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008c98:	400b      	ands	r3, r1
 8008c9a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68d9      	ldr	r1, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008caa:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40015804 	.word	0x40015804
 8008cec:	40015824 	.word	0x40015824
 8008cf0:	40015800 	.word	0x40015800
 8008cf4:	40015c00 	.word	0x40015c00
 8008cf8:	40015c04 	.word	0x40015c04
 8008cfc:	40015c24 	.word	0x40015c24
 8008d00:	cccccccd 	.word	0xcccccccd
 8008d04:	ff05c010 	.word	0xff05c010
 8008d08:	ffff1ff0 	.word	0xffff1ff0
 8008d0c:	fff88000 	.word	0xfff88000

08008d10 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008d18:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <SAI_Disable+0x68>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <SAI_Disable+0x6c>)
 8008d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d22:	0b1b      	lsrs	r3, r3, #12
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d3a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	1e5a      	subs	r2, r3, #1
 8008d40:	60fa      	str	r2, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	72fb      	strb	r3, [r7, #11]
      break;
 8008d5a:	e006      	b.n	8008d6a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e8      	bne.n	8008d3c <SAI_Disable+0x2c>

  return status;
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	20000000 	.word	0x20000000
 8008d7c:	95cbec1b 	.word	0x95cbec1b

08008d80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e022      	b.n	8008dd8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7f9 ffe3 	bl	8002d70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2203      	movs	r2, #3
 8008dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f814 	bl	8008de0 <HAL_SD_InitCard>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e00a      	b.n	8008dd8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008de0:	b5b0      	push	{r4, r5, r7, lr}
 8008de2:	b08e      	sub	sp, #56	; 0x38
 8008de4:	af04      	add	r7, sp, #16
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008dfc:	2376      	movs	r3, #118	; 0x76
 8008dfe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681d      	ldr	r5, [r3, #0]
 8008e04:	466c      	mov	r4, sp
 8008e06:	f107 0314 	add.w	r3, r7, #20
 8008e0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f002 fef3 	bl	800bc04 <SDMMC_Init>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e056      	b.n	8008ede <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f002 ff27 	bl	800bc98 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e58:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 ff00 	bl	8009c60 <SD_PowerON>
 8008e60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e02e      	b.n	8008ede <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fe21 	bl	8009ac8 <SD_InitCard>
 8008e86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e01b      	b.n	8008ede <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 ff86 	bl	800bdc0 <SDMMC_CmdBlockLength>
 8008eb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00f      	beq.n	8008edc <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <HAL_SD_InitCard+0x108>)
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e000      	b.n	8008ede <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	004005ff 	.word	0x004005ff

08008eec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b092      	sub	sp, #72	; 0x48
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008efa:	f7fa fbdb 	bl	80036b4 <HAL_GetTick>
 8008efe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d107      	bne.n	8008f1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e1bd      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	f040 81b0 	bne.w	800928c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	441a      	add	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d907      	bls.n	8008f50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e1a4      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2203      	movs	r2, #3
 8008f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d002      	beq.n	8008f6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	025b      	lsls	r3, r3, #9
 8008f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	025b      	lsls	r3, r3, #9
 8008f78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f7a:	2390      	movs	r3, #144	; 0x90
 8008f7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f86:	2301      	movs	r3, #1
 8008f88:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f107 0214 	add.w	r2, r7, #20
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f002 fee7 	bl	800bd68 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d90a      	bls.n	8008fb6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 ff4b 	bl	800be48 <SDMMC_CmdReadMultiBlock>
 8008fb2:	6478      	str	r0, [r7, #68]	; 0x44
 8008fb4:	e009      	b.n	8008fca <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f002 ff1e 	bl	800be04 <SDMMC_CmdReadSingleBlock>
 8008fc8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d012      	beq.n	8008ff6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a7a      	ldr	r2, [pc, #488]	; (80091c0 <HAL_SD_ReadBlocks+0x2d4>)
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e151      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008ffa:	e061      	b.n	80090c0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03c      	beq.n	8009084 <HAL_SD_ReadBlocks+0x198>
 800900a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d039      	beq.n	8009084 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009010:	2300      	movs	r3, #0
 8009012:	643b      	str	r3, [r7, #64]	; 0x40
 8009014:	e033      	b.n	800907e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f002 fe1e 	bl	800bc5c <SDMMC_ReadFIFO>
 8009020:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	b2da      	uxtb	r2, r3
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	3301      	adds	r3, #1
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009032:	3b01      	subs	r3, #1
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	0a1b      	lsrs	r3, r3, #8
 800903a:	b2da      	uxtb	r2, r3
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	3301      	adds	r3, #1
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009048:	3b01      	subs	r3, #1
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	0c1b      	lsrs	r3, r3, #16
 8009050:	b2da      	uxtb	r2, r3
 8009052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009054:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	3301      	adds	r3, #1
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	0e1b      	lsrs	r3, r3, #24
 8009066:	b2da      	uxtb	r2, r3
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	3301      	adds	r3, #1
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	3b01      	subs	r3, #1
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907a:	3301      	adds	r3, #1
 800907c:	643b      	str	r3, [r7, #64]	; 0x40
 800907e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009080:	2b07      	cmp	r3, #7
 8009082:	d9c8      	bls.n	8009016 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009084:	f7fa fb16 	bl	80036b4 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009090:	429a      	cmp	r2, r3
 8009092:	d902      	bls.n	800909a <HAL_SD_ReadBlocks+0x1ae>
 8009094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009096:	2b00      	cmp	r3, #0
 8009098:	d112      	bne.n	80090c0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a48      	ldr	r2, [pc, #288]	; (80091c0 <HAL_SD_ReadBlocks+0x2d4>)
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e0ec      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d096      	beq.n	8008ffc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d022      	beq.n	8009122 <HAL_SD_ReadBlocks+0x236>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d91f      	bls.n	8009122 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d01b      	beq.n	8009122 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 ff10 	bl	800bf14 <SDMMC_CmdStopTransfer>
 80090f4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80090f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d012      	beq.n	8009122 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a2f      	ldr	r2, [pc, #188]	; (80091c0 <HAL_SD_ReadBlocks+0x2d4>)
 8009102:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910a:	431a      	orrs	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e0bb      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	f003 0308 	and.w	r3, r3, #8
 800912c:	2b00      	cmp	r3, #0
 800912e:	d012      	beq.n	8009156 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a22      	ldr	r2, [pc, #136]	; (80091c0 <HAL_SD_ReadBlocks+0x2d4>)
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	f043 0208 	orr.w	r2, r3, #8
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e0a1      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d012      	beq.n	800918a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a15      	ldr	r2, [pc, #84]	; (80091c0 <HAL_SD_ReadBlocks+0x2d4>)
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	f043 0202 	orr.w	r2, r3, #2
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e087      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d064      	beq.n	8009262 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <HAL_SD_ReadBlocks+0x2d4>)
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a4:	f043 0220 	orr.w	r2, r3, #32
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e06d      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
 80091be:	bf00      	nop
 80091c0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 fd47 	bl	800bc5c <SDMMC_ReadFIFO>
 80091ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	3301      	adds	r3, #1
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e0:	3b01      	subs	r3, #1
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	3301      	adds	r3, #1
 80091f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f6:	3b01      	subs	r3, #1
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	0c1b      	lsrs	r3, r3, #16
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	3301      	adds	r3, #1
 8009208:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800920a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920c:	3b01      	subs	r3, #1
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	0e1b      	lsrs	r3, r3, #24
 8009214:	b2da      	uxtb	r2, r3
 8009216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009218:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	3301      	adds	r3, #1
 800921e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	3b01      	subs	r3, #1
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009226:	f7fa fa45 	bl	80036b4 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009232:	429a      	cmp	r2, r3
 8009234:	d902      	bls.n	800923c <HAL_SD_ReadBlocks+0x350>
 8009236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009238:	2b00      	cmp	r3, #0
 800923a:	d112      	bne.n	8009262 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a18      	ldr	r2, [pc, #96]	; (80092a4 <HAL_SD_ReadBlocks+0x3b8>)
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009248:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e01b      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <HAL_SD_ReadBlocks+0x38a>
 8009270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1a6      	bne.n	80091c4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f240 523a 	movw	r2, #1338	; 0x53a
 800927e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e006      	b.n	800929a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
  }
}
 800929a:	4618      	mov	r0, r3
 800929c:	3748      	adds	r7, #72	; 0x48
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	004005ff 	.word	0x004005ff

080092a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b092      	sub	sp, #72	; 0x48
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092b6:	f7fa f9fd 	bl	80036b4 <HAL_GetTick>
 80092ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d107      	bne.n	80092da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e165      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	f040 8158 	bne.w	8009598 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80092ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	441a      	add	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d907      	bls.n	800930c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e14c      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2203      	movs	r2, #3
 8009310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	2b01      	cmp	r3, #1
 8009322:	d002      	beq.n	800932a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	025b      	lsls	r3, r3, #9
 8009328:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800932e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	025b      	lsls	r3, r3, #9
 8009334:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009336:	2390      	movs	r3, #144	; 0x90
 8009338:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800933a:	2300      	movs	r3, #0
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800933e:	2300      	movs	r3, #0
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009342:	2301      	movs	r3, #1
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f107 0218 	add.w	r2, r7, #24
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f002 fd09 	bl	800bd68 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d90a      	bls.n	8009372 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009368:	4618      	mov	r0, r3
 800936a:	f002 fdb1 	bl	800bed0 <SDMMC_CmdWriteMultiBlock>
 800936e:	6478      	str	r0, [r7, #68]	; 0x44
 8009370:	e009      	b.n	8009386 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2210      	movs	r2, #16
 8009376:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800937e:	4618      	mov	r0, r3
 8009380:	f002 fd84 	bl	800be8c <SDMMC_CmdWriteSingleBlock>
 8009384:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009388:	2b00      	cmp	r3, #0
 800938a:	d012      	beq.n	80093b2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a87      	ldr	r2, [pc, #540]	; (80095b0 <HAL_SD_WriteBlocks+0x308>)
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939a:	431a      	orrs	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e0f9      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093b6:	e065      	b.n	8009484 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d040      	beq.n	8009448 <HAL_SD_WriteBlocks+0x1a0>
 80093c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d03d      	beq.n	8009448 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80093cc:	2300      	movs	r3, #0
 80093ce:	643b      	str	r3, [r7, #64]	; 0x40
 80093d0:	e037      	b.n	8009442 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093da:	3301      	adds	r3, #1
 80093dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	3b01      	subs	r3, #1
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	021a      	lsls	r2, r3, #8
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	3301      	adds	r3, #1
 80093f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	3b01      	subs	r3, #1
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	041a      	lsls	r2, r3, #16
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	3301      	adds	r3, #1
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	3b01      	subs	r3, #1
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	061a      	lsls	r2, r3, #24
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	3301      	adds	r3, #1
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009428:	3b01      	subs	r3, #1
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f107 0214 	add.w	r2, r7, #20
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f002 fc1d 	bl	800bc76 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800943c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943e:	3301      	adds	r3, #1
 8009440:	643b      	str	r3, [r7, #64]	; 0x40
 8009442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009444:	2b07      	cmp	r3, #7
 8009446:	d9c4      	bls.n	80093d2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009448:	f7fa f934 	bl	80036b4 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009454:	429a      	cmp	r2, r3
 8009456:	d902      	bls.n	800945e <HAL_SD_WriteBlocks+0x1b6>
 8009458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800945a:	2b00      	cmp	r3, #0
 800945c:	d112      	bne.n	8009484 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a53      	ldr	r2, [pc, #332]	; (80095b0 <HAL_SD_WriteBlocks+0x308>)
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800946a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946c:	431a      	orrs	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e090      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800948e:	2b00      	cmp	r3, #0
 8009490:	d092      	beq.n	80093b8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949c:	2b00      	cmp	r3, #0
 800949e:	d022      	beq.n	80094e6 <HAL_SD_WriteBlocks+0x23e>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d91f      	bls.n	80094e6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d01b      	beq.n	80094e6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 fd2e 	bl	800bf14 <SDMMC_CmdStopTransfer>
 80094b8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80094ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d012      	beq.n	80094e6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a3a      	ldr	r2, [pc, #232]	; (80095b0 <HAL_SD_WriteBlocks+0x308>)
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ce:	431a      	orrs	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e05f      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d012      	beq.n	800951a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a2d      	ldr	r2, [pc, #180]	; (80095b0 <HAL_SD_WriteBlocks+0x308>)
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	f043 0208 	orr.w	r2, r3, #8
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e045      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d012      	beq.n	800954e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a20      	ldr	r2, [pc, #128]	; (80095b0 <HAL_SD_WriteBlocks+0x308>)
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	f043 0202 	orr.w	r2, r3, #2
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e02b      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b00      	cmp	r3, #0
 800955a:	d012      	beq.n	8009582 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a13      	ldr	r2, [pc, #76]	; (80095b0 <HAL_SD_WriteBlocks+0x308>)
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	f043 0210 	orr.w	r2, r3, #16
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e011      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f240 523a 	movw	r2, #1338	; 0x53a
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	e006      	b.n	80095a6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
  }
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3748      	adds	r7, #72	; 0x48
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	004005ff 	.word	0x004005ff

080095b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c2:	0f9b      	lsrs	r3, r3, #30
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ce:	0e9b      	lsrs	r3, r3, #26
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e0:	0e1b      	lsrs	r3, r3, #24
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	b2da      	uxtb	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960a:	b2da      	uxtb	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009614:	0d1b      	lsrs	r3, r3, #20
 8009616:	b29a      	uxth	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	b2da      	uxtb	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009632:	0bdb      	lsrs	r3, r3, #15
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	b2da      	uxtb	r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009644:	0b9b      	lsrs	r3, r3, #14
 8009646:	b2db      	uxtb	r3, r3
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	b2da      	uxtb	r2, r3
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009656:	0b5b      	lsrs	r3, r3, #13
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009668:	0b1b      	lsrs	r3, r3, #12
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	b2da      	uxtb	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2200      	movs	r2, #0
 800967a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009680:	2b00      	cmp	r3, #0
 8009682:	d163      	bne.n	800974c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009688:	009a      	lsls	r2, r3, #2
 800968a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800968e:	4013      	ands	r3, r2
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009694:	0f92      	lsrs	r2, r2, #30
 8009696:	431a      	orrs	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a0:	0edb      	lsrs	r3, r3, #27
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b2:	0e1b      	lsrs	r3, r3, #24
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c4:	0d5b      	lsrs	r3, r3, #21
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d6:	0c9b      	lsrs	r3, r3, #18
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e8:	0bdb      	lsrs	r3, r3, #15
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	7e1b      	ldrb	r3, [r3, #24]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	3302      	adds	r3, #2
 800970c:	2201      	movs	r2, #1
 800970e:	fa02 f303 	lsl.w	r3, r2, r3
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009716:	fb02 f203 	mul.w	r2, r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	7a1b      	ldrb	r3, [r3, #8]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 030f 	and.w	r3, r3, #15
 8009728:	2201      	movs	r2, #1
 800972a:	409a      	lsls	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009738:	0a52      	lsrs	r2, r2, #9
 800973a:	fb02 f203 	mul.w	r2, r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009748:	661a      	str	r2, [r3, #96]	; 0x60
 800974a:	e031      	b.n	80097b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009750:	2b01      	cmp	r3, #1
 8009752:	d11d      	bne.n	8009790 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009762:	0c1b      	lsrs	r3, r3, #16
 8009764:	431a      	orrs	r2, r3
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	3301      	adds	r3, #1
 8009770:	029a      	lsls	r2, r3, #10
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009784:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	661a      	str	r2, [r3, #96]	; 0x60
 800978e:	e00f      	b.n	80097b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a58      	ldr	r2, [pc, #352]	; (80098f8 <HAL_SD_GetCardCSD+0x344>)
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e09d      	b.n	80098ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b4:	0b9b      	lsrs	r3, r3, #14
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c6:	09db      	lsrs	r3, r3, #7
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e8:	0fdb      	lsrs	r3, r3, #31
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f4:	0f5b      	lsrs	r3, r3, #29
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 0303 	and.w	r3, r3, #3
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009806:	0e9b      	lsrs	r3, r3, #26
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	b2da      	uxtb	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009818:	0d9b      	lsrs	r3, r3, #22
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	b2da      	uxtb	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982a:	0d5b      	lsrs	r3, r3, #21
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	0c1b      	lsrs	r3, r3, #16
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	b2da      	uxtb	r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985a:	0bdb      	lsrs	r3, r3, #15
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	b2da      	uxtb	r2, r3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800986e:	0b9b      	lsrs	r3, r3, #14
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	b2da      	uxtb	r2, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009882:	0b5b      	lsrs	r3, r3, #13
 8009884:	b2db      	uxtb	r3, r3
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	b2da      	uxtb	r2, r3
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	0b1b      	lsrs	r3, r3, #12
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098aa:	0a9b      	lsrs	r3, r3, #10
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	004005ff 	.word	0x004005ff

080098fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009954:	b5b0      	push	{r4, r5, r7, lr}
 8009956:	b08e      	sub	sp, #56	; 0x38
 8009958:	af04      	add	r7, sp, #16
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2203      	movs	r2, #3
 8009968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009970:	2b03      	cmp	r3, #3
 8009972:	d02e      	beq.n	80099d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800997a:	d106      	bne.n	800998a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
 8009988:	e029      	b.n	80099de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009990:	d10a      	bne.n	80099a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa1a 	bl	8009dcc <SD_WideBus_Enable>
 8009998:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	639a      	str	r2, [r3, #56]	; 0x38
 80099a6:	e01a      	b.n	80099de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa57 	bl	8009e62 <SD_WideBus_Disable>
 80099b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
 80099c2:	e00c      	b.n	80099de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
 80099d0:	e005      	b.n	80099de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00b      	beq.n	80099fe <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a26      	ldr	r2, [pc, #152]	; (8009a84 <HAL_SD_ConfigWideBusOperation+0x130>)
 80099ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099fc:	e01f      	b.n	8009a3e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681d      	ldr	r5, [r3, #0]
 8009a24:	466c      	mov	r4, sp
 8009a26:	f107 0314 	add.w	r3, r7, #20
 8009a2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f002 f8e3 	bl	800bc04 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a46:	4618      	mov	r0, r3
 8009a48:	f002 f9ba 	bl	800bdc0 <SDMMC_CmdBlockLength>
 8009a4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00c      	beq.n	8009a6e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a0a      	ldr	r2, [pc, #40]	; (8009a84 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3728      	adds	r7, #40	; 0x28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bdb0      	pop	{r4, r5, r7, pc}
 8009a82:	bf00      	nop
 8009a84:	004005ff 	.word	0x004005ff

08009a88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a94:	f107 030c 	add.w	r3, r7, #12
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f96e 	bl	8009d7c <SD_SendStatus>
 8009aa0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	0a5b      	lsrs	r3, r3, #9
 8009ab8:	f003 030f 	and.w	r3, r3, #15
 8009abc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009abe:	693b      	ldr	r3, [r7, #16]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ac8:	b5b0      	push	{r4, r5, r7, lr}
 8009aca:	b094      	sub	sp, #80	; 0x50
 8009acc:	af04      	add	r7, sp, #16
 8009ace:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f002 f8ec 	bl	800bcb6 <SDMMC_GetPowerState>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ae4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009ae8:	e0b6      	b.n	8009c58 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d02f      	beq.n	8009b52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 fb17 	bl	800c12a <SDMMC_CmdSendCID>
 8009afc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b06:	e0a7      	b.n	8009c58 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 f917 	bl	800bd42 <SDMMC_GetResponse>
 8009b14:	4602      	mov	r2, r0
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2104      	movs	r1, #4
 8009b20:	4618      	mov	r0, r3
 8009b22:	f002 f90e 	bl	800bd42 <SDMMC_GetResponse>
 8009b26:	4602      	mov	r2, r0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2108      	movs	r1, #8
 8009b32:	4618      	mov	r0, r3
 8009b34:	f002 f905 	bl	800bd42 <SDMMC_GetResponse>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	210c      	movs	r1, #12
 8009b44:	4618      	mov	r0, r3
 8009b46:	f002 f8fc 	bl	800bd42 <SDMMC_GetResponse>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d00d      	beq.n	8009b76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f107 020e 	add.w	r2, r7, #14
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f002 fb1d 	bl	800c1a4 <SDMMC_CmdSetRelAdd>
 8009b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <SD_InitCard+0xae>
    {
      return errorstate;
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	e070      	b.n	8009c58 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d036      	beq.n	8009bec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b7e:	89fb      	ldrh	r3, [r7, #14]
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8e:	041b      	lsls	r3, r3, #16
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f002 fae7 	bl	800c166 <SDMMC_CmdSendCSD>
 8009b98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba2:	e059      	b.n	8009c58 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f002 f8c9 	bl	800bd42 <SDMMC_GetResponse>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2104      	movs	r1, #4
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f002 f8c0 	bl	800bd42 <SDMMC_GetResponse>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2108      	movs	r1, #8
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f002 f8b7 	bl	800bd42 <SDMMC_GetResponse>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	210c      	movs	r1, #12
 8009be0:	4618      	mov	r0, r3
 8009be2:	f002 f8ae 	bl	800bd42 <SDMMC_GetResponse>
 8009be6:	4602      	mov	r2, r0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f002 f8a5 	bl	800bd42 <SDMMC_GetResponse>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	0d1a      	lsrs	r2, r3, #20
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c00:	f107 0310 	add.w	r3, r7, #16
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fcd4 	bl	80095b4 <HAL_SD_GetCardCSD>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c16:	e01f      	b.n	8009c58 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6819      	ldr	r1, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c20:	041b      	lsls	r3, r3, #16
 8009c22:	461a      	mov	r2, r3
 8009c24:	f04f 0300 	mov.w	r3, #0
 8009c28:	4608      	mov	r0, r1
 8009c2a:	f002 f995 	bl	800bf58 <SDMMC_CmdSelDesel>
 8009c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <SD_InitCard+0x172>
  {
    return errorstate;
 8009c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c38:	e00e      	b.n	8009c58 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681d      	ldr	r5, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	466c      	mov	r4, sp
 8009c42:	f103 0210 	add.w	r2, r3, #16
 8009c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c50:	4628      	mov	r0, r5
 8009c52:	f001 ffd7 	bl	800bc04 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3740      	adds	r7, #64	; 0x40
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bdb0      	pop	{r4, r5, r7, pc}

08009c60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	2300      	movs	r3, #0
 8009c72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f002 f990 	bl	800bf9e <SDMMC_CmdGoIdleState>
 8009c7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	e072      	b.n	8009d70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f002 f9a3 	bl	800bfda <SDMMC_CmdOperCond>
 8009c94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00d      	beq.n	8009cb8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 f979 	bl	800bf9e <SDMMC_CmdGoIdleState>
 8009cac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d004      	beq.n	8009cbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	e05b      	b.n	8009d70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d137      	bne.n	8009d36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f002 f9a3 	bl	800c018 <SDMMC_CmdAppCommand>
 8009cd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d02d      	beq.n	8009d36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cde:	e047      	b.n	8009d70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f002 f996 	bl	800c018 <SDMMC_CmdAppCommand>
 8009cec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <SD_PowerON+0x98>
    {
      return errorstate;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	e03b      	b.n	8009d70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	491e      	ldr	r1, [pc, #120]	; (8009d78 <SD_PowerON+0x118>)
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f002 f9ac 	bl	800c05c <SDMMC_CmdAppOperCommand>
 8009d04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d10:	e02e      	b.n	8009d70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 f812 	bl	800bd42 <SDMMC_GetResponse>
 8009d1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	0fdb      	lsrs	r3, r3, #31
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <SD_PowerON+0xcc>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <SD_PowerON+0xce>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	613b      	str	r3, [r7, #16]

    count++;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d802      	bhi.n	8009d46 <SD_PowerON+0xe6>
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0cc      	beq.n	8009ce0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d902      	bls.n	8009d56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d54:	e00c      	b.n	8009d70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	645a      	str	r2, [r3, #68]	; 0x44
 8009d66:	e002      	b.n	8009d6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3718      	adds	r7, #24
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	c1100000 	.word	0xc1100000

08009d7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d90:	e018      	b.n	8009dc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f002 fa21 	bl	800c1e6 <SDMMC_CmdSendStatus>
 8009da4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	e009      	b.n	8009dc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 ffc3 	bl	800bd42 <SDMMC_GetResponse>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f001 ffad 	bl	800bd42 <SDMMC_GetResponse>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009df2:	d102      	bne.n	8009dfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009df8:	e02f      	b.n	8009e5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f879 	bl	8009ef8 <SD_FindSCR>
 8009e06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	e023      	b.n	8009e5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01c      	beq.n	8009e56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e24:	041b      	lsls	r3, r3, #16
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f002 f8f5 	bl	800c018 <SDMMC_CmdAppCommand>
 8009e2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	e00f      	b.n	8009e5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2102      	movs	r1, #2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f002 f92f 	bl	800c0a4 <SDMMC_CmdBusWidth>
 8009e46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	e003      	b.n	8009e5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e52:	2300      	movs	r3, #0
 8009e54:	e001      	b.n	8009e5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b086      	sub	sp, #24
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 ff62 	bl	800bd42 <SDMMC_GetResponse>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e88:	d102      	bne.n	8009e90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e8e:	e02f      	b.n	8009ef0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e90:	f107 030c 	add.w	r3, r7, #12
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f82e 	bl	8009ef8 <SD_FindSCR>
 8009e9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	e023      	b.n	8009ef0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01c      	beq.n	8009eec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eba:	041b      	lsls	r3, r3, #16
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f002 f8aa 	bl	800c018 <SDMMC_CmdAppCommand>
 8009ec4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	e00f      	b.n	8009ef0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f002 f8e4 	bl	800c0a4 <SDMMC_CmdBusWidth>
 8009edc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	e003      	b.n	8009ef0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e001      	b.n	8009ef0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009eec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b08f      	sub	sp, #60	; 0x3c
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f02:	f7f9 fbd7 	bl	80036b4 <HAL_GetTick>
 8009f06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60bb      	str	r3, [r7, #8]
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2108      	movs	r1, #8
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 ff4e 	bl	800bdc0 <SDMMC_CmdBlockLength>
 8009f24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	e0b2      	b.n	800a096 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f38:	041b      	lsls	r3, r3, #16
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	f002 f86b 	bl	800c018 <SDMMC_CmdAppCommand>
 8009f42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	e0a3      	b.n	800a096 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f54:	2308      	movs	r3, #8
 8009f56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f58:	2330      	movs	r3, #48	; 0x30
 8009f5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f64:	2301      	movs	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f107 0210 	add.w	r2, r7, #16
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fef8 	bl	800bd68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f002 f8b3 	bl	800c0e8 <SDMMC_CmdSendSCR>
 8009f82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d02a      	beq.n	8009fe0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	e083      	b.n	800a096 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00f      	beq.n	8009fbc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6819      	ldr	r1, [r3, #0]
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	f107 0208 	add.w	r2, r7, #8
 8009fa8:	18d4      	adds	r4, r2, r3
 8009faa:	4608      	mov	r0, r1
 8009fac:	f001 fe56 	bl	800bc5c <SDMMC_ReadFIFO>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	6023      	str	r3, [r4, #0]
      index++;
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fba:	e006      	b.n	8009fca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d012      	beq.n	8009ff0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fca:	f7f9 fb73 	bl	80036b4 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fd8:	d102      	bne.n	8009fe0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fde:	e05a      	b.n	800a096 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0cf      	beq.n	8009f8e <SD_FindSCR+0x96>
 8009fee:	e000      	b.n	8009ff2 <SD_FindSCR+0xfa>
      break;
 8009ff0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2208      	movs	r2, #8
 800a006:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a008:	2308      	movs	r3, #8
 800a00a:	e044      	b.n	800a096 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2202      	movs	r2, #2
 800a020:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a022:	2302      	movs	r3, #2
 800a024:	e037      	b.n	800a096 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2220      	movs	r2, #32
 800a03a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a03c:	2320      	movs	r3, #32
 800a03e:	e02a      	b.n	800a096 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f240 523a 	movw	r2, #1338	; 0x53a
 800a048:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	061a      	lsls	r2, r3, #24
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a056:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a060:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0e1b      	lsrs	r3, r3, #24
 800a066:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	601a      	str	r2, [r3, #0]
    scr++;
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	3304      	adds	r3, #4
 800a070:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	061a      	lsls	r2, r3, #24
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a07e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	0a1b      	lsrs	r3, r3, #8
 800a084:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a088:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	0e1b      	lsrs	r3, r3, #24
 800a08e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	373c      	adds	r7, #60	; 0x3c
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd90      	pop	{r4, r7, pc}

0800a09e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e025      	b.n	800a0fe <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d106      	bne.n	800a0cc <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f9 f976 	bl	80033b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f001 fc9e 	bl	800ba20 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6818      	ldr	r0, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	f001 fd08 	bl	800bb04 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e04c      	b.n	800a1b4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7f8 fe80 	bl	8002e34 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f022 0203 	bic.w	r2, r2, #3
 800a14a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4b19      	ldr	r3, [pc, #100]	; (800a1bc <HAL_SPDIFRX_Init+0xb4>)
 800a158:	4013      	ands	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a164:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a16a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a170:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a176:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a17c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a182:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a188:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a18e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a194:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	4313      	orrs	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	fff88407 	.word	0xfff88407

0800a1c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e049      	b.n	800a266 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7f8 fe66 	bl	8002eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f000 fad4 	bl	800a7ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
	...

0800a270 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d001      	beq.n	800a288 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e04c      	b.n	800a322 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a26      	ldr	r2, [pc, #152]	; (800a330 <HAL_TIM_Base_Start+0xc0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d022      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a2:	d01d      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a22      	ldr	r2, [pc, #136]	; (800a334 <HAL_TIM_Base_Start+0xc4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d018      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a21      	ldr	r2, [pc, #132]	; (800a338 <HAL_TIM_Base_Start+0xc8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a1f      	ldr	r2, [pc, #124]	; (800a33c <HAL_TIM_Base_Start+0xcc>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00e      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a1e      	ldr	r2, [pc, #120]	; (800a340 <HAL_TIM_Base_Start+0xd0>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d009      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a1c      	ldr	r2, [pc, #112]	; (800a344 <HAL_TIM_Base_Start+0xd4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d004      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x70>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <HAL_TIM_Base_Start+0xd8>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d115      	bne.n	800a30c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	4b19      	ldr	r3, [pc, #100]	; (800a34c <HAL_TIM_Base_Start+0xdc>)
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b06      	cmp	r3, #6
 800a2f0:	d015      	beq.n	800a31e <HAL_TIM_Base_Start+0xae>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f8:	d011      	beq.n	800a31e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f042 0201 	orr.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a30a:	e008      	b.n	800a31e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0201 	orr.w	r2, r2, #1
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	e000      	b.n	800a320 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40010000 	.word	0x40010000
 800a334:	40000400 	.word	0x40000400
 800a338:	40000800 	.word	0x40000800
 800a33c:	40000c00 	.word	0x40000c00
 800a340:	40010400 	.word	0x40010400
 800a344:	40014000 	.word	0x40014000
 800a348:	40001800 	.word	0x40001800
 800a34c:	00010007 	.word	0x00010007

0800a350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e049      	b.n	800a3f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7f8 fe0c 	bl	8002f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4619      	mov	r1, r3
 800a38e:	4610      	mov	r0, r2
 800a390:	f000 fa0c 	bl	800a7ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a416:	2302      	movs	r3, #2
 800a418:	e0fd      	b.n	800a616 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b14      	cmp	r3, #20
 800a426:	f200 80f0 	bhi.w	800a60a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a42a:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a485 	.word	0x0800a485
 800a434:	0800a60b 	.word	0x0800a60b
 800a438:	0800a60b 	.word	0x0800a60b
 800a43c:	0800a60b 	.word	0x0800a60b
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a60b 	.word	0x0800a60b
 800a448:	0800a60b 	.word	0x0800a60b
 800a44c:	0800a60b 	.word	0x0800a60b
 800a450:	0800a507 	.word	0x0800a507
 800a454:	0800a60b 	.word	0x0800a60b
 800a458:	0800a60b 	.word	0x0800a60b
 800a45c:	0800a60b 	.word	0x0800a60b
 800a460:	0800a547 	.word	0x0800a547
 800a464:	0800a60b 	.word	0x0800a60b
 800a468:	0800a60b 	.word	0x0800a60b
 800a46c:	0800a60b 	.word	0x0800a60b
 800a470:	0800a589 	.word	0x0800a589
 800a474:	0800a60b 	.word	0x0800a60b
 800a478:	0800a60b 	.word	0x0800a60b
 800a47c:	0800a60b 	.word	0x0800a60b
 800a480:	0800a5c9 	.word	0x0800a5c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fa2e 	bl	800a8ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	699a      	ldr	r2, [r3, #24]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0208 	orr.w	r2, r2, #8
 800a49e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 0204 	bic.w	r2, r2, #4
 800a4ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6999      	ldr	r1, [r3, #24]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	691a      	ldr	r2, [r3, #16]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	619a      	str	r2, [r3, #24]
      break;
 800a4c2:	e0a3      	b.n	800a60c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fa80 	bl	800a9d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	699a      	ldr	r2, [r3, #24]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6999      	ldr	r1, [r3, #24]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	021a      	lsls	r2, r3, #8
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	619a      	str	r2, [r3, #24]
      break;
 800a504:	e082      	b.n	800a60c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68b9      	ldr	r1, [r7, #8]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fad7 	bl	800aac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	69da      	ldr	r2, [r3, #28]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0208 	orr.w	r2, r2, #8
 800a520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69da      	ldr	r2, [r3, #28]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0204 	bic.w	r2, r2, #4
 800a530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69d9      	ldr	r1, [r3, #28]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	691a      	ldr	r2, [r3, #16]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	61da      	str	r2, [r3, #28]
      break;
 800a544:	e062      	b.n	800a60c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 fb2d 	bl	800abac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69da      	ldr	r2, [r3, #28]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69d9      	ldr	r1, [r3, #28]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	021a      	lsls	r2, r3, #8
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	61da      	str	r2, [r3, #28]
      break;
 800a586:	e041      	b.n	800a60c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fb64 	bl	800ac5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f042 0208 	orr.w	r2, r2, #8
 800a5a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0204 	bic.w	r2, r2, #4
 800a5b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	691a      	ldr	r2, [r3, #16]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5c6:	e021      	b.n	800a60c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fb96 	bl	800ad00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	021a      	lsls	r2, r3, #8
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a608:	e000      	b.n	800a60c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a60a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop

0800a620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIM_ConfigClockSource+0x18>
 800a634:	2302      	movs	r3, #2
 800a636:	e0b3      	b.n	800a7a0 <HAL_TIM_ConfigClockSource+0x180>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4b55      	ldr	r3, [pc, #340]	; (800a7a8 <HAL_TIM_ConfigClockSource+0x188>)
 800a654:	4013      	ands	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a65e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a670:	d03e      	beq.n	800a6f0 <HAL_TIM_ConfigClockSource+0xd0>
 800a672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a676:	f200 8087 	bhi.w	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67e:	f000 8085 	beq.w	800a78c <HAL_TIM_ConfigClockSource+0x16c>
 800a682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a686:	d87f      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a688:	2b70      	cmp	r3, #112	; 0x70
 800a68a:	d01a      	beq.n	800a6c2 <HAL_TIM_ConfigClockSource+0xa2>
 800a68c:	2b70      	cmp	r3, #112	; 0x70
 800a68e:	d87b      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a690:	2b60      	cmp	r3, #96	; 0x60
 800a692:	d050      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0x116>
 800a694:	2b60      	cmp	r3, #96	; 0x60
 800a696:	d877      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a698:	2b50      	cmp	r3, #80	; 0x50
 800a69a:	d03c      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0xf6>
 800a69c:	2b50      	cmp	r3, #80	; 0x50
 800a69e:	d873      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d058      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x136>
 800a6a4:	2b40      	cmp	r3, #64	; 0x40
 800a6a6:	d86f      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a6a8:	2b30      	cmp	r3, #48	; 0x30
 800a6aa:	d064      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x156>
 800a6ac:	2b30      	cmp	r3, #48	; 0x30
 800a6ae:	d86b      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a6b0:	2b20      	cmp	r3, #32
 800a6b2:	d060      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x156>
 800a6b4:	2b20      	cmp	r3, #32
 800a6b6:	d867      	bhi.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d05c      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x156>
 800a6bc:	2b10      	cmp	r3, #16
 800a6be:	d05a      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a6c0:	e062      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	6899      	ldr	r1, [r3, #8]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f000 fbe3 	bl	800ae9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	609a      	str	r2, [r3, #8]
      break;
 800a6ee:	e04e      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6818      	ldr	r0, [r3, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	6899      	ldr	r1, [r3, #8]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f000 fbcc 	bl	800ae9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a712:	609a      	str	r2, [r3, #8]
      break;
 800a714:	e03b      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6859      	ldr	r1, [r3, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	461a      	mov	r2, r3
 800a724:	f000 fb40 	bl	800ada8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2150      	movs	r1, #80	; 0x50
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fb99 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a734:	e02b      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	6859      	ldr	r1, [r3, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	461a      	mov	r2, r3
 800a744:	f000 fb5f 	bl	800ae06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2160      	movs	r1, #96	; 0x60
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fb89 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a754:	e01b      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6859      	ldr	r1, [r3, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	f000 fb20 	bl	800ada8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2140      	movs	r1, #64	; 0x40
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fb79 	bl	800ae66 <TIM_ITRx_SetConfig>
      break;
 800a774:	e00b      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f000 fb70 	bl	800ae66 <TIM_ITRx_SetConfig>
        break;
 800a786:	e002      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a78c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	fffeff88 	.word	0xfffeff88

0800a7ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a40      	ldr	r2, [pc, #256]	; (800a8c0 <TIM_Base_SetConfig+0x114>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d013      	beq.n	800a7ec <TIM_Base_SetConfig+0x40>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ca:	d00f      	beq.n	800a7ec <TIM_Base_SetConfig+0x40>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a3d      	ldr	r2, [pc, #244]	; (800a8c4 <TIM_Base_SetConfig+0x118>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00b      	beq.n	800a7ec <TIM_Base_SetConfig+0x40>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a3c      	ldr	r2, [pc, #240]	; (800a8c8 <TIM_Base_SetConfig+0x11c>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d007      	beq.n	800a7ec <TIM_Base_SetConfig+0x40>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a3b      	ldr	r2, [pc, #236]	; (800a8cc <TIM_Base_SetConfig+0x120>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d003      	beq.n	800a7ec <TIM_Base_SetConfig+0x40>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a3a      	ldr	r2, [pc, #232]	; (800a8d0 <TIM_Base_SetConfig+0x124>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d108      	bne.n	800a7fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a2f      	ldr	r2, [pc, #188]	; (800a8c0 <TIM_Base_SetConfig+0x114>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d02b      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80c:	d027      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a2c      	ldr	r2, [pc, #176]	; (800a8c4 <TIM_Base_SetConfig+0x118>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d023      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a2b      	ldr	r2, [pc, #172]	; (800a8c8 <TIM_Base_SetConfig+0x11c>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d01f      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a2a      	ldr	r2, [pc, #168]	; (800a8cc <TIM_Base_SetConfig+0x120>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d01b      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a29      	ldr	r2, [pc, #164]	; (800a8d0 <TIM_Base_SetConfig+0x124>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d017      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a28      	ldr	r2, [pc, #160]	; (800a8d4 <TIM_Base_SetConfig+0x128>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d013      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a27      	ldr	r2, [pc, #156]	; (800a8d8 <TIM_Base_SetConfig+0x12c>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d00f      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a26      	ldr	r2, [pc, #152]	; (800a8dc <TIM_Base_SetConfig+0x130>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00b      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a25      	ldr	r2, [pc, #148]	; (800a8e0 <TIM_Base_SetConfig+0x134>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d007      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a24      	ldr	r2, [pc, #144]	; (800a8e4 <TIM_Base_SetConfig+0x138>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d003      	beq.n	800a85e <TIM_Base_SetConfig+0xb2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a23      	ldr	r2, [pc, #140]	; (800a8e8 <TIM_Base_SetConfig+0x13c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d108      	bne.n	800a870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	689a      	ldr	r2, [r3, #8]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a0a      	ldr	r2, [pc, #40]	; (800a8c0 <TIM_Base_SetConfig+0x114>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d003      	beq.n	800a8a4 <TIM_Base_SetConfig+0xf8>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a0c      	ldr	r2, [pc, #48]	; (800a8d0 <TIM_Base_SetConfig+0x124>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d103      	bne.n	800a8ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	691a      	ldr	r2, [r3, #16]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	615a      	str	r2, [r3, #20]
}
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40010000 	.word	0x40010000
 800a8c4:	40000400 	.word	0x40000400
 800a8c8:	40000800 	.word	0x40000800
 800a8cc:	40000c00 	.word	0x40000c00
 800a8d0:	40010400 	.word	0x40010400
 800a8d4:	40014000 	.word	0x40014000
 800a8d8:	40014400 	.word	0x40014400
 800a8dc:	40014800 	.word	0x40014800
 800a8e0:	40001800 	.word	0x40001800
 800a8e4:	40001c00 	.word	0x40001c00
 800a8e8:	40002000 	.word	0x40002000

0800a8ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	f023 0201 	bic.w	r2, r3, #1
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4b2b      	ldr	r3, [pc, #172]	; (800a9c4 <TIM_OC1_SetConfig+0xd8>)
 800a918:	4013      	ands	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0303 	bic.w	r3, r3, #3
 800a922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f023 0302 	bic.w	r3, r3, #2
 800a934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <TIM_OC1_SetConfig+0xdc>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d003      	beq.n	800a950 <TIM_OC1_SetConfig+0x64>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a20      	ldr	r2, [pc, #128]	; (800a9cc <TIM_OC1_SetConfig+0xe0>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10c      	bne.n	800a96a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f023 0308 	bic.w	r3, r3, #8
 800a956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4313      	orrs	r3, r2
 800a960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 0304 	bic.w	r3, r3, #4
 800a968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a16      	ldr	r2, [pc, #88]	; (800a9c8 <TIM_OC1_SetConfig+0xdc>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d003      	beq.n	800a97a <TIM_OC1_SetConfig+0x8e>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a15      	ldr	r2, [pc, #84]	; (800a9cc <TIM_OC1_SetConfig+0xe0>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d111      	bne.n	800a99e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	4313      	orrs	r3, r2
 800a992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	621a      	str	r2, [r3, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	fffeff8f 	.word	0xfffeff8f
 800a9c8:	40010000 	.word	0x40010000
 800a9cc:	40010400 	.word	0x40010400

0800a9d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	f023 0210 	bic.w	r2, r3, #16
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4b2e      	ldr	r3, [pc, #184]	; (800aab4 <TIM_OC2_SetConfig+0xe4>)
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0320 	bic.w	r3, r3, #32
 800aa1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a23      	ldr	r2, [pc, #140]	; (800aab8 <TIM_OC2_SetConfig+0xe8>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_OC2_SetConfig+0x68>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a22      	ldr	r2, [pc, #136]	; (800aabc <TIM_OC2_SetConfig+0xec>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d10d      	bne.n	800aa54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <TIM_OC2_SetConfig+0xe8>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d003      	beq.n	800aa64 <TIM_OC2_SetConfig+0x94>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a17      	ldr	r2, [pc, #92]	; (800aabc <TIM_OC2_SetConfig+0xec>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d113      	bne.n	800aa8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	621a      	str	r2, [r3, #32]
}
 800aaa6:	bf00      	nop
 800aaa8:	371c      	adds	r7, #28
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	feff8fff 	.word	0xfeff8fff
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40010400 	.word	0x40010400

0800aac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <TIM_OC3_SetConfig+0xe0>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a22      	ldr	r2, [pc, #136]	; (800aba4 <TIM_OC3_SetConfig+0xe4>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d003      	beq.n	800ab26 <TIM_OC3_SetConfig+0x66>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a21      	ldr	r2, [pc, #132]	; (800aba8 <TIM_OC3_SetConfig+0xe8>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d10d      	bne.n	800ab42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a17      	ldr	r2, [pc, #92]	; (800aba4 <TIM_OC3_SetConfig+0xe4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d003      	beq.n	800ab52 <TIM_OC3_SetConfig+0x92>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a16      	ldr	r2, [pc, #88]	; (800aba8 <TIM_OC3_SetConfig+0xe8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d113      	bne.n	800ab7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	621a      	str	r2, [r3, #32]
}
 800ab94:	bf00      	nop
 800ab96:	371c      	adds	r7, #28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	fffeff8f 	.word	0xfffeff8f
 800aba4:	40010000 	.word	0x40010000
 800aba8:	40010400 	.word	0x40010400

0800abac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <TIM_OC4_SetConfig+0xa4>)
 800abd8:	4013      	ands	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	031b      	lsls	r3, r3, #12
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a13      	ldr	r2, [pc, #76]	; (800ac54 <TIM_OC4_SetConfig+0xa8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_OC4_SetConfig+0x68>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a12      	ldr	r2, [pc, #72]	; (800ac58 <TIM_OC4_SetConfig+0xac>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d109      	bne.n	800ac28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	019b      	lsls	r3, r3, #6
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	621a      	str	r2, [r3, #32]
}
 800ac42:	bf00      	nop
 800ac44:	371c      	adds	r7, #28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	feff8fff 	.word	0xfeff8fff
 800ac54:	40010000 	.word	0x40010000
 800ac58:	40010400 	.word	0x40010400

0800ac5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <TIM_OC5_SetConfig+0x98>)
 800ac88:	4013      	ands	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	041b      	lsls	r3, r3, #16
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a12      	ldr	r2, [pc, #72]	; (800acf8 <TIM_OC5_SetConfig+0x9c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC5_SetConfig+0x5e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a11      	ldr	r2, [pc, #68]	; (800acfc <TIM_OC5_SetConfig+0xa0>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d109      	bne.n	800acce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	621a      	str	r2, [r3, #32]
}
 800ace8:	bf00      	nop
 800acea:	371c      	adds	r7, #28
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	fffeff8f 	.word	0xfffeff8f
 800acf8:	40010000 	.word	0x40010000
 800acfc:	40010400 	.word	0x40010400

0800ad00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4b1c      	ldr	r3, [pc, #112]	; (800ad9c <TIM_OC6_SetConfig+0x9c>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	051b      	lsls	r3, r3, #20
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a13      	ldr	r2, [pc, #76]	; (800ada0 <TIM_OC6_SetConfig+0xa0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d003      	beq.n	800ad60 <TIM_OC6_SetConfig+0x60>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a12      	ldr	r2, [pc, #72]	; (800ada4 <TIM_OC6_SetConfig+0xa4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d109      	bne.n	800ad74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	029b      	lsls	r3, r3, #10
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	621a      	str	r2, [r3, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	feff8fff 	.word	0xfeff8fff
 800ada0:	40010000 	.word	0x40010000
 800ada4:	40010400 	.word	0x40010400

0800ada8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0201 	bic.w	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800add2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 030a 	bic.w	r3, r3, #10
 800ade4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b087      	sub	sp, #28
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	f023 0210 	bic.w	r2, r3, #16
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	031b      	lsls	r3, r3, #12
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	621a      	str	r2, [r3, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	f043 0307 	orr.w	r3, r3, #7
 800ae88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	609a      	str	r2, [r3, #8]
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	021a      	lsls	r2, r3, #8
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	609a      	str	r2, [r3, #8]
}
 800aed0:	bf00      	nop
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d101      	bne.n	800aef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef0:	2302      	movs	r3, #2
 800aef2:	e06d      	b.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a30      	ldr	r2, [pc, #192]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d004      	beq.n	800af28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a2f      	ldr	r2, [pc, #188]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d108      	bne.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a20      	ldr	r2, [pc, #128]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d022      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af66:	d01d      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a1d      	ldr	r2, [pc, #116]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d018      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a1c      	ldr	r2, [pc, #112]	; (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d013      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a1a      	ldr	r2, [pc, #104]	; (800afec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00e      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a15      	ldr	r2, [pc, #84]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d009      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a16      	ldr	r2, [pc, #88]	; (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d004      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a15      	ldr	r2, [pc, #84]	; (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d10c      	bne.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	40010000 	.word	0x40010000
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40000400 	.word	0x40000400
 800afe8:	40000800 	.word	0x40000800
 800afec:	40000c00 	.word	0x40000c00
 800aff0:	40014000 	.word	0x40014000
 800aff4:	40001800 	.word	0x40001800

0800aff8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d101      	bne.n	800b014 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b010:	2302      	movs	r3, #2
 800b012:	e065      	b.n	800b0e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	4313      	orrs	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4313      	orrs	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	4313      	orrs	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	041b      	lsls	r3, r3, #16
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a16      	ldr	r2, [pc, #88]	; (800b0ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d004      	beq.n	800b0a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a14      	ldr	r2, [pc, #80]	; (800b0f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d115      	bne.n	800b0ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	051b      	lsls	r3, r3, #20
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	40010000 	.word	0x40010000
 800b0f0:	40010400 	.word	0x40010400

0800b0f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e040      	b.n	800b188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7f8 f82a 	bl	8003170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2224      	movs	r2, #36	; 0x24
 800b120:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0201 	bic.w	r2, r2, #1
 800b130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f8c0 	bl	800b2b8 <UART_SetConfig>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d101      	bne.n	800b142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e022      	b.n	800b188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fb16 	bl	800b77c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b15e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689a      	ldr	r2, [r3, #8]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b16e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f042 0201 	orr.w	r2, r2, #1
 800b17e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fb9d 	bl	800b8c0 <UART_CheckIdleState>
 800b186:	4603      	mov	r3, r0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	; 0x28
 800b194:	af02      	add	r7, sp, #8
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	4613      	mov	r3, r2
 800b19e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	f040 8081 	bne.w	800b2ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <HAL_UART_Transmit+0x26>
 800b1b0:	88fb      	ldrh	r3, [r7, #6]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e079      	b.n	800b2ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d101      	bne.n	800b1c8 <HAL_UART_Transmit+0x38>
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	e072      	b.n	800b2ae <HAL_UART_Transmit+0x11e>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2221      	movs	r2, #33	; 0x21
 800b1dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1de:	f7f8 fa69 	bl	80036b4 <HAL_GetTick>
 800b1e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1fc:	d108      	bne.n	800b210 <HAL_UART_Transmit+0x80>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d104      	bne.n	800b210 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b206:	2300      	movs	r3, #0
 800b208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	e003      	b.n	800b218 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b220:	e02c      	b.n	800b27c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2200      	movs	r2, #0
 800b22a:	2180      	movs	r1, #128	; 0x80
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 fb7a 	bl	800b926 <UART_WaitOnFlagUntilTimeout>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d001      	beq.n	800b23c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e038      	b.n	800b2ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10b      	bne.n	800b25a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b250:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	3302      	adds	r3, #2
 800b256:	61bb      	str	r3, [r7, #24]
 800b258:	e007      	b.n	800b26a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	781a      	ldrb	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	3301      	adds	r3, #1
 800b268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b270:	b29b      	uxth	r3, r3
 800b272:	3b01      	subs	r3, #1
 800b274:	b29a      	uxth	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b282:	b29b      	uxth	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1cc      	bne.n	800b222 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2200      	movs	r2, #0
 800b290:	2140      	movs	r1, #64	; 0x40
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 fb47 	bl	800b926 <UART_WaitOnFlagUntilTimeout>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e005      	b.n	800b2ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e000      	b.n	800b2ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b2ac:	2302      	movs	r3, #2
  }
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689a      	ldr	r2, [r3, #8]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	4ba7      	ldr	r3, [pc, #668]	; (800b580 <UART_SetConfig+0x2c8>)
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	6812      	ldr	r2, [r2, #0]
 800b2ea:	6979      	ldr	r1, [r7, #20]
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	430a      	orrs	r2, r1
 800b328:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a95      	ldr	r2, [pc, #596]	; (800b584 <UART_SetConfig+0x2cc>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d120      	bne.n	800b376 <UART_SetConfig+0xbe>
 800b334:	4b94      	ldr	r3, [pc, #592]	; (800b588 <UART_SetConfig+0x2d0>)
 800b336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d816      	bhi.n	800b370 <UART_SetConfig+0xb8>
 800b342:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <UART_SetConfig+0x90>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b365 	.word	0x0800b365
 800b350:	0800b35f 	.word	0x0800b35f
 800b354:	0800b36b 	.word	0x0800b36b
 800b358:	2301      	movs	r3, #1
 800b35a:	77fb      	strb	r3, [r7, #31]
 800b35c:	e14f      	b.n	800b5fe <UART_SetConfig+0x346>
 800b35e:	2302      	movs	r3, #2
 800b360:	77fb      	strb	r3, [r7, #31]
 800b362:	e14c      	b.n	800b5fe <UART_SetConfig+0x346>
 800b364:	2304      	movs	r3, #4
 800b366:	77fb      	strb	r3, [r7, #31]
 800b368:	e149      	b.n	800b5fe <UART_SetConfig+0x346>
 800b36a:	2308      	movs	r3, #8
 800b36c:	77fb      	strb	r3, [r7, #31]
 800b36e:	e146      	b.n	800b5fe <UART_SetConfig+0x346>
 800b370:	2310      	movs	r3, #16
 800b372:	77fb      	strb	r3, [r7, #31]
 800b374:	e143      	b.n	800b5fe <UART_SetConfig+0x346>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a84      	ldr	r2, [pc, #528]	; (800b58c <UART_SetConfig+0x2d4>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d132      	bne.n	800b3e6 <UART_SetConfig+0x12e>
 800b380:	4b81      	ldr	r3, [pc, #516]	; (800b588 <UART_SetConfig+0x2d0>)
 800b382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b386:	f003 030c 	and.w	r3, r3, #12
 800b38a:	2b0c      	cmp	r3, #12
 800b38c:	d828      	bhi.n	800b3e0 <UART_SetConfig+0x128>
 800b38e:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <UART_SetConfig+0xdc>)
 800b390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b394:	0800b3c9 	.word	0x0800b3c9
 800b398:	0800b3e1 	.word	0x0800b3e1
 800b39c:	0800b3e1 	.word	0x0800b3e1
 800b3a0:	0800b3e1 	.word	0x0800b3e1
 800b3a4:	0800b3d5 	.word	0x0800b3d5
 800b3a8:	0800b3e1 	.word	0x0800b3e1
 800b3ac:	0800b3e1 	.word	0x0800b3e1
 800b3b0:	0800b3e1 	.word	0x0800b3e1
 800b3b4:	0800b3cf 	.word	0x0800b3cf
 800b3b8:	0800b3e1 	.word	0x0800b3e1
 800b3bc:	0800b3e1 	.word	0x0800b3e1
 800b3c0:	0800b3e1 	.word	0x0800b3e1
 800b3c4:	0800b3db 	.word	0x0800b3db
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	77fb      	strb	r3, [r7, #31]
 800b3cc:	e117      	b.n	800b5fe <UART_SetConfig+0x346>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	77fb      	strb	r3, [r7, #31]
 800b3d2:	e114      	b.n	800b5fe <UART_SetConfig+0x346>
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	77fb      	strb	r3, [r7, #31]
 800b3d8:	e111      	b.n	800b5fe <UART_SetConfig+0x346>
 800b3da:	2308      	movs	r3, #8
 800b3dc:	77fb      	strb	r3, [r7, #31]
 800b3de:	e10e      	b.n	800b5fe <UART_SetConfig+0x346>
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	77fb      	strb	r3, [r7, #31]
 800b3e4:	e10b      	b.n	800b5fe <UART_SetConfig+0x346>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a69      	ldr	r2, [pc, #420]	; (800b590 <UART_SetConfig+0x2d8>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d120      	bne.n	800b432 <UART_SetConfig+0x17a>
 800b3f0:	4b65      	ldr	r3, [pc, #404]	; (800b588 <UART_SetConfig+0x2d0>)
 800b3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3fa:	2b30      	cmp	r3, #48	; 0x30
 800b3fc:	d013      	beq.n	800b426 <UART_SetConfig+0x16e>
 800b3fe:	2b30      	cmp	r3, #48	; 0x30
 800b400:	d814      	bhi.n	800b42c <UART_SetConfig+0x174>
 800b402:	2b20      	cmp	r3, #32
 800b404:	d009      	beq.n	800b41a <UART_SetConfig+0x162>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d810      	bhi.n	800b42c <UART_SetConfig+0x174>
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <UART_SetConfig+0x15c>
 800b40e:	2b10      	cmp	r3, #16
 800b410:	d006      	beq.n	800b420 <UART_SetConfig+0x168>
 800b412:	e00b      	b.n	800b42c <UART_SetConfig+0x174>
 800b414:	2300      	movs	r3, #0
 800b416:	77fb      	strb	r3, [r7, #31]
 800b418:	e0f1      	b.n	800b5fe <UART_SetConfig+0x346>
 800b41a:	2302      	movs	r3, #2
 800b41c:	77fb      	strb	r3, [r7, #31]
 800b41e:	e0ee      	b.n	800b5fe <UART_SetConfig+0x346>
 800b420:	2304      	movs	r3, #4
 800b422:	77fb      	strb	r3, [r7, #31]
 800b424:	e0eb      	b.n	800b5fe <UART_SetConfig+0x346>
 800b426:	2308      	movs	r3, #8
 800b428:	77fb      	strb	r3, [r7, #31]
 800b42a:	e0e8      	b.n	800b5fe <UART_SetConfig+0x346>
 800b42c:	2310      	movs	r3, #16
 800b42e:	77fb      	strb	r3, [r7, #31]
 800b430:	e0e5      	b.n	800b5fe <UART_SetConfig+0x346>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a57      	ldr	r2, [pc, #348]	; (800b594 <UART_SetConfig+0x2dc>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d120      	bne.n	800b47e <UART_SetConfig+0x1c6>
 800b43c:	4b52      	ldr	r3, [pc, #328]	; (800b588 <UART_SetConfig+0x2d0>)
 800b43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b442:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b446:	2bc0      	cmp	r3, #192	; 0xc0
 800b448:	d013      	beq.n	800b472 <UART_SetConfig+0x1ba>
 800b44a:	2bc0      	cmp	r3, #192	; 0xc0
 800b44c:	d814      	bhi.n	800b478 <UART_SetConfig+0x1c0>
 800b44e:	2b80      	cmp	r3, #128	; 0x80
 800b450:	d009      	beq.n	800b466 <UART_SetConfig+0x1ae>
 800b452:	2b80      	cmp	r3, #128	; 0x80
 800b454:	d810      	bhi.n	800b478 <UART_SetConfig+0x1c0>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <UART_SetConfig+0x1a8>
 800b45a:	2b40      	cmp	r3, #64	; 0x40
 800b45c:	d006      	beq.n	800b46c <UART_SetConfig+0x1b4>
 800b45e:	e00b      	b.n	800b478 <UART_SetConfig+0x1c0>
 800b460:	2300      	movs	r3, #0
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e0cb      	b.n	800b5fe <UART_SetConfig+0x346>
 800b466:	2302      	movs	r3, #2
 800b468:	77fb      	strb	r3, [r7, #31]
 800b46a:	e0c8      	b.n	800b5fe <UART_SetConfig+0x346>
 800b46c:	2304      	movs	r3, #4
 800b46e:	77fb      	strb	r3, [r7, #31]
 800b470:	e0c5      	b.n	800b5fe <UART_SetConfig+0x346>
 800b472:	2308      	movs	r3, #8
 800b474:	77fb      	strb	r3, [r7, #31]
 800b476:	e0c2      	b.n	800b5fe <UART_SetConfig+0x346>
 800b478:	2310      	movs	r3, #16
 800b47a:	77fb      	strb	r3, [r7, #31]
 800b47c:	e0bf      	b.n	800b5fe <UART_SetConfig+0x346>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a45      	ldr	r2, [pc, #276]	; (800b598 <UART_SetConfig+0x2e0>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d125      	bne.n	800b4d4 <UART_SetConfig+0x21c>
 800b488:	4b3f      	ldr	r3, [pc, #252]	; (800b588 <UART_SetConfig+0x2d0>)
 800b48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b496:	d017      	beq.n	800b4c8 <UART_SetConfig+0x210>
 800b498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b49c:	d817      	bhi.n	800b4ce <UART_SetConfig+0x216>
 800b49e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a2:	d00b      	beq.n	800b4bc <UART_SetConfig+0x204>
 800b4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a8:	d811      	bhi.n	800b4ce <UART_SetConfig+0x216>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <UART_SetConfig+0x1fe>
 800b4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b2:	d006      	beq.n	800b4c2 <UART_SetConfig+0x20a>
 800b4b4:	e00b      	b.n	800b4ce <UART_SetConfig+0x216>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	77fb      	strb	r3, [r7, #31]
 800b4ba:	e0a0      	b.n	800b5fe <UART_SetConfig+0x346>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	77fb      	strb	r3, [r7, #31]
 800b4c0:	e09d      	b.n	800b5fe <UART_SetConfig+0x346>
 800b4c2:	2304      	movs	r3, #4
 800b4c4:	77fb      	strb	r3, [r7, #31]
 800b4c6:	e09a      	b.n	800b5fe <UART_SetConfig+0x346>
 800b4c8:	2308      	movs	r3, #8
 800b4ca:	77fb      	strb	r3, [r7, #31]
 800b4cc:	e097      	b.n	800b5fe <UART_SetConfig+0x346>
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	77fb      	strb	r3, [r7, #31]
 800b4d2:	e094      	b.n	800b5fe <UART_SetConfig+0x346>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a30      	ldr	r2, [pc, #192]	; (800b59c <UART_SetConfig+0x2e4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d125      	bne.n	800b52a <UART_SetConfig+0x272>
 800b4de:	4b2a      	ldr	r3, [pc, #168]	; (800b588 <UART_SetConfig+0x2d0>)
 800b4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ec:	d017      	beq.n	800b51e <UART_SetConfig+0x266>
 800b4ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4f2:	d817      	bhi.n	800b524 <UART_SetConfig+0x26c>
 800b4f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f8:	d00b      	beq.n	800b512 <UART_SetConfig+0x25a>
 800b4fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4fe:	d811      	bhi.n	800b524 <UART_SetConfig+0x26c>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <UART_SetConfig+0x254>
 800b504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b508:	d006      	beq.n	800b518 <UART_SetConfig+0x260>
 800b50a:	e00b      	b.n	800b524 <UART_SetConfig+0x26c>
 800b50c:	2301      	movs	r3, #1
 800b50e:	77fb      	strb	r3, [r7, #31]
 800b510:	e075      	b.n	800b5fe <UART_SetConfig+0x346>
 800b512:	2302      	movs	r3, #2
 800b514:	77fb      	strb	r3, [r7, #31]
 800b516:	e072      	b.n	800b5fe <UART_SetConfig+0x346>
 800b518:	2304      	movs	r3, #4
 800b51a:	77fb      	strb	r3, [r7, #31]
 800b51c:	e06f      	b.n	800b5fe <UART_SetConfig+0x346>
 800b51e:	2308      	movs	r3, #8
 800b520:	77fb      	strb	r3, [r7, #31]
 800b522:	e06c      	b.n	800b5fe <UART_SetConfig+0x346>
 800b524:	2310      	movs	r3, #16
 800b526:	77fb      	strb	r3, [r7, #31]
 800b528:	e069      	b.n	800b5fe <UART_SetConfig+0x346>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a1c      	ldr	r2, [pc, #112]	; (800b5a0 <UART_SetConfig+0x2e8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d137      	bne.n	800b5a4 <UART_SetConfig+0x2ec>
 800b534:	4b14      	ldr	r3, [pc, #80]	; (800b588 <UART_SetConfig+0x2d0>)
 800b536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b53a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b53e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b542:	d017      	beq.n	800b574 <UART_SetConfig+0x2bc>
 800b544:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b548:	d817      	bhi.n	800b57a <UART_SetConfig+0x2c2>
 800b54a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b54e:	d00b      	beq.n	800b568 <UART_SetConfig+0x2b0>
 800b550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b554:	d811      	bhi.n	800b57a <UART_SetConfig+0x2c2>
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <UART_SetConfig+0x2aa>
 800b55a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b55e:	d006      	beq.n	800b56e <UART_SetConfig+0x2b6>
 800b560:	e00b      	b.n	800b57a <UART_SetConfig+0x2c2>
 800b562:	2300      	movs	r3, #0
 800b564:	77fb      	strb	r3, [r7, #31]
 800b566:	e04a      	b.n	800b5fe <UART_SetConfig+0x346>
 800b568:	2302      	movs	r3, #2
 800b56a:	77fb      	strb	r3, [r7, #31]
 800b56c:	e047      	b.n	800b5fe <UART_SetConfig+0x346>
 800b56e:	2304      	movs	r3, #4
 800b570:	77fb      	strb	r3, [r7, #31]
 800b572:	e044      	b.n	800b5fe <UART_SetConfig+0x346>
 800b574:	2308      	movs	r3, #8
 800b576:	77fb      	strb	r3, [r7, #31]
 800b578:	e041      	b.n	800b5fe <UART_SetConfig+0x346>
 800b57a:	2310      	movs	r3, #16
 800b57c:	77fb      	strb	r3, [r7, #31]
 800b57e:	e03e      	b.n	800b5fe <UART_SetConfig+0x346>
 800b580:	efff69f3 	.word	0xefff69f3
 800b584:	40011000 	.word	0x40011000
 800b588:	40023800 	.word	0x40023800
 800b58c:	40004400 	.word	0x40004400
 800b590:	40004800 	.word	0x40004800
 800b594:	40004c00 	.word	0x40004c00
 800b598:	40005000 	.word	0x40005000
 800b59c:	40011400 	.word	0x40011400
 800b5a0:	40007800 	.word	0x40007800
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a71      	ldr	r2, [pc, #452]	; (800b770 <UART_SetConfig+0x4b8>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d125      	bne.n	800b5fa <UART_SetConfig+0x342>
 800b5ae:	4b71      	ldr	r3, [pc, #452]	; (800b774 <UART_SetConfig+0x4bc>)
 800b5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5bc:	d017      	beq.n	800b5ee <UART_SetConfig+0x336>
 800b5be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5c2:	d817      	bhi.n	800b5f4 <UART_SetConfig+0x33c>
 800b5c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c8:	d00b      	beq.n	800b5e2 <UART_SetConfig+0x32a>
 800b5ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ce:	d811      	bhi.n	800b5f4 <UART_SetConfig+0x33c>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <UART_SetConfig+0x324>
 800b5d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d8:	d006      	beq.n	800b5e8 <UART_SetConfig+0x330>
 800b5da:	e00b      	b.n	800b5f4 <UART_SetConfig+0x33c>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	77fb      	strb	r3, [r7, #31]
 800b5e0:	e00d      	b.n	800b5fe <UART_SetConfig+0x346>
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	77fb      	strb	r3, [r7, #31]
 800b5e6:	e00a      	b.n	800b5fe <UART_SetConfig+0x346>
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	77fb      	strb	r3, [r7, #31]
 800b5ec:	e007      	b.n	800b5fe <UART_SetConfig+0x346>
 800b5ee:	2308      	movs	r3, #8
 800b5f0:	77fb      	strb	r3, [r7, #31]
 800b5f2:	e004      	b.n	800b5fe <UART_SetConfig+0x346>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e001      	b.n	800b5fe <UART_SetConfig+0x346>
 800b5fa:	2310      	movs	r3, #16
 800b5fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b606:	d15b      	bne.n	800b6c0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b608:	7ffb      	ldrb	r3, [r7, #31]
 800b60a:	2b08      	cmp	r3, #8
 800b60c:	d827      	bhi.n	800b65e <UART_SetConfig+0x3a6>
 800b60e:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <UART_SetConfig+0x35c>)
 800b610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b614:	0800b639 	.word	0x0800b639
 800b618:	0800b641 	.word	0x0800b641
 800b61c:	0800b649 	.word	0x0800b649
 800b620:	0800b65f 	.word	0x0800b65f
 800b624:	0800b64f 	.word	0x0800b64f
 800b628:	0800b65f 	.word	0x0800b65f
 800b62c:	0800b65f 	.word	0x0800b65f
 800b630:	0800b65f 	.word	0x0800b65f
 800b634:	0800b657 	.word	0x0800b657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b638:	f7fc f8b8 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800b63c:	61b8      	str	r0, [r7, #24]
        break;
 800b63e:	e013      	b.n	800b668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b640:	f7fc f8c8 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 800b644:	61b8      	str	r0, [r7, #24]
        break;
 800b646:	e00f      	b.n	800b668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b648:	4b4b      	ldr	r3, [pc, #300]	; (800b778 <UART_SetConfig+0x4c0>)
 800b64a:	61bb      	str	r3, [r7, #24]
        break;
 800b64c:	e00c      	b.n	800b668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b64e:	f7fb ffeb 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 800b652:	61b8      	str	r0, [r7, #24]
        break;
 800b654:	e008      	b.n	800b668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b65a:	61bb      	str	r3, [r7, #24]
        break;
 800b65c:	e004      	b.n	800b668 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	77bb      	strb	r3, [r7, #30]
        break;
 800b666:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d074      	beq.n	800b758 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	005a      	lsls	r2, r3, #1
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	085b      	lsrs	r3, r3, #1
 800b678:	441a      	add	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b682:	b29b      	uxth	r3, r3
 800b684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b0f      	cmp	r3, #15
 800b68a:	d916      	bls.n	800b6ba <UART_SetConfig+0x402>
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b692:	d212      	bcs.n	800b6ba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	b29b      	uxth	r3, r3
 800b698:	f023 030f 	bic.w	r3, r3, #15
 800b69c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	085b      	lsrs	r3, r3, #1
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f003 0307 	and.w	r3, r3, #7
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	89fb      	ldrh	r3, [r7, #14]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	89fa      	ldrh	r2, [r7, #14]
 800b6b6:	60da      	str	r2, [r3, #12]
 800b6b8:	e04e      	b.n	800b758 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	77bb      	strb	r3, [r7, #30]
 800b6be:	e04b      	b.n	800b758 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6c0:	7ffb      	ldrb	r3, [r7, #31]
 800b6c2:	2b08      	cmp	r3, #8
 800b6c4:	d827      	bhi.n	800b716 <UART_SetConfig+0x45e>
 800b6c6:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <UART_SetConfig+0x414>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800b6f9 	.word	0x0800b6f9
 800b6d4:	0800b701 	.word	0x0800b701
 800b6d8:	0800b717 	.word	0x0800b717
 800b6dc:	0800b707 	.word	0x0800b707
 800b6e0:	0800b717 	.word	0x0800b717
 800b6e4:	0800b717 	.word	0x0800b717
 800b6e8:	0800b717 	.word	0x0800b717
 800b6ec:	0800b70f 	.word	0x0800b70f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6f0:	f7fc f85c 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800b6f4:	61b8      	str	r0, [r7, #24]
        break;
 800b6f6:	e013      	b.n	800b720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6f8:	f7fc f86c 	bl	80077d4 <HAL_RCC_GetPCLK2Freq>
 800b6fc:	61b8      	str	r0, [r7, #24]
        break;
 800b6fe:	e00f      	b.n	800b720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b700:	4b1d      	ldr	r3, [pc, #116]	; (800b778 <UART_SetConfig+0x4c0>)
 800b702:	61bb      	str	r3, [r7, #24]
        break;
 800b704:	e00c      	b.n	800b720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b706:	f7fb ff8f 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 800b70a:	61b8      	str	r0, [r7, #24]
        break;
 800b70c:	e008      	b.n	800b720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b70e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b712:	61bb      	str	r3, [r7, #24]
        break;
 800b714:	e004      	b.n	800b720 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	77bb      	strb	r3, [r7, #30]
        break;
 800b71e:	bf00      	nop
    }

    if (pclk != 0U)
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d018      	beq.n	800b758 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	085a      	lsrs	r2, r3, #1
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	441a      	add	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	fbb2 f3f3 	udiv	r3, r2, r3
 800b738:	b29b      	uxth	r3, r3
 800b73a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2b0f      	cmp	r3, #15
 800b740:	d908      	bls.n	800b754 <UART_SetConfig+0x49c>
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b748:	d204      	bcs.n	800b754 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	e001      	b.n	800b758 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b764:	7fbb      	ldrb	r3, [r7, #30]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3720      	adds	r7, #32
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40007c00 	.word	0x40007c00
 800b774:	40023800 	.word	0x40023800
 800b778:	00f42400 	.word	0x00f42400

0800b77c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	f003 0301 	and.w	r3, r3, #1
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00a      	beq.n	800b7a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	f003 0302 	and.w	r3, r3, #2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00a      	beq.n	800b7c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	430a      	orrs	r2, r1
 800b7c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	f003 0304 	and.w	r3, r3, #4
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00a      	beq.n	800b7ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	f003 0310 	and.w	r3, r3, #16
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00a      	beq.n	800b82e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	f003 0320 	and.w	r3, r3, #32
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d01a      	beq.n	800b892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b87a:	d10a      	bne.n	800b892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	430a      	orrs	r2, r1
 800b890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	605a      	str	r2, [r3, #4]
  }
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af02      	add	r7, sp, #8
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8d0:	f7f7 fef0 	bl	80036b4 <HAL_GetTick>
 800b8d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0308 	and.w	r3, r3, #8
 800b8e0:	2b08      	cmp	r3, #8
 800b8e2:	d10e      	bne.n	800b902 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f817 	bl	800b926 <UART_WaitOnFlagUntilTimeout>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e00d      	b.n	800b91e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2220      	movs	r2, #32
 800b906:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	603b      	str	r3, [r7, #0]
 800b932:	4613      	mov	r3, r2
 800b934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b936:	e05e      	b.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b93e:	d05a      	beq.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b940:	f7f7 feb8 	bl	80036b4 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d302      	bcc.n	800b956 <UART_WaitOnFlagUntilTimeout+0x30>
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d11b      	bne.n	800b98e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b964:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f022 0201 	bic.w	r2, r2, #1
 800b974:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2220      	movs	r2, #32
 800b97a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2220      	movs	r2, #32
 800b980:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e043      	b.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d02c      	beq.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9aa:	d124      	bne.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 0201 	bic.w	r2, r2, #1
 800b9d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2220      	movs	r2, #32
 800b9da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e00f      	b.n	800ba16 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69da      	ldr	r2, [r3, #28]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	4013      	ands	r3, r2
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	bf0c      	ite	eq
 800ba06:	2301      	moveq	r3, #1
 800ba08:	2300      	movne	r3, #0
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d091      	beq.n	800b938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d027      	beq.n	800ba8a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	4b2f      	ldr	r3, [pc, #188]	; (800bb00 <FMC_SDRAM_Init+0xe0>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba50:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ba56:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ba5c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ba62:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ba68:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ba6e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ba74:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ba7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	e032      	b.n	800baf0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba96:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baa0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800baa6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	4b12      	ldr	r3, [pc, #72]	; (800bb00 <FMC_SDRAM_Init+0xe0>)
 800bab8:	4013      	ands	r3, r2
 800baba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bac4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800baca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bad0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bad6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800badc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	ffff8000 	.word	0xffff8000

0800bb04 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d02e      	beq.n	800bb7c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb2a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	3b01      	subs	r3, #1
 800bb38:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb3a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb44:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb4e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb58:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb62:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	609a      	str	r2, [r3, #8]
 800bb7a:	e039      	b.n	800bbf0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4b1e      	ldr	r3, [pc, #120]	; (800bc00 <FMC_SDRAM_Timing_Init+0xfc>)
 800bb86:	4013      	ands	r3, r2
 800bb88:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbae:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbbe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbc8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbd2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	ff0f0fff 	.word	0xff0f0fff

0800bc04 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc04:	b084      	sub	sp, #16
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	f107 001c 	add.w	r0, r7, #28
 800bc12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bc1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bc1e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bc22:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bc26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bc2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bc2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <SDMMC_Init+0x54>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	431a      	orrs	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	b004      	add	sp, #16
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	ffff8100 	.word	0xffff8100

0800bc5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2203      	movs	r2, #3
 800bca4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bca6:	2002      	movs	r0, #2
 800bca8:	f7f7 fd10 	bl	80036cc <HAL_Delay>
  
  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0303 	and.w	r3, r3, #3
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
	...

0800bcd4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bcf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bcfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <SDMMC_SendCommand+0x50>)
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	fffff000 	.word	0xfffff000

0800bd28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	b2db      	uxtb	r3, r3
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3314      	adds	r3, #20
 800bd50:	461a      	mov	r2, r3
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	4413      	add	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
}  
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bd94:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bd9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	431a      	orrs	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0

}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bdce:	2310      	movs	r3, #16
 800bdd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd2:	2340      	movs	r3, #64	; 0x40
 800bdd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde0:	f107 0308 	add.w	r3, r7, #8
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff ff74 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bdec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf0:	2110      	movs	r1, #16
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa46 	bl	800c284 <SDMMC_GetCmdResp1>
 800bdf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3720      	adds	r7, #32
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be12:	2311      	movs	r3, #17
 800be14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be16:	2340      	movs	r3, #64	; 0x40
 800be18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be24:	f107 0308 	add.w	r3, r7, #8
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff ff52 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be30:	f241 3288 	movw	r2, #5000	; 0x1388
 800be34:	2111      	movs	r1, #17
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa24 	bl	800c284 <SDMMC_GetCmdResp1>
 800be3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be3e:	69fb      	ldr	r3, [r7, #28]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800be56:	2312      	movs	r3, #18
 800be58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be5a:	2340      	movs	r3, #64	; 0x40
 800be5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be68:	f107 0308 	add.w	r3, r7, #8
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff ff30 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be74:	f241 3288 	movw	r2, #5000	; 0x1388
 800be78:	2112      	movs	r1, #18
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa02 	bl	800c284 <SDMMC_GetCmdResp1>
 800be80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be82:	69fb      	ldr	r3, [r7, #28]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3720      	adds	r7, #32
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800be9a:	2318      	movs	r3, #24
 800be9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be9e:	2340      	movs	r3, #64	; 0x40
 800bea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beac:	f107 0308 	add.w	r3, r7, #8
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff ff0e 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800beb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bebc:	2118      	movs	r1, #24
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f9e0 	bl	800c284 <SDMMC_GetCmdResp1>
 800bec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec6:	69fb      	ldr	r3, [r7, #28]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bede:	2319      	movs	r3, #25
 800bee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef0:	f107 0308 	add.w	r3, r7, #8
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff feec 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800befc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf00:	2119      	movs	r1, #25
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f9be 	bl	800c284 <SDMMC_GetCmdResp1>
 800bf08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf0a:	69fb      	ldr	r3, [r7, #28]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3720      	adds	r7, #32
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf20:	230c      	movs	r3, #12
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff fecb 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf3e:	4a05      	ldr	r2, [pc, #20]	; (800bf54 <SDMMC_CmdStopTransfer+0x40>)
 800bf40:	210c      	movs	r1, #12
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f99e 	bl	800c284 <SDMMC_GetCmdResp1>
 800bf48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3720      	adds	r7, #32
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	05f5e100 	.word	0x05f5e100

0800bf58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf68:	2307      	movs	r3, #7
 800bf6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf6c:	2340      	movs	r3, #64	; 0x40
 800bf6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf78:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf7a:	f107 0310 	add.w	r3, r7, #16
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f7ff fea7 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf86:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf8a:	2107      	movs	r1, #7
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f979 	bl	800c284 <SDMMC_GetCmdResp1>
 800bf92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3728      	adds	r7, #40	; 0x28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b088      	sub	sp, #32
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fe86 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f92f 	bl	800c22c <SDMMC_GetCmdError>
 800bfce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd0:	69fb      	ldr	r3, [r7, #28]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3720      	adds	r7, #32
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b088      	sub	sp, #32
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bfe2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bfe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bfe8:	2308      	movs	r3, #8
 800bfea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfec:	2340      	movs	r3, #64	; 0x40
 800bfee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffa:	f107 0308 	add.w	r3, r7, #8
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff fe67 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fb26 	bl	800c658 <SDMMC_GetCmdResp7>
 800c00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c00e:	69fb      	ldr	r3, [r7, #28]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3720      	adds	r7, #32
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c026:	2337      	movs	r3, #55	; 0x37
 800c028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c02a:	2340      	movs	r3, #64	; 0x40
 800c02c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c02e:	2300      	movs	r3, #0
 800c030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c038:	f107 0308 	add.w	r3, r7, #8
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff fe48 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c044:	f241 3288 	movw	r2, #5000	; 0x1388
 800c048:	2137      	movs	r1, #55	; 0x37
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f91a 	bl	800c284 <SDMMC_GetCmdResp1>
 800c050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c052:	69fb      	ldr	r3, [r7, #28]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3720      	adds	r7, #32
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <SDMMC_CmdAppOperCommand+0x44>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c06e:	2329      	movs	r3, #41	; 0x29
 800c070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c072:	2340      	movs	r3, #64	; 0x40
 800c074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff fe24 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fa2f 	bl	800c4f0 <SDMMC_GetCmdResp3>
 800c092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c094:	69fb      	ldr	r3, [r7, #28]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3720      	adds	r7, #32
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	80100000 	.word	0x80100000

0800c0a4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c0b2:	2306      	movs	r3, #6
 800c0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0b6:	2340      	movs	r3, #64	; 0x40
 800c0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c4:	f107 0308 	add.w	r3, r7, #8
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fe02 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d4:	2106      	movs	r1, #6
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f8d4 	bl	800c284 <SDMMC_GetCmdResp1>
 800c0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0de:	69fb      	ldr	r3, [r7, #28]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0f4:	2333      	movs	r3, #51	; 0x33
 800c0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0f8:	2340      	movs	r3, #64	; 0x40
 800c0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c106:	f107 0308 	add.w	r3, r7, #8
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff fde1 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c112:	f241 3288 	movw	r2, #5000	; 0x1388
 800c116:	2133      	movs	r1, #51	; 0x33
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f8b3 	bl	800c284 <SDMMC_GetCmdResp1>
 800c11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c120:	69fb      	ldr	r3, [r7, #28]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3720      	adds	r7, #32
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b088      	sub	sp, #32
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c132:	2300      	movs	r3, #0
 800c134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c136:	2302      	movs	r3, #2
 800c138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c13a:	23c0      	movs	r3, #192	; 0xc0
 800c13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fdc0 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f983 	bl	800c460 <SDMMC_GetCmdResp2>
 800c15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c15c:	69fb      	ldr	r3, [r7, #28]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b088      	sub	sp, #32
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c174:	2309      	movs	r3, #9
 800c176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c178:	23c0      	movs	r3, #192	; 0xc0
 800c17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c17c:	2300      	movs	r3, #0
 800c17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff fda1 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f964 	bl	800c460 <SDMMC_GetCmdResp2>
 800c198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c19a:	69fb      	ldr	r3, [r7, #28]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3720      	adds	r7, #32
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b088      	sub	sp, #32
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1b6:	2340      	movs	r3, #64	; 0x40
 800c1b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1c4:	f107 0308 	add.w	r3, r7, #8
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fd82 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	2103      	movs	r1, #3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f9c9 	bl	800c56c <SDMMC_GetCmdResp6>
 800c1da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1dc:	69fb      	ldr	r3, [r7, #28]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3720      	adds	r7, #32
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b088      	sub	sp, #32
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1f4:	230d      	movs	r3, #13
 800c1f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1f8:	2340      	movs	r3, #64	; 0x40
 800c1fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c206:	f107 0308 	add.w	r3, r7, #8
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fd61 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c212:	f241 3288 	movw	r2, #5000	; 0x1388
 800c216:	210d      	movs	r1, #13
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f833 	bl	800c284 <SDMMC_GetCmdResp1>
 800c21e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c220:	69fb      	ldr	r3, [r7, #28]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
	...

0800c22c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c234:	4b11      	ldr	r3, [pc, #68]	; (800c27c <SDMMC_GetCmdError+0x50>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a11      	ldr	r2, [pc, #68]	; (800c280 <SDMMC_GetCmdError+0x54>)
 800c23a:	fba2 2303 	umull	r2, r3, r2, r3
 800c23e:	0a5b      	lsrs	r3, r3, #9
 800c240:	f241 3288 	movw	r2, #5000	; 0x1388
 800c244:	fb02 f303 	mul.w	r3, r2, r3
 800c248:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	1e5a      	subs	r2, r3, #1
 800c24e:	60fa      	str	r2, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d102      	bne.n	800c25a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c254:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c258:	e009      	b.n	800c26e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0f1      	beq.n	800c24a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	22c5      	movs	r2, #197	; 0xc5
 800c26a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	20000000 	.word	0x20000000
 800c280:	10624dd3 	.word	0x10624dd3

0800c284 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	460b      	mov	r3, r1
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c292:	4b70      	ldr	r3, [pc, #448]	; (800c454 <SDMMC_GetCmdResp1+0x1d0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a70      	ldr	r2, [pc, #448]	; (800c458 <SDMMC_GetCmdResp1+0x1d4>)
 800c298:	fba2 2303 	umull	r2, r3, r2, r3
 800c29c:	0a5a      	lsrs	r2, r3, #9
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	fb02 f303 	mul.w	r3, r2, r3
 800c2a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	1e5a      	subs	r2, r3, #1
 800c2aa:	61fa      	str	r2, [r7, #28]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d102      	bne.n	800c2b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2b4:	e0c9      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0ef      	beq.n	800c2a6 <SDMMC_GetCmdResp1+0x22>
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1ea      	bne.n	800c2a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d4:	f003 0304 	and.w	r3, r3, #4
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d004      	beq.n	800c2e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2204      	movs	r2, #4
 800c2e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2e2:	2304      	movs	r3, #4
 800c2e4:	e0b1      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d004      	beq.n	800c2fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e0a6      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	22c5      	movs	r2, #197	; 0xc5
 800c300:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f7ff fd10 	bl	800bd28 <SDMMC_GetCommandResponse>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	7afb      	ldrb	r3, [r7, #11]
 800c30e:	4293      	cmp	r3, r2
 800c310:	d001      	beq.n	800c316 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c312:	2301      	movs	r3, #1
 800c314:	e099      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c316:	2100      	movs	r1, #0
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7ff fd12 	bl	800bd42 <SDMMC_GetResponse>
 800c31e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	4b4e      	ldr	r3, [pc, #312]	; (800c45c <SDMMC_GetCmdResp1+0x1d8>)
 800c324:	4013      	ands	r3, r2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e08d      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	da02      	bge.n	800c33a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c338:	e087      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c344:	2340      	movs	r3, #64	; 0x40
 800c346:	e080      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c352:	2380      	movs	r3, #128	; 0x80
 800c354:	e079      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c360:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c364:	e071      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c370:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c374:	e069      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c384:	e061      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c394:	e059      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3a4:	e051      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3b4:	e049      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c3c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c3c4:	e041      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c3d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3d4:	e039      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c3e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3e4:	e031      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c3f4:	e029      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c404:	e021      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c414:	e019      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c420:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c424:	e011      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c430:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c434:	e009      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f003 0308 	and.w	r3, r3, #8
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c440:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c444:	e001      	b.n	800c44a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20000000 	.word	0x20000000
 800c458:	10624dd3 	.word	0x10624dd3
 800c45c:	fdffe008 	.word	0xfdffe008

0800c460 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c468:	4b1f      	ldr	r3, [pc, #124]	; (800c4e8 <SDMMC_GetCmdResp2+0x88>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a1f      	ldr	r2, [pc, #124]	; (800c4ec <SDMMC_GetCmdResp2+0x8c>)
 800c46e:	fba2 2303 	umull	r2, r3, r2, r3
 800c472:	0a5b      	lsrs	r3, r3, #9
 800c474:	f241 3288 	movw	r2, #5000	; 0x1388
 800c478:	fb02 f303 	mul.w	r3, r2, r3
 800c47c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	1e5a      	subs	r2, r3, #1
 800c482:	60fa      	str	r2, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d102      	bne.n	800c48e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c48c:	e026      	b.n	800c4dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0ef      	beq.n	800c47e <SDMMC_GetCmdResp2+0x1e>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1ea      	bne.n	800c47e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d004      	beq.n	800c4be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2204      	movs	r2, #4
 800c4b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4ba:	2304      	movs	r3, #4
 800c4bc:	e00e      	b.n	800c4dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d004      	beq.n	800c4d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e003      	b.n	800c4dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	22c5      	movs	r2, #197	; 0xc5
 800c4d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	20000000 	.word	0x20000000
 800c4ec:	10624dd3 	.word	0x10624dd3

0800c4f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4f8:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <SDMMC_GetCmdResp3+0x74>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a1a      	ldr	r2, [pc, #104]	; (800c568 <SDMMC_GetCmdResp3+0x78>)
 800c4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c502:	0a5b      	lsrs	r3, r3, #9
 800c504:	f241 3288 	movw	r2, #5000	; 0x1388
 800c508:	fb02 f303 	mul.w	r3, r2, r3
 800c50c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	1e5a      	subs	r2, r3, #1
 800c512:	60fa      	str	r2, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d102      	bne.n	800c51e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c51c:	e01b      	b.n	800c556 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c522:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0ef      	beq.n	800c50e <SDMMC_GetCmdResp3+0x1e>
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ea      	bne.n	800c50e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53c:	f003 0304 	and.w	r3, r3, #4
 800c540:	2b00      	cmp	r3, #0
 800c542:	d004      	beq.n	800c54e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2204      	movs	r2, #4
 800c548:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c54a:	2304      	movs	r3, #4
 800c54c:	e003      	b.n	800c556 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	22c5      	movs	r2, #197	; 0xc5
 800c552:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20000000 	.word	0x20000000
 800c568:	10624dd3 	.word	0x10624dd3

0800c56c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	460b      	mov	r3, r1
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c57a:	4b35      	ldr	r3, [pc, #212]	; (800c650 <SDMMC_GetCmdResp6+0xe4>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a35      	ldr	r2, [pc, #212]	; (800c654 <SDMMC_GetCmdResp6+0xe8>)
 800c580:	fba2 2303 	umull	r2, r3, r2, r3
 800c584:	0a5b      	lsrs	r3, r3, #9
 800c586:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58a:	fb02 f303 	mul.w	r3, r2, r3
 800c58e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	1e5a      	subs	r2, r3, #1
 800c594:	61fa      	str	r2, [r7, #28]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c59a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c59e:	e052      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d0ef      	beq.n	800c590 <SDMMC_GetCmdResp6+0x24>
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1ea      	bne.n	800c590 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5be:	f003 0304 	and.w	r3, r3, #4
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d004      	beq.n	800c5d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2204      	movs	r2, #4
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5cc:	2304      	movs	r3, #4
 800c5ce:	e03a      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e02f      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f7ff fb9e 	bl	800bd28 <SDMMC_GetCommandResponse>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d001      	beq.n	800c5fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e025      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	22c5      	movs	r2, #197	; 0xc5
 800c5fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c600:	2100      	movs	r1, #0
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f7ff fb9d 	bl	800bd42 <SDMMC_GetResponse>
 800c608:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	0c1b      	lsrs	r3, r3, #16
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c61e:	2300      	movs	r3, #0
 800c620:	e011      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c62c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c630:	e009      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c63c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c640:	e001      	b.n	800c646 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c646:	4618      	mov	r0, r3
 800c648:	3720      	adds	r7, #32
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20000000 	.word	0x20000000
 800c654:	10624dd3 	.word	0x10624dd3

0800c658 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c660:	4b22      	ldr	r3, [pc, #136]	; (800c6ec <SDMMC_GetCmdResp7+0x94>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a22      	ldr	r2, [pc, #136]	; (800c6f0 <SDMMC_GetCmdResp7+0x98>)
 800c666:	fba2 2303 	umull	r2, r3, r2, r3
 800c66a:	0a5b      	lsrs	r3, r3, #9
 800c66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c670:	fb02 f303 	mul.w	r3, r2, r3
 800c674:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1e5a      	subs	r2, r3, #1
 800c67a:	60fa      	str	r2, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c684:	e02c      	b.n	800c6e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0ef      	beq.n	800c676 <SDMMC_GetCmdResp7+0x1e>
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1ea      	bne.n	800c676 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a4:	f003 0304 	and.w	r3, r3, #4
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d004      	beq.n	800c6b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2204      	movs	r2, #4
 800c6b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6b2:	2304      	movs	r3, #4
 800c6b4:	e014      	b.n	800c6e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d004      	beq.n	800c6cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e009      	b.n	800c6e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2240      	movs	r2, #64	; 0x40
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c6de:	2300      	movs	r3, #0
  
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	20000000 	.word	0x20000000
 800c6f0:	10624dd3 	.word	0x10624dd3

0800c6f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	f107 001c 	add.w	r0, r7, #28
 800c702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d120      	bne.n	800c74e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68da      	ldr	r2, [r3, #12]
 800c71c:	4b20      	ldr	r3, [pc, #128]	; (800c7a0 <USB_CoreInit+0xac>)
 800c71e:	4013      	ands	r3, r2
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c732:	2b01      	cmp	r3, #1
 800c734:	d105      	bne.n	800c742 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f942 	bl	800c9cc <USB_CoreReset>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
 800c74c:	e010      	b.n	800c770 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f936 	bl	800c9cc <USB_CoreReset>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	2b01      	cmp	r3, #1
 800c774:	d10b      	bne.n	800c78e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f043 0206 	orr.w	r2, r3, #6
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f043 0220 	orr.w	r2, r3, #32
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c79a:	b004      	add	sp, #16
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	ffbdffbf 	.word	0xffbdffbf

0800c7a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f043 0201 	orr.w	r2, r3, #1
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	f023 0201 	bic.w	r2, r3, #1
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d106      	bne.n	800c814 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	60da      	str	r2, [r3, #12]
 800c812:	e00b      	b.n	800c82c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d106      	bne.n	800c828 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	60da      	str	r2, [r3, #12]
 800c826:	e001      	b.n	800c82c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	e003      	b.n	800c834 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c82c:	2032      	movs	r0, #50	; 0x32
 800c82e:	f7f6 ff4d 	bl	80036cc <HAL_Delay>

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	019b      	lsls	r3, r3, #6
 800c84e:	f043 0220 	orr.w	r2, r3, #32
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3301      	adds	r3, #1
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4a09      	ldr	r2, [pc, #36]	; (800c884 <USB_FlushTxFifo+0x48>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d901      	bls.n	800c868 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	e006      	b.n	800c876 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	2b20      	cmp	r3, #32
 800c872:	d0f0      	beq.n	800c856 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	00030d40 	.word	0x00030d40

0800c888 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2210      	movs	r2, #16
 800c898:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3301      	adds	r3, #1
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	4a09      	ldr	r2, [pc, #36]	; (800c8c8 <USB_FlushRxFifo+0x40>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d901      	bls.n	800c8ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e006      	b.n	800c8ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	f003 0310 	and.w	r3, r3, #16
 800c8b4:	2b10      	cmp	r3, #16
 800c8b6:	d0f0      	beq.n	800c89a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	00030d40 	.word	0x00030d40

0800c8cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b089      	sub	sp, #36	; 0x24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	461a      	mov	r2, r3
 800c8da:	460b      	mov	r3, r1
 800c8dc:	71fb      	strb	r3, [r7, #7]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c8ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d11a      	bne.n	800c928 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c8f2:	88bb      	ldrh	r3, [r7, #4]
 800c8f4:	3303      	adds	r3, #3
 800c8f6:	089b      	lsrs	r3, r3, #2
 800c8f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	61bb      	str	r3, [r7, #24]
 800c8fe:	e00f      	b.n	800c920 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	031a      	lsls	r2, r3, #12
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	4413      	add	r3, r2
 800c908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c90c:	461a      	mov	r2, r3
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	3304      	adds	r3, #4
 800c918:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	3301      	adds	r3, #1
 800c91e:	61bb      	str	r3, [r7, #24]
 800c920:	69ba      	ldr	r2, [r7, #24]
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	429a      	cmp	r2, r3
 800c926:	d3eb      	bcc.n	800c900 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3724      	adds	r7, #36	; 0x24
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c936:	b480      	push	{r7}
 800c938:	b089      	sub	sp, #36	; 0x24
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	4613      	mov	r3, r2
 800c942:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c94c:	88fb      	ldrh	r3, [r7, #6]
 800c94e:	3303      	adds	r3, #3
 800c950:	089b      	lsrs	r3, r3, #2
 800c952:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c954:	2300      	movs	r3, #0
 800c956:	61bb      	str	r3, [r7, #24]
 800c958:	e00b      	b.n	800c972 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	601a      	str	r2, [r3, #0]
    pDest++;
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	3304      	adds	r3, #4
 800c96a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	3301      	adds	r3, #1
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	429a      	cmp	r2, r3
 800c978:	d3ef      	bcc.n	800c95a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c97a:	69fb      	ldr	r3, [r7, #28]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3724      	adds	r7, #36	; 0x24
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	695b      	ldr	r3, [r3, #20]
 800c994:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4013      	ands	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	f003 0301 	and.w	r3, r3, #1
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
	...

0800c9cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	60fb      	str	r3, [r7, #12]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	4a13      	ldr	r2, [pc, #76]	; (800ca30 <USB_CoreReset+0x64>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d901      	bls.n	800c9ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e01b      	b.n	800ca22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	daf2      	bge.n	800c9d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	f043 0201 	orr.w	r2, r3, #1
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3301      	adds	r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <USB_CoreReset+0x64>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d901      	bls.n	800ca14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca10:	2303      	movs	r3, #3
 800ca12:	e006      	b.n	800ca22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d0f0      	beq.n	800ca02 <USB_CoreReset+0x36>

  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	00030d40 	.word	0x00030d40

0800ca34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca34:	b084      	sub	sp, #16
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b084      	sub	sp, #16
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	f107 001c 	add.w	r0, r7, #28
 800ca42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca50:	461a      	mov	r2, r3
 800ca52:	2300      	movs	r3, #0
 800ca54:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d018      	beq.n	800caa0 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d10a      	bne.n	800ca8a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca82:	f043 0304 	orr.w	r3, r3, #4
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	e014      	b.n	800cab4 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca98:	f023 0304 	bic.w	r3, r3, #4
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	e009      	b.n	800cab4 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800caae:	f023 0304 	bic.w	r3, r3, #4
 800cab2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cab4:	2110      	movs	r1, #16
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff fec0 	bl	800c83c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7ff fee3 	bl	800c888 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	e015      	b.n	800caf4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cad4:	461a      	mov	r2, r3
 800cad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cada:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	015a      	lsls	r2, r3, #5
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	4413      	add	r3, r2
 800cae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cae8:	461a      	mov	r2, r3
 800caea:	2300      	movs	r3, #0
 800caec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d3e5      	bcc.n	800cac8 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cafc:	2101      	movs	r1, #1
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f8ac 	bl	800cc5c <USB_DriveVbus>

  HAL_Delay(200U);
 800cb04:	20c8      	movs	r0, #200	; 0xc8
 800cb06:	f7f6 fde1 	bl	80036cc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb16:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00b      	beq.n	800cb3c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a14      	ldr	r2, [pc, #80]	; (800cb80 <USB_HostInit+0x14c>)
 800cb30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a13      	ldr	r2, [pc, #76]	; (800cb84 <USB_HostInit+0x150>)
 800cb36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cb3a:	e009      	b.n	800cb50 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2280      	movs	r2, #128	; 0x80
 800cb40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a10      	ldr	r2, [pc, #64]	; (800cb88 <USB_HostInit+0x154>)
 800cb46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a10      	ldr	r2, [pc, #64]	; (800cb8c <USB_HostInit+0x158>)
 800cb4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d105      	bne.n	800cb62 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	f043 0210 	orr.w	r2, r3, #16
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	699a      	ldr	r2, [r3, #24]
 800cb66:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <USB_HostInit+0x15c>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb7a:	b004      	add	sp, #16
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	01000200 	.word	0x01000200
 800cb84:	00e00300 	.word	0x00e00300
 800cb88:	00600080 	.word	0x00600080
 800cb8c:	004000e0 	.word	0x004000e0
 800cb90:	a3200008 	.word	0xa3200008

0800cb94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	68f9      	ldr	r1, [r7, #12]
 800cbc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d107      	bne.n	800cbe6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbdc:	461a      	mov	r2, r3
 800cbde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cbe2:	6053      	str	r3, [r2, #4]
 800cbe4:	e009      	b.n	800cbfa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800cbe6:	78fb      	ldrb	r3, [r7, #3]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d106      	bne.n	800cbfa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	f241 7370 	movw	r3, #6000	; 0x1770
 800cbf8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cc14:	2300      	movs	r3, #0
 800cc16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cc28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc36:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cc38:	2064      	movs	r0, #100	; 0x64
 800cc3a:	f7f6 fd47 	bl	80036cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cc4c:	200a      	movs	r0, #10
 800cc4e:	f7f6 fd3d 	bl	80036cc <HAL_Delay>

  return HAL_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cc80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d109      	bne.n	800cca0 <USB_DriveVbus+0x44>
 800cc8c:	78fb      	ldrb	r3, [r7, #3]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d106      	bne.n	800cca0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc9e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccaa:	d109      	bne.n	800ccc0 <USB_DriveVbus+0x64>
 800ccac:	78fb      	ldrb	r3, [r7, #3]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ccba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccbe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	0c5b      	lsrs	r3, r3, #17
 800ccec:	f003 0303 	and.w	r3, r3, #3
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	b29b      	uxth	r3, r3
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
	...

0800cd20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	4608      	mov	r0, r1
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4603      	mov	r3, r0
 800cd30:	70fb      	strb	r3, [r7, #3]
 800cd32:	460b      	mov	r3, r1
 800cd34:	70bb      	strb	r3, [r7, #2]
 800cd36:	4613      	mov	r3, r2
 800cd38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cd42:	78fb      	ldrb	r3, [r7, #3]
 800cd44:	015a      	lsls	r2, r3, #5
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	4413      	add	r3, r2
 800cd4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cd56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d87e      	bhi.n	800ce5c <USB_HC_Init+0x13c>
 800cd5e:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <USB_HC_Init+0x44>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd75 	.word	0x0800cd75
 800cd68:	0800ce1f 	.word	0x0800ce1f
 800cd6c:	0800cd75 	.word	0x0800cd75
 800cd70:	0800cde1 	.word	0x0800cde1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cd74:	78fb      	ldrb	r3, [r7, #3]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd80:	461a      	mov	r2, r3
 800cd82:	f240 439d 	movw	r3, #1181	; 0x49d
 800cd86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cd88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da10      	bge.n	800cdb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cd90:	78fb      	ldrb	r3, [r7, #3]
 800cd92:	015a      	lsls	r2, r3, #5
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	4413      	add	r3, r2
 800cd98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	78fa      	ldrb	r2, [r7, #3]
 800cda0:	0151      	lsls	r1, r2, #5
 800cda2:	693a      	ldr	r2, [r7, #16]
 800cda4:	440a      	add	r2, r1
 800cda6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cdb0:	e057      	b.n	800ce62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d051      	beq.n	800ce62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	78fa      	ldrb	r2, [r7, #3]
 800cdce:	0151      	lsls	r1, r2, #5
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	440a      	add	r2, r1
 800cdd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cddc:	60d3      	str	r3, [r2, #12]
      break;
 800cdde:	e040      	b.n	800ce62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdec:	461a      	mov	r2, r3
 800cdee:	f240 639d 	movw	r3, #1693	; 0x69d
 800cdf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cdf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	da34      	bge.n	800ce66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cdfc:	78fb      	ldrb	r3, [r7, #3]
 800cdfe:	015a      	lsls	r2, r3, #5
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	4413      	add	r3, r2
 800ce04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	78fa      	ldrb	r2, [r7, #3]
 800ce0c:	0151      	lsls	r1, r2, #5
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	440a      	add	r2, r1
 800ce12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ce1c:	e023      	b.n	800ce66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce1e:	78fb      	ldrb	r3, [r7, #3]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f240 2325 	movw	r3, #549	; 0x225
 800ce30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ce32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	da17      	bge.n	800ce6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ce3a:	78fb      	ldrb	r3, [r7, #3]
 800ce3c:	015a      	lsls	r2, r3, #5
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	4413      	add	r3, r2
 800ce42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	78fa      	ldrb	r2, [r7, #3]
 800ce4a:	0151      	lsls	r1, r2, #5
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	440a      	add	r2, r1
 800ce50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ce58:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ce5a:	e006      	b.n	800ce6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	77fb      	strb	r3, [r7, #31]
      break;
 800ce60:	e004      	b.n	800ce6c <USB_HC_Init+0x14c>
      break;
 800ce62:	bf00      	nop
 800ce64:	e002      	b.n	800ce6c <USB_HC_Init+0x14c>
      break;
 800ce66:	bf00      	nop
 800ce68:	e000      	b.n	800ce6c <USB_HC_Init+0x14c>
      break;
 800ce6a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce72:	699a      	ldr	r2, [r3, #24]
 800ce74:	78fb      	ldrb	r3, [r7, #3]
 800ce76:	f003 030f 	and.w	r3, r3, #15
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce80:	6939      	ldr	r1, [r7, #16]
 800ce82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ce86:	4313      	orrs	r3, r2
 800ce88:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ce96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	da03      	bge.n	800cea6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ce9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cea2:	61bb      	str	r3, [r7, #24]
 800cea4:	e001      	b.n	800ceaa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cea6:	2300      	movs	r3, #0
 800cea8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff ff0f 	bl	800ccce <USB_GetHostSpeed>
 800ceb0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ceb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d106      	bne.n	800cec8 <USB_HC_Init+0x1a8>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d003      	beq.n	800cec8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e001      	b.n	800cecc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cecc:	787b      	ldrb	r3, [r7, #1]
 800cece:	059b      	lsls	r3, r3, #22
 800ced0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ced4:	78bb      	ldrb	r3, [r7, #2]
 800ced6:	02db      	lsls	r3, r3, #11
 800ced8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cedc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cede:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cee2:	049b      	lsls	r3, r3, #18
 800cee4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cee8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ceea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ceec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cef0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	0159      	lsls	r1, r3, #5
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	440b      	add	r3, r1
 800cefe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf02:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf08:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cf0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	d10f      	bne.n	800cf32 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cf12:	78fb      	ldrb	r3, [r7, #3]
 800cf14:	015a      	lsls	r2, r3, #5
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	4413      	add	r3, r2
 800cf1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	78fa      	ldrb	r2, [r7, #3]
 800cf22:	0151      	lsls	r1, r2, #5
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	440a      	add	r2, r1
 800cf28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf30:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cf32:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3720      	adds	r7, #32
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08c      	sub	sp, #48	; 0x30
 800cf40:	af02      	add	r7, sp, #8
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	785b      	ldrb	r3, [r3, #1]
 800cf52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cf54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf58:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d02d      	beq.n	800cfc2 <USB_HC_StartXfer+0x86>
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	791b      	ldrb	r3, [r3, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d129      	bne.n	800cfc2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d117      	bne.n	800cfa4 <USB_HC_StartXfer+0x68>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	79db      	ldrb	r3, [r3, #7]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d003      	beq.n	800cf84 <USB_HC_StartXfer+0x48>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	79db      	ldrb	r3, [r3, #7]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d10f      	bne.n	800cfa4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	0151      	lsls	r1, r2, #5
 800cf96:	6a3a      	ldr	r2, [r7, #32]
 800cf98:	440a      	add	r2, r1
 800cf9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfa2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10b      	bne.n	800cfc2 <USB_HC_StartXfer+0x86>
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	795b      	ldrb	r3, [r3, #5]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d107      	bne.n	800cfc2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 fa2f 	bl	800d41c <USB_DoPing>
      return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e0f8      	b.n	800d1b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d018      	beq.n	800cffc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	695b      	ldr	r3, [r3, #20]
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	8912      	ldrh	r2, [r2, #8]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	8912      	ldrh	r2, [r2, #8]
 800cfda:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfde:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800cfe0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cfe2:	8b7b      	ldrh	r3, [r7, #26]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d90b      	bls.n	800d000 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800cfe8:	8b7b      	ldrh	r3, [r7, #26]
 800cfea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cfec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	8912      	ldrh	r2, [r2, #8]
 800cff2:	fb02 f203 	mul.w	r2, r2, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	611a      	str	r2, [r3, #16]
 800cffa:	e001      	b.n	800d000 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800cffc:	2301      	movs	r3, #1
 800cffe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	78db      	ldrb	r3, [r3, #3]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d007      	beq.n	800d018 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	8912      	ldrh	r2, [r2, #8]
 800d00e:	fb02 f203 	mul.w	r2, r2, r3
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	611a      	str	r2, [r3, #16]
 800d016:	e003      	b.n	800d020 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	695a      	ldr	r2, [r3, #20]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d02a:	04d9      	lsls	r1, r3, #19
 800d02c:	4b63      	ldr	r3, [pc, #396]	; (800d1bc <USB_HC_StartXfer+0x280>)
 800d02e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d030:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	7a9b      	ldrb	r3, [r3, #10]
 800d036:	075b      	lsls	r3, r3, #29
 800d038:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d03c:	69f9      	ldr	r1, [r7, #28]
 800d03e:	0148      	lsls	r0, r1, #5
 800d040:	6a39      	ldr	r1, [r7, #32]
 800d042:	4401      	add	r1, r0
 800d044:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d048:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d04a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d04c:	79fb      	ldrb	r3, [r7, #7]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	68d9      	ldr	r1, [r3, #12]
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	015a      	lsls	r2, r3, #5
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	4413      	add	r3, r2
 800d05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d062:	460a      	mov	r2, r1
 800d064:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	bf0c      	ite	eq
 800d076:	2301      	moveq	r3, #1
 800d078:	2300      	movne	r3, #0
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	015a      	lsls	r2, r3, #5
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	4413      	add	r3, r2
 800d086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	69fa      	ldr	r2, [r7, #28]
 800d08e:	0151      	lsls	r1, r2, #5
 800d090:	6a3a      	ldr	r2, [r7, #32]
 800d092:	440a      	add	r2, r1
 800d094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d09c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	015a      	lsls	r2, r3, #5
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	7e7b      	ldrb	r3, [r7, #25]
 800d0ae:	075b      	lsls	r3, r3, #29
 800d0b0:	69f9      	ldr	r1, [r7, #28]
 800d0b2:	0148      	lsls	r0, r1, #5
 800d0b4:	6a39      	ldr	r1, [r7, #32]
 800d0b6:	4401      	add	r1, r0
 800d0b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	015a      	lsls	r2, r3, #5
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	78db      	ldrb	r3, [r3, #3]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d004      	beq.n	800d0ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0e6:	613b      	str	r3, [r7, #16]
 800d0e8:	e003      	b.n	800d0f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d0f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	015a      	lsls	r2, r3, #5
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	4413      	add	r3, r2
 800d102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d106:	461a      	mov	r2, r3
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d10c:	79fb      	ldrb	r3, [r7, #7]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	e04e      	b.n	800d1b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	78db      	ldrb	r3, [r3, #3]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d149      	bne.n	800d1b2 <USB_HC_StartXfer+0x276>
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	695b      	ldr	r3, [r3, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d045      	beq.n	800d1b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	79db      	ldrb	r3, [r3, #7]
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d830      	bhi.n	800d190 <USB_HC_StartXfer+0x254>
 800d12e:	a201      	add	r2, pc, #4	; (adr r2, 800d134 <USB_HC_StartXfer+0x1f8>)
 800d130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d134:	0800d145 	.word	0x0800d145
 800d138:	0800d169 	.word	0x0800d169
 800d13c:	0800d145 	.word	0x0800d145
 800d140:	0800d169 	.word	0x0800d169
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	3303      	adds	r3, #3
 800d14a:	089b      	lsrs	r3, r3, #2
 800d14c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d14e:	8afa      	ldrh	r2, [r7, #22]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d154:	b29b      	uxth	r3, r3
 800d156:	429a      	cmp	r2, r3
 800d158:	d91c      	bls.n	800d194 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	f043 0220 	orr.w	r2, r3, #32
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	619a      	str	r2, [r3, #24]
        }
        break;
 800d166:	e015      	b.n	800d194 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	3303      	adds	r3, #3
 800d16e:	089b      	lsrs	r3, r3, #2
 800d170:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d172:	8afa      	ldrh	r2, [r7, #22]
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	429a      	cmp	r2, r3
 800d180:	d90a      	bls.n	800d198 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d18e:	e003      	b.n	800d198 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d190:	bf00      	nop
 800d192:	e002      	b.n	800d19a <USB_HC_StartXfer+0x25e>
        break;
 800d194:	bf00      	nop
 800d196:	e000      	b.n	800d19a <USB_HC_StartXfer+0x25e>
        break;
 800d198:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	68d9      	ldr	r1, [r3, #12]
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	785a      	ldrb	r2, [r3, #1]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	9000      	str	r0, [sp, #0]
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f7ff fb8d 	bl	800c8cc <USB_WritePacket>
  }

  return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3728      	adds	r7, #40	; 0x28
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	1ff80000 	.word	0x1ff80000

0800d1c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	b29b      	uxth	r3, r3
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b089      	sub	sp, #36	; 0x24
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d1f2:	78fb      	ldrb	r3, [r7, #3]
 800d1f4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	015a      	lsls	r2, r3, #5
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	4413      	add	r3, r2
 800d202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	0c9b      	lsrs	r3, r3, #18
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	015a      	lsls	r2, r3, #5
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	4413      	add	r3, r2
 800d218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	0fdb      	lsrs	r3, r3, #31
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f003 0320 	and.w	r3, r3, #32
 800d22e:	2b20      	cmp	r3, #32
 800d230:	d104      	bne.n	800d23c <USB_HC_Halt+0x5a>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	e0e8      	b.n	800d40e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <USB_HC_Halt+0x66>
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	2b02      	cmp	r3, #2
 800d246:	d173      	bne.n	800d330 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	0151      	lsls	r1, r2, #5
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	440a      	add	r2, r1
 800d25e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d266:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	f003 0320 	and.w	r3, r3, #32
 800d270:	2b00      	cmp	r3, #0
 800d272:	f040 80cb 	bne.w	800d40c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d143      	bne.n	800d30a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	0151      	lsls	r1, r2, #5
 800d294:	69ba      	ldr	r2, [r7, #24]
 800d296:	440a      	add	r2, r1
 800d298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	0151      	lsls	r1, r2, #5
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	440a      	add	r2, r1
 800d2b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	0151      	lsls	r1, r2, #5
 800d2d4:	69ba      	ldr	r2, [r7, #24]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2e0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	61fb      	str	r3, [r7, #28]
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ee:	d81d      	bhi.n	800d32c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	015a      	lsls	r2, r3, #5
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d306:	d0ec      	beq.n	800d2e2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d308:	e080      	b.n	800d40c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	4413      	add	r3, r2
 800d312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	0151      	lsls	r1, r2, #5
 800d31c:	69ba      	ldr	r2, [r7, #24]
 800d31e:	440a      	add	r2, r1
 800d320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d328:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d32a:	e06f      	b.n	800d40c <USB_HC_Halt+0x22a>
            break;
 800d32c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d32e:	e06d      	b.n	800d40c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	015a      	lsls	r2, r3, #5
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	4413      	add	r3, r2
 800d338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	697a      	ldr	r2, [r7, #20]
 800d340:	0151      	lsls	r1, r2, #5
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	440a      	add	r2, r1
 800d346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d34a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d34e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d143      	bne.n	800d3e8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	4413      	add	r3, r2
 800d368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	0151      	lsls	r1, r2, #5
 800d372:	69ba      	ldr	r2, [r7, #24]
 800d374:	440a      	add	r2, r1
 800d376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d37a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d37e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	015a      	lsls	r2, r3, #5
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	4413      	add	r3, r2
 800d388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	0151      	lsls	r1, r2, #5
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	440a      	add	r2, r1
 800d396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d39a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d39e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	0151      	lsls	r1, r2, #5
 800d3b2:	69ba      	ldr	r2, [r7, #24]
 800d3b4:	440a      	add	r2, r1
 800d3b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3be:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	61fb      	str	r3, [r7, #28]
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3cc:	d81d      	bhi.n	800d40a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	015a      	lsls	r2, r3, #5
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3e4:	d0ec      	beq.n	800d3c0 <USB_HC_Halt+0x1de>
 800d3e6:	e011      	b.n	800d40c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	015a      	lsls	r2, r3, #5
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	0151      	lsls	r1, r2, #5
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	440a      	add	r2, r1
 800d3fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d406:	6013      	str	r3, [r2, #0]
 800d408:	e000      	b.n	800d40c <USB_HC_Halt+0x22a>
          break;
 800d40a:	bf00      	nop
    }
  }

  return HAL_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3724      	adds	r7, #36	; 0x24
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
	...

0800d41c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b087      	sub	sp, #28
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d42c:	78fb      	ldrb	r3, [r7, #3]
 800d42e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d430:	2301      	movs	r3, #1
 800d432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	04da      	lsls	r2, r3, #19
 800d438:	4b15      	ldr	r3, [pc, #84]	; (800d490 <USB_DoPing+0x74>)
 800d43a:	4013      	ands	r3, r2
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	0151      	lsls	r1, r2, #5
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	440a      	add	r2, r1
 800d444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d44c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	015a      	lsls	r2, r3, #5
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	4413      	add	r3, r2
 800d456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d464:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d46c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	015a      	lsls	r2, r3, #5
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	4413      	add	r3, r2
 800d476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d47a:	461a      	mov	r2, r3
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d480:	2300      	movs	r3, #0
}
 800d482:	4618      	mov	r0, r3
 800d484:	371c      	adds	r7, #28
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	1ff80000 	.word	0x1ff80000

0800d494 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff f98e 	bl	800c7c6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d4aa:	2110      	movs	r1, #16
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff f9c5 	bl	800c83c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff f9e8 	bl	800c888 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	e01f      	b.n	800d4fe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	015a      	lsls	r2, r3, #5
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	015a      	lsls	r2, r3, #5
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	613b      	str	r3, [r7, #16]
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	2b0f      	cmp	r3, #15
 800d502:	d9dc      	bls.n	800d4be <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d504:	2300      	movs	r3, #0
 800d506:	613b      	str	r3, [r7, #16]
 800d508:	e034      	b.n	800d574 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	4413      	add	r3, r2
 800d512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d520:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d528:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d530:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	015a      	lsls	r2, r3, #5
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	4413      	add	r3, r2
 800d53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d53e:	461a      	mov	r2, r3
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	3301      	adds	r3, #1
 800d548:	617b      	str	r3, [r7, #20]
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d550:	d80c      	bhi.n	800d56c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d568:	d0ec      	beq.n	800d544 <USB_StopHost+0xb0>
 800d56a:	e000      	b.n	800d56e <USB_StopHost+0xda>
        break;
 800d56c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	3301      	adds	r3, #1
 800d572:	613b      	str	r3, [r7, #16]
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	2b0f      	cmp	r3, #15
 800d578:	d9c7      	bls.n	800d50a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d580:	461a      	mov	r2, r3
 800d582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d586:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d58e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff f907 	bl	800c7a4 <USB_EnableGlobalInt>

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d5a4:	4904      	ldr	r1, [pc, #16]	; (800d5b8 <MX_FATFS_Init+0x18>)
 800d5a6:	4805      	ldr	r0, [pc, #20]	; (800d5bc <MX_FATFS_Init+0x1c>)
 800d5a8:	f002 f8d8 	bl	800f75c <FATFS_LinkDriver>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	4b03      	ldr	r3, [pc, #12]	; (800d5c0 <MX_FATFS_Init+0x20>)
 800d5b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5b4:	bf00      	nop
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20001064 	.word	0x20001064
 800d5bc:	08014664 	.word	0x08014664
 800d5c0:	20001060 	.word	0x20001060

0800d5c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5ce:	f000 f879 	bl	800d6c4 <BSP_SD_IsDetected>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d001      	beq.n	800d5dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d5d8:	2302      	movs	r3, #2
 800d5da:	e012      	b.n	800d602 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d5dc:	480b      	ldr	r0, [pc, #44]	; (800d60c <BSP_SD_Init+0x48>)
 800d5de:	f7fb fbcf 	bl	8008d80 <HAL_SD_Init>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d109      	bne.n	800d600 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d5ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d5f0:	4806      	ldr	r0, [pc, #24]	; (800d60c <BSP_SD_Init+0x48>)
 800d5f2:	f7fc f9af 	bl	8009954 <HAL_SD_ConfigWideBusOperation>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d600:	79fb      	ldrb	r3, [r7, #7]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	20000aec 	.word	0x20000aec

0800d610 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af02      	add	r7, sp, #8
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	68f9      	ldr	r1, [r7, #12]
 800d62c:	4806      	ldr	r0, [pc, #24]	; (800d648 <BSP_SD_ReadBlocks+0x38>)
 800d62e:	f7fb fc5d 	bl	8008eec <HAL_SD_ReadBlocks>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20000aec 	.word	0x20000aec

0800d64c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b088      	sub	sp, #32
 800d650:	af02      	add	r7, sp, #8
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	68f9      	ldr	r1, [r7, #12]
 800d668:	4806      	ldr	r0, [pc, #24]	; (800d684 <BSP_SD_WriteBlocks+0x38>)
 800d66a:	f7fb fe1d 	bl	80092a8 <HAL_SD_WriteBlocks>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d678:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000aec 	.word	0x20000aec

0800d688 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d68c:	4805      	ldr	r0, [pc, #20]	; (800d6a4 <BSP_SD_GetCardState+0x1c>)
 800d68e:	f7fc f9fb 	bl	8009a88 <HAL_SD_GetCardState>
 800d692:	4603      	mov	r3, r0
 800d694:	2b04      	cmp	r3, #4
 800d696:	bf14      	ite	ne
 800d698:	2301      	movne	r3, #1
 800d69a:	2300      	moveq	r3, #0
 800d69c:	b2db      	uxtb	r3, r3
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20000aec 	.word	0x20000aec

0800d6a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	4803      	ldr	r0, [pc, #12]	; (800d6c0 <BSP_SD_GetCardInfo+0x18>)
 800d6b4:	f7fc f922 	bl	80098fc <HAL_SD_GetCardInfo>
}
 800d6b8:	bf00      	nop
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20000aec 	.word	0x20000aec

0800d6c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d6ce:	f000 f80b 	bl	800d6e8 <BSP_PlatformIsDetected>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	b2db      	uxtb	r3, r3
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d6f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6f6:	4806      	ldr	r0, [pc, #24]	; (800d710 <BSP_PlatformIsDetected+0x28>)
 800d6f8:	f7f7 f8a2 	bl	8004840 <HAL_GPIO_ReadPin>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d702:	2300      	movs	r3, #0
 800d704:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d706:	79fb      	ldrb	r3, [r7, #7]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	40020800 	.word	0x40020800

0800d714 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	4603      	mov	r3, r0
 800d71c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d71e:	4b0b      	ldr	r3, [pc, #44]	; (800d74c <SD_CheckStatus+0x38>)
 800d720:	2201      	movs	r2, #1
 800d722:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d724:	f7ff ffb0 	bl	800d688 <BSP_SD_GetCardState>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d107      	bne.n	800d73e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d72e:	4b07      	ldr	r3, [pc, #28]	; (800d74c <SD_CheckStatus+0x38>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f023 0301 	bic.w	r3, r3, #1
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b04      	ldr	r3, [pc, #16]	; (800d74c <SD_CheckStatus+0x38>)
 800d73c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d73e:	4b03      	ldr	r3, [pc, #12]	; (800d74c <SD_CheckStatus+0x38>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	b2db      	uxtb	r3, r3
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20000009 	.word	0x20000009

0800d750 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d75a:	4b0b      	ldr	r3, [pc, #44]	; (800d788 <SD_initialize+0x38>)
 800d75c:	2201      	movs	r2, #1
 800d75e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d760:	f7ff ff30 	bl	800d5c4 <BSP_SD_Init>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d107      	bne.n	800d77a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff ffd1 	bl	800d714 <SD_CheckStatus>
 800d772:	4603      	mov	r3, r0
 800d774:	461a      	mov	r2, r3
 800d776:	4b04      	ldr	r3, [pc, #16]	; (800d788 <SD_initialize+0x38>)
 800d778:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d77a:	4b03      	ldr	r3, [pc, #12]	; (800d788 <SD_initialize+0x38>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	b2db      	uxtb	r3, r3
}
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20000009 	.word	0x20000009

0800d78c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d796:	79fb      	ldrb	r3, [r7, #7]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff ffbb 	bl	800d714 <SD_CheckStatus>
 800d79e:	4603      	mov	r3, r0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
 800d7b2:	603b      	str	r3, [r7, #0]
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7c0:	683a      	ldr	r2, [r7, #0]
 800d7c2:	6879      	ldr	r1, [r7, #4]
 800d7c4:	68b8      	ldr	r0, [r7, #8]
 800d7c6:	f7ff ff23 	bl	800d610 <BSP_SD_ReadBlocks>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d7d0:	bf00      	nop
 800d7d2:	f7ff ff59 	bl	800d688 <BSP_SD_GetCardState>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1fa      	bne.n	800d7d2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3718      	adds	r7, #24
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b086      	sub	sp, #24
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
 800d7f4:	603b      	str	r3, [r7, #0]
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	68b8      	ldr	r0, [r7, #8]
 800d808:	f7ff ff20 	bl	800d64c <BSP_SD_WriteBlocks>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d107      	bne.n	800d822 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d812:	bf00      	nop
 800d814:	f7ff ff38 	bl	800d688 <BSP_SD_GetCardState>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1fa      	bne.n	800d814 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d822:	7dfb      	ldrb	r3, [r7, #23]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3718      	adds	r7, #24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08c      	sub	sp, #48	; 0x30
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	603a      	str	r2, [r7, #0]
 800d836:	71fb      	strb	r3, [r7, #7]
 800d838:	460b      	mov	r3, r1
 800d83a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d842:	4b25      	ldr	r3, [pc, #148]	; (800d8d8 <SD_ioctl+0xac>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <SD_ioctl+0x28>
 800d850:	2303      	movs	r3, #3
 800d852:	e03c      	b.n	800d8ce <SD_ioctl+0xa2>

  switch (cmd)
 800d854:	79bb      	ldrb	r3, [r7, #6]
 800d856:	2b03      	cmp	r3, #3
 800d858:	d834      	bhi.n	800d8c4 <SD_ioctl+0x98>
 800d85a:	a201      	add	r2, pc, #4	; (adr r2, 800d860 <SD_ioctl+0x34>)
 800d85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d860:	0800d871 	.word	0x0800d871
 800d864:	0800d879 	.word	0x0800d879
 800d868:	0800d891 	.word	0x0800d891
 800d86c:	0800d8ab 	.word	0x0800d8ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d876:	e028      	b.n	800d8ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d878:	f107 030c 	add.w	r3, r7, #12
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff ff13 	bl	800d6a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d88e:	e01c      	b.n	800d8ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff ff07 	bl	800d6a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8a8:	e00f      	b.n	800d8ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8aa:	f107 030c 	add.w	r3, r7, #12
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fefa 	bl	800d6a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	0a5a      	lsrs	r2, r3, #9
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8c2:	e002      	b.n	800d8ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8c4:	2304      	movs	r3, #4
 800d8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3730      	adds	r7, #48	; 0x30
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20000009 	.word	0x20000009

0800d8dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d8dc:	b590      	push	{r4, r7, lr}
 800d8de:	b089      	sub	sp, #36	; 0x24
 800d8e0:	af04      	add	r7, sp, #16
 800d8e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	2102      	movs	r1, #2
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fc66 	bl	800e1bc <USBH_FindInterface>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	2bff      	cmp	r3, #255	; 0xff
 800d8f8:	d002      	beq.n	800d900 <USBH_CDC_InterfaceInit+0x24>
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d901      	bls.n	800d904 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d900:	2302      	movs	r3, #2
 800d902:	e13d      	b.n	800db80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 fc3b 	bl	800e184 <USBH_SelectInterface>
 800d90e:	4603      	mov	r3, r0
 800d910:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d912:	7bbb      	ldrb	r3, [r7, #14]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d918:	2302      	movs	r3, #2
 800d91a:	e131      	b.n	800db80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d922:	2050      	movs	r0, #80	; 0x50
 800d924:	f003 ff3a 	bl	801179c <malloc>
 800d928:	4603      	mov	r3, r0
 800d92a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d932:	69db      	ldr	r3, [r3, #28]
 800d934:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d93c:	2302      	movs	r3, #2
 800d93e:	e11f      	b.n	800db80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d940:	2250      	movs	r2, #80	; 0x50
 800d942:	2100      	movs	r1, #0
 800d944:	68b8      	ldr	r0, [r7, #8]
 800d946:	f003 ff47 	bl	80117d8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	211a      	movs	r1, #26
 800d950:	fb01 f303 	mul.w	r3, r1, r3
 800d954:	4413      	add	r3, r2
 800d956:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	da15      	bge.n	800d98e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d962:	7bfb      	ldrb	r3, [r7, #15]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	211a      	movs	r1, #26
 800d968:	fb01 f303 	mul.w	r3, r1, r3
 800d96c:	4413      	add	r3, r2
 800d96e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d972:	781a      	ldrb	r2, [r3, #0]
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	211a      	movs	r1, #26
 800d97e:	fb01 f303 	mul.w	r3, r1, r3
 800d982:	4413      	add	r3, r2
 800d984:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d988:	881a      	ldrh	r2, [r3, #0]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	785b      	ldrb	r3, [r3, #1]
 800d992:	4619      	mov	r1, r3
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 fe32 	bl	800f5fe <USBH_AllocPipe>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	7819      	ldrb	r1, [r3, #0]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	7858      	ldrb	r0, [r3, #1]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	8952      	ldrh	r2, [r2, #10]
 800d9ba:	9202      	str	r2, [sp, #8]
 800d9bc:	2203      	movs	r2, #3
 800d9be:	9201      	str	r2, [sp, #4]
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	4623      	mov	r3, r4
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f001 fdea 	bl	800f5a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f002 f949 	bl	800fc6c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d9da:	2300      	movs	r3, #0
 800d9dc:	2200      	movs	r2, #0
 800d9de:	210a      	movs	r1, #10
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fbeb 	bl	800e1bc <USBH_FindInterface>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d9ea:	7bfb      	ldrb	r3, [r7, #15]
 800d9ec:	2bff      	cmp	r3, #255	; 0xff
 800d9ee:	d002      	beq.n	800d9f6 <USBH_CDC_InterfaceInit+0x11a>
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d901      	bls.n	800d9fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d9f6:	2302      	movs	r3, #2
 800d9f8:	e0c2      	b.n	800db80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	211a      	movs	r1, #26
 800da00:	fb01 f303 	mul.w	r3, r1, r3
 800da04:	4413      	add	r3, r2
 800da06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b25b      	sxtb	r3, r3
 800da0e:	2b00      	cmp	r3, #0
 800da10:	da16      	bge.n	800da40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da12:	7bfb      	ldrb	r3, [r7, #15]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	211a      	movs	r1, #26
 800da18:	fb01 f303 	mul.w	r3, r1, r3
 800da1c:	4413      	add	r3, r2
 800da1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da22:	781a      	ldrb	r2, [r3, #0]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da28:	7bfb      	ldrb	r3, [r7, #15]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	211a      	movs	r1, #26
 800da2e:	fb01 f303 	mul.w	r3, r1, r3
 800da32:	4413      	add	r3, r2
 800da34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da38:	881a      	ldrh	r2, [r3, #0]
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	835a      	strh	r2, [r3, #26]
 800da3e:	e015      	b.n	800da6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da40:	7bfb      	ldrb	r3, [r7, #15]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	211a      	movs	r1, #26
 800da46:	fb01 f303 	mul.w	r3, r1, r3
 800da4a:	4413      	add	r3, r2
 800da4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da50:	781a      	ldrb	r2, [r3, #0]
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	211a      	movs	r1, #26
 800da5c:	fb01 f303 	mul.w	r3, r1, r3
 800da60:	4413      	add	r3, r2
 800da62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da66:	881a      	ldrh	r2, [r3, #0]
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	211a      	movs	r1, #26
 800da72:	fb01 f303 	mul.w	r3, r1, r3
 800da76:	4413      	add	r3, r2
 800da78:	f203 3356 	addw	r3, r3, #854	; 0x356
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	b25b      	sxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	da16      	bge.n	800dab2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800da84:	7bfb      	ldrb	r3, [r7, #15]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	211a      	movs	r1, #26
 800da8a:	fb01 f303 	mul.w	r3, r1, r3
 800da8e:	4413      	add	r3, r2
 800da90:	f203 3356 	addw	r3, r3, #854	; 0x356
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	211a      	movs	r1, #26
 800daa0:	fb01 f303 	mul.w	r3, r1, r3
 800daa4:	4413      	add	r3, r2
 800daa6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800daaa:	881a      	ldrh	r2, [r3, #0]
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	835a      	strh	r2, [r3, #26]
 800dab0:	e015      	b.n	800dade <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	211a      	movs	r1, #26
 800dab8:	fb01 f303 	mul.w	r3, r1, r3
 800dabc:	4413      	add	r3, r2
 800dabe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dac2:	781a      	ldrb	r2, [r3, #0]
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	211a      	movs	r1, #26
 800dace:	fb01 f303 	mul.w	r3, r1, r3
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dad8:	881a      	ldrh	r2, [r3, #0]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	7b9b      	ldrb	r3, [r3, #14]
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f001 fd8a 	bl	800f5fe <USBH_AllocPipe>
 800daea:	4603      	mov	r3, r0
 800daec:	461a      	mov	r2, r3
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	7bdb      	ldrb	r3, [r3, #15]
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f001 fd80 	bl	800f5fe <USBH_AllocPipe>
 800dafe:	4603      	mov	r3, r0
 800db00:	461a      	mov	r2, r3
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	7b59      	ldrb	r1, [r3, #13]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	7b98      	ldrb	r0, [r3, #14]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	8b12      	ldrh	r2, [r2, #24]
 800db1e:	9202      	str	r2, [sp, #8]
 800db20:	2202      	movs	r2, #2
 800db22:	9201      	str	r2, [sp, #4]
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	4623      	mov	r3, r4
 800db28:	4602      	mov	r2, r0
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f001 fd38 	bl	800f5a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	7b19      	ldrb	r1, [r3, #12]
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	7bd8      	ldrb	r0, [r3, #15]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	8b52      	ldrh	r2, [r2, #26]
 800db48:	9202      	str	r2, [sp, #8]
 800db4a:	2202      	movs	r2, #2
 800db4c:	9201      	str	r2, [sp, #4]
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	4623      	mov	r3, r4
 800db52:	4602      	mov	r2, r0
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f001 fd23 	bl	800f5a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	7b5b      	ldrb	r3, [r3, #13]
 800db66:	2200      	movs	r2, #0
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f002 f87e 	bl	800fc6c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	7b1b      	ldrb	r3, [r3, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f002 f877 	bl	800fc6c <USBH_LL_SetToggle>

  return USBH_OK;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	bd90      	pop	{r4, r7, pc}

0800db88 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db96:	69db      	ldr	r3, [r3, #28]
 800db98:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00e      	beq.n	800dbc0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f001 fd18 	bl	800f5de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 fd43 	bl	800f640 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	7b1b      	ldrb	r3, [r3, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00e      	beq.n	800dbe6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	7b1b      	ldrb	r3, [r3, #12]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f001 fd05 	bl	800f5de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	7b1b      	ldrb	r3, [r3, #12]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f001 fd30 	bl	800f640 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	7b5b      	ldrb	r3, [r3, #13]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00e      	beq.n	800dc0c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	7b5b      	ldrb	r3, [r3, #13]
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f001 fcf2 	bl	800f5de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	7b5b      	ldrb	r3, [r3, #13]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f001 fd1d 	bl	800f640 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00b      	beq.n	800dc30 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc1e:	69db      	ldr	r3, [r3, #28]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f003 fdc3 	bl	80117ac <free>
    phost->pActiveClass->pData = 0U;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b084      	sub	sp, #16
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3340      	adds	r3, #64	; 0x40
 800dc50:	4619      	mov	r1, r3
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f8b1 	bl	800ddba <GetLineCoding>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dc5c:	7afb      	ldrb	r3, [r7, #11]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d105      	bne.n	800dc6e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc68:	2102      	movs	r1, #2
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dc6e:	7afb      	ldrb	r3, [r7, #11]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3710      	adds	r7, #16
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dc80:	2301      	movs	r3, #1
 800dc82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dc98:	2b04      	cmp	r3, #4
 800dc9a:	d877      	bhi.n	800dd8c <USBH_CDC_Process+0x114>
 800dc9c:	a201      	add	r2, pc, #4	; (adr r2, 800dca4 <USBH_CDC_Process+0x2c>)
 800dc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca2:	bf00      	nop
 800dca4:	0800dcb9 	.word	0x0800dcb9
 800dca8:	0800dcbf 	.word	0x0800dcbf
 800dcac:	0800dcef 	.word	0x0800dcef
 800dcb0:	0800dd63 	.word	0x0800dd63
 800dcb4:	0800dd71 	.word	0x0800dd71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
      break;
 800dcbc:	e06d      	b.n	800dd9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f897 	bl	800ddf8 <SetLineCoding>
 800dcca:	4603      	mov	r3, r0
 800dccc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dcce:	7bbb      	ldrb	r3, [r7, #14]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d104      	bne.n	800dcde <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dcdc:	e058      	b.n	800dd90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800dcde:	7bbb      	ldrb	r3, [r7, #14]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d055      	beq.n	800dd90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2204      	movs	r2, #4
 800dce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dcec:	e050      	b.n	800dd90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	3340      	adds	r3, #64	; 0x40
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f860 	bl	800ddba <GetLineCoding>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d126      	bne.n	800dd52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd16:	791b      	ldrb	r3, [r3, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d13b      	bne.n	800dd94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d133      	bne.n	800dd94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d12b      	bne.n	800dd94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d124      	bne.n	800dd94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f958 	bl	800e000 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dd50:	e020      	b.n	800dd94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dd52:	7bbb      	ldrb	r3, [r7, #14]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d01d      	beq.n	800dd94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2204      	movs	r2, #4
 800dd5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dd60:	e018      	b.n	800dd94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f867 	bl	800de36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f8da 	bl	800df22 <CDC_ProcessReception>
      break;
 800dd6e:	e014      	b.n	800dd9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dd70:	2100      	movs	r1, #0
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 ffe3 	bl	800ed3e <USBH_ClrFeature>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10a      	bne.n	800dd98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800dd8a:	e005      	b.n	800dd98 <USBH_CDC_Process+0x120>

    default:
      break;
 800dd8c:	bf00      	nop
 800dd8e:	e004      	b.n	800dd9a <USBH_CDC_Process+0x122>
      break;
 800dd90:	bf00      	nop
 800dd92:	e002      	b.n	800dd9a <USBH_CDC_Process+0x122>
      break;
 800dd94:	bf00      	nop
 800dd96:	e000      	b.n	800dd9a <USBH_CDC_Process+0x122>
      break;
 800dd98:	bf00      	nop

  }

  return status;
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	22a1      	movs	r2, #161	; 0xa1
 800ddc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2221      	movs	r2, #33	; 0x21
 800ddce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2207      	movs	r2, #7
 800dde0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2207      	movs	r2, #7
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f001 f988 	bl	800f0fe <USBH_CtlReq>
 800ddee:	4603      	mov	r3, r0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2221      	movs	r2, #33	; 0x21
 800de06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2220      	movs	r2, #32
 800de0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2207      	movs	r2, #7
 800de1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	2207      	movs	r2, #7
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f001 f969 	bl	800f0fe <USBH_CtlReq>
 800de2c:	4603      	mov	r3, r0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b086      	sub	sp, #24
 800de3a:	af02      	add	r7, sp, #8
 800de3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de44:	69db      	ldr	r3, [r3, #28]
 800de46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800de48:	2300      	movs	r3, #0
 800de4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800de52:	2b01      	cmp	r3, #1
 800de54:	d002      	beq.n	800de5c <CDC_ProcessTransmission+0x26>
 800de56:	2b02      	cmp	r3, #2
 800de58:	d023      	beq.n	800dea2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800de5a:	e05e      	b.n	800df1a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	8b12      	ldrh	r2, [r2, #24]
 800de64:	4293      	cmp	r3, r2
 800de66:	d90b      	bls.n	800de80 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	69d9      	ldr	r1, [r3, #28]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	8b1a      	ldrh	r2, [r3, #24]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	7b5b      	ldrb	r3, [r3, #13]
 800de74:	2001      	movs	r0, #1
 800de76:	9000      	str	r0, [sp, #0]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f001 fb4e 	bl	800f51a <USBH_BulkSendData>
 800de7e:	e00b      	b.n	800de98 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800de88:	b29a      	uxth	r2, r3
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	7b5b      	ldrb	r3, [r3, #13]
 800de8e:	2001      	movs	r0, #1
 800de90:	9000      	str	r0, [sp, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 fb41 	bl	800f51a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2202      	movs	r2, #2
 800de9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dea0:	e03b      	b.n	800df1a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	7b5b      	ldrb	r3, [r3, #13]
 800dea6:	4619      	mov	r1, r3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f001 feb5 	bl	800fc18 <USBH_LL_GetURBState>
 800deae:	4603      	mov	r3, r0
 800deb0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800deb2:	7afb      	ldrb	r3, [r7, #11]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d128      	bne.n	800df0a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	8b12      	ldrh	r2, [r2, #24]
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d90e      	bls.n	800dee2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	8b12      	ldrh	r2, [r2, #24]
 800decc:	1a9a      	subs	r2, r3, r2
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	8b12      	ldrh	r2, [r2, #24]
 800deda:	441a      	add	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	61da      	str	r2, [r3, #28]
 800dee0:	e002      	b.n	800dee8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	d004      	beq.n	800defa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2201      	movs	r2, #1
 800def4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800def8:	e00e      	b.n	800df18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 f868 	bl	800dfd8 <USBH_CDC_TransmitCallback>
      break;
 800df08:	e006      	b.n	800df18 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800df0a:	7afb      	ldrb	r3, [r7, #11]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d103      	bne.n	800df18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df18:	bf00      	nop
  }
}
 800df1a:	bf00      	nop
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df30:	69db      	ldr	r3, [r3, #28]
 800df32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df34:	2300      	movs	r3, #0
 800df36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d002      	beq.n	800df48 <CDC_ProcessReception+0x26>
 800df42:	2b04      	cmp	r3, #4
 800df44:	d00e      	beq.n	800df64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800df46:	e043      	b.n	800dfd0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	6a19      	ldr	r1, [r3, #32]
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	8b5a      	ldrh	r2, [r3, #26]
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	7b1b      	ldrb	r3, [r3, #12]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f001 fb05 	bl	800f564 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	2204      	movs	r2, #4
 800df5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800df62:	e035      	b.n	800dfd0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	7b1b      	ldrb	r3, [r3, #12]
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f001 fe54 	bl	800fc18 <USBH_LL_GetURBState>
 800df70:	4603      	mov	r3, r0
 800df72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800df74:	7cfb      	ldrb	r3, [r7, #19]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d129      	bne.n	800dfce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	7b1b      	ldrb	r3, [r3, #12]
 800df7e:	4619      	mov	r1, r3
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f001 fdb7 	bl	800faf4 <USBH_LL_GetLastXferSize>
 800df86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d016      	beq.n	800dfc0 <CDC_ProcessReception+0x9e>
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	8b5b      	ldrh	r3, [r3, #26]
 800df96:	461a      	mov	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d910      	bls.n	800dfc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	1ad2      	subs	r2, r2, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	6a1a      	ldr	r2, [r3, #32]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	441a      	add	r2, r3
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2203      	movs	r2, #3
 800dfba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dfbe:	e006      	b.n	800dfce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f80f 	bl	800dfec <USBH_CDC_ReceiveCallback>
      break;
 800dfce:	bf00      	nop
  }
}
 800dfd0:	bf00      	nop
 800dfd2:	3718      	adds	r7, #24
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e008:	bf00      	nop
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e028:	2302      	movs	r3, #2
 800e02a:	e029      	b.n	800e080 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	79fa      	ldrb	r2, [r7, #7]
 800e030:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 f81f 	bl	800e088 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d003      	beq.n	800e078 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f001 fc87 	bl	800f98c <USBH_LL_Init>

  return USBH_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e094:	2300      	movs	r3, #0
 800e096:	60fb      	str	r3, [r7, #12]
 800e098:	e009      	b.n	800e0ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	33e0      	adds	r3, #224	; 0xe0
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4413      	add	r3, r2
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b0e      	cmp	r3, #14
 800e0b2:	d9f2      	bls.n	800e09a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	60fb      	str	r3, [r7, #12]
 800e0b8:	e009      	b.n	800e0ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0d4:	d3f1      	bcc.n	800e0ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2240      	movs	r2, #64	; 0x40
 800e0fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d016      	beq.n	800e172 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d10e      	bne.n	800e16c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e154:	1c59      	adds	r1, r3, #1
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	33de      	adds	r3, #222	; 0xde
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	73fb      	strb	r3, [r7, #15]
 800e16a:	e004      	b.n	800e176 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e16c:	2302      	movs	r3, #2
 800e16e:	73fb      	strb	r3, [r7, #15]
 800e170:	e001      	b.n	800e176 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e172:	2302      	movs	r3, #2
 800e174:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e176:	7bfb      	ldrb	r3, [r7, #15]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3714      	adds	r7, #20
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	460b      	mov	r3, r1
 800e18e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d204      	bcs.n	800e1aa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	78fa      	ldrb	r2, [r7, #3]
 800e1a4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e1a8:	e001      	b.n	800e1ae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	4608      	mov	r0, r1
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	70fb      	strb	r3, [r7, #3]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	70bb      	strb	r3, [r7, #2]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e1e4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e1e6:	e025      	b.n	800e234 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ea:	221a      	movs	r2, #26
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	3302      	adds	r3, #2
 800e1f8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	795b      	ldrb	r3, [r3, #5]
 800e1fe:	78fa      	ldrb	r2, [r7, #3]
 800e200:	429a      	cmp	r2, r3
 800e202:	d002      	beq.n	800e20a <USBH_FindInterface+0x4e>
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	2bff      	cmp	r3, #255	; 0xff
 800e208:	d111      	bne.n	800e22e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e20e:	78ba      	ldrb	r2, [r7, #2]
 800e210:	429a      	cmp	r2, r3
 800e212:	d002      	beq.n	800e21a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e214:	78bb      	ldrb	r3, [r7, #2]
 800e216:	2bff      	cmp	r3, #255	; 0xff
 800e218:	d109      	bne.n	800e22e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e21e:	787a      	ldrb	r2, [r7, #1]
 800e220:	429a      	cmp	r2, r3
 800e222:	d002      	beq.n	800e22a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e224:	787b      	ldrb	r3, [r7, #1]
 800e226:	2bff      	cmp	r3, #255	; 0xff
 800e228:	d101      	bne.n	800e22e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e22a:	7dfb      	ldrb	r3, [r7, #23]
 800e22c:	e006      	b.n	800e23c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
 800e230:	3301      	adds	r3, #1
 800e232:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e234:	7dfb      	ldrb	r3, [r7, #23]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d9d6      	bls.n	800e1e8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e23a:	23ff      	movs	r3, #255	; 0xff
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	371c      	adds	r7, #28
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f001 fbd7 	bl	800fa04 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e256:	2101      	movs	r1, #1
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f001 fcf0 	bl	800fc3e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b088      	sub	sp, #32
 800e26c:	af04      	add	r7, sp, #16
 800e26e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e270:	2302      	movs	r3, #2
 800e272:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b01      	cmp	r3, #1
 800e282:	d102      	bne.n	800e28a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2203      	movs	r2, #3
 800e288:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b0b      	cmp	r3, #11
 800e292:	f200 81b3 	bhi.w	800e5fc <USBH_Process+0x394>
 800e296:	a201      	add	r2, pc, #4	; (adr r2, 800e29c <USBH_Process+0x34>)
 800e298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29c:	0800e2cd 	.word	0x0800e2cd
 800e2a0:	0800e2ff 	.word	0x0800e2ff
 800e2a4:	0800e367 	.word	0x0800e367
 800e2a8:	0800e597 	.word	0x0800e597
 800e2ac:	0800e5fd 	.word	0x0800e5fd
 800e2b0:	0800e40b 	.word	0x0800e40b
 800e2b4:	0800e53d 	.word	0x0800e53d
 800e2b8:	0800e441 	.word	0x0800e441
 800e2bc:	0800e461 	.word	0x0800e461
 800e2c0:	0800e481 	.word	0x0800e481
 800e2c4:	0800e4af 	.word	0x0800e4af
 800e2c8:	0800e57f 	.word	0x0800e57f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 8193 	beq.w	800e600 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e2e0:	20c8      	movs	r0, #200	; 0xc8
 800e2e2:	f001 fcf3 	bl	800fccc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f001 fbe9 	bl	800fabe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e2fc:	e180      	b.n	800e600 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e304:	2b01      	cmp	r3, #1
 800e306:	d107      	bne.n	800e318 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2202      	movs	r2, #2
 800e314:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e316:	e182      	b.n	800e61e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e31e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e322:	d914      	bls.n	800e34e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e32a:	3301      	adds	r3, #1
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e33a:	2b03      	cmp	r3, #3
 800e33c:	d903      	bls.n	800e346 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	220d      	movs	r2, #13
 800e342:	701a      	strb	r2, [r3, #0]
      break;
 800e344:	e16b      	b.n	800e61e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	701a      	strb	r2, [r3, #0]
      break;
 800e34c:	e167      	b.n	800e61e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e354:	f103 020a 	add.w	r2, r3, #10
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e35e:	200a      	movs	r0, #10
 800e360:	f001 fcb4 	bl	800fccc <USBH_Delay>
      break;
 800e364:	e15b      	b.n	800e61e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d005      	beq.n	800e37c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e376:	2104      	movs	r1, #4
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e37c:	2064      	movs	r0, #100	; 0x64
 800e37e:	f001 fca5 	bl	800fccc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f001 fb74 	bl	800fa70 <USBH_LL_GetSpeed>
 800e388:	4603      	mov	r3, r0
 800e38a:	461a      	mov	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2205      	movs	r2, #5
 800e396:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e398:	2100      	movs	r1, #0
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f001 f92f 	bl	800f5fe <USBH_AllocPipe>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e3a8:	2180      	movs	r1, #128	; 0x80
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f001 f927 	bl	800f5fe <USBH_AllocPipe>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7919      	ldrb	r1, [r3, #4]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e3cc:	b292      	uxth	r2, r2
 800e3ce:	9202      	str	r2, [sp, #8]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	9201      	str	r2, [sp, #4]
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2280      	movs	r2, #128	; 0x80
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f001 f8e0 	bl	800f5a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	7959      	ldrb	r1, [r3, #5]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e3f4:	b292      	uxth	r2, r2
 800e3f6:	9202      	str	r2, [sp, #8]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	9201      	str	r2, [sp, #4]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	4603      	mov	r3, r0
 800e400:	2200      	movs	r2, #0
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f001 f8cc 	bl	800f5a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e408:	e109      	b.n	800e61e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f90c 	bl	800e628 <USBH_HandleEnum>
 800e410:	4603      	mov	r3, r0
 800e412:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e414:	7bbb      	ldrb	r3, [r7, #14]
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f040 80f3 	bne.w	800e604 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d103      	bne.n	800e438 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2208      	movs	r2, #8
 800e434:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e436:	e0e5      	b.n	800e604 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2207      	movs	r2, #7
 800e43c:	701a      	strb	r2, [r3, #0]
      break;
 800e43e:	e0e1      	b.n	800e604 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 80de 	beq.w	800e608 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e452:	2101      	movs	r1, #1
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2208      	movs	r2, #8
 800e45c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e45e:	e0d3      	b.n	800e608 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e466:	b29b      	uxth	r3, r3
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fc20 	bl	800ecb0 <USBH_SetCfg>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	f040 80ca 	bne.w	800e60c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2209      	movs	r2, #9
 800e47c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e47e:	e0c5      	b.n	800e60c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e486:	f003 0320 	and.w	r3, r3, #32
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00b      	beq.n	800e4a6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e48e:	2101      	movs	r1, #1
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fc30 	bl	800ecf6 <USBH_SetFeature>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f040 80b9 	bne.w	800e610 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	220a      	movs	r2, #10
 800e4a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4a4:	e0b4      	b.n	800e610 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	220a      	movs	r2, #10
 800e4aa:	701a      	strb	r2, [r3, #0]
      break;
 800e4ac:	e0b0      	b.n	800e610 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 80ad 	beq.w	800e614 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	73fb      	strb	r3, [r7, #15]
 800e4c6:	e016      	b.n	800e4f6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e4c8:	7bfa      	ldrb	r2, [r7, #15]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	32de      	adds	r2, #222	; 0xde
 800e4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d2:	791a      	ldrb	r2, [r3, #4]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d108      	bne.n	800e4f0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e4de:	7bfa      	ldrb	r2, [r7, #15]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	32de      	adds	r2, #222	; 0xde
 800e4e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e4ee:	e005      	b.n	800e4fc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	73fb      	strb	r3, [r7, #15]
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d0e5      	beq.n	800e4c8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e502:	2b00      	cmp	r3, #0
 800e504:	d016      	beq.n	800e534 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d109      	bne.n	800e52c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2206      	movs	r2, #6
 800e51c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e524:	2103      	movs	r1, #3
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e52a:	e073      	b.n	800e614 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	220d      	movs	r2, #13
 800e530:	701a      	strb	r2, [r3, #0]
      break;
 800e532:	e06f      	b.n	800e614 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	220d      	movs	r2, #13
 800e538:	701a      	strb	r2, [r3, #0]
      break;
 800e53a:	e06b      	b.n	800e614 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e542:	2b00      	cmp	r3, #0
 800e544:	d017      	beq.n	800e576 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	4798      	blx	r3
 800e552:	4603      	mov	r3, r0
 800e554:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e556:	7bbb      	ldrb	r3, [r7, #14]
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d103      	bne.n	800e566 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	220b      	movs	r2, #11
 800e562:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e564:	e058      	b.n	800e618 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e566:	7bbb      	ldrb	r3, [r7, #14]
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d154      	bne.n	800e618 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	220d      	movs	r2, #13
 800e572:	701a      	strb	r2, [r3, #0]
      break;
 800e574:	e050      	b.n	800e618 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	220d      	movs	r2, #13
 800e57a:	701a      	strb	r2, [r3, #0]
      break;
 800e57c:	e04c      	b.n	800e618 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d049      	beq.n	800e61c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	4798      	blx	r3
      }
      break;
 800e594:	e042      	b.n	800e61c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fd72 	bl	800e088 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d009      	beq.n	800e5c2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d005      	beq.n	800e5d8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5d2:	2105      	movs	r1, #5
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d107      	bne.n	800e5f4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7ff fe2b 	bl	800e248 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e5f2:	e014      	b.n	800e61e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f001 fa05 	bl	800fa04 <USBH_LL_Start>
      break;
 800e5fa:	e010      	b.n	800e61e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e5fc:	bf00      	nop
 800e5fe:	e00e      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e600:	bf00      	nop
 800e602:	e00c      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e604:	bf00      	nop
 800e606:	e00a      	b.n	800e61e <USBH_Process+0x3b6>
    break;
 800e608:	bf00      	nop
 800e60a:	e008      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e60c:	bf00      	nop
 800e60e:	e006      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e610:	bf00      	nop
 800e612:	e004      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e614:	bf00      	nop
 800e616:	e002      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e618:	bf00      	nop
 800e61a:	e000      	b.n	800e61e <USBH_Process+0x3b6>
      break;
 800e61c:	bf00      	nop
  }
  return USBH_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b088      	sub	sp, #32
 800e62c:	af04      	add	r7, sp, #16
 800e62e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e630:	2301      	movs	r3, #1
 800e632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e634:	2301      	movs	r3, #1
 800e636:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	2b07      	cmp	r3, #7
 800e63e:	f200 81c1 	bhi.w	800e9c4 <USBH_HandleEnum+0x39c>
 800e642:	a201      	add	r2, pc, #4	; (adr r2, 800e648 <USBH_HandleEnum+0x20>)
 800e644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e648:	0800e669 	.word	0x0800e669
 800e64c:	0800e727 	.word	0x0800e727
 800e650:	0800e791 	.word	0x0800e791
 800e654:	0800e81f 	.word	0x0800e81f
 800e658:	0800e889 	.word	0x0800e889
 800e65c:	0800e8f9 	.word	0x0800e8f9
 800e660:	0800e93f 	.word	0x0800e93f
 800e664:	0800e985 	.word	0x0800e985
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e668:	2108      	movs	r1, #8
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fa50 	bl	800eb10 <USBH_Get_DevDesc>
 800e670:	4603      	mov	r3, r0
 800e672:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e674:	7bbb      	ldrb	r3, [r7, #14]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d130      	bne.n	800e6dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	7919      	ldrb	r1, [r3, #4]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e69e:	b292      	uxth	r2, r2
 800e6a0:	9202      	str	r2, [sp, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	9201      	str	r2, [sp, #4]
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2280      	movs	r2, #128	; 0x80
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 ff77 	bl	800f5a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	7959      	ldrb	r1, [r3, #5]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e6c6:	b292      	uxth	r2, r2
 800e6c8:	9202      	str	r2, [sp, #8]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	9201      	str	r2, [sp, #4]
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 ff63 	bl	800f5a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e6da:	e175      	b.n	800e9c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6dc:	7bbb      	ldrb	r3, [r7, #14]
 800e6de:	2b03      	cmp	r3, #3
 800e6e0:	f040 8172 	bne.w	800e9c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6fa:	2b03      	cmp	r3, #3
 800e6fc:	d903      	bls.n	800e706 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	220d      	movs	r2, #13
 800e702:	701a      	strb	r2, [r3, #0]
      break;
 800e704:	e160      	b.n	800e9c8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	795b      	ldrb	r3, [r3, #5]
 800e70a:	4619      	mov	r1, r3
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 ff97 	bl	800f640 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	791b      	ldrb	r3, [r3, #4]
 800e716:	4619      	mov	r1, r3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 ff91 	bl	800f640 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	701a      	strb	r2, [r3, #0]
      break;
 800e724:	e150      	b.n	800e9c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e726:	2112      	movs	r1, #18
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f9f1 	bl	800eb10 <USBH_Get_DevDesc>
 800e72e:	4603      	mov	r3, r0
 800e730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d103      	bne.n	800e740 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2202      	movs	r2, #2
 800e73c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e73e:	e145      	b.n	800e9cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e740:	7bbb      	ldrb	r3, [r7, #14]
 800e742:	2b03      	cmp	r3, #3
 800e744:	f040 8142 	bne.w	800e9cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e74e:	3301      	adds	r3, #1
 800e750:	b2da      	uxtb	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e75e:	2b03      	cmp	r3, #3
 800e760:	d903      	bls.n	800e76a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	220d      	movs	r2, #13
 800e766:	701a      	strb	r2, [r3, #0]
      break;
 800e768:	e130      	b.n	800e9cc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	795b      	ldrb	r3, [r3, #5]
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 ff65 	bl	800f640 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	791b      	ldrb	r3, [r3, #4]
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 ff5f 	bl	800f640 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	701a      	strb	r2, [r3, #0]
      break;
 800e78e:	e11d      	b.n	800e9cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e790:	2101      	movs	r1, #1
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fa68 	bl	800ec68 <USBH_SetAddress>
 800e798:	4603      	mov	r3, r0
 800e79a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e79c:	7bbb      	ldrb	r3, [r7, #14]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d132      	bne.n	800e808 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e7a2:	2002      	movs	r0, #2
 800e7a4:	f001 fa92 	bl	800fccc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2203      	movs	r2, #3
 800e7b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	7919      	ldrb	r1, [r3, #4]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e7ca:	b292      	uxth	r2, r2
 800e7cc:	9202      	str	r2, [sp, #8]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	9201      	str	r2, [sp, #4]
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2280      	movs	r2, #128	; 0x80
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fee1 	bl	800f5a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7959      	ldrb	r1, [r3, #5]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e7f2:	b292      	uxth	r2, r2
 800e7f4:	9202      	str	r2, [sp, #8]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	9201      	str	r2, [sp, #4]
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2200      	movs	r2, #0
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fecd 	bl	800f5a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e806:	e0e3      	b.n	800e9d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e808:	7bbb      	ldrb	r3, [r7, #14]
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	f040 80e0 	bne.w	800e9d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	220d      	movs	r2, #13
 800e814:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	705a      	strb	r2, [r3, #1]
      break;
 800e81c:	e0d8      	b.n	800e9d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e81e:	2109      	movs	r1, #9
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f99d 	bl	800eb60 <USBH_Get_CfgDesc>
 800e826:	4603      	mov	r3, r0
 800e828:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e82a:	7bbb      	ldrb	r3, [r7, #14]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d103      	bne.n	800e838 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2204      	movs	r2, #4
 800e834:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e836:	e0cd      	b.n	800e9d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e838:	7bbb      	ldrb	r3, [r7, #14]
 800e83a:	2b03      	cmp	r3, #3
 800e83c:	f040 80ca 	bne.w	800e9d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e846:	3301      	adds	r3, #1
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e856:	2b03      	cmp	r3, #3
 800e858:	d903      	bls.n	800e862 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	220d      	movs	r2, #13
 800e85e:	701a      	strb	r2, [r3, #0]
      break;
 800e860:	e0b8      	b.n	800e9d4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	795b      	ldrb	r3, [r3, #5]
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 fee9 	bl	800f640 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	791b      	ldrb	r3, [r3, #4]
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 fee3 	bl	800f640 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	701a      	strb	r2, [r3, #0]
      break;
 800e886:	e0a5      	b.n	800e9d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f965 	bl	800eb60 <USBH_Get_CfgDesc>
 800e896:	4603      	mov	r3, r0
 800e898:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d103      	bne.n	800e8a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2205      	movs	r2, #5
 800e8a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e8a6:	e097      	b.n	800e9d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8a8:	7bbb      	ldrb	r3, [r7, #14]
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	f040 8094 	bne.w	800e9d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8c6:	2b03      	cmp	r3, #3
 800e8c8:	d903      	bls.n	800e8d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	220d      	movs	r2, #13
 800e8ce:	701a      	strb	r2, [r3, #0]
      break;
 800e8d0:	e082      	b.n	800e9d8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	795b      	ldrb	r3, [r3, #5]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 feb1 	bl	800f640 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	791b      	ldrb	r3, [r3, #4]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 feab 	bl	800f640 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	701a      	strb	r2, [r3, #0]
      break;
 800e8f6:	e06f      	b.n	800e9d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d019      	beq.n	800e936 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e90e:	23ff      	movs	r3, #255	; 0xff
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f949 	bl	800eba8 <USBH_Get_StringDesc>
 800e916:	4603      	mov	r3, r0
 800e918:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e91a:	7bbb      	ldrb	r3, [r7, #14]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d103      	bne.n	800e928 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2206      	movs	r2, #6
 800e924:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e926:	e059      	b.n	800e9dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	2b03      	cmp	r3, #3
 800e92c:	d156      	bne.n	800e9dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2206      	movs	r2, #6
 800e932:	705a      	strb	r2, [r3, #1]
      break;
 800e934:	e052      	b.n	800e9dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2206      	movs	r2, #6
 800e93a:	705a      	strb	r2, [r3, #1]
      break;
 800e93c:	e04e      	b.n	800e9dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e944:	2b00      	cmp	r3, #0
 800e946:	d019      	beq.n	800e97c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e954:	23ff      	movs	r3, #255	; 0xff
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f926 	bl	800eba8 <USBH_Get_StringDesc>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e960:	7bbb      	ldrb	r3, [r7, #14]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2207      	movs	r2, #7
 800e96a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e96c:	e038      	b.n	800e9e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e96e:	7bbb      	ldrb	r3, [r7, #14]
 800e970:	2b03      	cmp	r3, #3
 800e972:	d135      	bne.n	800e9e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2207      	movs	r2, #7
 800e978:	705a      	strb	r2, [r3, #1]
      break;
 800e97a:	e031      	b.n	800e9e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2207      	movs	r2, #7
 800e980:	705a      	strb	r2, [r3, #1]
      break;
 800e982:	e02d      	b.n	800e9e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d017      	beq.n	800e9be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e99a:	23ff      	movs	r3, #255	; 0xff
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f903 	bl	800eba8 <USBH_Get_StringDesc>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e9a6:	7bbb      	ldrb	r3, [r7, #14]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d102      	bne.n	800e9b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e9b0:	e018      	b.n	800e9e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9b2:	7bbb      	ldrb	r3, [r7, #14]
 800e9b4:	2b03      	cmp	r3, #3
 800e9b6:	d115      	bne.n	800e9e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800e9bc:	e012      	b.n	800e9e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c2:	e00f      	b.n	800e9e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e9c4:	bf00      	nop
 800e9c6:	e00e      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9c8:	bf00      	nop
 800e9ca:	e00c      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9cc:	bf00      	nop
 800e9ce:	e00a      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9d0:	bf00      	nop
 800e9d2:	e008      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9d4:	bf00      	nop
 800e9d6:	e006      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9d8:	bf00      	nop
 800e9da:	e004      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9dc:	bf00      	nop
 800e9de:	e002      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9e0:	bf00      	nop
 800e9e2:	e000      	b.n	800e9e6 <USBH_HandleEnum+0x3be>
      break;
 800e9e4:	bf00      	nop
  }
  return Status;
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3710      	adds	r7, #16
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ea02:	bf00      	nop
 800ea04:	370c      	adds	r7, #12
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b082      	sub	sp, #8
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 f804 	bl	800ea32 <USBH_HandleSof>
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b0b      	cmp	r3, #11
 800ea42:	d10a      	bne.n	800ea5a <USBH_HandleSof+0x28>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d005      	beq.n	800ea5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea54:	699b      	ldr	r3, [r3, #24]
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	4798      	blx	r3
  }
}
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ea72:	bf00      	nop
}
 800ea74:	370c      	adds	r7, #12
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b083      	sub	sp, #12
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ea8e:	bf00      	nop
}
 800ea90:	370c      	adds	r7, #12
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr

0800ea9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ea9a:	b480      	push	{r7}
 800ea9c:	b083      	sub	sp, #12
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 ffa6 	bl	800fa3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	791b      	ldrb	r3, [r3, #4]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 fda3 	bl	800f640 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	795b      	ldrb	r3, [r3, #5]
 800eafe:	4619      	mov	r1, r3
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 fd9d 	bl	800f640 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	460b      	mov	r3, r1
 800eb1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800eb22:	78fb      	ldrb	r3, [r7, #3]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb2e:	2100      	movs	r1, #0
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f864 	bl	800ebfe <USBH_GetDescriptor>
 800eb36:	4603      	mov	r3, r0
 800eb38:	73fb      	strb	r3, [r7, #15]
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10a      	bne.n	800eb56 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f203 3026 	addw	r0, r3, #806	; 0x326
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	b292      	uxth	r2, r2
 800eb50:	4619      	mov	r1, r3
 800eb52:	f000 f918 	bl	800ed86 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	331c      	adds	r3, #28
 800eb70:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800eb72:	887b      	ldrh	r3, [r7, #2]
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f83d 	bl	800ebfe <USBH_GetDescriptor>
 800eb84:	4603      	mov	r3, r0
 800eb86:	72fb      	strb	r3, [r7, #11]
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d107      	bne.n	800eb9e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eb94:	887a      	ldrh	r2, [r7, #2]
 800eb96:	68f9      	ldr	r1, [r7, #12]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f000 f964 	bl	800ee66 <USBH_ParseCfgDesc>
  }

  return status;
 800eb9e:	7afb      	ldrb	r3, [r7, #11]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b088      	sub	sp, #32
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	607a      	str	r2, [r7, #4]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	72fb      	strb	r3, [r7, #11]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ebbc:	7afb      	ldrb	r3, [r7, #11]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ebc4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ebcc:	893b      	ldrh	r3, [r7, #8]
 800ebce:	9300      	str	r3, [sp, #0]
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f000 f812 	bl	800ebfe <USBH_GetDescriptor>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	75fb      	strb	r3, [r7, #23]
 800ebde:	7dfb      	ldrb	r3, [r7, #23]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d107      	bne.n	800ebf4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ebea:	893a      	ldrh	r2, [r7, #8]
 800ebec:	6879      	ldr	r1, [r7, #4]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 fa37 	bl	800f062 <USBH_ParseStringDesc>
  }

  return status;
 800ebf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b084      	sub	sp, #16
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	60f8      	str	r0, [r7, #12]
 800ec06:	607b      	str	r3, [r7, #4]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	72fb      	strb	r3, [r7, #11]
 800ec0c:	4613      	mov	r3, r2
 800ec0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	789b      	ldrb	r3, [r3, #2]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d11c      	bne.n	800ec52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ec18:	7afb      	ldrb	r3, [r7, #11]
 800ec1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2206      	movs	r2, #6
 800ec28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	893a      	ldrh	r2, [r7, #8]
 800ec2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ec30:	893b      	ldrh	r3, [r7, #8]
 800ec32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec3a:	d104      	bne.n	800ec46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f240 4209 	movw	r2, #1033	; 0x409
 800ec42:	829a      	strh	r2, [r3, #20]
 800ec44:	e002      	b.n	800ec4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	8b3a      	ldrh	r2, [r7, #24]
 800ec50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ec52:	8b3b      	ldrh	r3, [r7, #24]
 800ec54:	461a      	mov	r2, r3
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	f000 fa50 	bl	800f0fe <USBH_CtlReq>
 800ec5e:	4603      	mov	r3, r0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	789b      	ldrb	r3, [r3, #2]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d10f      	bne.n	800ec9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2205      	movs	r2, #5
 800ec86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ec88:	78fb      	ldrb	r3, [r7, #3]
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2100      	movs	r1, #0
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 fa2c 	bl	800f0fe <USBH_CtlReq>
 800eca6:	4603      	mov	r3, r0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	789b      	ldrb	r3, [r3, #2]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d10e      	bne.n	800ece2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2209      	movs	r2, #9
 800ecce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	887a      	ldrh	r2, [r7, #2]
 800ecd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ece2:	2200      	movs	r2, #0
 800ece4:	2100      	movs	r1, #0
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 fa09 	bl	800f0fe <USBH_CtlReq>
 800ecec:	4603      	mov	r3, r0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b082      	sub	sp, #8
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	460b      	mov	r3, r1
 800ed00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	789b      	ldrb	r3, [r3, #2]
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d10f      	bne.n	800ed2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2203      	movs	r2, #3
 800ed14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ed16:	78fb      	ldrb	r3, [r7, #3]
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9e5 	bl	800f0fe <USBH_CtlReq>
 800ed34:	4603      	mov	r3, r0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b082      	sub	sp, #8
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	460b      	mov	r3, r1
 800ed48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	789b      	ldrb	r3, [r3, #2]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d10f      	bne.n	800ed72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2202      	movs	r2, #2
 800ed56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ed64:	78fb      	ldrb	r3, [r7, #3]
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ed72:	2200      	movs	r2, #0
 800ed74:	2100      	movs	r1, #0
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f9c1 	bl	800f0fe <USBH_CtlReq>
 800ed7c:	4603      	mov	r3, r0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ed86:	b480      	push	{r7}
 800ed88:	b085      	sub	sp, #20
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	60f8      	str	r0, [r7, #12]
 800ed8e:	60b9      	str	r1, [r7, #8]
 800ed90:	4613      	mov	r3, r2
 800ed92:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	781a      	ldrb	r2, [r3, #0]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	785a      	ldrb	r2, [r3, #1]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	3302      	adds	r3, #2
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	b29a      	uxth	r2, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	3303      	adds	r3, #3
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	021b      	lsls	r3, r3, #8
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	4313      	orrs	r3, r2
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	791a      	ldrb	r2, [r3, #4]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	795a      	ldrb	r2, [r3, #5]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	799a      	ldrb	r2, [r3, #6]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	79da      	ldrb	r2, [r3, #7]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ede0:	88fb      	ldrh	r3, [r7, #6]
 800ede2:	2b08      	cmp	r3, #8
 800ede4:	d939      	bls.n	800ee5a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	3308      	adds	r3, #8
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	b29a      	uxth	r2, r3
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	3309      	adds	r3, #9
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	021b      	lsls	r3, r3, #8
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	4313      	orrs	r3, r2
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	330a      	adds	r3, #10
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	330b      	adds	r3, #11
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	021b      	lsls	r3, r3, #8
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	4313      	orrs	r3, r2
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	330c      	adds	r3, #12
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	330d      	adds	r3, #13
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	021b      	lsls	r3, r3, #8
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	4313      	orrs	r3, r2
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	7b9a      	ldrb	r2, [r3, #14]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	7bda      	ldrb	r2, [r3, #15]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	7c1a      	ldrb	r2, [r3, #16]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	7c5a      	ldrb	r2, [r3, #17]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	745a      	strb	r2, [r3, #17]
  }
}
 800ee5a:	bf00      	nop
 800ee5c:	3714      	adds	r7, #20
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr

0800ee66 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b08a      	sub	sp, #40	; 0x28
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	60f8      	str	r0, [r7, #12]
 800ee6e:	60b9      	str	r1, [r7, #8]
 800ee70:	4613      	mov	r3, r2
 800ee72:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	781a      	ldrb	r2, [r3, #0]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	785a      	ldrb	r2, [r3, #1]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	3302      	adds	r3, #2
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	3303      	adds	r3, #3
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	021b      	lsls	r3, r3, #8
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	4313      	orrs	r3, r2
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	791a      	ldrb	r2, [r3, #4]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	795a      	ldrb	r2, [r3, #5]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	799a      	ldrb	r2, [r3, #6]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	79da      	ldrb	r2, [r3, #7]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	7a1a      	ldrb	r2, [r3, #8]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800eedc:	88fb      	ldrh	r3, [r7, #6]
 800eede:	2b09      	cmp	r3, #9
 800eee0:	d95f      	bls.n	800efa2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800eee2:	2309      	movs	r3, #9
 800eee4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eeea:	e051      	b.n	800ef90 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eeec:	f107 0316 	add.w	r3, r7, #22
 800eef0:	4619      	mov	r1, r3
 800eef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eef4:	f000 f8e8 	bl	800f0c8 <USBH_GetNextDesc>
 800eef8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	785b      	ldrb	r3, [r3, #1]
 800eefe:	2b04      	cmp	r3, #4
 800ef00:	d146      	bne.n	800ef90 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ef02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef06:	221a      	movs	r2, #26
 800ef08:	fb02 f303 	mul.w	r3, r2, r3
 800ef0c:	3308      	adds	r3, #8
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	4413      	add	r3, r2
 800ef12:	3302      	adds	r3, #2
 800ef14:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ef16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef18:	69f8      	ldr	r0, [r7, #28]
 800ef1a:	f000 f846 	bl	800efaa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef28:	e022      	b.n	800ef70 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ef2a:	f107 0316 	add.w	r3, r7, #22
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef32:	f000 f8c9 	bl	800f0c8 <USBH_GetNextDesc>
 800ef36:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ef38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3a:	785b      	ldrb	r3, [r3, #1]
 800ef3c:	2b05      	cmp	r3, #5
 800ef3e:	d117      	bne.n	800ef70 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ef40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ef48:	3201      	adds	r2, #1
 800ef4a:	00d2      	lsls	r2, r2, #3
 800ef4c:	211a      	movs	r1, #26
 800ef4e:	fb01 f303 	mul.w	r3, r1, r3
 800ef52:	4413      	add	r3, r2
 800ef54:	3308      	adds	r3, #8
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	4413      	add	r3, r2
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ef5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef60:	69b8      	ldr	r0, [r7, #24]
 800ef62:	f000 f851 	bl	800f008 <USBH_ParseEPDesc>
            ep_ix++;
 800ef66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	791b      	ldrb	r3, [r3, #4]
 800ef74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d204      	bcs.n	800ef86 <USBH_ParseCfgDesc+0x120>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	885a      	ldrh	r2, [r3, #2]
 800ef80:	8afb      	ldrh	r3, [r7, #22]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d8d1      	bhi.n	800ef2a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ef86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ef90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d804      	bhi.n	800efa2 <USBH_ParseCfgDesc+0x13c>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	885a      	ldrh	r2, [r3, #2]
 800ef9c:	8afb      	ldrh	r3, [r7, #22]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d8a4      	bhi.n	800eeec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800efa2:	bf00      	nop
 800efa4:	3728      	adds	r7, #40	; 0x28
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	781a      	ldrb	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	785a      	ldrb	r2, [r3, #1]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	789a      	ldrb	r2, [r3, #2]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	78da      	ldrb	r2, [r3, #3]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	791a      	ldrb	r2, [r3, #4]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	795a      	ldrb	r2, [r3, #5]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	799a      	ldrb	r2, [r3, #6]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	79da      	ldrb	r2, [r3, #7]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	7a1a      	ldrb	r2, [r3, #8]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	721a      	strb	r2, [r3, #8]
}
 800effc:	bf00      	nop
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	781a      	ldrb	r2, [r3, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	785a      	ldrb	r2, [r3, #1]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	789a      	ldrb	r2, [r3, #2]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	78da      	ldrb	r2, [r3, #3]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	3304      	adds	r3, #4
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	b29a      	uxth	r2, r3
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3305      	adds	r3, #5
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b29b      	uxth	r3, r3
 800f042:	021b      	lsls	r3, r3, #8
 800f044:	b29b      	uxth	r3, r3
 800f046:	4313      	orrs	r3, r2
 800f048:	b29a      	uxth	r2, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	799a      	ldrb	r2, [r3, #6]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	719a      	strb	r2, [r3, #6]
}
 800f056:	bf00      	nop
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f062:	b480      	push	{r7}
 800f064:	b087      	sub	sp, #28
 800f066:	af00      	add	r7, sp, #0
 800f068:	60f8      	str	r0, [r7, #12]
 800f06a:	60b9      	str	r1, [r7, #8]
 800f06c:	4613      	mov	r3, r2
 800f06e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3301      	adds	r3, #1
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	2b03      	cmp	r3, #3
 800f078:	d120      	bne.n	800f0bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	1e9a      	subs	r2, r3, #2
 800f080:	88fb      	ldrh	r3, [r7, #6]
 800f082:	4293      	cmp	r3, r2
 800f084:	bf28      	it	cs
 800f086:	4613      	movcs	r3, r2
 800f088:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	3302      	adds	r3, #2
 800f08e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f090:	2300      	movs	r3, #0
 800f092:	82fb      	strh	r3, [r7, #22]
 800f094:	e00b      	b.n	800f0ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f096:	8afb      	ldrh	r3, [r7, #22]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	4413      	add	r3, r2
 800f09c:	781a      	ldrb	r2, [r3, #0]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f0a8:	8afb      	ldrh	r3, [r7, #22]
 800f0aa:	3302      	adds	r3, #2
 800f0ac:	82fb      	strh	r3, [r7, #22]
 800f0ae:	8afa      	ldrh	r2, [r7, #22]
 800f0b0:	8abb      	ldrh	r3, [r7, #20]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d3ef      	bcc.n	800f096 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	701a      	strb	r2, [r3, #0]
  }
}
 800f0bc:	bf00      	nop
 800f0be:	371c      	adds	r7, #28
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	881a      	ldrh	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	4413      	add	r3, r2
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3714      	adds	r7, #20
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b086      	sub	sp, #24
 800f102:	af00      	add	r7, sp, #0
 800f104:	60f8      	str	r0, [r7, #12]
 800f106:	60b9      	str	r1, [r7, #8]
 800f108:	4613      	mov	r3, r2
 800f10a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f10c:	2301      	movs	r3, #1
 800f10e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	789b      	ldrb	r3, [r3, #2]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d002      	beq.n	800f11e <USBH_CtlReq+0x20>
 800f118:	2b02      	cmp	r3, #2
 800f11a:	d00f      	beq.n	800f13c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f11c:	e027      	b.n	800f16e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	88fa      	ldrh	r2, [r7, #6]
 800f128:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2201      	movs	r2, #1
 800f12e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2202      	movs	r2, #2
 800f134:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f136:	2301      	movs	r3, #1
 800f138:	75fb      	strb	r3, [r7, #23]
      break;
 800f13a:	e018      	b.n	800f16e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f000 f81b 	bl	800f178 <USBH_HandleControl>
 800f142:	4603      	mov	r3, r0
 800f144:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f146:	7dfb      	ldrb	r3, [r7, #23]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <USBH_CtlReq+0x54>
 800f14c:	7dfb      	ldrb	r3, [r7, #23]
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d106      	bne.n	800f160 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	761a      	strb	r2, [r3, #24]
      break;
 800f15e:	e005      	b.n	800f16c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f160:	7dfb      	ldrb	r3, [r7, #23]
 800f162:	2b02      	cmp	r3, #2
 800f164:	d102      	bne.n	800f16c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2201      	movs	r2, #1
 800f16a:	709a      	strb	r2, [r3, #2]
      break;
 800f16c:	bf00      	nop
  }
  return status;
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f170:	4618      	mov	r0, r3
 800f172:	3718      	adds	r7, #24
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af02      	add	r7, sp, #8
 800f17e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f180:	2301      	movs	r3, #1
 800f182:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f184:	2300      	movs	r3, #0
 800f186:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	7e1b      	ldrb	r3, [r3, #24]
 800f18c:	3b01      	subs	r3, #1
 800f18e:	2b0a      	cmp	r3, #10
 800f190:	f200 8156 	bhi.w	800f440 <USBH_HandleControl+0x2c8>
 800f194:	a201      	add	r2, pc, #4	; (adr r2, 800f19c <USBH_HandleControl+0x24>)
 800f196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19a:	bf00      	nop
 800f19c:	0800f1c9 	.word	0x0800f1c9
 800f1a0:	0800f1e3 	.word	0x0800f1e3
 800f1a4:	0800f24d 	.word	0x0800f24d
 800f1a8:	0800f273 	.word	0x0800f273
 800f1ac:	0800f2ab 	.word	0x0800f2ab
 800f1b0:	0800f2d5 	.word	0x0800f2d5
 800f1b4:	0800f327 	.word	0x0800f327
 800f1b8:	0800f349 	.word	0x0800f349
 800f1bc:	0800f385 	.word	0x0800f385
 800f1c0:	0800f3ab 	.word	0x0800f3ab
 800f1c4:	0800f3e9 	.word	0x0800f3e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f103 0110 	add.w	r1, r3, #16
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	795b      	ldrb	r3, [r3, #5]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f943 	bl	800f460 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2202      	movs	r2, #2
 800f1de:	761a      	strb	r2, [r3, #24]
      break;
 800f1e0:	e139      	b.n	800f456 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	795b      	ldrb	r3, [r3, #5]
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 fd15 	bl	800fc18 <USBH_LL_GetURBState>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f1f2:	7bbb      	ldrb	r3, [r7, #14]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d11e      	bne.n	800f236 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	7c1b      	ldrb	r3, [r3, #16]
 800f1fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f200:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	8adb      	ldrh	r3, [r3, #22]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00a      	beq.n	800f220 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f20a:	7b7b      	ldrb	r3, [r7, #13]
 800f20c:	2b80      	cmp	r3, #128	; 0x80
 800f20e:	d103      	bne.n	800f218 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2203      	movs	r2, #3
 800f214:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f216:	e115      	b.n	800f444 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2205      	movs	r2, #5
 800f21c:	761a      	strb	r2, [r3, #24]
      break;
 800f21e:	e111      	b.n	800f444 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f220:	7b7b      	ldrb	r3, [r7, #13]
 800f222:	2b80      	cmp	r3, #128	; 0x80
 800f224:	d103      	bne.n	800f22e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2209      	movs	r2, #9
 800f22a:	761a      	strb	r2, [r3, #24]
      break;
 800f22c:	e10a      	b.n	800f444 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2207      	movs	r2, #7
 800f232:	761a      	strb	r2, [r3, #24]
      break;
 800f234:	e106      	b.n	800f444 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	2b04      	cmp	r3, #4
 800f23a:	d003      	beq.n	800f244 <USBH_HandleControl+0xcc>
 800f23c:	7bbb      	ldrb	r3, [r7, #14]
 800f23e:	2b02      	cmp	r3, #2
 800f240:	f040 8100 	bne.w	800f444 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	220b      	movs	r2, #11
 800f248:	761a      	strb	r2, [r3, #24]
      break;
 800f24a:	e0fb      	b.n	800f444 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f252:	b29a      	uxth	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6899      	ldr	r1, [r3, #8]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	899a      	ldrh	r2, [r3, #12]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	791b      	ldrb	r3, [r3, #4]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f93a 	bl	800f4de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2204      	movs	r2, #4
 800f26e:	761a      	strb	r2, [r3, #24]
      break;
 800f270:	e0f1      	b.n	800f456 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	791b      	ldrb	r3, [r3, #4]
 800f276:	4619      	mov	r1, r3
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fccd 	bl	800fc18 <USBH_LL_GetURBState>
 800f27e:	4603      	mov	r3, r0
 800f280:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f282:	7bbb      	ldrb	r3, [r7, #14]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d102      	bne.n	800f28e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2209      	movs	r2, #9
 800f28c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f28e:	7bbb      	ldrb	r3, [r7, #14]
 800f290:	2b05      	cmp	r3, #5
 800f292:	d102      	bne.n	800f29a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f294:	2303      	movs	r3, #3
 800f296:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f298:	e0d6      	b.n	800f448 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	2b04      	cmp	r3, #4
 800f29e:	f040 80d3 	bne.w	800f448 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	220b      	movs	r2, #11
 800f2a6:	761a      	strb	r2, [r3, #24]
      break;
 800f2a8:	e0ce      	b.n	800f448 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6899      	ldr	r1, [r3, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	899a      	ldrh	r2, [r3, #12]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	795b      	ldrb	r3, [r3, #5]
 800f2b6:	2001      	movs	r0, #1
 800f2b8:	9000      	str	r0, [sp, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 f8ea 	bl	800f494 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2206      	movs	r2, #6
 800f2d0:	761a      	strb	r2, [r3, #24]
      break;
 800f2d2:	e0c0      	b.n	800f456 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	795b      	ldrb	r3, [r3, #5]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fc9c 	bl	800fc18 <USBH_LL_GetURBState>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d103      	bne.n	800f2f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2207      	movs	r2, #7
 800f2ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f2f0:	e0ac      	b.n	800f44c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f2f2:	7bbb      	ldrb	r3, [r7, #14]
 800f2f4:	2b05      	cmp	r3, #5
 800f2f6:	d105      	bne.n	800f304 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	220c      	movs	r2, #12
 800f2fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f2fe:	2303      	movs	r3, #3
 800f300:	73fb      	strb	r3, [r7, #15]
      break;
 800f302:	e0a3      	b.n	800f44c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f304:	7bbb      	ldrb	r3, [r7, #14]
 800f306:	2b02      	cmp	r3, #2
 800f308:	d103      	bne.n	800f312 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2205      	movs	r2, #5
 800f30e:	761a      	strb	r2, [r3, #24]
      break;
 800f310:	e09c      	b.n	800f44c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f312:	7bbb      	ldrb	r3, [r7, #14]
 800f314:	2b04      	cmp	r3, #4
 800f316:	f040 8099 	bne.w	800f44c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	220b      	movs	r2, #11
 800f31e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f320:	2302      	movs	r3, #2
 800f322:	73fb      	strb	r3, [r7, #15]
      break;
 800f324:	e092      	b.n	800f44c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	791b      	ldrb	r3, [r3, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	2100      	movs	r1, #0
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 f8d5 	bl	800f4de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2208      	movs	r2, #8
 800f344:	761a      	strb	r2, [r3, #24]

      break;
 800f346:	e086      	b.n	800f456 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	791b      	ldrb	r3, [r3, #4]
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fc62 	bl	800fc18 <USBH_LL_GetURBState>
 800f354:	4603      	mov	r3, r0
 800f356:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f358:	7bbb      	ldrb	r3, [r7, #14]
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d105      	bne.n	800f36a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	220d      	movs	r2, #13
 800f362:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f368:	e072      	b.n	800f450 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	2b04      	cmp	r3, #4
 800f36e:	d103      	bne.n	800f378 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	220b      	movs	r2, #11
 800f374:	761a      	strb	r2, [r3, #24]
      break;
 800f376:	e06b      	b.n	800f450 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	d168      	bne.n	800f450 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f37e:	2303      	movs	r3, #3
 800f380:	73fb      	strb	r3, [r7, #15]
      break;
 800f382:	e065      	b.n	800f450 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	795b      	ldrb	r3, [r3, #5]
 800f388:	2201      	movs	r2, #1
 800f38a:	9200      	str	r2, [sp, #0]
 800f38c:	2200      	movs	r2, #0
 800f38e:	2100      	movs	r1, #0
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 f87f 	bl	800f494 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	220a      	movs	r2, #10
 800f3a6:	761a      	strb	r2, [r3, #24]
      break;
 800f3a8:	e055      	b.n	800f456 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	795b      	ldrb	r3, [r3, #5]
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fc31 	bl	800fc18 <USBH_LL_GetURBState>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d105      	bne.n	800f3cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	220d      	movs	r2, #13
 800f3c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3ca:	e043      	b.n	800f454 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	2b02      	cmp	r3, #2
 800f3d0:	d103      	bne.n	800f3da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2209      	movs	r2, #9
 800f3d6:	761a      	strb	r2, [r3, #24]
      break;
 800f3d8:	e03c      	b.n	800f454 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
 800f3dc:	2b04      	cmp	r3, #4
 800f3de:	d139      	bne.n	800f454 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	220b      	movs	r2, #11
 800f3e4:	761a      	strb	r2, [r3, #24]
      break;
 800f3e6:	e035      	b.n	800f454 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	7e5b      	ldrb	r3, [r3, #25]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	765a      	strb	r2, [r3, #25]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	7e5b      	ldrb	r3, [r3, #25]
 800f3f8:	2b02      	cmp	r3, #2
 800f3fa:	d806      	bhi.n	800f40a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2201      	movs	r2, #1
 800f406:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f408:	e025      	b.n	800f456 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f410:	2106      	movs	r1, #6
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	795b      	ldrb	r3, [r3, #5]
 800f420:	4619      	mov	r1, r3
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f90c 	bl	800f640 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	791b      	ldrb	r3, [r3, #4]
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f906 	bl	800f640 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f43a:	2302      	movs	r3, #2
 800f43c:	73fb      	strb	r3, [r7, #15]
      break;
 800f43e:	e00a      	b.n	800f456 <USBH_HandleControl+0x2de>

    default:
      break;
 800f440:	bf00      	nop
 800f442:	e008      	b.n	800f456 <USBH_HandleControl+0x2de>
      break;
 800f444:	bf00      	nop
 800f446:	e006      	b.n	800f456 <USBH_HandleControl+0x2de>
      break;
 800f448:	bf00      	nop
 800f44a:	e004      	b.n	800f456 <USBH_HandleControl+0x2de>
      break;
 800f44c:	bf00      	nop
 800f44e:	e002      	b.n	800f456 <USBH_HandleControl+0x2de>
      break;
 800f450:	bf00      	nop
 800f452:	e000      	b.n	800f456 <USBH_HandleControl+0x2de>
      break;
 800f454:	bf00      	nop
  }

  return status;
 800f456:	7bfb      	ldrb	r3, [r7, #15]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b088      	sub	sp, #32
 800f464:	af04      	add	r7, sp, #16
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	4613      	mov	r3, r2
 800f46c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f46e:	79f9      	ldrb	r1, [r7, #7]
 800f470:	2300      	movs	r3, #0
 800f472:	9303      	str	r3, [sp, #12]
 800f474:	2308      	movs	r3, #8
 800f476:	9302      	str	r3, [sp, #8]
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	2300      	movs	r3, #0
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	2300      	movs	r3, #0
 800f482:	2200      	movs	r2, #0
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f000 fb96 	bl	800fbb6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3710      	adds	r7, #16
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af04      	add	r7, sp, #16
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	80fb      	strh	r3, [r7, #6]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f4b8:	7979      	ldrb	r1, [r7, #5]
 800f4ba:	7e3b      	ldrb	r3, [r7, #24]
 800f4bc:	9303      	str	r3, [sp, #12]
 800f4be:	88fb      	ldrh	r3, [r7, #6]
 800f4c0:	9302      	str	r3, [sp, #8]
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	9301      	str	r3, [sp, #4]
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 fb71 	bl	800fbb6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b088      	sub	sp, #32
 800f4e2:	af04      	add	r7, sp, #16
 800f4e4:	60f8      	str	r0, [r7, #12]
 800f4e6:	60b9      	str	r1, [r7, #8]
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	80fb      	strh	r3, [r7, #6]
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f4f4:	7979      	ldrb	r1, [r7, #5]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9303      	str	r3, [sp, #12]
 800f4fa:	88fb      	ldrh	r3, [r7, #6]
 800f4fc:	9302      	str	r3, [sp, #8]
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	9301      	str	r3, [sp, #4]
 800f502:	2301      	movs	r3, #1
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	2300      	movs	r3, #0
 800f508:	2201      	movs	r2, #1
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f000 fb53 	bl	800fbb6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f510:	2300      	movs	r3, #0

}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b088      	sub	sp, #32
 800f51e:	af04      	add	r7, sp, #16
 800f520:	60f8      	str	r0, [r7, #12]
 800f522:	60b9      	str	r1, [r7, #8]
 800f524:	4611      	mov	r1, r2
 800f526:	461a      	mov	r2, r3
 800f528:	460b      	mov	r3, r1
 800f52a:	80fb      	strh	r3, [r7, #6]
 800f52c:	4613      	mov	r3, r2
 800f52e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f53a:	2300      	movs	r3, #0
 800f53c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f53e:	7979      	ldrb	r1, [r7, #5]
 800f540:	7e3b      	ldrb	r3, [r7, #24]
 800f542:	9303      	str	r3, [sp, #12]
 800f544:	88fb      	ldrh	r3, [r7, #6]
 800f546:	9302      	str	r3, [sp, #8]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	9301      	str	r3, [sp, #4]
 800f54c:	2301      	movs	r3, #1
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	2302      	movs	r3, #2
 800f552:	2200      	movs	r2, #0
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f000 fb2e 	bl	800fbb6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f55a:	2300      	movs	r3, #0
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af04      	add	r7, sp, #16
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	4611      	mov	r1, r2
 800f570:	461a      	mov	r2, r3
 800f572:	460b      	mov	r3, r1
 800f574:	80fb      	strh	r3, [r7, #6]
 800f576:	4613      	mov	r3, r2
 800f578:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f57a:	7979      	ldrb	r1, [r7, #5]
 800f57c:	2300      	movs	r3, #0
 800f57e:	9303      	str	r3, [sp, #12]
 800f580:	88fb      	ldrh	r3, [r7, #6]
 800f582:	9302      	str	r3, [sp, #8]
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	9301      	str	r3, [sp, #4]
 800f588:	2301      	movs	r3, #1
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	2302      	movs	r3, #2
 800f58e:	2201      	movs	r2, #1
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 fb10 	bl	800fbb6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af04      	add	r7, sp, #16
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	70fb      	strb	r3, [r7, #3]
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	70bb      	strb	r3, [r7, #2]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f5ba:	7878      	ldrb	r0, [r7, #1]
 800f5bc:	78ba      	ldrb	r2, [r7, #2]
 800f5be:	78f9      	ldrb	r1, [r7, #3]
 800f5c0:	8b3b      	ldrh	r3, [r7, #24]
 800f5c2:	9302      	str	r3, [sp, #8]
 800f5c4:	7d3b      	ldrb	r3, [r7, #20]
 800f5c6:	9301      	str	r3, [sp, #4]
 800f5c8:	7c3b      	ldrb	r3, [r7, #16]
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 faa3 	bl	800fb1a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f5d4:	2300      	movs	r3, #0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b082      	sub	sp, #8
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f5ea:	78fb      	ldrb	r3, [r7, #3]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 fac2 	bl	800fb78 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f5fe:	b580      	push	{r7, lr}
 800f600:	b084      	sub	sp, #16
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	460b      	mov	r3, r1
 800f608:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f000 f836 	bl	800f67c <USBH_GetFreePipe>
 800f610:	4603      	mov	r3, r0
 800f612:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f614:	89fb      	ldrh	r3, [r7, #14]
 800f616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d00a      	beq.n	800f634 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f61e:	78fa      	ldrb	r2, [r7, #3]
 800f620:	89fb      	ldrh	r3, [r7, #14]
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f62a:	6879      	ldr	r1, [r7, #4]
 800f62c:	33e0      	adds	r3, #224	; 0xe0
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	440b      	add	r3, r1
 800f632:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f634:	89fb      	ldrh	r3, [r7, #14]
 800f636:	b2db      	uxtb	r3, r3
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f64c:	78fb      	ldrb	r3, [r7, #3]
 800f64e:	2b0a      	cmp	r3, #10
 800f650:	d80d      	bhi.n	800f66e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f652:	78fb      	ldrb	r3, [r7, #3]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	33e0      	adds	r3, #224	; 0xe0
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	78fb      	ldrb	r3, [r7, #3]
 800f660:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f664:	6879      	ldr	r1, [r7, #4]
 800f666:	33e0      	adds	r3, #224	; 0xe0
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	440b      	add	r3, r1
 800f66c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f684:	2300      	movs	r3, #0
 800f686:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f688:	2300      	movs	r3, #0
 800f68a:	73fb      	strb	r3, [r7, #15]
 800f68c:	e00f      	b.n	800f6ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	33e0      	adds	r3, #224	; 0xe0
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4413      	add	r3, r2
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d102      	bne.n	800f6a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f6a2:	7bfb      	ldrb	r3, [r7, #15]
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	e007      	b.n	800f6b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	73fb      	strb	r3, [r7, #15]
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	2b0a      	cmp	r3, #10
 800f6b2:	d9ec      	bls.n	800f68e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3714      	adds	r7, #20
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f6da:	4b1f      	ldr	r3, [pc, #124]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f6dc:	7a5b      	ldrb	r3, [r3, #9]
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d131      	bne.n	800f748 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f6e4:	4b1c      	ldr	r3, [pc, #112]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f6e6:	7a5b      	ldrb	r3, [r3, #9]
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	4b1a      	ldr	r3, [pc, #104]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f6f2:	4b19      	ldr	r3, [pc, #100]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f6f4:	7a5b      	ldrb	r3, [r3, #9]
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	4a17      	ldr	r2, [pc, #92]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	4413      	add	r3, r2
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f702:	4b15      	ldr	r3, [pc, #84]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f704:	7a5b      	ldrb	r3, [r3, #9]
 800f706:	b2db      	uxtb	r3, r3
 800f708:	461a      	mov	r2, r3
 800f70a:	4b13      	ldr	r3, [pc, #76]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f70c:	4413      	add	r3, r2
 800f70e:	79fa      	ldrb	r2, [r7, #7]
 800f710:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f712:	4b11      	ldr	r3, [pc, #68]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f714:	7a5b      	ldrb	r3, [r3, #9]
 800f716:	b2db      	uxtb	r3, r3
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	b2d1      	uxtb	r1, r2
 800f71c:	4a0e      	ldr	r2, [pc, #56]	; (800f758 <FATFS_LinkDriverEx+0x94>)
 800f71e:	7251      	strb	r1, [r2, #9]
 800f720:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f722:	7dbb      	ldrb	r3, [r7, #22]
 800f724:	3330      	adds	r3, #48	; 0x30
 800f726:	b2da      	uxtb	r2, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	3301      	adds	r3, #1
 800f730:	223a      	movs	r2, #58	; 0x3a
 800f732:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	3302      	adds	r3, #2
 800f738:	222f      	movs	r2, #47	; 0x2f
 800f73a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	3303      	adds	r3, #3
 800f740:	2200      	movs	r2, #0
 800f742:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f748:	7dfb      	ldrb	r3, [r7, #23]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	200007fc 	.word	0x200007fc

0800f75c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f766:	2200      	movs	r2, #0
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff ffaa 	bl	800f6c4 <FATFS_LinkDriverEx>
 800f770:	4603      	mov	r3, r0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
	...

0800f77c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f780:	2201      	movs	r2, #1
 800f782:	490e      	ldr	r1, [pc, #56]	; (800f7bc <MX_USB_HOST_Init+0x40>)
 800f784:	480e      	ldr	r0, [pc, #56]	; (800f7c0 <MX_USB_HOST_Init+0x44>)
 800f786:	f7fe fc45 	bl	800e014 <USBH_Init>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f790:	f7f2 ff7c 	bl	800268c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f794:	490b      	ldr	r1, [pc, #44]	; (800f7c4 <MX_USB_HOST_Init+0x48>)
 800f796:	480a      	ldr	r0, [pc, #40]	; (800f7c0 <MX_USB_HOST_Init+0x44>)
 800f798:	f7fe fcca 	bl	800e130 <USBH_RegisterClass>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f7a2:	f7f2 ff73 	bl	800268c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f7a6:	4806      	ldr	r0, [pc, #24]	; (800f7c0 <MX_USB_HOST_Init+0x44>)
 800f7a8:	f7fe fd4e 	bl	800e248 <USBH_Start>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f7b2:	f7f2 ff6b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f7b6:	bf00      	nop
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	0800f7dd 	.word	0x0800f7dd
 800f7c0:	200014c8 	.word	0x200014c8
 800f7c4:	2000000c 	.word	0x2000000c

0800f7c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f7cc:	4802      	ldr	r0, [pc, #8]	; (800f7d8 <MX_USB_HOST_Process+0x10>)
 800f7ce:	f7fe fd4b 	bl	800e268 <USBH_Process>
}
 800f7d2:	bf00      	nop
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	200014c8 	.word	0x200014c8

0800f7dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f7e8:	78fb      	ldrb	r3, [r7, #3]
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	2b04      	cmp	r3, #4
 800f7ee:	d819      	bhi.n	800f824 <USBH_UserProcess+0x48>
 800f7f0:	a201      	add	r2, pc, #4	; (adr r2, 800f7f8 <USBH_UserProcess+0x1c>)
 800f7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f6:	bf00      	nop
 800f7f8:	0800f825 	.word	0x0800f825
 800f7fc:	0800f815 	.word	0x0800f815
 800f800:	0800f825 	.word	0x0800f825
 800f804:	0800f81d 	.word	0x0800f81d
 800f808:	0800f80d 	.word	0x0800f80d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f80c:	4b09      	ldr	r3, [pc, #36]	; (800f834 <USBH_UserProcess+0x58>)
 800f80e:	2203      	movs	r2, #3
 800f810:	701a      	strb	r2, [r3, #0]
  break;
 800f812:	e008      	b.n	800f826 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f814:	4b07      	ldr	r3, [pc, #28]	; (800f834 <USBH_UserProcess+0x58>)
 800f816:	2202      	movs	r2, #2
 800f818:	701a      	strb	r2, [r3, #0]
  break;
 800f81a:	e004      	b.n	800f826 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f81c:	4b05      	ldr	r3, [pc, #20]	; (800f834 <USBH_UserProcess+0x58>)
 800f81e:	2201      	movs	r2, #1
 800f820:	701a      	strb	r2, [r3, #0]
  break;
 800f822:	e000      	b.n	800f826 <USBH_UserProcess+0x4a>

  default:
  break;
 800f824:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f826:	bf00      	nop
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	20000808 	.word	0x20000808

0800f838 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08a      	sub	sp, #40	; 0x28
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f840:	f107 0314 	add.w	r3, r7, #20
 800f844:	2200      	movs	r2, #0
 800f846:	601a      	str	r2, [r3, #0]
 800f848:	605a      	str	r2, [r3, #4]
 800f84a:	609a      	str	r2, [r3, #8]
 800f84c:	60da      	str	r2, [r3, #12]
 800f84e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f858:	d13c      	bne.n	800f8d4 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f85a:	4b20      	ldr	r3, [pc, #128]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f85e:	4a1f      	ldr	r2, [pc, #124]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f860:	f043 0301 	orr.w	r3, r3, #1
 800f864:	6313      	str	r3, [r2, #48]	; 0x30
 800f866:	4b1d      	ldr	r3, [pc, #116]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f86a:	f003 0301 	and.w	r3, r3, #1
 800f86e:	613b      	str	r3, [r7, #16]
 800f870:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800f872:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f878:	2302      	movs	r3, #2
 800f87a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f87c:	2300      	movs	r3, #0
 800f87e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f880:	2303      	movs	r3, #3
 800f882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f884:	230a      	movs	r3, #10
 800f886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f888:	f107 0314 	add.w	r3, r7, #20
 800f88c:	4619      	mov	r1, r3
 800f88e:	4814      	ldr	r0, [pc, #80]	; (800f8e0 <HAL_HCD_MspInit+0xa8>)
 800f890:	f7f4 fe2a 	bl	80044e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f894:	4b11      	ldr	r3, [pc, #68]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f898:	4a10      	ldr	r2, [pc, #64]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f89e:	6353      	str	r3, [r2, #52]	; 0x34
 800f8a0:	4b0e      	ldr	r3, [pc, #56]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	4b0b      	ldr	r3, [pc, #44]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8b0:	4a0a      	ldr	r2, [pc, #40]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f8b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8b6:	6453      	str	r3, [r2, #68]	; 0x44
 800f8b8:	4b08      	ldr	r3, [pc, #32]	; (800f8dc <HAL_HCD_MspInit+0xa4>)
 800f8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8c0:	60bb      	str	r3, [r7, #8]
 800f8c2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	2043      	movs	r0, #67	; 0x43
 800f8ca:	f7f4 fa86 	bl	8003dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8ce:	2043      	movs	r0, #67	; 0x43
 800f8d0:	f7f4 fa9f 	bl	8003e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8d4:	bf00      	nop
 800f8d6:	3728      	adds	r7, #40	; 0x28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	40023800 	.word	0x40023800
 800f8e0:	40020000 	.word	0x40020000

0800f8e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7ff f88b 	bl	800ea0e <USBH_LL_IncTimer>
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff f8c3 	bl	800ea9a <USBH_LL_Connect>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7ff f8cc 	bl	800eac8 <USBH_LL_Disconnect>
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
 800f944:	4613      	mov	r3, r2
 800f946:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff f87d 	bl	800ea62 <USBH_LL_PortEnabled>
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f97e:	4618      	mov	r0, r3
 800f980:	f7ff f87d 	bl	800ea7e <USBH_LL_PortDisabled>
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d12a      	bne.n	800f9f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f99e:	4a18      	ldr	r2, [pc, #96]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a15      	ldr	r2, [pc, #84]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9ae:	4b14      	ldr	r3, [pc, #80]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f9b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f9b6:	4b12      	ldr	r3, [pc, #72]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9b8:	2208      	movs	r2, #8
 800f9ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f9bc:	4b10      	ldr	r3, [pc, #64]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9be:	2201      	movs	r2, #1
 800f9c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9c2:	4b0f      	ldr	r3, [pc, #60]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f9c8:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9ca:	2202      	movs	r2, #2
 800f9cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f9d4:	480a      	ldr	r0, [pc, #40]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9d6:	f7f4 ff7e 	bl	80048d6 <HAL_HCD_Init>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d001      	beq.n	800f9e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f9e0:	f7f2 fe54 	bl	800268c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f9e4:	4806      	ldr	r0, [pc, #24]	; (800fa00 <USBH_LL_Init+0x74>)
 800f9e6:	f7f5 fb5b 	bl	80050a0 <HAL_HCD_GetCurrentFrame>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7fe fffe 	bl	800e9f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	200018a0 	.word	0x200018a0

0800fa04 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa10:	2300      	movs	r3, #0
 800fa12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7f5 faca 	bl	8004fb4 <HAL_HCD_Start>
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 f95c 	bl	800fce4 <USBH_Get_USB_Status>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7f5 fad2 	bl	8004ffa <HAL_HCD_Stop>
 800fa56:	4603      	mov	r3, r0
 800fa58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f000 f941 	bl	800fce4 <USBH_Get_USB_Status>
 800fa62:	4603      	mov	r3, r0
 800fa64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa66:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7f5 fb1a 	bl	80050bc <HAL_HCD_GetCurrentSpeed>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d00c      	beq.n	800faa8 <USBH_LL_GetSpeed+0x38>
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d80d      	bhi.n	800faae <USBH_LL_GetSpeed+0x3e>
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d002      	beq.n	800fa9c <USBH_LL_GetSpeed+0x2c>
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d003      	beq.n	800faa2 <USBH_LL_GetSpeed+0x32>
 800fa9a:	e008      	b.n	800faae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	73fb      	strb	r3, [r7, #15]
    break;
 800faa0:	e008      	b.n	800fab4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800faa2:	2301      	movs	r3, #1
 800faa4:	73fb      	strb	r3, [r7, #15]
    break;
 800faa6:	e005      	b.n	800fab4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800faa8:	2302      	movs	r3, #2
 800faaa:	73fb      	strb	r3, [r7, #15]
    break;
 800faac:	e002      	b.n	800fab4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800faae:	2301      	movs	r3, #1
 800fab0:	73fb      	strb	r3, [r7, #15]
    break;
 800fab2:	bf00      	nop
  }
  return  speed;
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b084      	sub	sp, #16
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac6:	2300      	movs	r3, #0
 800fac8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7f5 faad 	bl	8005034 <HAL_HCD_ResetPort>
 800fada:	4603      	mov	r3, r0
 800fadc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f000 f8ff 	bl	800fce4 <USBH_Get_USB_Status>
 800fae6:	4603      	mov	r3, r0
 800fae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faea:	7bbb      	ldrb	r3, [r7, #14]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	460b      	mov	r3, r1
 800fafe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb06:	78fa      	ldrb	r2, [r7, #3]
 800fb08:	4611      	mov	r1, r2
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7f5 fab4 	bl	8005078 <HAL_HCD_HC_GetXferCount>
 800fb10:	4603      	mov	r3, r0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fb1a:	b590      	push	{r4, r7, lr}
 800fb1c:	b089      	sub	sp, #36	; 0x24
 800fb1e:	af04      	add	r7, sp, #16
 800fb20:	6078      	str	r0, [r7, #4]
 800fb22:	4608      	mov	r0, r1
 800fb24:	4611      	mov	r1, r2
 800fb26:	461a      	mov	r2, r3
 800fb28:	4603      	mov	r3, r0
 800fb2a:	70fb      	strb	r3, [r7, #3]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	70bb      	strb	r3, [r7, #2]
 800fb30:	4613      	mov	r3, r2
 800fb32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fb42:	787c      	ldrb	r4, [r7, #1]
 800fb44:	78ba      	ldrb	r2, [r7, #2]
 800fb46:	78f9      	ldrb	r1, [r7, #3]
 800fb48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb4a:	9302      	str	r3, [sp, #8]
 800fb4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	4623      	mov	r3, r4
 800fb5a:	f7f4 ff1e 	bl	800499a <HAL_HCD_HC_Init>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 f8bd 	bl	800fce4 <USBH_Get_USB_Status>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3714      	adds	r7, #20
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd90      	pop	{r4, r7, pc}

0800fb78 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb92:	78fa      	ldrb	r2, [r7, #3]
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f4 ff8e 	bl	8004ab8 <HAL_HCD_HC_Halt>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fba0:	7bfb      	ldrb	r3, [r7, #15]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 f89e 	bl	800fce4 <USBH_Get_USB_Status>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fbb6:	b590      	push	{r4, r7, lr}
 800fbb8:	b089      	sub	sp, #36	; 0x24
 800fbba:	af04      	add	r7, sp, #16
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	4608      	mov	r0, r1
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	70fb      	strb	r3, [r7, #3]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70bb      	strb	r3, [r7, #2]
 800fbcc:	4613      	mov	r3, r2
 800fbce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fbde:	787c      	ldrb	r4, [r7, #1]
 800fbe0:	78ba      	ldrb	r2, [r7, #2]
 800fbe2:	78f9      	ldrb	r1, [r7, #3]
 800fbe4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fbe8:	9303      	str	r3, [sp, #12]
 800fbea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fbec:	9302      	str	r3, [sp, #8]
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	4623      	mov	r3, r4
 800fbfa:	f7f4 ff81 	bl	8004b00 <HAL_HCD_HC_SubmitRequest>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fc02:	7bfb      	ldrb	r3, [r7, #15]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 f86d 	bl	800fce4 <USBH_Get_USB_Status>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3714      	adds	r7, #20
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd90      	pop	{r4, r7, pc}

0800fc18 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	460b      	mov	r3, r1
 800fc22:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc2a:	78fa      	ldrb	r2, [r7, #3]
 800fc2c:	4611      	mov	r1, r2
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f5 fa0e 	bl	8005050 <HAL_HCD_HC_GetURBState>
 800fc34:	4603      	mov	r3, r0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3708      	adds	r7, #8
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b082      	sub	sp, #8
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
 800fc46:	460b      	mov	r3, r1
 800fc48:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d103      	bne.n	800fc5c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fc54:	78fb      	ldrb	r3, [r7, #3]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 f870 	bl	800fd3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fc5c:	20c8      	movs	r0, #200	; 0xc8
 800fc5e:	f7f3 fd35 	bl	80036cc <HAL_Delay>
  return USBH_OK;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	460b      	mov	r3, r1
 800fc76:	70fb      	strb	r3, [r7, #3]
 800fc78:	4613      	mov	r3, r2
 800fc7a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc82:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fc84:	78fb      	ldrb	r3, [r7, #3]
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	212c      	movs	r1, #44	; 0x2c
 800fc8a:	fb01 f303 	mul.w	r3, r1, r3
 800fc8e:	4413      	add	r3, r2
 800fc90:	333b      	adds	r3, #59	; 0x3b
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d009      	beq.n	800fcac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fc98:	78fb      	ldrb	r3, [r7, #3]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	212c      	movs	r1, #44	; 0x2c
 800fc9e:	fb01 f303 	mul.w	r3, r1, r3
 800fca2:	4413      	add	r3, r2
 800fca4:	3354      	adds	r3, #84	; 0x54
 800fca6:	78ba      	ldrb	r2, [r7, #2]
 800fca8:	701a      	strb	r2, [r3, #0]
 800fcaa:	e008      	b.n	800fcbe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fcac:	78fb      	ldrb	r3, [r7, #3]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	212c      	movs	r1, #44	; 0x2c
 800fcb2:	fb01 f303 	mul.w	r3, r1, r3
 800fcb6:	4413      	add	r3, r2
 800fcb8:	3355      	adds	r3, #85	; 0x55
 800fcba:	78ba      	ldrb	r2, [r7, #2]
 800fcbc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fcbe:	2300      	movs	r3, #0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3714      	adds	r7, #20
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7f3 fcf9 	bl	80036cc <HAL_Delay>
}
 800fcda:	bf00      	nop
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
	...

0800fce4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	2b03      	cmp	r3, #3
 800fcf6:	d817      	bhi.n	800fd28 <USBH_Get_USB_Status+0x44>
 800fcf8:	a201      	add	r2, pc, #4	; (adr r2, 800fd00 <USBH_Get_USB_Status+0x1c>)
 800fcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfe:	bf00      	nop
 800fd00:	0800fd11 	.word	0x0800fd11
 800fd04:	0800fd17 	.word	0x0800fd17
 800fd08:	0800fd1d 	.word	0x0800fd1d
 800fd0c:	0800fd23 	.word	0x0800fd23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	73fb      	strb	r3, [r7, #15]
    break;
 800fd14:	e00b      	b.n	800fd2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fd16:	2302      	movs	r3, #2
 800fd18:	73fb      	strb	r3, [r7, #15]
    break;
 800fd1a:	e008      	b.n	800fd2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd20:	e005      	b.n	800fd2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fd22:	2302      	movs	r3, #2
 800fd24:	73fb      	strb	r3, [r7, #15]
    break;
 800fd26:	e002      	b.n	800fd2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fd28:	2302      	movs	r3, #2
 800fd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd2c:	bf00      	nop
  }
  return usb_status;
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3714      	adds	r7, #20
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fd4a:	79fb      	ldrb	r3, [r7, #7]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d102      	bne.n	800fd56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fd50:	2301      	movs	r3, #1
 800fd52:	73fb      	strb	r3, [r7, #15]
 800fd54:	e001      	b.n	800fd5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fd56:	2300      	movs	r3, #0
 800fd58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800fd5a:	7bfb      	ldrb	r3, [r7, #15]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	2120      	movs	r1, #32
 800fd60:	4803      	ldr	r0, [pc, #12]	; (800fd70 <MX_DriverVbusFS+0x34>)
 800fd62:	f7f4 fd85 	bl	8004870 <HAL_GPIO_WritePin>
}
 800fd66:	bf00      	nop
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	40020c00 	.word	0x40020c00

0800fd74 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	3303      	adds	r3, #3
 800fd84:	f023 0303 	bic.w	r3, r3, #3
 800fd88:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 800fd8a:	4b16      	ldr	r3, [pc, #88]	; (800fde4 <sine_model_configure_activations+0x70>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 800fd90:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <sine_model_configure_activations+0x70>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800fd96:	4a14      	ldr	r2, [pc, #80]	; (800fde8 <sine_model_configure_activations+0x74>)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800fd9c:	4a12      	ldr	r2, [pc, #72]	; (800fde8 <sine_model_configure_activations+0x74>)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800fda2:	4a12      	ldr	r2, [pc, #72]	; (800fdec <sine_model_configure_activations+0x78>)
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800fda8:	4a10      	ldr	r2, [pc, #64]	; (800fdec <sine_model_configure_activations+0x78>)
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	3340      	adds	r3, #64	; 0x40
 800fdb2:	4a0f      	ldr	r2, [pc, #60]	; (800fdf0 <sine_model_configure_activations+0x7c>)
 800fdb4:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3340      	adds	r3, #64	; 0x40
 800fdba:	4a0d      	ldr	r2, [pc, #52]	; (800fdf0 <sine_model_configure_activations+0x7c>)
 800fdbc:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 800fdbe:	4a0d      	ldr	r2, [pc, #52]	; (800fdf4 <sine_model_configure_activations+0x80>)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 800fdc4:	4a0b      	ldr	r2, [pc, #44]	; (800fdf4 <sine_model_configure_activations+0x80>)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 800fdca:	4b0b      	ldr	r3, [pc, #44]	; (800fdf8 <sine_model_configure_activations+0x84>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 800fdd0:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <sine_model_configure_activations+0x84>)
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800fdd6:	2301      	movs	r3, #1
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	200000ec 	.word	0x200000ec
 800fde8:	200000fc 	.word	0x200000fc
 800fdec:	2000010c 	.word	0x2000010c
 800fdf0:	2000011c 	.word	0x2000011c
 800fdf4:	2000012c 	.word	0x2000012c
 800fdf8:	2000013c 	.word	0x2000013c

0800fdfc <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b085      	sub	sp, #20
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe0c:	4b2f      	ldr	r3, [pc, #188]	; (800fecc <sine_model_configure_weights+0xd0>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe14:	4a2d      	ldr	r2, [pc, #180]	; (800fecc <sine_model_configure_weights+0xd0>)
 800fe16:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 448);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800fe1e:	4a2b      	ldr	r2, [pc, #172]	; (800fecc <sine_model_configure_weights+0xd0>)
 800fe20:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 448);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800fe28:	4a28      	ldr	r2, [pc, #160]	; (800fecc <sine_model_configure_weights+0xd0>)
 800fe2a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800fe2c:	4b28      	ldr	r3, [pc, #160]	; (800fed0 <sine_model_configure_weights+0xd4>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe34:	4a26      	ldr	r2, [pc, #152]	; (800fed0 <sine_model_configure_weights+0xd4>)
 800fe36:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 384);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800fe3e:	4a24      	ldr	r2, [pc, #144]	; (800fed0 <sine_model_configure_weights+0xd4>)
 800fe40:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 384);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800fe48:	4a21      	ldr	r2, [pc, #132]	; (800fed0 <sine_model_configure_weights+0xd4>)
 800fe4a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe4c:	4b21      	ldr	r3, [pc, #132]	; (800fed4 <sine_model_configure_weights+0xd8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe54:	4a1f      	ldr	r2, [pc, #124]	; (800fed4 <sine_model_configure_weights+0xd8>)
 800fe56:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 320);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fe5e:	4a1d      	ldr	r2, [pc, #116]	; (800fed4 <sine_model_configure_weights+0xd8>)
 800fe60:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 320);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fe68:	4a1a      	ldr	r2, [pc, #104]	; (800fed4 <sine_model_configure_weights+0xd8>)
 800fe6a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800fe6c:	4b1a      	ldr	r3, [pc, #104]	; (800fed8 <sine_model_configure_weights+0xdc>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe74:	4a18      	ldr	r2, [pc, #96]	; (800fed8 <sine_model_configure_weights+0xdc>)
 800fe76:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 192);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	33c0      	adds	r3, #192	; 0xc0
 800fe7c:	4a16      	ldr	r2, [pc, #88]	; (800fed8 <sine_model_configure_weights+0xdc>)
 800fe7e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	3380      	adds	r3, #128	; 0x80
 800fe84:	4a14      	ldr	r2, [pc, #80]	; (800fed8 <sine_model_configure_weights+0xdc>)
 800fe86:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe88:	4b14      	ldr	r3, [pc, #80]	; (800fedc <sine_model_configure_weights+0xe0>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe90:	4a12      	ldr	r2, [pc, #72]	; (800fedc <sine_model_configure_weights+0xe0>)
 800fe92:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	3340      	adds	r3, #64	; 0x40
 800fe98:	4a10      	ldr	r2, [pc, #64]	; (800fedc <sine_model_configure_weights+0xe0>)
 800fe9a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	3340      	adds	r3, #64	; 0x40
 800fea0:	4a0e      	ldr	r2, [pc, #56]	; (800fedc <sine_model_configure_weights+0xe0>)
 800fea2:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800fea4:	4b0e      	ldr	r3, [pc, #56]	; (800fee0 <sine_model_configure_weights+0xe4>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800feac:	4a0c      	ldr	r2, [pc, #48]	; (800fee0 <sine_model_configure_weights+0xe4>)
 800feae:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 800feb0:	4a0b      	ldr	r2, [pc, #44]	; (800fee0 <sine_model_configure_weights+0xe4>)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800feb6:	4a0a      	ldr	r2, [pc, #40]	; (800fee0 <sine_model_configure_weights+0xe4>)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800febc:	2301      	movs	r3, #1
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	2000008c 	.word	0x2000008c
 800fed0:	2000009c 	.word	0x2000009c
 800fed4:	200000ac 	.word	0x200000ac
 800fed8:	200000bc 	.word	0x200000bc
 800fedc:	200000cc 	.word	0x200000cc
 800fee0:	200000dc 	.word	0x200000dc

0800fee4 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af02      	add	r7, sp, #8
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800feee:	2300      	movs	r3, #0
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	2303      	movs	r3, #3
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	2301      	movs	r3, #1
 800fef8:	4a04      	ldr	r2, [pc, #16]	; (800ff0c <ai_sine_model_create+0x28>)
 800fefa:	6839      	ldr	r1, [r7, #0]
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f861 	bl	800ffc4 <ai_platform_network_create>
 800ff02:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	2000002c 	.word	0x2000002c

0800ff10 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f8d5 	bl	80100cc <ai_platform_network_init>
 800ff22:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <ai_sine_model_init+0x1e>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	e02b      	b.n	800ff86 <ai_sine_model_init+0x76>

  ai_bool ok = true;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	4619      	mov	r1, r3
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f7ff ff60 	bl	800fdfc <sine_model_configure_weights>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	461a      	mov	r2, r3
 800ff40:	7afb      	ldrb	r3, [r7, #11]
 800ff42:	4013      	ands	r3, r2
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	bf14      	ite	ne
 800ff48:	2301      	movne	r3, #1
 800ff4a:	2300      	moveq	r3, #0
 800ff4c:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	3318      	adds	r3, #24
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f7ff ff0d 	bl	800fd74 <sine_model_configure_activations>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	7afb      	ldrb	r3, [r7, #11]
 800ff60:	4013      	ands	r3, r2
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	bf14      	ite	ne
 800ff66:	2301      	movne	r3, #1
 800ff68:	2300      	moveq	r3, #0
 800ff6a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 f995 	bl	801029c <ai_platform_network_post_init>
 800ff72:	4603      	mov	r3, r0
 800ff74:	461a      	mov	r2, r3
 800ff76:	7afb      	ldrb	r3, [r7, #11]
 800ff78:	4013      	ands	r3, r2
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	bf14      	ite	ne
 800ff7e:	2301      	movne	r3, #1
 800ff80:	2300      	moveq	r3, #0
 800ff82:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ff84:	7afb      	ldrb	r3, [r7, #11]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b084      	sub	sp, #16
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	60f8      	str	r0, [r7, #12]
 800ff96:	60b9      	str	r1, [r7, #8]
 800ff98:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	68b9      	ldr	r1, [r7, #8]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f000 fa28 	bl	80103f4 <ai_platform_network_process>
 800ffa4:	4603      	mov	r3, r0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
	...

0800ffb0 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	af00      	add	r7, sp, #0
    0x6d, 0x59, 0xbe, 0x5a, 0xac, 0x15, 0x40, 0x0c, 0x2f,
    0xe0, 0x3e, 0x30, 0x6a, 0x25, 0x3f, 0xaf, 0xda, 0xee,
    0x3d, 0x9d, 0x54, 0xfb, 0xbe, 0x19, 0x36, 0x1f, 0xbd
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 800ffb4:	4b02      	ldr	r3, [pc, #8]	; (800ffc0 <ai_sine_model_data_weights_get+0x10>)

}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	080146a0 	.word	0x080146a0

0800ffc4 <ai_platform_network_create>:
 800ffc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc6:	4d36      	ldr	r5, [pc, #216]	; (80100a0 <ai_platform_network_create+0xdc>)
 800ffc8:	b083      	sub	sp, #12
 800ffca:	4e36      	ldr	r6, [pc, #216]	; (80100a4 <ai_platform_network_create+0xe0>)
 800ffcc:	6829      	ldr	r1, [r5, #0]
 800ffce:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800ffd2:	f021 0101 	bic.w	r1, r1, #1
 800ffd6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800ffda:	6029      	str	r1, [r5, #0]
 800ffdc:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800ffe0:	6831      	ldr	r1, [r6, #0]
 800ffe2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800ffe6:	194d      	adds	r5, r1, r5
 800ffe8:	2d01      	cmp	r5, #1
 800ffea:	d92f      	bls.n	801004c <ai_platform_network_create+0x88>
 800ffec:	f240 4549 	movw	r5, #1097	; 0x449
 800fff0:	42a9      	cmp	r1, r5
 800fff2:	d02b      	beq.n	801004c <ai_platform_network_create+0x88>
 800fff4:	492c      	ldr	r1, [pc, #176]	; (80100a8 <ai_platform_network_create+0xe4>)
 800fff6:	6809      	ldr	r1, [r1, #0]
 800fff8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800fffc:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8010000:	d015      	beq.n	801002e <ai_platform_network_create+0x6a>
 8010002:	2800      	cmp	r0, #0
 8010004:	d031      	beq.n	801006a <ai_platform_network_create+0xa6>
 8010006:	461e      	mov	r6, r3
 8010008:	4613      	mov	r3, r2
 801000a:	4a28      	ldr	r2, [pc, #160]	; (80100ac <ai_platform_network_create+0xe8>)
 801000c:	4605      	mov	r5, r0
 801000e:	601a      	str	r2, [r3, #0]
 8010010:	6003      	str	r3, [r0, #0]
 8010012:	f000 fc9f 	bl	8010954 <core_init>
 8010016:	2800      	cmp	r0, #0
 8010018:	d02b      	beq.n	8010072 <ai_platform_network_create+0xae>
 801001a:	0223      	lsls	r3, r4, #8
 801001c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010020:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8010024:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8010028:	d92e      	bls.n	8010088 <ai_platform_network_create+0xc4>
 801002a:	2301      	movs	r3, #1
 801002c:	e022      	b.n	8010074 <ai_platform_network_create+0xb0>
 801002e:	4920      	ldr	r1, [pc, #128]	; (80100b0 <ai_platform_network_create+0xec>)
 8010030:	2501      	movs	r5, #1
 8010032:	460e      	mov	r6, r1
 8010034:	600d      	str	r5, [r1, #0]
 8010036:	6831      	ldr	r1, [r6, #0]
 8010038:	2900      	cmp	r1, #0
 801003a:	d1fc      	bne.n	8010036 <ai_platform_network_create+0x72>
 801003c:	491d      	ldr	r1, [pc, #116]	; (80100b4 <ai_platform_network_create+0xf0>)
 801003e:	4e1e      	ldr	r6, [pc, #120]	; (80100b8 <ai_platform_network_create+0xf4>)
 8010040:	4d1e      	ldr	r5, [pc, #120]	; (80100bc <ai_platform_network_create+0xf8>)
 8010042:	600e      	str	r6, [r1, #0]
 8010044:	6809      	ldr	r1, [r1, #0]
 8010046:	42a9      	cmp	r1, r5
 8010048:	d0db      	beq.n	8010002 <ai_platform_network_create+0x3e>
 801004a:	e7fe      	b.n	801004a <ai_platform_network_create+0x86>
 801004c:	491c      	ldr	r1, [pc, #112]	; (80100c0 <ai_platform_network_create+0xfc>)
 801004e:	2501      	movs	r5, #1
 8010050:	460e      	mov	r6, r1
 8010052:	600d      	str	r5, [r1, #0]
 8010054:	6831      	ldr	r1, [r6, #0]
 8010056:	2900      	cmp	r1, #0
 8010058:	d1fc      	bne.n	8010054 <ai_platform_network_create+0x90>
 801005a:	491a      	ldr	r1, [pc, #104]	; (80100c4 <ai_platform_network_create+0x100>)
 801005c:	4e16      	ldr	r6, [pc, #88]	; (80100b8 <ai_platform_network_create+0xf4>)
 801005e:	4d17      	ldr	r5, [pc, #92]	; (80100bc <ai_platform_network_create+0xf8>)
 8010060:	600e      	str	r6, [r1, #0]
 8010062:	6809      	ldr	r1, [r1, #0]
 8010064:	42a9      	cmp	r1, r5
 8010066:	d0cc      	beq.n	8010002 <ai_platform_network_create+0x3e>
 8010068:	e7fe      	b.n	8010068 <ai_platform_network_create+0xa4>
 801006a:	f241 0010 	movw	r0, #4112	; 0x1010
 801006e:	b003      	add	sp, #12
 8010070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010072:	2330      	movs	r3, #48	; 0x30
 8010074:	2100      	movs	r1, #0
 8010076:	2210      	movs	r2, #16
 8010078:	6029      	str	r1, [r5, #0]
 801007a:	2000      	movs	r0, #0
 801007c:	f363 0007 	bfi	r0, r3, #0, #8
 8010080:	f362 201f 	bfi	r0, r2, #8, #24
 8010084:	b003      	add	sp, #12
 8010086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010088:	4b0f      	ldr	r3, [pc, #60]	; (80100c8 <ai_platform_network_create+0x104>)
 801008a:	a802      	add	r0, sp, #8
 801008c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010090:	f001 fa82 	bl	8011598 <ai_check_custom_types>
 8010094:	b110      	cbz	r0, 801009c <ai_platform_network_create+0xd8>
 8010096:	2200      	movs	r2, #0
 8010098:	4613      	mov	r3, r2
 801009a:	e7ee      	b.n	801007a <ai_platform_network_create+0xb6>
 801009c:	2302      	movs	r3, #2
 801009e:	e7e9      	b.n	8010074 <ai_platform_network_create+0xb0>
 80100a0:	e0002000 	.word	0xe0002000
 80100a4:	e0042000 	.word	0xe0042000
 80100a8:	5c001000 	.word	0x5c001000
 80100ac:	a1c00100 	.word	0xa1c00100
 80100b0:	58024c08 	.word	0x58024c08
 80100b4:	58024c00 	.word	0x58024c00
 80100b8:	f407a5c2 	.word	0xf407a5c2
 80100bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80100c0:	40023008 	.word	0x40023008
 80100c4:	40023000 	.word	0x40023000
 80100c8:	84048403 	.word	0x84048403

080100cc <ai_platform_network_init>:
 80100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d05e      	beq.n	8010190 <ai_platform_network_init+0xc4>
 80100d2:	4b68      	ldr	r3, [pc, #416]	; (8010274 <ai_platform_network_init+0x1a8>)
 80100d4:	6802      	ldr	r2, [r0, #0]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d15a      	bne.n	8010190 <ai_platform_network_init+0xc4>
 80100da:	4a67      	ldr	r2, [pc, #412]	; (8010278 <ai_platform_network_init+0x1ac>)
 80100dc:	4c67      	ldr	r4, [pc, #412]	; (801027c <ai_platform_network_init+0x1b0>)
 80100de:	6813      	ldr	r3, [r2, #0]
 80100e0:	f023 0301 	bic.w	r3, r3, #1
 80100e4:	6013      	str	r3, [r2, #0]
 80100e6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80100ea:	6823      	ldr	r3, [r4, #0]
 80100ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100f0:	189a      	adds	r2, r3, r2
 80100f2:	2a01      	cmp	r2, #1
 80100f4:	d93d      	bls.n	8010172 <ai_platform_network_init+0xa6>
 80100f6:	f240 4249 	movw	r2, #1097	; 0x449
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d039      	beq.n	8010172 <ai_platform_network_init+0xa6>
 80100fe:	4b60      	ldr	r3, [pc, #384]	; (8010280 <ai_platform_network_init+0x1b4>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010106:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801010a:	d06b      	beq.n	80101e4 <ai_platform_network_init+0x118>
 801010c:	4605      	mov	r5, r0
 801010e:	460c      	mov	r4, r1
 8010110:	2900      	cmp	r1, #0
 8010112:	f000 80a8 	beq.w	8010266 <ai_platform_network_init+0x19a>
 8010116:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8010118:	690e      	ldr	r6, [r1, #16]
 801011a:	2f00      	cmp	r7, #0
 801011c:	f000 8092 	beq.w	8010244 <ai_platform_network_init+0x178>
 8010120:	2e00      	cmp	r6, #0
 8010122:	d07d      	beq.n	8010220 <ai_platform_network_init+0x154>
 8010124:	f104 0718 	add.w	r7, r4, #24
 8010128:	f105 0c18 	add.w	ip, r5, #24
 801012c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8010130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010136:	e894 0003 	ldmia.w	r4, {r0, r1}
 801013a:	2403      	movs	r4, #3
 801013c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010140:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010142:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010144:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010148:	e886 0003 	stmia.w	r6, {r0, r1}
 801014c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801014e:	60ec      	str	r4, [r5, #12]
 8010150:	b16a      	cbz	r2, 801016e <ai_platform_network_init+0xa2>
 8010152:	68d3      	ldr	r3, [r2, #12]
 8010154:	6095      	str	r5, [r2, #8]
 8010156:	b153      	cbz	r3, 801016e <ai_platform_network_init+0xa2>
 8010158:	429a      	cmp	r2, r3
 801015a:	d104      	bne.n	8010166 <ai_platform_network_init+0x9a>
 801015c:	e007      	b.n	801016e <ai_platform_network_init+0xa2>
 801015e:	429a      	cmp	r2, r3
 8010160:	4613      	mov	r3, r2
 8010162:	d004      	beq.n	801016e <ai_platform_network_init+0xa2>
 8010164:	b11a      	cbz	r2, 801016e <ai_platform_network_init+0xa2>
 8010166:	68da      	ldr	r2, [r3, #12]
 8010168:	609d      	str	r5, [r3, #8]
 801016a:	2a00      	cmp	r2, #0
 801016c:	d1f7      	bne.n	801015e <ai_platform_network_init+0x92>
 801016e:	4628      	mov	r0, r5
 8010170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010172:	4b44      	ldr	r3, [pc, #272]	; (8010284 <ai_platform_network_init+0x1b8>)
 8010174:	2201      	movs	r2, #1
 8010176:	461c      	mov	r4, r3
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1fc      	bne.n	801017a <ai_platform_network_init+0xae>
 8010180:	4b41      	ldr	r3, [pc, #260]	; (8010288 <ai_platform_network_init+0x1bc>)
 8010182:	4c42      	ldr	r4, [pc, #264]	; (801028c <ai_platform_network_init+0x1c0>)
 8010184:	4a42      	ldr	r2, [pc, #264]	; (8010290 <ai_platform_network_init+0x1c4>)
 8010186:	601c      	str	r4, [r3, #0]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4293      	cmp	r3, r2
 801018c:	d0be      	beq.n	801010c <ai_platform_network_init+0x40>
 801018e:	e7fe      	b.n	801018e <ai_platform_network_init+0xc2>
 8010190:	4a39      	ldr	r2, [pc, #228]	; (8010278 <ai_platform_network_init+0x1ac>)
 8010192:	493a      	ldr	r1, [pc, #232]	; (801027c <ai_platform_network_init+0x1b0>)
 8010194:	6813      	ldr	r3, [r2, #0]
 8010196:	f023 0301 	bic.w	r3, r3, #1
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	680b      	ldr	r3, [r1, #0]
 801019e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80101a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101a6:	185a      	adds	r2, r3, r1
 80101a8:	2a01      	cmp	r2, #1
 80101aa:	d90c      	bls.n	80101c6 <ai_platform_network_init+0xfa>
 80101ac:	f240 4249 	movw	r2, #1097	; 0x449
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d008      	beq.n	80101c6 <ai_platform_network_init+0xfa>
 80101b4:	4b32      	ldr	r3, [pc, #200]	; (8010280 <ai_platform_network_init+0x1b4>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101bc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80101c0:	d01f      	beq.n	8010202 <ai_platform_network_init+0x136>
 80101c2:	2000      	movs	r0, #0
 80101c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c6:	4b2f      	ldr	r3, [pc, #188]	; (8010284 <ai_platform_network_init+0x1b8>)
 80101c8:	2201      	movs	r2, #1
 80101ca:	4619      	mov	r1, r3
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	680b      	ldr	r3, [r1, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d1fc      	bne.n	80101ce <ai_platform_network_init+0x102>
 80101d4:	4b2c      	ldr	r3, [pc, #176]	; (8010288 <ai_platform_network_init+0x1bc>)
 80101d6:	492d      	ldr	r1, [pc, #180]	; (801028c <ai_platform_network_init+0x1c0>)
 80101d8:	4a2d      	ldr	r2, [pc, #180]	; (8010290 <ai_platform_network_init+0x1c4>)
 80101da:	6019      	str	r1, [r3, #0]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4293      	cmp	r3, r2
 80101e0:	d0ef      	beq.n	80101c2 <ai_platform_network_init+0xf6>
 80101e2:	e7fe      	b.n	80101e2 <ai_platform_network_init+0x116>
 80101e4:	4b2b      	ldr	r3, [pc, #172]	; (8010294 <ai_platform_network_init+0x1c8>)
 80101e6:	2201      	movs	r2, #1
 80101e8:	461c      	mov	r4, r3
 80101ea:	601a      	str	r2, [r3, #0]
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1fc      	bne.n	80101ec <ai_platform_network_init+0x120>
 80101f2:	4b29      	ldr	r3, [pc, #164]	; (8010298 <ai_platform_network_init+0x1cc>)
 80101f4:	4c25      	ldr	r4, [pc, #148]	; (801028c <ai_platform_network_init+0x1c0>)
 80101f6:	4a26      	ldr	r2, [pc, #152]	; (8010290 <ai_platform_network_init+0x1c4>)
 80101f8:	601c      	str	r4, [r3, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d085      	beq.n	801010c <ai_platform_network_init+0x40>
 8010200:	e7fe      	b.n	8010200 <ai_platform_network_init+0x134>
 8010202:	4b24      	ldr	r3, [pc, #144]	; (8010294 <ai_platform_network_init+0x1c8>)
 8010204:	2201      	movs	r2, #1
 8010206:	4619      	mov	r1, r3
 8010208:	601a      	str	r2, [r3, #0]
 801020a:	680b      	ldr	r3, [r1, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1fc      	bne.n	801020a <ai_platform_network_init+0x13e>
 8010210:	4b21      	ldr	r3, [pc, #132]	; (8010298 <ai_platform_network_init+0x1cc>)
 8010212:	491e      	ldr	r1, [pc, #120]	; (801028c <ai_platform_network_init+0x1c0>)
 8010214:	4a1e      	ldr	r2, [pc, #120]	; (8010290 <ai_platform_network_init+0x1c4>)
 8010216:	6019      	str	r1, [r3, #0]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4293      	cmp	r3, r2
 801021c:	d0d1      	beq.n	80101c2 <ai_platform_network_init+0xf6>
 801021e:	e7fe      	b.n	801021e <ai_platform_network_init+0x152>
 8010220:	8921      	ldrh	r1, [r4, #8]
 8010222:	88e2      	ldrh	r2, [r4, #6]
 8010224:	68e3      	ldr	r3, [r4, #12]
 8010226:	fb02 f201 	mul.w	r2, r2, r1
 801022a:	fb03 f302 	mul.w	r3, r3, r2
 801022e:	2b00      	cmp	r3, #0
 8010230:	f43f af78 	beq.w	8010124 <ai_platform_network_init+0x58>
 8010234:	f105 0010 	add.w	r0, r5, #16
 8010238:	2212      	movs	r2, #18
 801023a:	2110      	movs	r1, #16
 801023c:	f000 fb8c 	bl	8010958 <core_set_error>
 8010240:	4630      	mov	r0, r6
 8010242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010244:	8c09      	ldrh	r1, [r1, #32]
 8010246:	8be2      	ldrh	r2, [r4, #30]
 8010248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801024a:	fb02 f201 	mul.w	r2, r2, r1
 801024e:	fb03 f302 	mul.w	r3, r3, r2
 8010252:	2b00      	cmp	r3, #0
 8010254:	f43f af64 	beq.w	8010120 <ai_platform_network_init+0x54>
 8010258:	2213      	movs	r2, #19
 801025a:	2110      	movs	r1, #16
 801025c:	3010      	adds	r0, #16
 801025e:	f000 fb7b 	bl	8010958 <core_set_error>
 8010262:	4638      	mov	r0, r7
 8010264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010266:	2211      	movs	r2, #17
 8010268:	2110      	movs	r1, #16
 801026a:	3010      	adds	r0, #16
 801026c:	f000 fb74 	bl	8010958 <core_set_error>
 8010270:	4620      	mov	r0, r4
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010274:	a1c00100 	.word	0xa1c00100
 8010278:	e0002000 	.word	0xe0002000
 801027c:	e0042000 	.word	0xe0042000
 8010280:	5c001000 	.word	0x5c001000
 8010284:	40023008 	.word	0x40023008
 8010288:	40023000 	.word	0x40023000
 801028c:	f407a5c2 	.word	0xf407a5c2
 8010290:	b5e8b5cd 	.word	0xb5e8b5cd
 8010294:	58024c08 	.word	0x58024c08
 8010298:	58024c00 	.word	0x58024c00

0801029c <ai_platform_network_post_init>:
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	b118      	cbz	r0, 80102a8 <ai_platform_network_post_init+0xc>
 80102a0:	4b4a      	ldr	r3, [pc, #296]	; (80103cc <ai_platform_network_post_init+0x130>)
 80102a2:	6802      	ldr	r2, [r0, #0]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d029      	beq.n	80102fc <ai_platform_network_post_init+0x60>
 80102a8:	4a49      	ldr	r2, [pc, #292]	; (80103d0 <ai_platform_network_post_init+0x134>)
 80102aa:	494a      	ldr	r1, [pc, #296]	; (80103d4 <ai_platform_network_post_init+0x138>)
 80102ac:	6813      	ldr	r3, [r2, #0]
 80102ae:	f023 0301 	bic.w	r3, r3, #1
 80102b2:	6013      	str	r3, [r2, #0]
 80102b4:	680b      	ldr	r3, [r1, #0]
 80102b6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80102ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102be:	185a      	adds	r2, r3, r1
 80102c0:	2a01      	cmp	r2, #1
 80102c2:	d90c      	bls.n	80102de <ai_platform_network_post_init+0x42>
 80102c4:	f240 4249 	movw	r2, #1097	; 0x449
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d008      	beq.n	80102de <ai_platform_network_post_init+0x42>
 80102cc:	4b42      	ldr	r3, [pc, #264]	; (80103d8 <ai_platform_network_post_init+0x13c>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80102d8:	d044      	beq.n	8010364 <ai_platform_network_post_init+0xc8>
 80102da:	2000      	movs	r0, #0
 80102dc:	bd38      	pop	{r3, r4, r5, pc}
 80102de:	4b3f      	ldr	r3, [pc, #252]	; (80103dc <ai_platform_network_post_init+0x140>)
 80102e0:	2201      	movs	r2, #1
 80102e2:	4619      	mov	r1, r3
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	680b      	ldr	r3, [r1, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1fc      	bne.n	80102e6 <ai_platform_network_post_init+0x4a>
 80102ec:	4b3c      	ldr	r3, [pc, #240]	; (80103e0 <ai_platform_network_post_init+0x144>)
 80102ee:	493d      	ldr	r1, [pc, #244]	; (80103e4 <ai_platform_network_post_init+0x148>)
 80102f0:	4a3d      	ldr	r2, [pc, #244]	; (80103e8 <ai_platform_network_post_init+0x14c>)
 80102f2:	6019      	str	r1, [r3, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d0ef      	beq.n	80102da <ai_platform_network_post_init+0x3e>
 80102fa:	e7fe      	b.n	80102fa <ai_platform_network_post_init+0x5e>
 80102fc:	4a34      	ldr	r2, [pc, #208]	; (80103d0 <ai_platform_network_post_init+0x134>)
 80102fe:	4935      	ldr	r1, [pc, #212]	; (80103d4 <ai_platform_network_post_init+0x138>)
 8010300:	6813      	ldr	r3, [r2, #0]
 8010302:	f023 0301 	bic.w	r3, r3, #1
 8010306:	6013      	str	r3, [r2, #0]
 8010308:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801030c:	680b      	ldr	r3, [r1, #0]
 801030e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010312:	189a      	adds	r2, r3, r2
 8010314:	2a01      	cmp	r2, #1
 8010316:	d94a      	bls.n	80103ae <ai_platform_network_post_init+0x112>
 8010318:	f240 4249 	movw	r2, #1097	; 0x449
 801031c:	4293      	cmp	r3, r2
 801031e:	d046      	beq.n	80103ae <ai_platform_network_post_init+0x112>
 8010320:	4b2d      	ldr	r3, [pc, #180]	; (80103d8 <ai_platform_network_post_init+0x13c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010328:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801032c:	d030      	beq.n	8010390 <ai_platform_network_post_init+0xf4>
 801032e:	68c3      	ldr	r3, [r0, #12]
 8010330:	4604      	mov	r4, r0
 8010332:	f013 0502 	ands.w	r5, r3, #2
 8010336:	d024      	beq.n	8010382 <ai_platform_network_post_init+0xe6>
 8010338:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801033a:	b18b      	cbz	r3, 8010360 <ai_platform_network_post_init+0xc4>
 801033c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801033e:	b90d      	cbnz	r5, 8010344 <ai_platform_network_post_init+0xa8>
 8010340:	e00e      	b.n	8010360 <ai_platform_network_post_init+0xc4>
 8010342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010344:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010346:	4629      	mov	r1, r5
 8010348:	2000      	movs	r0, #0
 801034a:	4798      	blx	r3
 801034c:	68ea      	ldr	r2, [r5, #12]
 801034e:	1b53      	subs	r3, r2, r5
 8010350:	4615      	mov	r5, r2
 8010352:	bf18      	it	ne
 8010354:	2301      	movne	r3, #1
 8010356:	2a00      	cmp	r2, #0
 8010358:	bf08      	it	eq
 801035a:	2300      	moveq	r3, #0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1f0      	bne.n	8010342 <ai_platform_network_post_init+0xa6>
 8010360:	2001      	movs	r0, #1
 8010362:	bd38      	pop	{r3, r4, r5, pc}
 8010364:	4b21      	ldr	r3, [pc, #132]	; (80103ec <ai_platform_network_post_init+0x150>)
 8010366:	2201      	movs	r2, #1
 8010368:	4619      	mov	r1, r3
 801036a:	601a      	str	r2, [r3, #0]
 801036c:	680b      	ldr	r3, [r1, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1fc      	bne.n	801036c <ai_platform_network_post_init+0xd0>
 8010372:	4b1f      	ldr	r3, [pc, #124]	; (80103f0 <ai_platform_network_post_init+0x154>)
 8010374:	491b      	ldr	r1, [pc, #108]	; (80103e4 <ai_platform_network_post_init+0x148>)
 8010376:	4a1c      	ldr	r2, [pc, #112]	; (80103e8 <ai_platform_network_post_init+0x14c>)
 8010378:	6019      	str	r1, [r3, #0]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	4293      	cmp	r3, r2
 801037e:	d0ac      	beq.n	80102da <ai_platform_network_post_init+0x3e>
 8010380:	e7fe      	b.n	8010380 <ai_platform_network_post_init+0xe4>
 8010382:	2210      	movs	r2, #16
 8010384:	2111      	movs	r1, #17
 8010386:	3010      	adds	r0, #16
 8010388:	f000 fae6 	bl	8010958 <core_set_error>
 801038c:	4628      	mov	r0, r5
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	4b16      	ldr	r3, [pc, #88]	; (80103ec <ai_platform_network_post_init+0x150>)
 8010392:	2201      	movs	r2, #1
 8010394:	4619      	mov	r1, r3
 8010396:	601a      	str	r2, [r3, #0]
 8010398:	680b      	ldr	r3, [r1, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d1fc      	bne.n	8010398 <ai_platform_network_post_init+0xfc>
 801039e:	4b14      	ldr	r3, [pc, #80]	; (80103f0 <ai_platform_network_post_init+0x154>)
 80103a0:	4910      	ldr	r1, [pc, #64]	; (80103e4 <ai_platform_network_post_init+0x148>)
 80103a2:	4a11      	ldr	r2, [pc, #68]	; (80103e8 <ai_platform_network_post_init+0x14c>)
 80103a4:	6019      	str	r1, [r3, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d0c0      	beq.n	801032e <ai_platform_network_post_init+0x92>
 80103ac:	e7fe      	b.n	80103ac <ai_platform_network_post_init+0x110>
 80103ae:	4b0b      	ldr	r3, [pc, #44]	; (80103dc <ai_platform_network_post_init+0x140>)
 80103b0:	2201      	movs	r2, #1
 80103b2:	4619      	mov	r1, r3
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	680b      	ldr	r3, [r1, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1fc      	bne.n	80103b6 <ai_platform_network_post_init+0x11a>
 80103bc:	4b08      	ldr	r3, [pc, #32]	; (80103e0 <ai_platform_network_post_init+0x144>)
 80103be:	4909      	ldr	r1, [pc, #36]	; (80103e4 <ai_platform_network_post_init+0x148>)
 80103c0:	4a09      	ldr	r2, [pc, #36]	; (80103e8 <ai_platform_network_post_init+0x14c>)
 80103c2:	6019      	str	r1, [r3, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d0b1      	beq.n	801032e <ai_platform_network_post_init+0x92>
 80103ca:	e7fe      	b.n	80103ca <ai_platform_network_post_init+0x12e>
 80103cc:	a1c00100 	.word	0xa1c00100
 80103d0:	e0002000 	.word	0xe0002000
 80103d4:	e0042000 	.word	0xe0042000
 80103d8:	5c001000 	.word	0x5c001000
 80103dc:	40023008 	.word	0x40023008
 80103e0:	40023000 	.word	0x40023000
 80103e4:	f407a5c2 	.word	0xf407a5c2
 80103e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80103ec:	58024c08 	.word	0x58024c08
 80103f0:	58024c00 	.word	0x58024c00

080103f4 <ai_platform_network_process>:
 80103f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f8:	4692      	mov	sl, r2
 80103fa:	b083      	sub	sp, #12
 80103fc:	4604      	mov	r4, r0
 80103fe:	b120      	cbz	r0, 801040a <ai_platform_network_process+0x16>
 8010400:	4b86      	ldr	r3, [pc, #536]	; (801061c <ai_platform_network_process+0x228>)
 8010402:	6802      	ldr	r2, [r0, #0]
 8010404:	429a      	cmp	r2, r3
 8010406:	bf18      	it	ne
 8010408:	2400      	movne	r4, #0
 801040a:	4a85      	ldr	r2, [pc, #532]	; (8010620 <ai_platform_network_process+0x22c>)
 801040c:	4885      	ldr	r0, [pc, #532]	; (8010624 <ai_platform_network_process+0x230>)
 801040e:	6813      	ldr	r3, [r2, #0]
 8010410:	f023 0301 	bic.w	r3, r3, #1
 8010414:	6013      	str	r3, [r2, #0]
 8010416:	6803      	ldr	r3, [r0, #0]
 8010418:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801041c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010420:	181a      	adds	r2, r3, r0
 8010422:	2a01      	cmp	r2, #1
 8010424:	f240 80c6 	bls.w	80105b4 <ai_platform_network_process+0x1c0>
 8010428:	f240 4249 	movw	r2, #1097	; 0x449
 801042c:	4293      	cmp	r3, r2
 801042e:	f000 80c1 	beq.w	80105b4 <ai_platform_network_process+0x1c0>
 8010432:	4b7d      	ldr	r3, [pc, #500]	; (8010628 <ai_platform_network_process+0x234>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801043a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801043e:	f000 80a9 	beq.w	8010594 <ai_platform_network_process+0x1a0>
 8010442:	2c00      	cmp	r4, #0
 8010444:	f000 80db 	beq.w	80105fe <ai_platform_network_process+0x20a>
 8010448:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801044c:	68e0      	ldr	r0, [r4, #12]
 801044e:	461a      	mov	r2, r3
 8010450:	f000 0003 	and.w	r0, r0, #3
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80bd 	beq.w	80105d4 <ai_platform_network_process+0x1e0>
 801045a:	2600      	movs	r6, #0
 801045c:	2803      	cmp	r0, #3
 801045e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010460:	6166      	str	r6, [r4, #20]
 8010462:	f040 80c6 	bne.w	80105f2 <ai_platform_network_process+0x1fe>
 8010466:	2900      	cmp	r1, #0
 8010468:	f000 80b7 	beq.w	80105da <ai_platform_network_process+0x1e6>
 801046c:	fab5 f085 	clz	r0, r5
 8010470:	0940      	lsrs	r0, r0, #5
 8010472:	2800      	cmp	r0, #0
 8010474:	f040 80b1 	bne.w	80105da <ai_platform_network_process+0x1e6>
 8010478:	882e      	ldrh	r6, [r5, #0]
 801047a:	2e00      	cmp	r6, #0
 801047c:	f000 80ad 	beq.w	80105da <ai_platform_network_process+0x1e6>
 8010480:	888f      	ldrh	r7, [r1, #4]
 8010482:	686e      	ldr	r6, [r5, #4]
 8010484:	9701      	str	r7, [sp, #4]
 8010486:	2e00      	cmp	r6, #0
 8010488:	f000 825f 	beq.w	801094a <ai_platform_network_process+0x556>
 801048c:	6836      	ldr	r6, [r6, #0]
 801048e:	2e00      	cmp	r6, #0
 8010490:	f000 825b 	beq.w	801094a <ai_platform_network_process+0x556>
 8010494:	68ab      	ldr	r3, [r5, #8]
 8010496:	f8d3 9000 	ldr.w	r9, [r3]
 801049a:	f1b9 0f00 	cmp.w	r9, #0
 801049e:	f000 809c 	beq.w	80105da <ai_platform_network_process+0x1e6>
 80104a2:	460f      	mov	r7, r1
 80104a4:	4680      	mov	r8, r0
 80104a6:	e05e      	b.n	8010566 <ai_platform_network_process+0x172>
 80104a8:	68f3      	ldr	r3, [r6, #12]
 80104aa:	68da      	ldr	r2, [r3, #12]
 80104ac:	455a      	cmp	r2, fp
 80104ae:	d168      	bne.n	8010582 <ai_platform_network_process+0x18e>
 80104b0:	689a      	ldr	r2, [r3, #8]
 80104b2:	4572      	cmp	r2, lr
 80104b4:	d165      	bne.n	8010582 <ai_platform_network_process+0x18e>
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	459c      	cmp	ip, r3
 80104ba:	d162      	bne.n	8010582 <ai_platform_network_process+0x18e>
 80104bc:	6800      	ldr	r0, [r0, #0]
 80104be:	f001 f91b 	bl	80116f8 <ai_array_get_byte_size>
 80104c2:	68f2      	ldr	r2, [r6, #12]
 80104c4:	6973      	ldr	r3, [r6, #20]
 80104c6:	68d2      	ldr	r2, [r2, #12]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	fb03 f302 	mul.w	r3, r3, r2
 80104ce:	4298      	cmp	r0, r3
 80104d0:	d357      	bcc.n	8010582 <ai_platform_network_process+0x18e>
 80104d2:	69b3      	ldr	r3, [r6, #24]
 80104d4:	6818      	ldr	r0, [r3, #0]
 80104d6:	f001 f8c3 	bl	8011660 <ai_array_to_buffer_fmt>
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	4043      	eors	r3, r0
 80104de:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80104e2:	f040 8229 	bne.w	8010938 <ai_platform_network_process+0x544>
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 821d 	beq.w	8010928 <ai_platform_network_process+0x534>
 80104ee:	88bb      	ldrh	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	f000 808a 	beq.w	801060a <ai_platform_network_process+0x216>
 80104f6:	9a01      	ldr	r2, [sp, #4]
 80104f8:	68f1      	ldr	r1, [r6, #12]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	68c9      	ldr	r1, [r1, #12]
 80104fe:	bf38      	it	cc
 8010500:	461a      	movcc	r2, r3
 8010502:	9201      	str	r2, [sp, #4]
 8010504:	6972      	ldr	r2, [r6, #20]
 8010506:	68d3      	ldr	r3, [r2, #12]
 8010508:	fb03 f301 	mul.w	r3, r3, r1
 801050c:	f8c9 3008 	str.w	r3, [r9, #8]
 8010510:	88ba      	ldrh	r2, [r7, #4]
 8010512:	fb03 f302 	mul.w	r3, r3, r2
 8010516:	f8c9 300c 	str.w	r3, [r9, #12]
 801051a:	6939      	ldr	r1, [r7, #16]
 801051c:	f8c9 1004 	str.w	r1, [r9, #4]
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	4413      	add	r3, r2
 8010524:	f8c9 3000 	str.w	r3, [r9]
 8010528:	69b0      	ldr	r0, [r6, #24]
 801052a:	6803      	ldr	r3, [r0, #0]
 801052c:	009a      	lsls	r2, r3, #2
 801052e:	d408      	bmi.n	8010542 <ai_platform_network_process+0x14e>
 8010530:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010534:	1a9b      	subs	r3, r3, r2
 8010536:	4419      	add	r1, r3
 8010538:	6081      	str	r1, [r0, #8]
 801053a:	69b3      	ldr	r3, [r6, #24]
 801053c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010540:	60da      	str	r2, [r3, #12]
 8010542:	f108 0801 	add.w	r8, r8, #1
 8010546:	882b      	ldrh	r3, [r5, #0]
 8010548:	4598      	cmp	r8, r3
 801054a:	d27b      	bcs.n	8010644 <ai_platform_network_process+0x250>
 801054c:	686b      	ldr	r3, [r5, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d078      	beq.n	8010644 <ai_platform_network_process+0x250>
 8010552:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8010556:	2e00      	cmp	r6, #0
 8010558:	d074      	beq.n	8010644 <ai_platform_network_process+0x250>
 801055a:	68ab      	ldr	r3, [r5, #8]
 801055c:	3718      	adds	r7, #24
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8010564:	d039      	beq.n	80105da <ai_platform_network_process+0x1e6>
 8010566:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 801056a:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 801056e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8010572:	fb0b f30e 	mul.w	r3, fp, lr
 8010576:	69b0      	ldr	r0, [r6, #24]
 8010578:	fb0c f303 	mul.w	r3, ip, r3
 801057c:	6841      	ldr	r1, [r0, #4]
 801057e:	4299      	cmp	r1, r3
 8010580:	d292      	bcs.n	80104a8 <ai_platform_network_process+0xb4>
 8010582:	f104 0010 	add.w	r0, r4, #16
 8010586:	2218      	movs	r2, #24
 8010588:	2112      	movs	r1, #18
 801058a:	f04f 0b00 	mov.w	fp, #0
 801058e:	f000 f9e3 	bl	8010958 <core_set_error>
 8010592:	e02a      	b.n	80105ea <ai_platform_network_process+0x1f6>
 8010594:	4b25      	ldr	r3, [pc, #148]	; (801062c <ai_platform_network_process+0x238>)
 8010596:	2201      	movs	r2, #1
 8010598:	4618      	mov	r0, r3
 801059a:	601a      	str	r2, [r3, #0]
 801059c:	6803      	ldr	r3, [r0, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d1fc      	bne.n	801059c <ai_platform_network_process+0x1a8>
 80105a2:	4b23      	ldr	r3, [pc, #140]	; (8010630 <ai_platform_network_process+0x23c>)
 80105a4:	4823      	ldr	r0, [pc, #140]	; (8010634 <ai_platform_network_process+0x240>)
 80105a6:	4a24      	ldr	r2, [pc, #144]	; (8010638 <ai_platform_network_process+0x244>)
 80105a8:	6018      	str	r0, [r3, #0]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	4293      	cmp	r3, r2
 80105ae:	f43f af48 	beq.w	8010442 <ai_platform_network_process+0x4e>
 80105b2:	e7fe      	b.n	80105b2 <ai_platform_network_process+0x1be>
 80105b4:	4b21      	ldr	r3, [pc, #132]	; (801063c <ai_platform_network_process+0x248>)
 80105b6:	2201      	movs	r2, #1
 80105b8:	4618      	mov	r0, r3
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	6803      	ldr	r3, [r0, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1fc      	bne.n	80105bc <ai_platform_network_process+0x1c8>
 80105c2:	4b1f      	ldr	r3, [pc, #124]	; (8010640 <ai_platform_network_process+0x24c>)
 80105c4:	481b      	ldr	r0, [pc, #108]	; (8010634 <ai_platform_network_process+0x240>)
 80105c6:	4a1c      	ldr	r2, [pc, #112]	; (8010638 <ai_platform_network_process+0x244>)
 80105c8:	6018      	str	r0, [r3, #0]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4293      	cmp	r3, r2
 80105ce:	f43f af38 	beq.w	8010442 <ai_platform_network_process+0x4e>
 80105d2:	e7fe      	b.n	80105d2 <ai_platform_network_process+0x1de>
 80105d4:	2803      	cmp	r0, #3
 80105d6:	6163      	str	r3, [r4, #20]
 80105d8:	d10b      	bne.n	80105f2 <ai_platform_network_process+0x1fe>
 80105da:	f04f 0b00 	mov.w	fp, #0
 80105de:	f104 0010 	add.w	r0, r4, #16
 80105e2:	2217      	movs	r2, #23
 80105e4:	2112      	movs	r1, #18
 80105e6:	f000 f9b7 	bl	8010958 <core_set_error>
 80105ea:	4658      	mov	r0, fp
 80105ec:	b003      	add	sp, #12
 80105ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f2:	f104 0010 	add.w	r0, r4, #16
 80105f6:	2230      	movs	r2, #48	; 0x30
 80105f8:	2111      	movs	r1, #17
 80105fa:	f000 f9ad 	bl	8010958 <core_set_error>
 80105fe:	f04f 0b00 	mov.w	fp, #0
 8010602:	4658      	mov	r0, fp
 8010604:	b003      	add	sp, #12
 8010606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060a:	f104 0010 	add.w	r0, r4, #16
 801060e:	2221      	movs	r2, #33	; 0x21
 8010610:	2112      	movs	r1, #18
 8010612:	469b      	mov	fp, r3
 8010614:	f000 f9a0 	bl	8010958 <core_set_error>
 8010618:	e7e7      	b.n	80105ea <ai_platform_network_process+0x1f6>
 801061a:	bf00      	nop
 801061c:	a1c00100 	.word	0xa1c00100
 8010620:	e0002000 	.word	0xe0002000
 8010624:	e0042000 	.word	0xe0042000
 8010628:	5c001000 	.word	0x5c001000
 801062c:	58024c08 	.word	0x58024c08
 8010630:	58024c00 	.word	0x58024c00
 8010634:	f407a5c2 	.word	0xf407a5c2
 8010638:	b5e8b5cd 	.word	0xb5e8b5cd
 801063c:	40023008 	.word	0x40023008
 8010640:	40023000 	.word	0x40023000
 8010644:	f1ba 0f00 	cmp.w	sl, #0
 8010648:	f000 808c 	beq.w	8010764 <ai_platform_network_process+0x370>
 801064c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010650:	2b01      	cmp	r3, #1
 8010652:	f240 813b 	bls.w	80108cc <ai_platform_network_process+0x4d8>
 8010656:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010658:	f115 0f0c 	cmn.w	r5, #12
 801065c:	f000 8136 	beq.w	80108cc <ai_platform_network_process+0x4d8>
 8010660:	89ab      	ldrh	r3, [r5, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 8132 	beq.w	80108cc <ai_platform_network_process+0x4d8>
 8010668:	4656      	mov	r6, sl
 801066a:	f04f 0900 	mov.w	r9, #0
 801066e:	9400      	str	r4, [sp, #0]
 8010670:	4599      	cmp	r9, r3
 8010672:	d274      	bcs.n	801075e <ai_platform_network_process+0x36a>
 8010674:	692b      	ldr	r3, [r5, #16]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d071      	beq.n	801075e <ai_platform_network_process+0x36a>
 801067a:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 801067e:	2f00      	cmp	r7, #0
 8010680:	d06d      	beq.n	801075e <ai_platform_network_process+0x36a>
 8010682:	696b      	ldr	r3, [r5, #20]
 8010684:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8010688:	f8d3 8000 	ldr.w	r8, [r3]
 801068c:	eb18 0a04 	adds.w	sl, r8, r4
 8010690:	f000 8125 	beq.w	80108de <ai_platform_network_process+0x4ea>
 8010694:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 8010698:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 801069c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80106a0:	fb0b f30e 	mul.w	r3, fp, lr
 80106a4:	69b8      	ldr	r0, [r7, #24]
 80106a6:	fb0c f303 	mul.w	r3, ip, r3
 80106aa:	6841      	ldr	r1, [r0, #4]
 80106ac:	4299      	cmp	r1, r3
 80106ae:	f0c0 810c 	bcc.w	80108ca <ai_platform_network_process+0x4d6>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	68da      	ldr	r2, [r3, #12]
 80106b6:	455a      	cmp	r2, fp
 80106b8:	f040 8107 	bne.w	80108ca <ai_platform_network_process+0x4d6>
 80106bc:	689a      	ldr	r2, [r3, #8]
 80106be:	4572      	cmp	r2, lr
 80106c0:	f040 8103 	bne.w	80108ca <ai_platform_network_process+0x4d6>
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	459c      	cmp	ip, r3
 80106c8:	f040 80ff 	bne.w	80108ca <ai_platform_network_process+0x4d6>
 80106cc:	6800      	ldr	r0, [r0, #0]
 80106ce:	f001 f813 	bl	80116f8 <ai_array_get_byte_size>
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	68d2      	ldr	r2, [r2, #12]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	fb03 f302 	mul.w	r3, r3, r2
 80106de:	4298      	cmp	r0, r3
 80106e0:	f0c0 80f3 	bcc.w	80108ca <ai_platform_network_process+0x4d6>
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	6818      	ldr	r0, [r3, #0]
 80106e8:	f000 ffba 	bl	8011660 <ai_array_to_buffer_fmt>
 80106ec:	6833      	ldr	r3, [r6, #0]
 80106ee:	4043      	eors	r3, r0
 80106f0:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80106f4:	f040 810e 	bne.w	8010914 <ai_platform_network_process+0x520>
 80106f8:	6933      	ldr	r3, [r6, #16]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f000 8101 	beq.w	8010902 <ai_platform_network_process+0x50e>
 8010700:	88b3      	ldrh	r3, [r6, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	f000 80f4 	beq.w	80108f0 <ai_platform_network_process+0x4fc>
 8010708:	9a01      	ldr	r2, [sp, #4]
 801070a:	68f9      	ldr	r1, [r7, #12]
 801070c:	429a      	cmp	r2, r3
 801070e:	68c9      	ldr	r1, [r1, #12]
 8010710:	bf38      	it	cc
 8010712:	461a      	movcc	r2, r3
 8010714:	9201      	str	r2, [sp, #4]
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	68d3      	ldr	r3, [r2, #12]
 801071a:	fb03 f301 	mul.w	r3, r3, r1
 801071e:	f8ca 3008 	str.w	r3, [sl, #8]
 8010722:	88b2      	ldrh	r2, [r6, #4]
 8010724:	fb03 f302 	mul.w	r3, r3, r2
 8010728:	f8ca 300c 	str.w	r3, [sl, #12]
 801072c:	6931      	ldr	r1, [r6, #16]
 801072e:	f8ca 1004 	str.w	r1, [sl, #4]
 8010732:	6932      	ldr	r2, [r6, #16]
 8010734:	4413      	add	r3, r2
 8010736:	f848 3004 	str.w	r3, [r8, r4]
 801073a:	69b8      	ldr	r0, [r7, #24]
 801073c:	6803      	ldr	r3, [r0, #0]
 801073e:	009b      	lsls	r3, r3, #2
 8010740:	d408      	bmi.n	8010754 <ai_platform_network_process+0x360>
 8010742:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010746:	1a9b      	subs	r3, r3, r2
 8010748:	4419      	add	r1, r3
 801074a:	6081      	str	r1, [r0, #8]
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010752:	60da      	str	r2, [r3, #12]
 8010754:	f109 0901 	add.w	r9, r9, #1
 8010758:	3618      	adds	r6, #24
 801075a:	89ab      	ldrh	r3, [r5, #12]
 801075c:	e788      	b.n	8010670 <ai_platform_network_process+0x27c>
 801075e:	e9dd 4300 	ldrd	r4, r3, [sp]
 8010762:	82a3      	strh	r3, [r4, #20]
 8010764:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010768:	2a00      	cmp	r2, #0
 801076a:	f000 80a9 	beq.w	80108c0 <ai_platform_network_process+0x4cc>
 801076e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010770:	2a01      	cmp	r2, #1
 8010772:	f240 80a8 	bls.w	80108c6 <ai_platform_network_process+0x4d2>
 8010776:	f105 060c 	add.w	r6, r5, #12
 801077a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 801077e:	8aa3      	ldrh	r3, [r4, #20]
 8010780:	455b      	cmp	r3, fp
 8010782:	f67f af32 	bls.w	80105ea <ai_platform_network_process+0x1f6>
 8010786:	9400      	str	r4, [sp, #0]
 8010788:	2d00      	cmp	r5, #0
 801078a:	d037      	beq.n	80107fc <ai_platform_network_process+0x408>
 801078c:	882b      	ldrh	r3, [r5, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d034      	beq.n	80107fc <ai_platform_network_process+0x408>
 8010792:	686b      	ldr	r3, [r5, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d031      	beq.n	80107fc <ai_platform_network_process+0x408>
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d02e      	beq.n	80107fc <ai_platform_network_process+0x408>
 801079e:	f04f 0800 	mov.w	r8, #0
 80107a2:	e01a      	b.n	80107da <ai_platform_network_process+0x3e6>
 80107a4:	68d4      	ldr	r4, [r2, #12]
 80107a6:	1b00      	subs	r0, r0, r4
 80107a8:	4401      	add	r1, r0
 80107aa:	6091      	str	r1, [r2, #8]
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	60da      	str	r2, [r3, #12]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f108 0801 	add.w	r8, r8, #1
 80107b8:	68b9      	ldr	r1, [r7, #8]
 80107ba:	f85a 2009 	ldr.w	r2, [sl, r9]
 80107be:	440b      	add	r3, r1
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d301      	bcc.n	80107c8 <ai_platform_network_process+0x3d4>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	607b      	str	r3, [r7, #4]
 80107ca:	882b      	ldrh	r3, [r5, #0]
 80107cc:	4598      	cmp	r8, r3
 80107ce:	d215      	bcs.n	80107fc <ai_platform_network_process+0x408>
 80107d0:	686b      	ldr	r3, [r5, #4]
 80107d2:	b19b      	cbz	r3, 80107fc <ai_platform_network_process+0x408>
 80107d4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80107d8:	b183      	cbz	r3, 80107fc <ai_platform_network_process+0x408>
 80107da:	68a9      	ldr	r1, [r5, #8]
 80107dc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80107e0:	699a      	ldr	r2, [r3, #24]
 80107e2:	f8d1 a000 	ldr.w	sl, [r1]
 80107e6:	6814      	ldr	r4, [r2, #0]
 80107e8:	eb0a 0709 	add.w	r7, sl, r9
 80107ec:	6890      	ldr	r0, [r2, #8]
 80107ee:	00a4      	lsls	r4, r4, #2
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	d5d7      	bpl.n	80107a4 <ai_platform_network_process+0x3b0>
 80107f4:	68ba      	ldr	r2, [r7, #8]
 80107f6:	f000 ffe1 	bl	80117bc <memcpy>
 80107fa:	e7da      	b.n	80107b2 <ai_platform_network_process+0x3be>
 80107fc:	9800      	ldr	r0, [sp, #0]
 80107fe:	f000 fef5 	bl	80115ec <ai_layers_forward_all>
 8010802:	2e00      	cmp	r6, #0
 8010804:	d04a      	beq.n	801089c <ai_platform_network_process+0x4a8>
 8010806:	8833      	ldrh	r3, [r6, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d047      	beq.n	801089c <ai_platform_network_process+0x4a8>
 801080c:	6873      	ldr	r3, [r6, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d044      	beq.n	801089c <ai_platform_network_process+0x4a8>
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d041      	beq.n	801089c <ai_platform_network_process+0x4a8>
 8010818:	f04f 0800 	mov.w	r8, #0
 801081c:	e019      	b.n	8010852 <ai_platform_network_process+0x45e>
 801081e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010822:	4291      	cmp	r1, r2
 8010824:	d301      	bcc.n	801082a <ai_platform_network_process+0x436>
 8010826:	68f9      	ldr	r1, [r7, #12]
 8010828:	1a51      	subs	r1, r2, r1
 801082a:	6079      	str	r1, [r7, #4]
 801082c:	f108 0801 	add.w	r8, r8, #1
 8010830:	6998      	ldr	r0, [r3, #24]
 8010832:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8010836:	1b12      	subs	r2, r2, r4
 8010838:	440a      	add	r2, r1
 801083a:	6082      	str	r2, [r0, #8]
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	699b      	ldr	r3, [r3, #24]
 8010840:	60da      	str	r2, [r3, #12]
 8010842:	8833      	ldrh	r3, [r6, #0]
 8010844:	4598      	cmp	r8, r3
 8010846:	d229      	bcs.n	801089c <ai_platform_network_process+0x4a8>
 8010848:	6873      	ldr	r3, [r6, #4]
 801084a:	b33b      	cbz	r3, 801089c <ai_platform_network_process+0x4a8>
 801084c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010850:	b323      	cbz	r3, 801089c <ai_platform_network_process+0x4a8>
 8010852:	68b2      	ldr	r2, [r6, #8]
 8010854:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010858:	f8d3 e018 	ldr.w	lr, [r3, #24]
 801085c:	f8d2 a000 	ldr.w	sl, [r2]
 8010860:	f8de 1000 	ldr.w	r1, [lr]
 8010864:	eb0a 0709 	add.w	r7, sl, r9
 8010868:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801086c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8010870:	eb00 0102 	add.w	r1, r0, r2
 8010874:	d0d3      	beq.n	801081e <ai_platform_network_process+0x42a>
 8010876:	f8de 1008 	ldr.w	r1, [lr, #8]
 801087a:	f000 ff9f 	bl	80117bc <memcpy>
 801087e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010882:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8010886:	440b      	add	r3, r1
 8010888:	4293      	cmp	r3, r2
 801088a:	d301      	bcc.n	8010890 <ai_platform_network_process+0x49c>
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	607b      	str	r3, [r7, #4]
 8010892:	f108 0801 	add.w	r8, r8, #1
 8010896:	8833      	ldrh	r3, [r6, #0]
 8010898:	4598      	cmp	r8, r3
 801089a:	d3d5      	bcc.n	8010848 <ai_platform_network_process+0x454>
 801089c:	9b00      	ldr	r3, [sp, #0]
 801089e:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80108a2:	461a      	mov	r2, r3
 80108a4:	8a9b      	ldrh	r3, [r3, #20]
 80108a6:	f10b 0b01 	add.w	fp, fp, #1
 80108aa:	fa1f fb8b 	uxth.w	fp, fp
 80108ae:	455b      	cmp	r3, fp
 80108b0:	f8a2 b016 	strh.w	fp, [r2, #22]
 80108b4:	f63f af68 	bhi.w	8010788 <ai_platform_network_process+0x394>
 80108b8:	4658      	mov	r0, fp
 80108ba:	b003      	add	sp, #12
 80108bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c0:	4615      	mov	r5, r2
 80108c2:	4616      	mov	r6, r2
 80108c4:	e759      	b.n	801077a <ai_platform_network_process+0x386>
 80108c6:	2600      	movs	r6, #0
 80108c8:	e757      	b.n	801077a <ai_platform_network_process+0x386>
 80108ca:	9c00      	ldr	r4, [sp, #0]
 80108cc:	f104 0010 	add.w	r0, r4, #16
 80108d0:	2218      	movs	r2, #24
 80108d2:	2113      	movs	r1, #19
 80108d4:	f04f 0b00 	mov.w	fp, #0
 80108d8:	f000 f83e 	bl	8010958 <core_set_error>
 80108dc:	e685      	b.n	80105ea <ai_platform_network_process+0x1f6>
 80108de:	9c00      	ldr	r4, [sp, #0]
 80108e0:	2217      	movs	r2, #23
 80108e2:	2113      	movs	r1, #19
 80108e4:	46d3      	mov	fp, sl
 80108e6:	f104 0010 	add.w	r0, r4, #16
 80108ea:	f000 f835 	bl	8010958 <core_set_error>
 80108ee:	e67c      	b.n	80105ea <ai_platform_network_process+0x1f6>
 80108f0:	9c00      	ldr	r4, [sp, #0]
 80108f2:	2221      	movs	r2, #33	; 0x21
 80108f4:	2113      	movs	r1, #19
 80108f6:	469b      	mov	fp, r3
 80108f8:	f104 0010 	add.w	r0, r4, #16
 80108fc:	f000 f82c 	bl	8010958 <core_set_error>
 8010900:	e673      	b.n	80105ea <ai_platform_network_process+0x1f6>
 8010902:	9c00      	ldr	r4, [sp, #0]
 8010904:	2217      	movs	r2, #23
 8010906:	2113      	movs	r1, #19
 8010908:	469b      	mov	fp, r3
 801090a:	f104 0010 	add.w	r0, r4, #16
 801090e:	f000 f823 	bl	8010958 <core_set_error>
 8010912:	e66a      	b.n	80105ea <ai_platform_network_process+0x1f6>
 8010914:	9c00      	ldr	r4, [sp, #0]
 8010916:	2219      	movs	r2, #25
 8010918:	2113      	movs	r1, #19
 801091a:	f04f 0b00 	mov.w	fp, #0
 801091e:	f104 0010 	add.w	r0, r4, #16
 8010922:	f000 f819 	bl	8010958 <core_set_error>
 8010926:	e660      	b.n	80105ea <ai_platform_network_process+0x1f6>
 8010928:	f104 0010 	add.w	r0, r4, #16
 801092c:	2217      	movs	r2, #23
 801092e:	2112      	movs	r1, #18
 8010930:	469b      	mov	fp, r3
 8010932:	f000 f811 	bl	8010958 <core_set_error>
 8010936:	e658      	b.n	80105ea <ai_platform_network_process+0x1f6>
 8010938:	f104 0010 	add.w	r0, r4, #16
 801093c:	2219      	movs	r2, #25
 801093e:	2112      	movs	r1, #18
 8010940:	f04f 0b00 	mov.w	fp, #0
 8010944:	f000 f808 	bl	8010958 <core_set_error>
 8010948:	e64f      	b.n	80105ea <ai_platform_network_process+0x1f6>
 801094a:	f1ba 0f00 	cmp.w	sl, #0
 801094e:	f47f ae7f 	bne.w	8010650 <ai_platform_network_process+0x25c>
 8010952:	e70d      	b.n	8010770 <ai_platform_network_process+0x37c>

08010954 <core_init>:
 8010954:	2001      	movs	r0, #1
 8010956:	4770      	bx	lr

08010958 <core_set_error>:
 8010958:	4603      	mov	r3, r0
 801095a:	7800      	ldrb	r0, [r0, #0]
 801095c:	b930      	cbnz	r0, 801096c <core_set_error+0x14>
 801095e:	7019      	strb	r1, [r3, #0]
 8010960:	2001      	movs	r0, #1
 8010962:	6819      	ldr	r1, [r3, #0]
 8010964:	f362 211f 	bfi	r1, r2, #8, #24
 8010968:	6019      	str	r1, [r3, #0]
 801096a:	4770      	bx	lr
 801096c:	2000      	movs	r0, #0
 801096e:	4770      	bx	lr

08010970 <ai_dict8_dot_array_f32>:
 8010970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010974:	9d06      	ldr	r5, [sp, #24]
 8010976:	4c88      	ldr	r4, [pc, #544]	; (8010b98 <ai_dict8_dot_array_f32+0x228>)
 8010978:	2d07      	cmp	r5, #7
 801097a:	442c      	add	r4, r5
 801097c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010980:	f104 0620 	add.w	r6, r4, #32
 8010984:	d817      	bhi.n	80109b6 <ai_dict8_dot_array_f32+0x46>
 8010986:	42b3      	cmp	r3, r6
 8010988:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8010b9c <ai_dict8_dot_array_f32+0x22c>
 801098c:	d20b      	bcs.n	80109a6 <ai_dict8_dot_array_f32+0x36>
 801098e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010992:	ecf3 7a01 	vldmia	r3!, {s15}
 8010996:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801099a:	42b3      	cmp	r3, r6
 801099c:	edd4 6a00 	vldr	s13, [r4]
 80109a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80109a4:	d3f3      	bcc.n	801098e <ai_dict8_dot_array_f32+0x1e>
 80109a6:	edd0 7a00 	vldr	s15, [r0]
 80109aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80109ae:	ed80 7a00 	vstr	s14, [r0]
 80109b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109b6:	f001 0503 	and.w	r5, r1, #3
 80109ba:	2d02      	cmp	r5, #2
 80109bc:	f000 80f0 	beq.w	8010ba0 <ai_dict8_dot_array_f32+0x230>
 80109c0:	2d03      	cmp	r5, #3
 80109c2:	f000 81ff 	beq.w	8010dc4 <ai_dict8_dot_array_f32+0x454>
 80109c6:	2d01      	cmp	r5, #1
 80109c8:	f000 81f0 	beq.w	8010dac <ai_dict8_dot_array_f32+0x43c>
 80109cc:	42a3      	cmp	r3, r4
 80109ce:	f200 81fc 	bhi.w	8010dca <ai_dict8_dot_array_f32+0x45a>
 80109d2:	1ae4      	subs	r4, r4, r3
 80109d4:	f101 0810 	add.w	r8, r1, #16
 80109d8:	f101 0508 	add.w	r5, r1, #8
 80109dc:	f103 0720 	add.w	r7, r3, #32
 80109e0:	0964      	lsrs	r4, r4, #5
 80109e2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8010b9c <ai_dict8_dot_array_f32+0x22c>
 80109e6:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 80109ea:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 80109ee:	3508      	adds	r5, #8
 80109f0:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 80109f4:	3720      	adds	r7, #32
 80109f6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80109fa:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 80109fe:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010a02:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8010a06:	edde 7a00 	vldr	s15, [lr]
 8010a0a:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8010a0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010a12:	eddc 5a00 	vldr	s11, [ip]
 8010a16:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8010a1a:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8010a1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010a22:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010a26:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8010a2a:	ed9c 4a00 	vldr	s8, [ip]
 8010a2e:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8010a32:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010a36:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8010a3a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010a3e:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8010a42:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010a46:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8010a4a:	ed9c 4a00 	vldr	s8, [ip]
 8010a4e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8010a52:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8010a56:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010a5a:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010a5e:	ed9e 5a00 	vldr	s10, [lr]
 8010a62:	ed9c 4a00 	vldr	s8, [ip]
 8010a66:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8010a6a:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8010a6e:	4545      	cmp	r5, r8
 8010a70:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010a74:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010a78:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010a7c:	ed9e 5a00 	vldr	s10, [lr]
 8010a80:	ed9c 6a00 	vldr	s12, [ip]
 8010a84:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010a88:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010a8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a94:	d1a9      	bne.n	80109ea <ai_dict8_dot_array_f32+0x7a>
 8010a96:	3401      	adds	r4, #1
 8010a98:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010a9c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8010aa0:	42b3      	cmp	r3, r6
 8010aa2:	d280      	bcs.n	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010aa4:	461c      	mov	r4, r3
 8010aa6:	780d      	ldrb	r5, [r1, #0]
 8010aa8:	ecf4 6a01 	vldmia	r4!, {s13}
 8010aac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010ab0:	42a6      	cmp	r6, r4
 8010ab2:	edd5 7a00 	vldr	s15, [r5]
 8010ab6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010aba:	f67f af74 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010abe:	784d      	ldrb	r5, [r1, #1]
 8010ac0:	f103 0408 	add.w	r4, r3, #8
 8010ac4:	edd3 6a01 	vldr	s13, [r3, #4]
 8010ac8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010acc:	42a6      	cmp	r6, r4
 8010ace:	edd5 7a00 	vldr	s15, [r5]
 8010ad2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ad6:	f67f af66 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010ada:	788d      	ldrb	r5, [r1, #2]
 8010adc:	f103 040c 	add.w	r4, r3, #12
 8010ae0:	edd3 6a02 	vldr	s13, [r3, #8]
 8010ae4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010ae8:	42a6      	cmp	r6, r4
 8010aea:	edd5 7a00 	vldr	s15, [r5]
 8010aee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010af2:	f67f af58 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010af6:	78cd      	ldrb	r5, [r1, #3]
 8010af8:	f103 0410 	add.w	r4, r3, #16
 8010afc:	edd3 6a03 	vldr	s13, [r3, #12]
 8010b00:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b04:	42a6      	cmp	r6, r4
 8010b06:	edd5 7a00 	vldr	s15, [r5]
 8010b0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b0e:	f67f af4a 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010b12:	790d      	ldrb	r5, [r1, #4]
 8010b14:	f103 0414 	add.w	r4, r3, #20
 8010b18:	edd3 6a04 	vldr	s13, [r3, #16]
 8010b1c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b20:	42a6      	cmp	r6, r4
 8010b22:	edd5 7a00 	vldr	s15, [r5]
 8010b26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b2a:	f67f af3c 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010b2e:	794d      	ldrb	r5, [r1, #5]
 8010b30:	f103 0418 	add.w	r4, r3, #24
 8010b34:	edd3 6a05 	vldr	s13, [r3, #20]
 8010b38:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b3c:	42a6      	cmp	r6, r4
 8010b3e:	edd5 7a00 	vldr	s15, [r5]
 8010b42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b46:	f67f af2e 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010b4a:	798d      	ldrb	r5, [r1, #6]
 8010b4c:	f103 041c 	add.w	r4, r3, #28
 8010b50:	edd3 6a06 	vldr	s13, [r3, #24]
 8010b54:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b58:	42a6      	cmp	r6, r4
 8010b5a:	edd5 7a00 	vldr	s15, [r5]
 8010b5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b62:	f67f af20 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010b66:	79cd      	ldrb	r5, [r1, #7]
 8010b68:	f103 0420 	add.w	r4, r3, #32
 8010b6c:	edd3 6a07 	vldr	s13, [r3, #28]
 8010b70:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b74:	42a6      	cmp	r6, r4
 8010b76:	edd5 7a00 	vldr	s15, [r5]
 8010b7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b7e:	f67f af12 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010b82:	7a09      	ldrb	r1, [r1, #8]
 8010b84:	edd3 7a08 	vldr	s15, [r3, #32]
 8010b88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010b8c:	edd2 6a00 	vldr	s13, [r2]
 8010b90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b94:	e707      	b.n	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010b96:	bf00      	nop
 8010b98:	3ffffff8 	.word	0x3ffffff8
 8010b9c:	00000000 	.word	0x00000000
 8010ba0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8010b9c <ai_dict8_dot_array_f32+0x22c>
 8010ba4:	780d      	ldrb	r5, [r1, #0]
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010bac:	3101      	adds	r1, #1
 8010bae:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bb2:	edd5 6a00 	vldr	s13, [r5]
 8010bb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bba:	780d      	ldrb	r5, [r1, #0]
 8010bbc:	1d1f      	adds	r7, r3, #4
 8010bbe:	edd3 7a00 	vldr	s15, [r3]
 8010bc2:	f101 0c01 	add.w	ip, r1, #1
 8010bc6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bca:	42bc      	cmp	r4, r7
 8010bcc:	edd5 6a00 	vldr	s13, [r5]
 8010bd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bd4:	d365      	bcc.n	8010ca2 <ai_dict8_dot_array_f32+0x332>
 8010bd6:	3324      	adds	r3, #36	; 0x24
 8010bd8:	f101 0e11 	add.w	lr, r1, #17
 8010bdc:	3109      	adds	r1, #9
 8010bde:	eba6 0803 	sub.w	r8, r6, r3
 8010be2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8010be6:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8010bea:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010bee:	3108      	adds	r1, #8
 8010bf0:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8010bf4:	3320      	adds	r3, #32
 8010bf6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bfa:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8010bfe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010c02:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8010c06:	edd5 7a00 	vldr	s15, [r5]
 8010c0a:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8010c0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010c12:	edd4 5a00 	vldr	s11, [r4]
 8010c16:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8010c1a:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8010c1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010c22:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010c26:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8010c2a:	ed94 4a00 	vldr	s8, [r4]
 8010c2e:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8010c32:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c36:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8010c3a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010c3e:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8010c42:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010c46:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8010c4a:	ed94 4a00 	vldr	s8, [r4]
 8010c4e:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8010c52:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8010c56:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010c5a:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010c5e:	ed95 5a00 	vldr	s10, [r5]
 8010c62:	ed94 4a00 	vldr	s8, [r4]
 8010c66:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8010c6a:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8010c6e:	458e      	cmp	lr, r1
 8010c70:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c74:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010c78:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010c7c:	ed95 5a00 	vldr	s10, [r5]
 8010c80:	ed94 6a00 	vldr	s12, [r4]
 8010c84:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010c88:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010c8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c94:	d1a9      	bne.n	8010bea <ai_dict8_dot_array_f32+0x27a>
 8010c96:	f108 0801 	add.w	r8, r8, #1
 8010c9a:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8010c9e:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8010ca2:	42b7      	cmp	r7, r6
 8010ca4:	f4bf ae7f 	bcs.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010ca8:	463b      	mov	r3, r7
 8010caa:	f89c 1000 	ldrb.w	r1, [ip]
 8010cae:	ecf3 6a01 	vldmia	r3!, {s13}
 8010cb2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010cb6:	429e      	cmp	r6, r3
 8010cb8:	edd1 7a00 	vldr	s15, [r1]
 8010cbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cc0:	f67f ae71 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010cc4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8010cc8:	f107 0308 	add.w	r3, r7, #8
 8010ccc:	edd7 6a01 	vldr	s13, [r7, #4]
 8010cd0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010cd4:	429e      	cmp	r6, r3
 8010cd6:	edd1 7a00 	vldr	s15, [r1]
 8010cda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cde:	f67f ae62 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010ce2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8010ce6:	f107 030c 	add.w	r3, r7, #12
 8010cea:	edd7 6a02 	vldr	s13, [r7, #8]
 8010cee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010cf2:	429e      	cmp	r6, r3
 8010cf4:	edd1 7a00 	vldr	s15, [r1]
 8010cf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cfc:	f67f ae53 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010d00:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8010d04:	f107 0310 	add.w	r3, r7, #16
 8010d08:	edd7 6a03 	vldr	s13, [r7, #12]
 8010d0c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d10:	429e      	cmp	r6, r3
 8010d12:	edd1 7a00 	vldr	s15, [r1]
 8010d16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d1a:	f67f ae44 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010d1e:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8010d22:	f107 0314 	add.w	r3, r7, #20
 8010d26:	edd7 6a04 	vldr	s13, [r7, #16]
 8010d2a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d2e:	429e      	cmp	r6, r3
 8010d30:	edd1 7a00 	vldr	s15, [r1]
 8010d34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d38:	f67f ae35 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010d3c:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8010d40:	f107 0318 	add.w	r3, r7, #24
 8010d44:	edd7 6a05 	vldr	s13, [r7, #20]
 8010d48:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d4c:	429e      	cmp	r6, r3
 8010d4e:	edd1 7a00 	vldr	s15, [r1]
 8010d52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d56:	f67f ae26 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010d5a:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8010d5e:	f107 031c 	add.w	r3, r7, #28
 8010d62:	edd7 6a06 	vldr	s13, [r7, #24]
 8010d66:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d6a:	429e      	cmp	r6, r3
 8010d6c:	edd1 7a00 	vldr	s15, [r1]
 8010d70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d74:	f67f ae17 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010d78:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8010d7c:	f107 0320 	add.w	r3, r7, #32
 8010d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d84:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d88:	429e      	cmp	r6, r3
 8010d8a:	edd1 7a00 	vldr	s15, [r1]
 8010d8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d92:	f67f ae08 	bls.w	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010d96:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8010d9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010da2:	edd2 6a00 	vldr	s13, [r2]
 8010da6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010daa:	e5fc      	b.n	80109a6 <ai_dict8_dot_array_f32+0x36>
 8010dac:	780d      	ldrb	r5, [r1, #0]
 8010dae:	3304      	adds	r3, #4
 8010db0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010db4:	3101      	adds	r1, #1
 8010db6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010dba:	ed95 7a00 	vldr	s14, [r5]
 8010dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010dc2:	e6ef      	b.n	8010ba4 <ai_dict8_dot_array_f32+0x234>
 8010dc4:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8010b9c <ai_dict8_dot_array_f32+0x22c>
 8010dc8:	e6f7      	b.n	8010bba <ai_dict8_dot_array_f32+0x24a>
 8010dca:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8010b9c <ai_dict8_dot_array_f32+0x22c>
 8010dce:	e667      	b.n	8010aa0 <ai_dict8_dot_array_f32+0x130>

08010dd0 <ai_dict4_dot_array_f32>:
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010dd6:	f027 0c01 	bic.w	ip, r7, #1
 8010dda:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8010dde:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010de2:	f000 80ad 	beq.w	8010f40 <ai_dict4_dot_array_f32+0x170>
 8010de6:	1d0d      	adds	r5, r1, #4
 8010de8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8010dec:	f103 0420 	add.w	r4, r3, #32
 8010df0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8010f48 <ai_dict4_dot_array_f32+0x178>
 8010df4:	eb05 0e09 	add.w	lr, r5, r9
 8010df8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8010dfc:	3504      	adds	r5, #4
 8010dfe:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8010e02:	3420      	adds	r4, #32
 8010e04:	f006 0a0f 	and.w	sl, r6, #15
 8010e08:	0936      	lsrs	r6, r6, #4
 8010e0a:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8010e0e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010e12:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8010e16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e1a:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8010e1e:	edda 7a00 	vldr	s15, [sl]
 8010e22:	edd6 5a00 	vldr	s11, [r6]
 8010e26:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010e2a:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8010e2e:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8010e32:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8010e36:	f006 060f 	and.w	r6, r6, #15
 8010e3a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8010e3e:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8010e42:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010e46:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8010e4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e4e:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8010e52:	ed9a 3a00 	vldr	s6, [sl]
 8010e56:	ed96 5a00 	vldr	s10, [r6]
 8010e5a:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8010e5e:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010e62:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8010e66:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8010e6a:	f00a 0a0f 	and.w	sl, sl, #15
 8010e6e:	45ae      	cmp	lr, r5
 8010e70:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8010e74:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010e78:	ed9b 3a00 	vldr	s6, [fp]
 8010e7c:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8010e80:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010e84:	ed9a 4a00 	vldr	s8, [sl]
 8010e88:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8010e8c:	f006 060f 	and.w	r6, r6, #15
 8010e90:	ed9a 5a00 	vldr	s10, [sl]
 8010e94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e98:	ed96 6a00 	vldr	s12, [r6]
 8010e9c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010ea0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010ea4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010ea8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010eb0:	d1a2      	bne.n	8010df8 <ai_dict4_dot_array_f32+0x28>
 8010eb2:	4449      	add	r1, r9
 8010eb4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8010eb8:	459c      	cmp	ip, r3
 8010eba:	d92d      	bls.n	8010f18 <ai_dict4_dot_array_f32+0x148>
 8010ebc:	f10c 0c07 	add.w	ip, ip, #7
 8010ec0:	f103 0508 	add.w	r5, r3, #8
 8010ec4:	f103 0810 	add.w	r8, r3, #16
 8010ec8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8010ecc:	ebac 0c05 	sub.w	ip, ip, r5
 8010ed0:	f02c 0407 	bic.w	r4, ip, #7
 8010ed4:	44a0      	add	r8, r4
 8010ed6:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010eda:	3508      	adds	r5, #8
 8010edc:	ed55 5a03 	vldr	s11, [r5, #-12]
 8010ee0:	f004 060f 	and.w	r6, r4, #15
 8010ee4:	0924      	lsrs	r4, r4, #4
 8010ee6:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010eea:	45a8      	cmp	r8, r5
 8010eec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ef0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010ef4:	edd6 7a00 	vldr	s15, [r6]
 8010ef8:	ed94 6a00 	vldr	s12, [r4]
 8010efc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010f00:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f08:	d1e5      	bne.n	8010ed6 <ai_dict4_dot_array_f32+0x106>
 8010f0a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8010f0e:	f10c 0c01 	add.w	ip, ip, #1
 8010f12:	4461      	add	r1, ip
 8010f14:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8010f18:	07fc      	lsls	r4, r7, #31
 8010f1a:	d509      	bpl.n	8010f30 <ai_dict4_dot_array_f32+0x160>
 8010f1c:	7809      	ldrb	r1, [r1, #0]
 8010f1e:	edd3 7a00 	vldr	s15, [r3]
 8010f22:	090b      	lsrs	r3, r1, #4
 8010f24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f28:	edd2 6a00 	vldr	s13, [r2]
 8010f2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010f30:	edd0 7a00 	vldr	s15, [r0]
 8010f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f38:	ed80 7a00 	vstr	s14, [r0]
 8010f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f40:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8010f48 <ai_dict4_dot_array_f32+0x178>
 8010f44:	e7b8      	b.n	8010eb8 <ai_dict4_dot_array_f32+0xe8>
 8010f46:	bf00      	nop
 8010f48:	00000000 	.word	0x00000000

08010f4c <forward_dense>:
 8010f4c:	6942      	ldr	r2, [r0, #20]
 8010f4e:	8813      	ldrh	r3, [r2, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 81c8 	beq.w	80112e6 <forward_dense+0x39a>
 8010f56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5a:	ed2d 8b08 	vpush	{d8-d11}
 8010f5e:	6851      	ldr	r1, [r2, #4]
 8010f60:	b091      	sub	sp, #68	; 0x44
 8010f62:	684d      	ldr	r5, [r1, #4]
 8010f64:	b105      	cbz	r5, 8010f68 <forward_dense+0x1c>
 8010f66:	682d      	ldr	r5, [r5, #0]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	f240 81b9 	bls.w	80112e0 <forward_dense+0x394>
 8010f6e:	690a      	ldr	r2, [r1, #16]
 8010f70:	b102      	cbz	r2, 8010f74 <forward_dense+0x28>
 8010f72:	6812      	ldr	r2, [r2, #0]
 8010f74:	2b02      	cmp	r3, #2
 8010f76:	f000 81b8 	beq.w	80112ea <forward_dense+0x39e>
 8010f7a:	69cb      	ldr	r3, [r1, #28]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f000 8209 	beq.w	8011394 <forward_dense+0x448>
 8010f82:	6818      	ldr	r0, [r3, #0]
 8010f84:	9008      	str	r0, [sp, #32]
 8010f86:	f111 0018 	adds.w	r0, r1, #24
 8010f8a:	f000 81dc 	beq.w	8011346 <forward_dense+0x3fa>
 8010f8e:	8b09      	ldrh	r1, [r1, #24]
 8010f90:	2901      	cmp	r1, #1
 8010f92:	f240 81fc 	bls.w	801138e <forward_dense+0x442>
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 81d7 	beq.w	801134a <forward_dense+0x3fe>
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	9306      	str	r3, [sp, #24]
 8010fa0:	9b08      	ldr	r3, [sp, #32]
 8010fa2:	68d6      	ldr	r6, [r2, #12]
 8010fa4:	699b      	ldr	r3, [r3, #24]
 8010fa6:	68b0      	ldr	r0, [r6, #8]
 8010fa8:	681f      	ldr	r7, [r3, #0]
 8010faa:	68f4      	ldr	r4, [r6, #12]
 8010fac:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 8010fb0:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8010fb4:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8010fb8:	fb04 f000 	mul.w	r0, r4, r0
 8010fbc:	fa4e f10c 	asr.w	r1, lr, ip
 8010fc0:	2f04      	cmp	r7, #4
 8010fc2:	9007      	str	r0, [sp, #28]
 8010fc4:	910b      	str	r1, [sp, #44]	; 0x2c
 8010fc6:	68e9      	ldr	r1, [r5, #12]
 8010fc8:	6870      	ldr	r0, [r6, #4]
 8010fca:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8010fce:	f000 81db 	beq.w	8011388 <forward_dense+0x43c>
 8010fd2:	2f08      	cmp	r7, #8
 8010fd4:	f000 81d8 	beq.w	8011388 <forward_dense+0x43c>
 8010fd8:	f04f 0a00 	mov.w	sl, #0
 8010fdc:	6992      	ldr	r2, [r2, #24]
 8010fde:	0080      	lsls	r0, r0, #2
 8010fe0:	69a9      	ldr	r1, [r5, #24]
 8010fe2:	6894      	ldr	r4, [r2, #8]
 8010fe4:	9a08      	ldr	r2, [sp, #32]
 8010fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8010fe8:	1826      	adds	r6, r4, r0
 8010fea:	6952      	ldr	r2, [r2, #20]
 8010fec:	9404      	str	r4, [sp, #16]
 8010fee:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8010ff2:	9a07      	ldr	r2, [sp, #28]
 8010ff4:	688f      	ldr	r7, [r1, #8]
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	f000 81c1 	beq.w	801137e <forward_dense+0x432>
 8010ffc:	f1a8 0210 	sub.w	r2, r8, #16
 8011000:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8011004:	689d      	ldr	r5, [r3, #8]
 8011006:	0912      	lsrs	r2, r2, #4
 8011008:	910a      	str	r1, [sp, #40]	; 0x28
 801100a:	2100      	movs	r1, #0
 801100c:	9b06      	ldr	r3, [sp, #24]
 801100e:	3201      	adds	r2, #1
 8011010:	eddf 2acf 	vldr	s5, [pc, #828]	; 8011350 <forward_dense+0x404>
 8011014:	9105      	str	r1, [sp, #20]
 8011016:	f008 010f 	and.w	r1, r8, #15
 801101a:	0192      	lsls	r2, r2, #6
 801101c:	910d      	str	r1, [sp, #52]	; 0x34
 801101e:	920c      	str	r2, [sp, #48]	; 0x30
 8011020:	2b00      	cmp	r3, #0
 8011022:	d042      	beq.n	80110aa <forward_dense+0x15e>
 8011024:	699b      	ldr	r3, [r3, #24]
 8011026:	689c      	ldr	r4, [r3, #8]
 8011028:	9b04      	ldr	r3, [sp, #16]
 801102a:	f1ba 0f00 	cmp.w	sl, #0
 801102e:	d041      	beq.n	80110b4 <forward_dense+0x168>
 8011030:	42b3      	cmp	r3, r6
 8011032:	d229      	bcs.n	8011088 <forward_dense+0x13c>
 8011034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011036:	469b      	mov	fp, r3
 8011038:	ab0f      	add	r3, sp, #60	; 0x3c
 801103a:	2a04      	cmp	r2, #4
 801103c:	9303      	str	r3, [sp, #12]
 801103e:	4633      	mov	r3, r6
 8011040:	4646      	mov	r6, r8
 8011042:	4698      	mov	r8, r3
 8011044:	f000 8154 	beq.w	80112f0 <forward_dense+0x3a4>
 8011048:	2c00      	cmp	r4, #0
 801104a:	f000 8183 	beq.w	8011354 <forward_dense+0x408>
 801104e:	f8d4 c000 	ldr.w	ip, [r4]
 8011052:	463b      	mov	r3, r7
 8011054:	4629      	mov	r1, r5
 8011056:	9600      	str	r6, [sp, #0]
 8011058:	4652      	mov	r2, sl
 801105a:	9803      	ldr	r0, [sp, #12]
 801105c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011060:	f7ff fc86 	bl	8010970 <ai_dict8_dot_array_f32>
 8011064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011066:	3404      	adds	r4, #4
 8011068:	444d      	add	r5, r9
 801106a:	f84b 3b04 	str.w	r3, [fp], #4
 801106e:	45c3      	cmp	fp, r8
 8011070:	d3ea      	bcc.n	8011048 <forward_dense+0xfc>
 8011072:	4643      	mov	r3, r8
 8011074:	46b0      	mov	r8, r6
 8011076:	461e      	mov	r6, r3
 8011078:	9a04      	ldr	r2, [sp, #16]
 801107a:	43d3      	mvns	r3, r2
 801107c:	4433      	add	r3, r6
 801107e:	f023 0303 	bic.w	r3, r3, #3
 8011082:	3304      	adds	r3, #4
 8011084:	18d3      	adds	r3, r2, r3
 8011086:	9304      	str	r3, [sp, #16]
 8011088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801108a:	9b05      	ldr	r3, [sp, #20]
 801108c:	4417      	add	r7, r2
 801108e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011090:	3301      	adds	r3, #1
 8011092:	4416      	add	r6, r2
 8011094:	9a07      	ldr	r2, [sp, #28]
 8011096:	9305      	str	r3, [sp, #20]
 8011098:	4293      	cmp	r3, r2
 801109a:	f000 8170 	beq.w	801137e <forward_dense+0x432>
 801109e:	9b08      	ldr	r3, [sp, #32]
 80110a0:	699b      	ldr	r3, [r3, #24]
 80110a2:	689d      	ldr	r5, [r3, #8]
 80110a4:	9b06      	ldr	r3, [sp, #24]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1bc      	bne.n	8011024 <forward_dense+0xd8>
 80110aa:	461c      	mov	r4, r3
 80110ac:	9b04      	ldr	r3, [sp, #16]
 80110ae:	f1ba 0f00 	cmp.w	sl, #0
 80110b2:	d1bd      	bne.n	8011030 <forward_dense+0xe4>
 80110b4:	42b3      	cmp	r3, r6
 80110b6:	d2e7      	bcs.n	8011088 <forward_dense+0x13c>
 80110b8:	4618      	mov	r0, r3
 80110ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110bc:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80110c0:	eb07 0c03 	add.w	ip, r7, r3
 80110c4:	469e      	mov	lr, r3
 80110c6:	2c00      	cmp	r4, #0
 80110c8:	f000 80fe 	beq.w	80112c8 <forward_dense+0x37c>
 80110cc:	f1b8 0f0f 	cmp.w	r8, #15
 80110d0:	ed94 6a00 	vldr	s12, [r4]
 80110d4:	f104 0404 	add.w	r4, r4, #4
 80110d8:	f240 80fc 	bls.w	80112d4 <forward_dense+0x388>
 80110dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80110e0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80110e4:	4641      	mov	r1, r8
 80110e6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8011350 <forward_dense+0x404>
 80110ea:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 80110ee:	3910      	subs	r1, #16
 80110f0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80110f4:	3240      	adds	r2, #64	; 0x40
 80110f6:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80110fa:	290f      	cmp	r1, #15
 80110fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011100:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8011104:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8011108:	f103 0340 	add.w	r3, r3, #64	; 0x40
 801110c:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8011110:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011114:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8011118:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 801111c:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8011120:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8011124:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8011128:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 801112c:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011130:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8011134:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8011138:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 801113c:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8011140:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8011144:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011148:	eee3 7a84 	vfma.f32	s15, s7, s8
 801114c:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8011150:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011154:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8011158:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 801115c:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8011160:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8011164:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011168:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 801116c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011170:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8011174:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8011178:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 801117c:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8011180:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011184:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8011188:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 801118c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011190:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011194:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011198:	eee8 7a88 	vfma.f32	s15, s17, s16
 801119c:	eee0 7a20 	vfma.f32	s15, s0, s1
 80111a0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80111a4:	eee2 7a03 	vfma.f32	s15, s4, s6
 80111a8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80111ac:	eee4 7a85 	vfma.f32	s15, s9, s10
 80111b0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80111b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80111b8:	d897      	bhi.n	80110ea <forward_dense+0x19e>
 80111ba:	eb05 010e 	add.w	r1, r5, lr
 80111be:	465b      	mov	r3, fp
 80111c0:	4662      	mov	r2, ip
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d075      	beq.n	80112b2 <forward_dense+0x366>
 80111c6:	ed91 7a00 	vldr	s14, [r1]
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	edd2 7a00 	vldr	s15, [r2]
 80111d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80111d4:	d06d      	beq.n	80112b2 <forward_dense+0x366>
 80111d6:	ed91 7a01 	vldr	s14, [r1, #4]
 80111da:	2b02      	cmp	r3, #2
 80111dc:	edd2 7a01 	vldr	s15, [r2, #4]
 80111e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80111e4:	d065      	beq.n	80112b2 <forward_dense+0x366>
 80111e6:	ed91 7a02 	vldr	s14, [r1, #8]
 80111ea:	2b03      	cmp	r3, #3
 80111ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80111f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80111f4:	d05d      	beq.n	80112b2 <forward_dense+0x366>
 80111f6:	ed91 7a03 	vldr	s14, [r1, #12]
 80111fa:	2b04      	cmp	r3, #4
 80111fc:	edd2 7a03 	vldr	s15, [r2, #12]
 8011200:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011204:	d055      	beq.n	80112b2 <forward_dense+0x366>
 8011206:	ed91 7a04 	vldr	s14, [r1, #16]
 801120a:	2b05      	cmp	r3, #5
 801120c:	edd2 7a04 	vldr	s15, [r2, #16]
 8011210:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011214:	d04d      	beq.n	80112b2 <forward_dense+0x366>
 8011216:	ed91 7a05 	vldr	s14, [r1, #20]
 801121a:	2b06      	cmp	r3, #6
 801121c:	edd2 7a05 	vldr	s15, [r2, #20]
 8011220:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011224:	d045      	beq.n	80112b2 <forward_dense+0x366>
 8011226:	ed91 7a06 	vldr	s14, [r1, #24]
 801122a:	2b07      	cmp	r3, #7
 801122c:	edd2 7a06 	vldr	s15, [r2, #24]
 8011230:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011234:	d03d      	beq.n	80112b2 <forward_dense+0x366>
 8011236:	ed91 7a07 	vldr	s14, [r1, #28]
 801123a:	2b08      	cmp	r3, #8
 801123c:	edd2 7a07 	vldr	s15, [r2, #28]
 8011240:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011244:	d035      	beq.n	80112b2 <forward_dense+0x366>
 8011246:	ed91 7a08 	vldr	s14, [r1, #32]
 801124a:	2b09      	cmp	r3, #9
 801124c:	edd2 7a08 	vldr	s15, [r2, #32]
 8011250:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011254:	d02d      	beq.n	80112b2 <forward_dense+0x366>
 8011256:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 801125a:	2b0a      	cmp	r3, #10
 801125c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011260:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011264:	d025      	beq.n	80112b2 <forward_dense+0x366>
 8011266:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 801126a:	2b0b      	cmp	r3, #11
 801126c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8011270:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011274:	d01d      	beq.n	80112b2 <forward_dense+0x366>
 8011276:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 801127a:	2b0c      	cmp	r3, #12
 801127c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8011280:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011284:	d015      	beq.n	80112b2 <forward_dense+0x366>
 8011286:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 801128a:	2b0d      	cmp	r3, #13
 801128c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8011290:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011294:	d00d      	beq.n	80112b2 <forward_dense+0x366>
 8011296:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801129a:	2b0e      	cmp	r3, #14
 801129c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80112a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80112a4:	d005      	beq.n	80112b2 <forward_dense+0x366>
 80112a6:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80112aa:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80112ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 80112b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80112b6:	444d      	add	r5, r9
 80112b8:	ece0 6a01 	vstmia	r0!, {s13}
 80112bc:	42b0      	cmp	r0, r6
 80112be:	f4bf aedb 	bcs.w	8011078 <forward_dense+0x12c>
 80112c2:	2c00      	cmp	r4, #0
 80112c4:	f47f af02 	bne.w	80110cc <forward_dense+0x180>
 80112c8:	f1b8 0f0f 	cmp.w	r8, #15
 80112cc:	eeb0 6a62 	vmov.f32	s12, s5
 80112d0:	f63f af04 	bhi.w	80110dc <forward_dense+0x190>
 80112d4:	4643      	mov	r3, r8
 80112d6:	4629      	mov	r1, r5
 80112d8:	463a      	mov	r2, r7
 80112da:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8011350 <forward_dense+0x404>
 80112de:	e770      	b.n	80111c2 <forward_dense+0x276>
 80112e0:	2300      	movs	r3, #0
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	deff      	udf	#255	; 0xff
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	deff      	udf	#255	; 0xff
 80112ea:	2300      	movs	r3, #0
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	deff      	udf	#255	; 0xff
 80112f0:	b1a4      	cbz	r4, 801131c <forward_dense+0x3d0>
 80112f2:	f8d4 c000 	ldr.w	ip, [r4]
 80112f6:	463b      	mov	r3, r7
 80112f8:	4629      	mov	r1, r5
 80112fa:	9600      	str	r6, [sp, #0]
 80112fc:	4652      	mov	r2, sl
 80112fe:	9803      	ldr	r0, [sp, #12]
 8011300:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011304:	f7ff fd64 	bl	8010dd0 <ai_dict4_dot_array_f32>
 8011308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801130a:	3404      	adds	r4, #4
 801130c:	444d      	add	r5, r9
 801130e:	f84b 3b04 	str.w	r3, [fp], #4
 8011312:	45c3      	cmp	fp, r8
 8011314:	f4bf aead 	bcs.w	8011072 <forward_dense+0x126>
 8011318:	2c00      	cmp	r4, #0
 801131a:	d1ea      	bne.n	80112f2 <forward_dense+0x3a6>
 801131c:	4634      	mov	r4, r6
 801131e:	4646      	mov	r6, r8
 8011320:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011324:	463b      	mov	r3, r7
 8011326:	4629      	mov	r1, r5
 8011328:	9400      	str	r4, [sp, #0]
 801132a:	4652      	mov	r2, sl
 801132c:	4640      	mov	r0, r8
 801132e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8011332:	f7ff fd4d 	bl	8010dd0 <ai_dict4_dot_array_f32>
 8011336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011338:	444d      	add	r5, r9
 801133a:	f84b 3b04 	str.w	r3, [fp], #4
 801133e:	45b3      	cmp	fp, r6
 8011340:	d3f0      	bcc.n	8011324 <forward_dense+0x3d8>
 8011342:	46a0      	mov	r8, r4
 8011344:	e698      	b.n	8011078 <forward_dense+0x12c>
 8011346:	9006      	str	r0, [sp, #24]
 8011348:	e62a      	b.n	8010fa0 <forward_dense+0x54>
 801134a:	9306      	str	r3, [sp, #24]
 801134c:	e628      	b.n	8010fa0 <forward_dense+0x54>
 801134e:	bf00      	nop
 8011350:	00000000 	.word	0x00000000
 8011354:	4634      	mov	r4, r6
 8011356:	4646      	mov	r6, r8
 8011358:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801135c:	463b      	mov	r3, r7
 801135e:	4629      	mov	r1, r5
 8011360:	9400      	str	r4, [sp, #0]
 8011362:	4652      	mov	r2, sl
 8011364:	4640      	mov	r0, r8
 8011366:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 801136a:	f7ff fb01 	bl	8010970 <ai_dict8_dot_array_f32>
 801136e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011370:	444d      	add	r5, r9
 8011372:	f84b 3b04 	str.w	r3, [fp], #4
 8011376:	45b3      	cmp	fp, r6
 8011378:	d3f0      	bcc.n	801135c <forward_dense+0x410>
 801137a:	46a0      	mov	r8, r4
 801137c:	e67c      	b.n	8011078 <forward_dense+0x12c>
 801137e:	b011      	add	sp, #68	; 0x44
 8011380:	ecbd 8b08 	vpop	{d8-d11}
 8011384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011388:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801138c:	e626      	b.n	8010fdc <forward_dense+0x90>
 801138e:	2300      	movs	r3, #0
 8011390:	9306      	str	r3, [sp, #24]
 8011392:	e605      	b.n	8010fa0 <forward_dense+0x54>
 8011394:	9308      	str	r3, [sp, #32]
 8011396:	e5f6      	b.n	8010f86 <forward_dense+0x3a>

08011398 <nl_func_relu_generic_array_f32>:
 8011398:	b470      	push	{r4, r5, r6}
 801139a:	edd3 6a02 	vldr	s13, [r3, #8]
 801139e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80113a2:	6880      	ldr	r0, [r0, #8]
 80113a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80113a8:	4414      	add	r4, r2
 80113aa:	688d      	ldr	r5, [r1, #8]
 80113ac:	00a4      	lsls	r4, r4, #2
 80113ae:	ed93 7a00 	vldr	s14, [r3]
 80113b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b6:	ed93 6a01 	vldr	s12, [r3, #4]
 80113ba:	eb00 0204 	add.w	r2, r0, r4
 80113be:	442c      	add	r4, r5
 80113c0:	d420      	bmi.n	8011404 <nl_func_relu_generic_array_f32+0x6c>
 80113c2:	42ac      	cmp	r4, r5
 80113c4:	d33b      	bcc.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 80113c6:	1d23      	adds	r3, r4, #4
 80113c8:	3204      	adds	r2, #4
 80113ca:	e010      	b.n	80113ee <nl_func_relu_generic_array_f32+0x56>
 80113cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113d0:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80113d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d8:	dd01      	ble.n	80113de <nl_func_relu_generic_array_f32+0x46>
 80113da:	ee65 7a86 	vmul.f32	s15, s11, s12
 80113de:	f1a3 0408 	sub.w	r4, r3, #8
 80113e2:	ed62 7a01 	vstmdb	r2!, {s15}
 80113e6:	4603      	mov	r3, r0
 80113e8:	6888      	ldr	r0, [r1, #8]
 80113ea:	4284      	cmp	r4, r0
 80113ec:	d327      	bcc.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 80113ee:	ed53 7a01 	vldr	s15, [r3, #-4]
 80113f2:	1f18      	subs	r0, r3, #4
 80113f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80113f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113fc:	dce6      	bgt.n	80113cc <nl_func_relu_generic_array_f32+0x34>
 80113fe:	eef0 7a66 	vmov.f32	s15, s13
 8011402:	e7ec      	b.n	80113de <nl_func_relu_generic_array_f32+0x46>
 8011404:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140c:	d019      	beq.n	8011442 <nl_func_relu_generic_array_f32+0xaa>
 801140e:	42ac      	cmp	r4, r5
 8011410:	d315      	bcc.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 8011412:	1d23      	adds	r3, r4, #4
 8011414:	3204      	adds	r2, #4
 8011416:	ed53 7a01 	vldr	s15, [r3, #-4]
 801141a:	1f18      	subs	r0, r3, #4
 801141c:	f1a3 0508 	sub.w	r5, r3, #8
 8011420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011424:	4603      	mov	r3, r0
 8011426:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011432:	d51c      	bpl.n	801146e <nl_func_relu_generic_array_f32+0xd6>
 8011434:	ed62 6a01 	vstmdb	r2!, {s13}
 8011438:	6888      	ldr	r0, [r1, #8]
 801143a:	42a8      	cmp	r0, r5
 801143c:	d9eb      	bls.n	8011416 <nl_func_relu_generic_array_f32+0x7e>
 801143e:	bc70      	pop	{r4, r5, r6}
 8011440:	4770      	bx	lr
 8011442:	42ac      	cmp	r4, r5
 8011444:	d3fb      	bcc.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 8011446:	1d23      	adds	r3, r4, #4
 8011448:	3204      	adds	r2, #4
 801144a:	2600      	movs	r6, #0
 801144c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011450:	1f18      	subs	r0, r3, #4
 8011452:	f1a3 0508 	sub.w	r5, r3, #8
 8011456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801145a:	4603      	mov	r3, r0
 801145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011460:	d80b      	bhi.n	801147a <nl_func_relu_generic_array_f32+0xe2>
 8011462:	ed62 7a01 	vstmdb	r2!, {s15}
 8011466:	6888      	ldr	r0, [r1, #8]
 8011468:	42a8      	cmp	r0, r5
 801146a:	d9ef      	bls.n	801144c <nl_func_relu_generic_array_f32+0xb4>
 801146c:	e7e7      	b.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 801146e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011472:	6888      	ldr	r0, [r1, #8]
 8011474:	42a8      	cmp	r0, r5
 8011476:	d9ce      	bls.n	8011416 <nl_func_relu_generic_array_f32+0x7e>
 8011478:	e7e1      	b.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 801147a:	f842 6d04 	str.w	r6, [r2, #-4]!
 801147e:	6888      	ldr	r0, [r1, #8]
 8011480:	42a8      	cmp	r0, r5
 8011482:	d9e3      	bls.n	801144c <nl_func_relu_generic_array_f32+0xb4>
 8011484:	e7db      	b.n	801143e <nl_func_relu_generic_array_f32+0xa6>
 8011486:	bf00      	nop

08011488 <forward_relu>:
 8011488:	6942      	ldr	r2, [r0, #20]
 801148a:	8813      	ldrh	r3, [r2, #0]
 801148c:	b33b      	cbz	r3, 80114de <forward_relu+0x56>
 801148e:	b4f0      	push	{r4, r5, r6, r7}
 8011490:	6852      	ldr	r2, [r2, #4]
 8011492:	6855      	ldr	r5, [r2, #4]
 8011494:	b105      	cbz	r5, 8011498 <forward_relu+0x10>
 8011496:	682d      	ldr	r5, [r5, #0]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d91d      	bls.n	80114d8 <forward_relu+0x50>
 801149c:	6913      	ldr	r3, [r2, #16]
 801149e:	b103      	cbz	r3, 80114a2 <forward_relu+0x1a>
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6982      	ldr	r2, [r0, #24]
 80114a4:	68ac      	ldr	r4, [r5, #8]
 80114a6:	6998      	ldr	r0, [r3, #24]
 80114a8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80114ac:	69a9      	ldr	r1, [r5, #24]
 80114ae:	2a00      	cmp	r2, #0
 80114b0:	d040      	beq.n	8011534 <forward_relu+0xac>
 80114b2:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 80114b6:	2e01      	cmp	r6, #1
 80114b8:	d013      	beq.n	80114e2 <forward_relu+0x5a>
 80114ba:	2c00      	cmp	r4, #0
 80114bc:	d068      	beq.n	8011590 <forward_relu+0x108>
 80114be:	68ee      	ldr	r6, [r5, #12]
 80114c0:	2201      	movs	r2, #1
 80114c2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80114c6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114ca:	42a6      	cmp	r6, r4
 80114cc:	fb05 f202 	mul.w	r2, r5, r2
 80114d0:	d1f9      	bne.n	80114c6 <forward_relu+0x3e>
 80114d2:	bcf0      	pop	{r4, r5, r6, r7}
 80114d4:	f7ff bf60 	b.w	8011398 <nl_func_relu_generic_array_f32>
 80114d8:	2300      	movs	r3, #0
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	deff      	udf	#255	; 0xff
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	deff      	udf	#255	; 0xff
 80114e2:	6887      	ldr	r7, [r0, #8]
 80114e4:	688a      	ldr	r2, [r1, #8]
 80114e6:	ed93 7a00 	vldr	s14, [r3]
 80114ea:	b184      	cbz	r4, 801150e <forward_relu+0x86>
 80114ec:	68ed      	ldr	r5, [r5, #12]
 80114ee:	4630      	mov	r0, r6
 80114f0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80114f4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 80114f8:	42a5      	cmp	r5, r4
 80114fa:	fb03 f000 	mul.w	r0, r3, r0
 80114fe:	d1f9      	bne.n	80114f4 <forward_relu+0x6c>
 8011500:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011504:	4403      	add	r3, r0
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	18d2      	adds	r2, r2, r3
 801150a:	441f      	add	r7, r3
 801150c:	d236      	bcs.n	801157c <forward_relu+0xf4>
 801150e:	1d13      	adds	r3, r2, #4
 8011510:	2500      	movs	r5, #0
 8011512:	1d3a      	adds	r2, r7, #4
 8011514:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011518:	1f18      	subs	r0, r3, #4
 801151a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011522:	d82d      	bhi.n	8011580 <forward_relu+0xf8>
 8011524:	ed62 7a01 	vstmdb	r2!, {s15}
 8011528:	3b08      	subs	r3, #8
 801152a:	688c      	ldr	r4, [r1, #8]
 801152c:	429c      	cmp	r4, r3
 801152e:	d825      	bhi.n	801157c <forward_relu+0xf4>
 8011530:	4603      	mov	r3, r0
 8011532:	e7ef      	b.n	8011514 <forward_relu+0x8c>
 8011534:	6880      	ldr	r0, [r0, #8]
 8011536:	688b      	ldr	r3, [r1, #8]
 8011538:	b184      	cbz	r4, 801155c <forward_relu+0xd4>
 801153a:	68ee      	ldr	r6, [r5, #12]
 801153c:	2201      	movs	r2, #1
 801153e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011542:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011546:	42a6      	cmp	r6, r4
 8011548:	fb05 f202 	mul.w	r2, r5, r2
 801154c:	d1f9      	bne.n	8011542 <forward_relu+0xba>
 801154e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8011552:	4414      	add	r4, r2
 8011554:	00a2      	lsls	r2, r4, #2
 8011556:	189b      	adds	r3, r3, r2
 8011558:	4410      	add	r0, r2
 801155a:	d20f      	bcs.n	801157c <forward_relu+0xf4>
 801155c:	3304      	adds	r3, #4
 801155e:	3004      	adds	r0, #4
 8011560:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011594 <forward_relu+0x10c>
 8011564:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011568:	f1a3 0208 	sub.w	r2, r3, #8
 801156c:	3b04      	subs	r3, #4
 801156e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011572:	ed60 7a01 	vstmdb	r0!, {s15}
 8011576:	688c      	ldr	r4, [r1, #8]
 8011578:	4294      	cmp	r4, r2
 801157a:	d9f3      	bls.n	8011564 <forward_relu+0xdc>
 801157c:	bcf0      	pop	{r4, r5, r6, r7}
 801157e:	4770      	bx	lr
 8011580:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011584:	3b08      	subs	r3, #8
 8011586:	688c      	ldr	r4, [r1, #8]
 8011588:	429c      	cmp	r4, r3
 801158a:	d8f7      	bhi.n	801157c <forward_relu+0xf4>
 801158c:	4603      	mov	r3, r0
 801158e:	e7c1      	b.n	8011514 <forward_relu+0x8c>
 8011590:	2201      	movs	r2, #1
 8011592:	e79e      	b.n	80114d2 <forward_relu+0x4a>
 8011594:	00000000 	.word	0x00000000

08011598 <ai_check_custom_types>:
 8011598:	4b13      	ldr	r3, [pc, #76]	; (80115e8 <ai_check_custom_types+0x50>)
 801159a:	b082      	sub	sp, #8
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	b118      	cbz	r0, 80115aa <ai_check_custom_types+0x12>
 80115a2:	7803      	ldrb	r3, [r0, #0]
 80115a4:	2b03      	cmp	r3, #3
 80115a6:	d002      	beq.n	80115ae <ai_check_custom_types+0x16>
 80115a8:	2000      	movs	r0, #0
 80115aa:	b002      	add	sp, #8
 80115ac:	4770      	bx	lr
 80115ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d004      	beq.n	80115c0 <ai_check_custom_types+0x28>
 80115b6:	2001      	movs	r0, #1
 80115b8:	f080 0001 	eor.w	r0, r0, #1
 80115bc:	b002      	add	sp, #8
 80115be:	4770      	bx	lr
 80115c0:	7842      	ldrb	r2, [r0, #1]
 80115c2:	3001      	adds	r0, #1
 80115c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d1f4      	bne.n	80115b6 <ai_check_custom_types+0x1e>
 80115cc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80115d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d1ee      	bne.n	80115b6 <ai_check_custom_types+0x1e>
 80115d8:	7842      	ldrb	r2, [r0, #1]
 80115da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d1e9      	bne.n	80115b6 <ai_check_custom_types+0x1e>
 80115e2:	2000      	movs	r0, #0
 80115e4:	e7e8      	b.n	80115b8 <ai_check_custom_types+0x20>
 80115e6:	bf00      	nop
 80115e8:	08014648 	.word	0x08014648

080115ec <ai_layers_forward_all>:
 80115ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ee:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80115f0:	4604      	mov	r4, r0
 80115f2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80115f4:	b316      	cbz	r6, 801163c <ai_layers_forward_all+0x50>
 80115f6:	b1c5      	cbz	r5, 801162a <ai_layers_forward_all+0x3e>
 80115f8:	6545      	str	r5, [r0, #84]	; 0x54
 80115fa:	4629      	mov	r1, r5
 80115fc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80115fe:	2001      	movs	r0, #1
 8011600:	47b0      	blx	r6
 8011602:	2700      	movs	r7, #0
 8011604:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011606:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011608:	2002      	movs	r0, #2
 801160a:	47b0      	blx	r6
 801160c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801160e:	692b      	ldr	r3, [r5, #16]
 8011610:	4628      	mov	r0, r5
 8011612:	4798      	blx	r3
 8011614:	68eb      	ldr	r3, [r5, #12]
 8011616:	2003      	movs	r0, #3
 8011618:	429d      	cmp	r5, r3
 801161a:	4619      	mov	r1, r3
 801161c:	d006      	beq.n	801162c <ai_layers_forward_all+0x40>
 801161e:	6563      	str	r3, [r4, #84]	; 0x54
 8011620:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011622:	47b0      	blx	r6
 8011624:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011626:	2900      	cmp	r1, #0
 8011628:	d1ed      	bne.n	8011606 <ai_layers_forward_all+0x1a>
 801162a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801162c:	2100      	movs	r1, #0
 801162e:	6567      	str	r7, [r4, #84]	; 0x54
 8011630:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011632:	47b0      	blx	r6
 8011634:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011636:	2900      	cmp	r1, #0
 8011638:	d1e5      	bne.n	8011606 <ai_layers_forward_all+0x1a>
 801163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801163c:	2d00      	cmp	r5, #0
 801163e:	d0f4      	beq.n	801162a <ai_layers_forward_all+0x3e>
 8011640:	6545      	str	r5, [r0, #84]	; 0x54
 8011642:	692b      	ldr	r3, [r5, #16]
 8011644:	4628      	mov	r0, r5
 8011646:	4798      	blx	r3
 8011648:	68eb      	ldr	r3, [r5, #12]
 801164a:	42ab      	cmp	r3, r5
 801164c:	461d      	mov	r5, r3
 801164e:	d003      	beq.n	8011658 <ai_layers_forward_all+0x6c>
 8011650:	6563      	str	r3, [r4, #84]	; 0x54
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1f5      	bne.n	8011642 <ai_layers_forward_all+0x56>
 8011656:	e7e8      	b.n	801162a <ai_layers_forward_all+0x3e>
 8011658:	2300      	movs	r3, #0
 801165a:	6563      	str	r3, [r4, #84]	; 0x54
 801165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801165e:	bf00      	nop

08011660 <ai_array_to_buffer_fmt>:
 8011660:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011664:	2b02      	cmp	r3, #2
 8011666:	d01f      	beq.n	80116a8 <ai_array_to_buffer_fmt+0x48>
 8011668:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801166c:	4a1b      	ldr	r2, [pc, #108]	; (80116dc <ai_array_to_buffer_fmt+0x7c>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d00a      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 8011672:	dc0d      	bgt.n	8011690 <ai_array_to_buffer_fmt+0x30>
 8011674:	4a1a      	ldr	r2, [pc, #104]	; (80116e0 <ai_array_to_buffer_fmt+0x80>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d006      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 801167a:	dd1d      	ble.n	80116b8 <ai_array_to_buffer_fmt+0x58>
 801167c:	4a19      	ldr	r2, [pc, #100]	; (80116e4 <ai_array_to_buffer_fmt+0x84>)
 801167e:	4293      	cmp	r3, r2
 8011680:	d002      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 8011682:	320f      	adds	r2, #15
 8011684:	4293      	cmp	r3, r2
 8011686:	d10d      	bne.n	80116a4 <ai_array_to_buffer_fmt+0x44>
 8011688:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801168c:	4318      	orrs	r0, r3
 801168e:	4770      	bx	lr
 8011690:	4a15      	ldr	r2, [pc, #84]	; (80116e8 <ai_array_to_buffer_fmt+0x88>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d0f8      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 8011696:	dd18      	ble.n	80116ca <ai_array_to_buffer_fmt+0x6a>
 8011698:	4a14      	ldr	r2, [pc, #80]	; (80116ec <ai_array_to_buffer_fmt+0x8c>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d0f4      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 801169e:	4a14      	ldr	r2, [pc, #80]	; (80116f0 <ai_array_to_buffer_fmt+0x90>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d0f1      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 80116a4:	2340      	movs	r3, #64	; 0x40
 80116a6:	e7ef      	b.n	8011688 <ai_array_to_buffer_fmt+0x28>
 80116a8:	4b12      	ldr	r3, [pc, #72]	; (80116f4 <ai_array_to_buffer_fmt+0x94>)
 80116aa:	4003      	ands	r3, r0
 80116ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80116b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80116b4:	4318      	orrs	r0, r3
 80116b6:	4770      	bx	lr
 80116b8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80116bc:	4293      	cmp	r3, r2
 80116be:	d0e3      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 80116c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d0df      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 80116c8:	e7ec      	b.n	80116a4 <ai_array_to_buffer_fmt+0x44>
 80116ca:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d0da      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 80116d2:	3207      	adds	r2, #7
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d0d7      	beq.n	8011688 <ai_array_to_buffer_fmt+0x28>
 80116d8:	e7e4      	b.n	80116a4 <ai_array_to_buffer_fmt+0x44>
 80116da:	bf00      	nop
 80116dc:	00840040 	.word	0x00840040
 80116e0:	00040447 	.word	0x00040447
 80116e4:	00040840 	.word	0x00040840
 80116e8:	00840840 	.word	0x00840840
 80116ec:	0084084f 	.word	0x0084084f
 80116f0:	01821040 	.word	0x01821040
 80116f4:	00803fff 	.word	0x00803fff

080116f8 <ai_array_get_byte_size>:
 80116f8:	b1e1      	cbz	r1, 8011734 <ai_array_get_byte_size+0x3c>
 80116fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80116fe:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8011702:	b410      	push	{r4}
 8011704:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8011708:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801170c:	4423      	add	r3, r4
 801170e:	2804      	cmp	r0, #4
 8011710:	fb01 f103 	mul.w	r1, r1, r3
 8011714:	f101 0107 	add.w	r1, r1, #7
 8011718:	f021 0107 	bic.w	r1, r1, #7
 801171c:	fa21 f102 	lsr.w	r1, r1, r2
 8011720:	d00a      	beq.n	8011738 <ai_array_get_byte_size+0x40>
 8011722:	2808      	cmp	r0, #8
 8011724:	d101      	bne.n	801172a <ai_array_get_byte_size+0x32>
 8011726:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801172a:	3107      	adds	r1, #7
 801172c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011730:	08c8      	lsrs	r0, r1, #3
 8011732:	4770      	bx	lr
 8011734:	4608      	mov	r0, r1
 8011736:	4770      	bx	lr
 8011738:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801173c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011740:	3107      	adds	r1, #7
 8011742:	08c8      	lsrs	r0, r1, #3
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop

08011748 <__errno>:
 8011748:	4b01      	ldr	r3, [pc, #4]	; (8011750 <__errno+0x8>)
 801174a:	6818      	ldr	r0, [r3, #0]
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	20000604 	.word	0x20000604

08011754 <__libc_init_array>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	4d0d      	ldr	r5, [pc, #52]	; (801178c <__libc_init_array+0x38>)
 8011758:	4c0d      	ldr	r4, [pc, #52]	; (8011790 <__libc_init_array+0x3c>)
 801175a:	1b64      	subs	r4, r4, r5
 801175c:	10a4      	asrs	r4, r4, #2
 801175e:	2600      	movs	r6, #0
 8011760:	42a6      	cmp	r6, r4
 8011762:	d109      	bne.n	8011778 <__libc_init_array+0x24>
 8011764:	4d0b      	ldr	r5, [pc, #44]	; (8011794 <__libc_init_array+0x40>)
 8011766:	4c0c      	ldr	r4, [pc, #48]	; (8011798 <__libc_init_array+0x44>)
 8011768:	f002 fefc 	bl	8014564 <_init>
 801176c:	1b64      	subs	r4, r4, r5
 801176e:	10a4      	asrs	r4, r4, #2
 8011770:	2600      	movs	r6, #0
 8011772:	42a6      	cmp	r6, r4
 8011774:	d105      	bne.n	8011782 <__libc_init_array+0x2e>
 8011776:	bd70      	pop	{r4, r5, r6, pc}
 8011778:	f855 3b04 	ldr.w	r3, [r5], #4
 801177c:	4798      	blx	r3
 801177e:	3601      	adds	r6, #1
 8011780:	e7ee      	b.n	8011760 <__libc_init_array+0xc>
 8011782:	f855 3b04 	ldr.w	r3, [r5], #4
 8011786:	4798      	blx	r3
 8011788:	3601      	adds	r6, #1
 801178a:	e7f2      	b.n	8011772 <__libc_init_array+0x1e>
 801178c:	08014c4c 	.word	0x08014c4c
 8011790:	08014c4c 	.word	0x08014c4c
 8011794:	08014c4c 	.word	0x08014c4c
 8011798:	08014c50 	.word	0x08014c50

0801179c <malloc>:
 801179c:	4b02      	ldr	r3, [pc, #8]	; (80117a8 <malloc+0xc>)
 801179e:	4601      	mov	r1, r0
 80117a0:	6818      	ldr	r0, [r3, #0]
 80117a2:	f000 b871 	b.w	8011888 <_malloc_r>
 80117a6:	bf00      	nop
 80117a8:	20000604 	.word	0x20000604

080117ac <free>:
 80117ac:	4b02      	ldr	r3, [pc, #8]	; (80117b8 <free+0xc>)
 80117ae:	4601      	mov	r1, r0
 80117b0:	6818      	ldr	r0, [r3, #0]
 80117b2:	f000 b819 	b.w	80117e8 <_free_r>
 80117b6:	bf00      	nop
 80117b8:	20000604 	.word	0x20000604

080117bc <memcpy>:
 80117bc:	440a      	add	r2, r1
 80117be:	4291      	cmp	r1, r2
 80117c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80117c4:	d100      	bne.n	80117c8 <memcpy+0xc>
 80117c6:	4770      	bx	lr
 80117c8:	b510      	push	{r4, lr}
 80117ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117d2:	4291      	cmp	r1, r2
 80117d4:	d1f9      	bne.n	80117ca <memcpy+0xe>
 80117d6:	bd10      	pop	{r4, pc}

080117d8 <memset>:
 80117d8:	4402      	add	r2, r0
 80117da:	4603      	mov	r3, r0
 80117dc:	4293      	cmp	r3, r2
 80117de:	d100      	bne.n	80117e2 <memset+0xa>
 80117e0:	4770      	bx	lr
 80117e2:	f803 1b01 	strb.w	r1, [r3], #1
 80117e6:	e7f9      	b.n	80117dc <memset+0x4>

080117e8 <_free_r>:
 80117e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117ea:	2900      	cmp	r1, #0
 80117ec:	d048      	beq.n	8011880 <_free_r+0x98>
 80117ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117f2:	9001      	str	r0, [sp, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f1a1 0404 	sub.w	r4, r1, #4
 80117fa:	bfb8      	it	lt
 80117fc:	18e4      	addlt	r4, r4, r3
 80117fe:	f001 fbb3 	bl	8012f68 <__malloc_lock>
 8011802:	4a20      	ldr	r2, [pc, #128]	; (8011884 <_free_r+0x9c>)
 8011804:	9801      	ldr	r0, [sp, #4]
 8011806:	6813      	ldr	r3, [r2, #0]
 8011808:	4615      	mov	r5, r2
 801180a:	b933      	cbnz	r3, 801181a <_free_r+0x32>
 801180c:	6063      	str	r3, [r4, #4]
 801180e:	6014      	str	r4, [r2, #0]
 8011810:	b003      	add	sp, #12
 8011812:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011816:	f001 bbad 	b.w	8012f74 <__malloc_unlock>
 801181a:	42a3      	cmp	r3, r4
 801181c:	d90b      	bls.n	8011836 <_free_r+0x4e>
 801181e:	6821      	ldr	r1, [r4, #0]
 8011820:	1862      	adds	r2, r4, r1
 8011822:	4293      	cmp	r3, r2
 8011824:	bf04      	itt	eq
 8011826:	681a      	ldreq	r2, [r3, #0]
 8011828:	685b      	ldreq	r3, [r3, #4]
 801182a:	6063      	str	r3, [r4, #4]
 801182c:	bf04      	itt	eq
 801182e:	1852      	addeq	r2, r2, r1
 8011830:	6022      	streq	r2, [r4, #0]
 8011832:	602c      	str	r4, [r5, #0]
 8011834:	e7ec      	b.n	8011810 <_free_r+0x28>
 8011836:	461a      	mov	r2, r3
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	b10b      	cbz	r3, 8011840 <_free_r+0x58>
 801183c:	42a3      	cmp	r3, r4
 801183e:	d9fa      	bls.n	8011836 <_free_r+0x4e>
 8011840:	6811      	ldr	r1, [r2, #0]
 8011842:	1855      	adds	r5, r2, r1
 8011844:	42a5      	cmp	r5, r4
 8011846:	d10b      	bne.n	8011860 <_free_r+0x78>
 8011848:	6824      	ldr	r4, [r4, #0]
 801184a:	4421      	add	r1, r4
 801184c:	1854      	adds	r4, r2, r1
 801184e:	42a3      	cmp	r3, r4
 8011850:	6011      	str	r1, [r2, #0]
 8011852:	d1dd      	bne.n	8011810 <_free_r+0x28>
 8011854:	681c      	ldr	r4, [r3, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	6053      	str	r3, [r2, #4]
 801185a:	4421      	add	r1, r4
 801185c:	6011      	str	r1, [r2, #0]
 801185e:	e7d7      	b.n	8011810 <_free_r+0x28>
 8011860:	d902      	bls.n	8011868 <_free_r+0x80>
 8011862:	230c      	movs	r3, #12
 8011864:	6003      	str	r3, [r0, #0]
 8011866:	e7d3      	b.n	8011810 <_free_r+0x28>
 8011868:	6825      	ldr	r5, [r4, #0]
 801186a:	1961      	adds	r1, r4, r5
 801186c:	428b      	cmp	r3, r1
 801186e:	bf04      	itt	eq
 8011870:	6819      	ldreq	r1, [r3, #0]
 8011872:	685b      	ldreq	r3, [r3, #4]
 8011874:	6063      	str	r3, [r4, #4]
 8011876:	bf04      	itt	eq
 8011878:	1949      	addeq	r1, r1, r5
 801187a:	6021      	streq	r1, [r4, #0]
 801187c:	6054      	str	r4, [r2, #4]
 801187e:	e7c7      	b.n	8011810 <_free_r+0x28>
 8011880:	b003      	add	sp, #12
 8011882:	bd30      	pop	{r4, r5, pc}
 8011884:	20000888 	.word	0x20000888

08011888 <_malloc_r>:
 8011888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188a:	1ccd      	adds	r5, r1, #3
 801188c:	f025 0503 	bic.w	r5, r5, #3
 8011890:	3508      	adds	r5, #8
 8011892:	2d0c      	cmp	r5, #12
 8011894:	bf38      	it	cc
 8011896:	250c      	movcc	r5, #12
 8011898:	2d00      	cmp	r5, #0
 801189a:	4606      	mov	r6, r0
 801189c:	db01      	blt.n	80118a2 <_malloc_r+0x1a>
 801189e:	42a9      	cmp	r1, r5
 80118a0:	d903      	bls.n	80118aa <_malloc_r+0x22>
 80118a2:	230c      	movs	r3, #12
 80118a4:	6033      	str	r3, [r6, #0]
 80118a6:	2000      	movs	r0, #0
 80118a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118aa:	f001 fb5d 	bl	8012f68 <__malloc_lock>
 80118ae:	4921      	ldr	r1, [pc, #132]	; (8011934 <_malloc_r+0xac>)
 80118b0:	680a      	ldr	r2, [r1, #0]
 80118b2:	4614      	mov	r4, r2
 80118b4:	b99c      	cbnz	r4, 80118de <_malloc_r+0x56>
 80118b6:	4f20      	ldr	r7, [pc, #128]	; (8011938 <_malloc_r+0xb0>)
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	b923      	cbnz	r3, 80118c6 <_malloc_r+0x3e>
 80118bc:	4621      	mov	r1, r4
 80118be:	4630      	mov	r0, r6
 80118c0:	f000 fca6 	bl	8012210 <_sbrk_r>
 80118c4:	6038      	str	r0, [r7, #0]
 80118c6:	4629      	mov	r1, r5
 80118c8:	4630      	mov	r0, r6
 80118ca:	f000 fca1 	bl	8012210 <_sbrk_r>
 80118ce:	1c43      	adds	r3, r0, #1
 80118d0:	d123      	bne.n	801191a <_malloc_r+0x92>
 80118d2:	230c      	movs	r3, #12
 80118d4:	6033      	str	r3, [r6, #0]
 80118d6:	4630      	mov	r0, r6
 80118d8:	f001 fb4c 	bl	8012f74 <__malloc_unlock>
 80118dc:	e7e3      	b.n	80118a6 <_malloc_r+0x1e>
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	1b5b      	subs	r3, r3, r5
 80118e2:	d417      	bmi.n	8011914 <_malloc_r+0x8c>
 80118e4:	2b0b      	cmp	r3, #11
 80118e6:	d903      	bls.n	80118f0 <_malloc_r+0x68>
 80118e8:	6023      	str	r3, [r4, #0]
 80118ea:	441c      	add	r4, r3
 80118ec:	6025      	str	r5, [r4, #0]
 80118ee:	e004      	b.n	80118fa <_malloc_r+0x72>
 80118f0:	6863      	ldr	r3, [r4, #4]
 80118f2:	42a2      	cmp	r2, r4
 80118f4:	bf0c      	ite	eq
 80118f6:	600b      	streq	r3, [r1, #0]
 80118f8:	6053      	strne	r3, [r2, #4]
 80118fa:	4630      	mov	r0, r6
 80118fc:	f001 fb3a 	bl	8012f74 <__malloc_unlock>
 8011900:	f104 000b 	add.w	r0, r4, #11
 8011904:	1d23      	adds	r3, r4, #4
 8011906:	f020 0007 	bic.w	r0, r0, #7
 801190a:	1ac2      	subs	r2, r0, r3
 801190c:	d0cc      	beq.n	80118a8 <_malloc_r+0x20>
 801190e:	1a1b      	subs	r3, r3, r0
 8011910:	50a3      	str	r3, [r4, r2]
 8011912:	e7c9      	b.n	80118a8 <_malloc_r+0x20>
 8011914:	4622      	mov	r2, r4
 8011916:	6864      	ldr	r4, [r4, #4]
 8011918:	e7cc      	b.n	80118b4 <_malloc_r+0x2c>
 801191a:	1cc4      	adds	r4, r0, #3
 801191c:	f024 0403 	bic.w	r4, r4, #3
 8011920:	42a0      	cmp	r0, r4
 8011922:	d0e3      	beq.n	80118ec <_malloc_r+0x64>
 8011924:	1a21      	subs	r1, r4, r0
 8011926:	4630      	mov	r0, r6
 8011928:	f000 fc72 	bl	8012210 <_sbrk_r>
 801192c:	3001      	adds	r0, #1
 801192e:	d1dd      	bne.n	80118ec <_malloc_r+0x64>
 8011930:	e7cf      	b.n	80118d2 <_malloc_r+0x4a>
 8011932:	bf00      	nop
 8011934:	20000888 	.word	0x20000888
 8011938:	2000088c 	.word	0x2000088c

0801193c <__cvt>:
 801193c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011940:	ec55 4b10 	vmov	r4, r5, d0
 8011944:	2d00      	cmp	r5, #0
 8011946:	460e      	mov	r6, r1
 8011948:	4619      	mov	r1, r3
 801194a:	462b      	mov	r3, r5
 801194c:	bfbb      	ittet	lt
 801194e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011952:	461d      	movlt	r5, r3
 8011954:	2300      	movge	r3, #0
 8011956:	232d      	movlt	r3, #45	; 0x2d
 8011958:	700b      	strb	r3, [r1, #0]
 801195a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801195c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011960:	4691      	mov	r9, r2
 8011962:	f023 0820 	bic.w	r8, r3, #32
 8011966:	bfbc      	itt	lt
 8011968:	4622      	movlt	r2, r4
 801196a:	4614      	movlt	r4, r2
 801196c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011970:	d005      	beq.n	801197e <__cvt+0x42>
 8011972:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011976:	d100      	bne.n	801197a <__cvt+0x3e>
 8011978:	3601      	adds	r6, #1
 801197a:	2102      	movs	r1, #2
 801197c:	e000      	b.n	8011980 <__cvt+0x44>
 801197e:	2103      	movs	r1, #3
 8011980:	ab03      	add	r3, sp, #12
 8011982:	9301      	str	r3, [sp, #4]
 8011984:	ab02      	add	r3, sp, #8
 8011986:	9300      	str	r3, [sp, #0]
 8011988:	ec45 4b10 	vmov	d0, r4, r5
 801198c:	4653      	mov	r3, sl
 801198e:	4632      	mov	r2, r6
 8011990:	f000 fcfa 	bl	8012388 <_dtoa_r>
 8011994:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011998:	4607      	mov	r7, r0
 801199a:	d102      	bne.n	80119a2 <__cvt+0x66>
 801199c:	f019 0f01 	tst.w	r9, #1
 80119a0:	d022      	beq.n	80119e8 <__cvt+0xac>
 80119a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80119a6:	eb07 0906 	add.w	r9, r7, r6
 80119aa:	d110      	bne.n	80119ce <__cvt+0x92>
 80119ac:	783b      	ldrb	r3, [r7, #0]
 80119ae:	2b30      	cmp	r3, #48	; 0x30
 80119b0:	d10a      	bne.n	80119c8 <__cvt+0x8c>
 80119b2:	2200      	movs	r2, #0
 80119b4:	2300      	movs	r3, #0
 80119b6:	4620      	mov	r0, r4
 80119b8:	4629      	mov	r1, r5
 80119ba:	f7ef f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80119be:	b918      	cbnz	r0, 80119c8 <__cvt+0x8c>
 80119c0:	f1c6 0601 	rsb	r6, r6, #1
 80119c4:	f8ca 6000 	str.w	r6, [sl]
 80119c8:	f8da 3000 	ldr.w	r3, [sl]
 80119cc:	4499      	add	r9, r3
 80119ce:	2200      	movs	r2, #0
 80119d0:	2300      	movs	r3, #0
 80119d2:	4620      	mov	r0, r4
 80119d4:	4629      	mov	r1, r5
 80119d6:	f7ef f897 	bl	8000b08 <__aeabi_dcmpeq>
 80119da:	b108      	cbz	r0, 80119e0 <__cvt+0xa4>
 80119dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80119e0:	2230      	movs	r2, #48	; 0x30
 80119e2:	9b03      	ldr	r3, [sp, #12]
 80119e4:	454b      	cmp	r3, r9
 80119e6:	d307      	bcc.n	80119f8 <__cvt+0xbc>
 80119e8:	9b03      	ldr	r3, [sp, #12]
 80119ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119ec:	1bdb      	subs	r3, r3, r7
 80119ee:	4638      	mov	r0, r7
 80119f0:	6013      	str	r3, [r2, #0]
 80119f2:	b004      	add	sp, #16
 80119f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119f8:	1c59      	adds	r1, r3, #1
 80119fa:	9103      	str	r1, [sp, #12]
 80119fc:	701a      	strb	r2, [r3, #0]
 80119fe:	e7f0      	b.n	80119e2 <__cvt+0xa6>

08011a00 <__exponent>:
 8011a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a02:	4603      	mov	r3, r0
 8011a04:	2900      	cmp	r1, #0
 8011a06:	bfb8      	it	lt
 8011a08:	4249      	neglt	r1, r1
 8011a0a:	f803 2b02 	strb.w	r2, [r3], #2
 8011a0e:	bfb4      	ite	lt
 8011a10:	222d      	movlt	r2, #45	; 0x2d
 8011a12:	222b      	movge	r2, #43	; 0x2b
 8011a14:	2909      	cmp	r1, #9
 8011a16:	7042      	strb	r2, [r0, #1]
 8011a18:	dd2a      	ble.n	8011a70 <__exponent+0x70>
 8011a1a:	f10d 0407 	add.w	r4, sp, #7
 8011a1e:	46a4      	mov	ip, r4
 8011a20:	270a      	movs	r7, #10
 8011a22:	46a6      	mov	lr, r4
 8011a24:	460a      	mov	r2, r1
 8011a26:	fb91 f6f7 	sdiv	r6, r1, r7
 8011a2a:	fb07 1516 	mls	r5, r7, r6, r1
 8011a2e:	3530      	adds	r5, #48	; 0x30
 8011a30:	2a63      	cmp	r2, #99	; 0x63
 8011a32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011a36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011a3a:	4631      	mov	r1, r6
 8011a3c:	dcf1      	bgt.n	8011a22 <__exponent+0x22>
 8011a3e:	3130      	adds	r1, #48	; 0x30
 8011a40:	f1ae 0502 	sub.w	r5, lr, #2
 8011a44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011a48:	1c44      	adds	r4, r0, #1
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4561      	cmp	r1, ip
 8011a4e:	d30a      	bcc.n	8011a66 <__exponent+0x66>
 8011a50:	f10d 0209 	add.w	r2, sp, #9
 8011a54:	eba2 020e 	sub.w	r2, r2, lr
 8011a58:	4565      	cmp	r5, ip
 8011a5a:	bf88      	it	hi
 8011a5c:	2200      	movhi	r2, #0
 8011a5e:	4413      	add	r3, r2
 8011a60:	1a18      	subs	r0, r3, r0
 8011a62:	b003      	add	sp, #12
 8011a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011a6e:	e7ed      	b.n	8011a4c <__exponent+0x4c>
 8011a70:	2330      	movs	r3, #48	; 0x30
 8011a72:	3130      	adds	r1, #48	; 0x30
 8011a74:	7083      	strb	r3, [r0, #2]
 8011a76:	70c1      	strb	r1, [r0, #3]
 8011a78:	1d03      	adds	r3, r0, #4
 8011a7a:	e7f1      	b.n	8011a60 <__exponent+0x60>

08011a7c <_printf_float>:
 8011a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a80:	ed2d 8b02 	vpush	{d8}
 8011a84:	b08d      	sub	sp, #52	; 0x34
 8011a86:	460c      	mov	r4, r1
 8011a88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011a8c:	4616      	mov	r6, r2
 8011a8e:	461f      	mov	r7, r3
 8011a90:	4605      	mov	r5, r0
 8011a92:	f001 fa65 	bl	8012f60 <_localeconv_r>
 8011a96:	f8d0 a000 	ldr.w	sl, [r0]
 8011a9a:	4650      	mov	r0, sl
 8011a9c:	f7ee fbb8 	bl	8000210 <strlen>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	9305      	str	r3, [sp, #20]
 8011aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8011aac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011ab0:	3307      	adds	r3, #7
 8011ab2:	f023 0307 	bic.w	r3, r3, #7
 8011ab6:	f103 0208 	add.w	r2, r3, #8
 8011aba:	f8c8 2000 	str.w	r2, [r8]
 8011abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011ac6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011aca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011ace:	9307      	str	r3, [sp, #28]
 8011ad0:	f8cd 8018 	str.w	r8, [sp, #24]
 8011ad4:	ee08 0a10 	vmov	s16, r0
 8011ad8:	4b9f      	ldr	r3, [pc, #636]	; (8011d58 <_printf_float+0x2dc>)
 8011ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ae2:	f7ef f843 	bl	8000b6c <__aeabi_dcmpun>
 8011ae6:	bb88      	cbnz	r0, 8011b4c <_printf_float+0xd0>
 8011ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011aec:	4b9a      	ldr	r3, [pc, #616]	; (8011d58 <_printf_float+0x2dc>)
 8011aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011af2:	f7ef f81d 	bl	8000b30 <__aeabi_dcmple>
 8011af6:	bb48      	cbnz	r0, 8011b4c <_printf_float+0xd0>
 8011af8:	2200      	movs	r2, #0
 8011afa:	2300      	movs	r3, #0
 8011afc:	4640      	mov	r0, r8
 8011afe:	4649      	mov	r1, r9
 8011b00:	f7ef f80c 	bl	8000b1c <__aeabi_dcmplt>
 8011b04:	b110      	cbz	r0, 8011b0c <_printf_float+0x90>
 8011b06:	232d      	movs	r3, #45	; 0x2d
 8011b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b0c:	4b93      	ldr	r3, [pc, #588]	; (8011d5c <_printf_float+0x2e0>)
 8011b0e:	4894      	ldr	r0, [pc, #592]	; (8011d60 <_printf_float+0x2e4>)
 8011b10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011b14:	bf94      	ite	ls
 8011b16:	4698      	movls	r8, r3
 8011b18:	4680      	movhi	r8, r0
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	6123      	str	r3, [r4, #16]
 8011b1e:	9b05      	ldr	r3, [sp, #20]
 8011b20:	f023 0204 	bic.w	r2, r3, #4
 8011b24:	6022      	str	r2, [r4, #0]
 8011b26:	f04f 0900 	mov.w	r9, #0
 8011b2a:	9700      	str	r7, [sp, #0]
 8011b2c:	4633      	mov	r3, r6
 8011b2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011b30:	4621      	mov	r1, r4
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 f9d8 	bl	8011ee8 <_printf_common>
 8011b38:	3001      	adds	r0, #1
 8011b3a:	f040 8090 	bne.w	8011c5e <_printf_float+0x1e2>
 8011b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b42:	b00d      	add	sp, #52	; 0x34
 8011b44:	ecbd 8b02 	vpop	{d8}
 8011b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	464b      	mov	r3, r9
 8011b50:	4640      	mov	r0, r8
 8011b52:	4649      	mov	r1, r9
 8011b54:	f7ef f80a 	bl	8000b6c <__aeabi_dcmpun>
 8011b58:	b140      	cbz	r0, 8011b6c <_printf_float+0xf0>
 8011b5a:	464b      	mov	r3, r9
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	bfbc      	itt	lt
 8011b60:	232d      	movlt	r3, #45	; 0x2d
 8011b62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b66:	487f      	ldr	r0, [pc, #508]	; (8011d64 <_printf_float+0x2e8>)
 8011b68:	4b7f      	ldr	r3, [pc, #508]	; (8011d68 <_printf_float+0x2ec>)
 8011b6a:	e7d1      	b.n	8011b10 <_printf_float+0x94>
 8011b6c:	6863      	ldr	r3, [r4, #4]
 8011b6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b72:	9206      	str	r2, [sp, #24]
 8011b74:	1c5a      	adds	r2, r3, #1
 8011b76:	d13f      	bne.n	8011bf8 <_printf_float+0x17c>
 8011b78:	2306      	movs	r3, #6
 8011b7a:	6063      	str	r3, [r4, #4]
 8011b7c:	9b05      	ldr	r3, [sp, #20]
 8011b7e:	6861      	ldr	r1, [r4, #4]
 8011b80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011b84:	2300      	movs	r3, #0
 8011b86:	9303      	str	r3, [sp, #12]
 8011b88:	ab0a      	add	r3, sp, #40	; 0x28
 8011b8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011b8e:	ab09      	add	r3, sp, #36	; 0x24
 8011b90:	ec49 8b10 	vmov	d0, r8, r9
 8011b94:	9300      	str	r3, [sp, #0]
 8011b96:	6022      	str	r2, [r4, #0]
 8011b98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	f7ff fecd 	bl	801193c <__cvt>
 8011ba2:	9b06      	ldr	r3, [sp, #24]
 8011ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ba6:	2b47      	cmp	r3, #71	; 0x47
 8011ba8:	4680      	mov	r8, r0
 8011baa:	d108      	bne.n	8011bbe <_printf_float+0x142>
 8011bac:	1cc8      	adds	r0, r1, #3
 8011bae:	db02      	blt.n	8011bb6 <_printf_float+0x13a>
 8011bb0:	6863      	ldr	r3, [r4, #4]
 8011bb2:	4299      	cmp	r1, r3
 8011bb4:	dd41      	ble.n	8011c3a <_printf_float+0x1be>
 8011bb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8011bba:	fa5f fb8b 	uxtb.w	fp, fp
 8011bbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011bc2:	d820      	bhi.n	8011c06 <_printf_float+0x18a>
 8011bc4:	3901      	subs	r1, #1
 8011bc6:	465a      	mov	r2, fp
 8011bc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011bcc:	9109      	str	r1, [sp, #36]	; 0x24
 8011bce:	f7ff ff17 	bl	8011a00 <__exponent>
 8011bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bd4:	1813      	adds	r3, r2, r0
 8011bd6:	2a01      	cmp	r2, #1
 8011bd8:	4681      	mov	r9, r0
 8011bda:	6123      	str	r3, [r4, #16]
 8011bdc:	dc02      	bgt.n	8011be4 <_printf_float+0x168>
 8011bde:	6822      	ldr	r2, [r4, #0]
 8011be0:	07d2      	lsls	r2, r2, #31
 8011be2:	d501      	bpl.n	8011be8 <_printf_float+0x16c>
 8011be4:	3301      	adds	r3, #1
 8011be6:	6123      	str	r3, [r4, #16]
 8011be8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d09c      	beq.n	8011b2a <_printf_float+0xae>
 8011bf0:	232d      	movs	r3, #45	; 0x2d
 8011bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bf6:	e798      	b.n	8011b2a <_printf_float+0xae>
 8011bf8:	9a06      	ldr	r2, [sp, #24]
 8011bfa:	2a47      	cmp	r2, #71	; 0x47
 8011bfc:	d1be      	bne.n	8011b7c <_printf_float+0x100>
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1bc      	bne.n	8011b7c <_printf_float+0x100>
 8011c02:	2301      	movs	r3, #1
 8011c04:	e7b9      	b.n	8011b7a <_printf_float+0xfe>
 8011c06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011c0a:	d118      	bne.n	8011c3e <_printf_float+0x1c2>
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	6863      	ldr	r3, [r4, #4]
 8011c10:	dd0b      	ble.n	8011c2a <_printf_float+0x1ae>
 8011c12:	6121      	str	r1, [r4, #16]
 8011c14:	b913      	cbnz	r3, 8011c1c <_printf_float+0x1a0>
 8011c16:	6822      	ldr	r2, [r4, #0]
 8011c18:	07d0      	lsls	r0, r2, #31
 8011c1a:	d502      	bpl.n	8011c22 <_printf_float+0x1a6>
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	440b      	add	r3, r1
 8011c20:	6123      	str	r3, [r4, #16]
 8011c22:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c24:	f04f 0900 	mov.w	r9, #0
 8011c28:	e7de      	b.n	8011be8 <_printf_float+0x16c>
 8011c2a:	b913      	cbnz	r3, 8011c32 <_printf_float+0x1b6>
 8011c2c:	6822      	ldr	r2, [r4, #0]
 8011c2e:	07d2      	lsls	r2, r2, #31
 8011c30:	d501      	bpl.n	8011c36 <_printf_float+0x1ba>
 8011c32:	3302      	adds	r3, #2
 8011c34:	e7f4      	b.n	8011c20 <_printf_float+0x1a4>
 8011c36:	2301      	movs	r3, #1
 8011c38:	e7f2      	b.n	8011c20 <_printf_float+0x1a4>
 8011c3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c40:	4299      	cmp	r1, r3
 8011c42:	db05      	blt.n	8011c50 <_printf_float+0x1d4>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	6121      	str	r1, [r4, #16]
 8011c48:	07d8      	lsls	r0, r3, #31
 8011c4a:	d5ea      	bpl.n	8011c22 <_printf_float+0x1a6>
 8011c4c:	1c4b      	adds	r3, r1, #1
 8011c4e:	e7e7      	b.n	8011c20 <_printf_float+0x1a4>
 8011c50:	2900      	cmp	r1, #0
 8011c52:	bfd4      	ite	le
 8011c54:	f1c1 0202 	rsble	r2, r1, #2
 8011c58:	2201      	movgt	r2, #1
 8011c5a:	4413      	add	r3, r2
 8011c5c:	e7e0      	b.n	8011c20 <_printf_float+0x1a4>
 8011c5e:	6823      	ldr	r3, [r4, #0]
 8011c60:	055a      	lsls	r2, r3, #21
 8011c62:	d407      	bmi.n	8011c74 <_printf_float+0x1f8>
 8011c64:	6923      	ldr	r3, [r4, #16]
 8011c66:	4642      	mov	r2, r8
 8011c68:	4631      	mov	r1, r6
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	47b8      	blx	r7
 8011c6e:	3001      	adds	r0, #1
 8011c70:	d12c      	bne.n	8011ccc <_printf_float+0x250>
 8011c72:	e764      	b.n	8011b3e <_printf_float+0xc2>
 8011c74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c78:	f240 80e0 	bls.w	8011e3c <_printf_float+0x3c0>
 8011c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c80:	2200      	movs	r2, #0
 8011c82:	2300      	movs	r3, #0
 8011c84:	f7ee ff40 	bl	8000b08 <__aeabi_dcmpeq>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d034      	beq.n	8011cf6 <_printf_float+0x27a>
 8011c8c:	4a37      	ldr	r2, [pc, #220]	; (8011d6c <_printf_float+0x2f0>)
 8011c8e:	2301      	movs	r3, #1
 8011c90:	4631      	mov	r1, r6
 8011c92:	4628      	mov	r0, r5
 8011c94:	47b8      	blx	r7
 8011c96:	3001      	adds	r0, #1
 8011c98:	f43f af51 	beq.w	8011b3e <_printf_float+0xc2>
 8011c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	db02      	blt.n	8011caa <_printf_float+0x22e>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	07d8      	lsls	r0, r3, #31
 8011ca8:	d510      	bpl.n	8011ccc <_printf_float+0x250>
 8011caa:	ee18 3a10 	vmov	r3, s16
 8011cae:	4652      	mov	r2, sl
 8011cb0:	4631      	mov	r1, r6
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	47b8      	blx	r7
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	f43f af41 	beq.w	8011b3e <_printf_float+0xc2>
 8011cbc:	f04f 0800 	mov.w	r8, #0
 8011cc0:	f104 091a 	add.w	r9, r4, #26
 8011cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	4543      	cmp	r3, r8
 8011cca:	dc09      	bgt.n	8011ce0 <_printf_float+0x264>
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	079b      	lsls	r3, r3, #30
 8011cd0:	f100 8105 	bmi.w	8011ede <_printf_float+0x462>
 8011cd4:	68e0      	ldr	r0, [r4, #12]
 8011cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cd8:	4298      	cmp	r0, r3
 8011cda:	bfb8      	it	lt
 8011cdc:	4618      	movlt	r0, r3
 8011cde:	e730      	b.n	8011b42 <_printf_float+0xc6>
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	464a      	mov	r2, r9
 8011ce4:	4631      	mov	r1, r6
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	47b8      	blx	r7
 8011cea:	3001      	adds	r0, #1
 8011cec:	f43f af27 	beq.w	8011b3e <_printf_float+0xc2>
 8011cf0:	f108 0801 	add.w	r8, r8, #1
 8011cf4:	e7e6      	b.n	8011cc4 <_printf_float+0x248>
 8011cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	dc39      	bgt.n	8011d70 <_printf_float+0x2f4>
 8011cfc:	4a1b      	ldr	r2, [pc, #108]	; (8011d6c <_printf_float+0x2f0>)
 8011cfe:	2301      	movs	r3, #1
 8011d00:	4631      	mov	r1, r6
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b8      	blx	r7
 8011d06:	3001      	adds	r0, #1
 8011d08:	f43f af19 	beq.w	8011b3e <_printf_float+0xc2>
 8011d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d10:	4313      	orrs	r3, r2
 8011d12:	d102      	bne.n	8011d1a <_printf_float+0x29e>
 8011d14:	6823      	ldr	r3, [r4, #0]
 8011d16:	07d9      	lsls	r1, r3, #31
 8011d18:	d5d8      	bpl.n	8011ccc <_printf_float+0x250>
 8011d1a:	ee18 3a10 	vmov	r3, s16
 8011d1e:	4652      	mov	r2, sl
 8011d20:	4631      	mov	r1, r6
 8011d22:	4628      	mov	r0, r5
 8011d24:	47b8      	blx	r7
 8011d26:	3001      	adds	r0, #1
 8011d28:	f43f af09 	beq.w	8011b3e <_printf_float+0xc2>
 8011d2c:	f04f 0900 	mov.w	r9, #0
 8011d30:	f104 0a1a 	add.w	sl, r4, #26
 8011d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d36:	425b      	negs	r3, r3
 8011d38:	454b      	cmp	r3, r9
 8011d3a:	dc01      	bgt.n	8011d40 <_printf_float+0x2c4>
 8011d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d3e:	e792      	b.n	8011c66 <_printf_float+0x1ea>
 8011d40:	2301      	movs	r3, #1
 8011d42:	4652      	mov	r2, sl
 8011d44:	4631      	mov	r1, r6
 8011d46:	4628      	mov	r0, r5
 8011d48:	47b8      	blx	r7
 8011d4a:	3001      	adds	r0, #1
 8011d4c:	f43f aef7 	beq.w	8011b3e <_printf_float+0xc2>
 8011d50:	f109 0901 	add.w	r9, r9, #1
 8011d54:	e7ee      	b.n	8011d34 <_printf_float+0x2b8>
 8011d56:	bf00      	nop
 8011d58:	7fefffff 	.word	0x7fefffff
 8011d5c:	08014868 	.word	0x08014868
 8011d60:	0801486c 	.word	0x0801486c
 8011d64:	08014874 	.word	0x08014874
 8011d68:	08014870 	.word	0x08014870
 8011d6c:	08014878 	.word	0x08014878
 8011d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d74:	429a      	cmp	r2, r3
 8011d76:	bfa8      	it	ge
 8011d78:	461a      	movge	r2, r3
 8011d7a:	2a00      	cmp	r2, #0
 8011d7c:	4691      	mov	r9, r2
 8011d7e:	dc37      	bgt.n	8011df0 <_printf_float+0x374>
 8011d80:	f04f 0b00 	mov.w	fp, #0
 8011d84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d88:	f104 021a 	add.w	r2, r4, #26
 8011d8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d8e:	9305      	str	r3, [sp, #20]
 8011d90:	eba3 0309 	sub.w	r3, r3, r9
 8011d94:	455b      	cmp	r3, fp
 8011d96:	dc33      	bgt.n	8011e00 <_printf_float+0x384>
 8011d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	db3b      	blt.n	8011e18 <_printf_float+0x39c>
 8011da0:	6823      	ldr	r3, [r4, #0]
 8011da2:	07da      	lsls	r2, r3, #31
 8011da4:	d438      	bmi.n	8011e18 <_printf_float+0x39c>
 8011da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011da8:	9b05      	ldr	r3, [sp, #20]
 8011daa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	eba2 0901 	sub.w	r9, r2, r1
 8011db2:	4599      	cmp	r9, r3
 8011db4:	bfa8      	it	ge
 8011db6:	4699      	movge	r9, r3
 8011db8:	f1b9 0f00 	cmp.w	r9, #0
 8011dbc:	dc35      	bgt.n	8011e2a <_printf_float+0x3ae>
 8011dbe:	f04f 0800 	mov.w	r8, #0
 8011dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dc6:	f104 0a1a 	add.w	sl, r4, #26
 8011dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dce:	1a9b      	subs	r3, r3, r2
 8011dd0:	eba3 0309 	sub.w	r3, r3, r9
 8011dd4:	4543      	cmp	r3, r8
 8011dd6:	f77f af79 	ble.w	8011ccc <_printf_float+0x250>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	4652      	mov	r2, sl
 8011dde:	4631      	mov	r1, r6
 8011de0:	4628      	mov	r0, r5
 8011de2:	47b8      	blx	r7
 8011de4:	3001      	adds	r0, #1
 8011de6:	f43f aeaa 	beq.w	8011b3e <_printf_float+0xc2>
 8011dea:	f108 0801 	add.w	r8, r8, #1
 8011dee:	e7ec      	b.n	8011dca <_printf_float+0x34e>
 8011df0:	4613      	mov	r3, r2
 8011df2:	4631      	mov	r1, r6
 8011df4:	4642      	mov	r2, r8
 8011df6:	4628      	mov	r0, r5
 8011df8:	47b8      	blx	r7
 8011dfa:	3001      	adds	r0, #1
 8011dfc:	d1c0      	bne.n	8011d80 <_printf_float+0x304>
 8011dfe:	e69e      	b.n	8011b3e <_printf_float+0xc2>
 8011e00:	2301      	movs	r3, #1
 8011e02:	4631      	mov	r1, r6
 8011e04:	4628      	mov	r0, r5
 8011e06:	9205      	str	r2, [sp, #20]
 8011e08:	47b8      	blx	r7
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	f43f ae97 	beq.w	8011b3e <_printf_float+0xc2>
 8011e10:	9a05      	ldr	r2, [sp, #20]
 8011e12:	f10b 0b01 	add.w	fp, fp, #1
 8011e16:	e7b9      	b.n	8011d8c <_printf_float+0x310>
 8011e18:	ee18 3a10 	vmov	r3, s16
 8011e1c:	4652      	mov	r2, sl
 8011e1e:	4631      	mov	r1, r6
 8011e20:	4628      	mov	r0, r5
 8011e22:	47b8      	blx	r7
 8011e24:	3001      	adds	r0, #1
 8011e26:	d1be      	bne.n	8011da6 <_printf_float+0x32a>
 8011e28:	e689      	b.n	8011b3e <_printf_float+0xc2>
 8011e2a:	9a05      	ldr	r2, [sp, #20]
 8011e2c:	464b      	mov	r3, r9
 8011e2e:	4442      	add	r2, r8
 8011e30:	4631      	mov	r1, r6
 8011e32:	4628      	mov	r0, r5
 8011e34:	47b8      	blx	r7
 8011e36:	3001      	adds	r0, #1
 8011e38:	d1c1      	bne.n	8011dbe <_printf_float+0x342>
 8011e3a:	e680      	b.n	8011b3e <_printf_float+0xc2>
 8011e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e3e:	2a01      	cmp	r2, #1
 8011e40:	dc01      	bgt.n	8011e46 <_printf_float+0x3ca>
 8011e42:	07db      	lsls	r3, r3, #31
 8011e44:	d538      	bpl.n	8011eb8 <_printf_float+0x43c>
 8011e46:	2301      	movs	r3, #1
 8011e48:	4642      	mov	r2, r8
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	47b8      	blx	r7
 8011e50:	3001      	adds	r0, #1
 8011e52:	f43f ae74 	beq.w	8011b3e <_printf_float+0xc2>
 8011e56:	ee18 3a10 	vmov	r3, s16
 8011e5a:	4652      	mov	r2, sl
 8011e5c:	4631      	mov	r1, r6
 8011e5e:	4628      	mov	r0, r5
 8011e60:	47b8      	blx	r7
 8011e62:	3001      	adds	r0, #1
 8011e64:	f43f ae6b 	beq.w	8011b3e <_printf_float+0xc2>
 8011e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	2300      	movs	r3, #0
 8011e70:	f7ee fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8011e74:	b9d8      	cbnz	r0, 8011eae <_printf_float+0x432>
 8011e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e78:	f108 0201 	add.w	r2, r8, #1
 8011e7c:	3b01      	subs	r3, #1
 8011e7e:	4631      	mov	r1, r6
 8011e80:	4628      	mov	r0, r5
 8011e82:	47b8      	blx	r7
 8011e84:	3001      	adds	r0, #1
 8011e86:	d10e      	bne.n	8011ea6 <_printf_float+0x42a>
 8011e88:	e659      	b.n	8011b3e <_printf_float+0xc2>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	4652      	mov	r2, sl
 8011e8e:	4631      	mov	r1, r6
 8011e90:	4628      	mov	r0, r5
 8011e92:	47b8      	blx	r7
 8011e94:	3001      	adds	r0, #1
 8011e96:	f43f ae52 	beq.w	8011b3e <_printf_float+0xc2>
 8011e9a:	f108 0801 	add.w	r8, r8, #1
 8011e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	4543      	cmp	r3, r8
 8011ea4:	dcf1      	bgt.n	8011e8a <_printf_float+0x40e>
 8011ea6:	464b      	mov	r3, r9
 8011ea8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011eac:	e6dc      	b.n	8011c68 <_printf_float+0x1ec>
 8011eae:	f04f 0800 	mov.w	r8, #0
 8011eb2:	f104 0a1a 	add.w	sl, r4, #26
 8011eb6:	e7f2      	b.n	8011e9e <_printf_float+0x422>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	4642      	mov	r2, r8
 8011ebc:	e7df      	b.n	8011e7e <_printf_float+0x402>
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	464a      	mov	r2, r9
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	47b8      	blx	r7
 8011ec8:	3001      	adds	r0, #1
 8011eca:	f43f ae38 	beq.w	8011b3e <_printf_float+0xc2>
 8011ece:	f108 0801 	add.w	r8, r8, #1
 8011ed2:	68e3      	ldr	r3, [r4, #12]
 8011ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ed6:	1a5b      	subs	r3, r3, r1
 8011ed8:	4543      	cmp	r3, r8
 8011eda:	dcf0      	bgt.n	8011ebe <_printf_float+0x442>
 8011edc:	e6fa      	b.n	8011cd4 <_printf_float+0x258>
 8011ede:	f04f 0800 	mov.w	r8, #0
 8011ee2:	f104 0919 	add.w	r9, r4, #25
 8011ee6:	e7f4      	b.n	8011ed2 <_printf_float+0x456>

08011ee8 <_printf_common>:
 8011ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eec:	4616      	mov	r6, r2
 8011eee:	4699      	mov	r9, r3
 8011ef0:	688a      	ldr	r2, [r1, #8]
 8011ef2:	690b      	ldr	r3, [r1, #16]
 8011ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	bfb8      	it	lt
 8011efc:	4613      	movlt	r3, r2
 8011efe:	6033      	str	r3, [r6, #0]
 8011f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f04:	4607      	mov	r7, r0
 8011f06:	460c      	mov	r4, r1
 8011f08:	b10a      	cbz	r2, 8011f0e <_printf_common+0x26>
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	6033      	str	r3, [r6, #0]
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	0699      	lsls	r1, r3, #26
 8011f12:	bf42      	ittt	mi
 8011f14:	6833      	ldrmi	r3, [r6, #0]
 8011f16:	3302      	addmi	r3, #2
 8011f18:	6033      	strmi	r3, [r6, #0]
 8011f1a:	6825      	ldr	r5, [r4, #0]
 8011f1c:	f015 0506 	ands.w	r5, r5, #6
 8011f20:	d106      	bne.n	8011f30 <_printf_common+0x48>
 8011f22:	f104 0a19 	add.w	sl, r4, #25
 8011f26:	68e3      	ldr	r3, [r4, #12]
 8011f28:	6832      	ldr	r2, [r6, #0]
 8011f2a:	1a9b      	subs	r3, r3, r2
 8011f2c:	42ab      	cmp	r3, r5
 8011f2e:	dc26      	bgt.n	8011f7e <_printf_common+0x96>
 8011f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f34:	1e13      	subs	r3, r2, #0
 8011f36:	6822      	ldr	r2, [r4, #0]
 8011f38:	bf18      	it	ne
 8011f3a:	2301      	movne	r3, #1
 8011f3c:	0692      	lsls	r2, r2, #26
 8011f3e:	d42b      	bmi.n	8011f98 <_printf_common+0xb0>
 8011f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f44:	4649      	mov	r1, r9
 8011f46:	4638      	mov	r0, r7
 8011f48:	47c0      	blx	r8
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	d01e      	beq.n	8011f8c <_printf_common+0xa4>
 8011f4e:	6823      	ldr	r3, [r4, #0]
 8011f50:	68e5      	ldr	r5, [r4, #12]
 8011f52:	6832      	ldr	r2, [r6, #0]
 8011f54:	f003 0306 	and.w	r3, r3, #6
 8011f58:	2b04      	cmp	r3, #4
 8011f5a:	bf08      	it	eq
 8011f5c:	1aad      	subeq	r5, r5, r2
 8011f5e:	68a3      	ldr	r3, [r4, #8]
 8011f60:	6922      	ldr	r2, [r4, #16]
 8011f62:	bf0c      	ite	eq
 8011f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f68:	2500      	movne	r5, #0
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	bfc4      	itt	gt
 8011f6e:	1a9b      	subgt	r3, r3, r2
 8011f70:	18ed      	addgt	r5, r5, r3
 8011f72:	2600      	movs	r6, #0
 8011f74:	341a      	adds	r4, #26
 8011f76:	42b5      	cmp	r5, r6
 8011f78:	d11a      	bne.n	8011fb0 <_printf_common+0xc8>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e008      	b.n	8011f90 <_printf_common+0xa8>
 8011f7e:	2301      	movs	r3, #1
 8011f80:	4652      	mov	r2, sl
 8011f82:	4649      	mov	r1, r9
 8011f84:	4638      	mov	r0, r7
 8011f86:	47c0      	blx	r8
 8011f88:	3001      	adds	r0, #1
 8011f8a:	d103      	bne.n	8011f94 <_printf_common+0xac>
 8011f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f94:	3501      	adds	r5, #1
 8011f96:	e7c6      	b.n	8011f26 <_printf_common+0x3e>
 8011f98:	18e1      	adds	r1, r4, r3
 8011f9a:	1c5a      	adds	r2, r3, #1
 8011f9c:	2030      	movs	r0, #48	; 0x30
 8011f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011fa2:	4422      	add	r2, r4
 8011fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011fac:	3302      	adds	r3, #2
 8011fae:	e7c7      	b.n	8011f40 <_printf_common+0x58>
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	4622      	mov	r2, r4
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	47c0      	blx	r8
 8011fba:	3001      	adds	r0, #1
 8011fbc:	d0e6      	beq.n	8011f8c <_printf_common+0xa4>
 8011fbe:	3601      	adds	r6, #1
 8011fc0:	e7d9      	b.n	8011f76 <_printf_common+0x8e>
	...

08011fc4 <_printf_i>:
 8011fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc8:	460c      	mov	r4, r1
 8011fca:	4691      	mov	r9, r2
 8011fcc:	7e27      	ldrb	r7, [r4, #24]
 8011fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011fd0:	2f78      	cmp	r7, #120	; 0x78
 8011fd2:	4680      	mov	r8, r0
 8011fd4:	469a      	mov	sl, r3
 8011fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fda:	d807      	bhi.n	8011fec <_printf_i+0x28>
 8011fdc:	2f62      	cmp	r7, #98	; 0x62
 8011fde:	d80a      	bhi.n	8011ff6 <_printf_i+0x32>
 8011fe0:	2f00      	cmp	r7, #0
 8011fe2:	f000 80d8 	beq.w	8012196 <_printf_i+0x1d2>
 8011fe6:	2f58      	cmp	r7, #88	; 0x58
 8011fe8:	f000 80a3 	beq.w	8012132 <_printf_i+0x16e>
 8011fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ff4:	e03a      	b.n	801206c <_printf_i+0xa8>
 8011ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ffa:	2b15      	cmp	r3, #21
 8011ffc:	d8f6      	bhi.n	8011fec <_printf_i+0x28>
 8011ffe:	a001      	add	r0, pc, #4	; (adr r0, 8012004 <_printf_i+0x40>)
 8012000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012004:	0801205d 	.word	0x0801205d
 8012008:	08012071 	.word	0x08012071
 801200c:	08011fed 	.word	0x08011fed
 8012010:	08011fed 	.word	0x08011fed
 8012014:	08011fed 	.word	0x08011fed
 8012018:	08011fed 	.word	0x08011fed
 801201c:	08012071 	.word	0x08012071
 8012020:	08011fed 	.word	0x08011fed
 8012024:	08011fed 	.word	0x08011fed
 8012028:	08011fed 	.word	0x08011fed
 801202c:	08011fed 	.word	0x08011fed
 8012030:	0801217d 	.word	0x0801217d
 8012034:	080120a1 	.word	0x080120a1
 8012038:	0801215f 	.word	0x0801215f
 801203c:	08011fed 	.word	0x08011fed
 8012040:	08011fed 	.word	0x08011fed
 8012044:	0801219f 	.word	0x0801219f
 8012048:	08011fed 	.word	0x08011fed
 801204c:	080120a1 	.word	0x080120a1
 8012050:	08011fed 	.word	0x08011fed
 8012054:	08011fed 	.word	0x08011fed
 8012058:	08012167 	.word	0x08012167
 801205c:	680b      	ldr	r3, [r1, #0]
 801205e:	1d1a      	adds	r2, r3, #4
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	600a      	str	r2, [r1, #0]
 8012064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801206c:	2301      	movs	r3, #1
 801206e:	e0a3      	b.n	80121b8 <_printf_i+0x1f4>
 8012070:	6825      	ldr	r5, [r4, #0]
 8012072:	6808      	ldr	r0, [r1, #0]
 8012074:	062e      	lsls	r6, r5, #24
 8012076:	f100 0304 	add.w	r3, r0, #4
 801207a:	d50a      	bpl.n	8012092 <_printf_i+0xce>
 801207c:	6805      	ldr	r5, [r0, #0]
 801207e:	600b      	str	r3, [r1, #0]
 8012080:	2d00      	cmp	r5, #0
 8012082:	da03      	bge.n	801208c <_printf_i+0xc8>
 8012084:	232d      	movs	r3, #45	; 0x2d
 8012086:	426d      	negs	r5, r5
 8012088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801208c:	485e      	ldr	r0, [pc, #376]	; (8012208 <_printf_i+0x244>)
 801208e:	230a      	movs	r3, #10
 8012090:	e019      	b.n	80120c6 <_printf_i+0x102>
 8012092:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012096:	6805      	ldr	r5, [r0, #0]
 8012098:	600b      	str	r3, [r1, #0]
 801209a:	bf18      	it	ne
 801209c:	b22d      	sxthne	r5, r5
 801209e:	e7ef      	b.n	8012080 <_printf_i+0xbc>
 80120a0:	680b      	ldr	r3, [r1, #0]
 80120a2:	6825      	ldr	r5, [r4, #0]
 80120a4:	1d18      	adds	r0, r3, #4
 80120a6:	6008      	str	r0, [r1, #0]
 80120a8:	0628      	lsls	r0, r5, #24
 80120aa:	d501      	bpl.n	80120b0 <_printf_i+0xec>
 80120ac:	681d      	ldr	r5, [r3, #0]
 80120ae:	e002      	b.n	80120b6 <_printf_i+0xf2>
 80120b0:	0669      	lsls	r1, r5, #25
 80120b2:	d5fb      	bpl.n	80120ac <_printf_i+0xe8>
 80120b4:	881d      	ldrh	r5, [r3, #0]
 80120b6:	4854      	ldr	r0, [pc, #336]	; (8012208 <_printf_i+0x244>)
 80120b8:	2f6f      	cmp	r7, #111	; 0x6f
 80120ba:	bf0c      	ite	eq
 80120bc:	2308      	moveq	r3, #8
 80120be:	230a      	movne	r3, #10
 80120c0:	2100      	movs	r1, #0
 80120c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120c6:	6866      	ldr	r6, [r4, #4]
 80120c8:	60a6      	str	r6, [r4, #8]
 80120ca:	2e00      	cmp	r6, #0
 80120cc:	bfa2      	ittt	ge
 80120ce:	6821      	ldrge	r1, [r4, #0]
 80120d0:	f021 0104 	bicge.w	r1, r1, #4
 80120d4:	6021      	strge	r1, [r4, #0]
 80120d6:	b90d      	cbnz	r5, 80120dc <_printf_i+0x118>
 80120d8:	2e00      	cmp	r6, #0
 80120da:	d04d      	beq.n	8012178 <_printf_i+0x1b4>
 80120dc:	4616      	mov	r6, r2
 80120de:	fbb5 f1f3 	udiv	r1, r5, r3
 80120e2:	fb03 5711 	mls	r7, r3, r1, r5
 80120e6:	5dc7      	ldrb	r7, [r0, r7]
 80120e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80120ec:	462f      	mov	r7, r5
 80120ee:	42bb      	cmp	r3, r7
 80120f0:	460d      	mov	r5, r1
 80120f2:	d9f4      	bls.n	80120de <_printf_i+0x11a>
 80120f4:	2b08      	cmp	r3, #8
 80120f6:	d10b      	bne.n	8012110 <_printf_i+0x14c>
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	07df      	lsls	r7, r3, #31
 80120fc:	d508      	bpl.n	8012110 <_printf_i+0x14c>
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	6861      	ldr	r1, [r4, #4]
 8012102:	4299      	cmp	r1, r3
 8012104:	bfde      	ittt	le
 8012106:	2330      	movle	r3, #48	; 0x30
 8012108:	f806 3c01 	strble.w	r3, [r6, #-1]
 801210c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012110:	1b92      	subs	r2, r2, r6
 8012112:	6122      	str	r2, [r4, #16]
 8012114:	f8cd a000 	str.w	sl, [sp]
 8012118:	464b      	mov	r3, r9
 801211a:	aa03      	add	r2, sp, #12
 801211c:	4621      	mov	r1, r4
 801211e:	4640      	mov	r0, r8
 8012120:	f7ff fee2 	bl	8011ee8 <_printf_common>
 8012124:	3001      	adds	r0, #1
 8012126:	d14c      	bne.n	80121c2 <_printf_i+0x1fe>
 8012128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801212c:	b004      	add	sp, #16
 801212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012132:	4835      	ldr	r0, [pc, #212]	; (8012208 <_printf_i+0x244>)
 8012134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	680e      	ldr	r6, [r1, #0]
 801213c:	061f      	lsls	r7, r3, #24
 801213e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012142:	600e      	str	r6, [r1, #0]
 8012144:	d514      	bpl.n	8012170 <_printf_i+0x1ac>
 8012146:	07d9      	lsls	r1, r3, #31
 8012148:	bf44      	itt	mi
 801214a:	f043 0320 	orrmi.w	r3, r3, #32
 801214e:	6023      	strmi	r3, [r4, #0]
 8012150:	b91d      	cbnz	r5, 801215a <_printf_i+0x196>
 8012152:	6823      	ldr	r3, [r4, #0]
 8012154:	f023 0320 	bic.w	r3, r3, #32
 8012158:	6023      	str	r3, [r4, #0]
 801215a:	2310      	movs	r3, #16
 801215c:	e7b0      	b.n	80120c0 <_printf_i+0xfc>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	f043 0320 	orr.w	r3, r3, #32
 8012164:	6023      	str	r3, [r4, #0]
 8012166:	2378      	movs	r3, #120	; 0x78
 8012168:	4828      	ldr	r0, [pc, #160]	; (801220c <_printf_i+0x248>)
 801216a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801216e:	e7e3      	b.n	8012138 <_printf_i+0x174>
 8012170:	065e      	lsls	r6, r3, #25
 8012172:	bf48      	it	mi
 8012174:	b2ad      	uxthmi	r5, r5
 8012176:	e7e6      	b.n	8012146 <_printf_i+0x182>
 8012178:	4616      	mov	r6, r2
 801217a:	e7bb      	b.n	80120f4 <_printf_i+0x130>
 801217c:	680b      	ldr	r3, [r1, #0]
 801217e:	6826      	ldr	r6, [r4, #0]
 8012180:	6960      	ldr	r0, [r4, #20]
 8012182:	1d1d      	adds	r5, r3, #4
 8012184:	600d      	str	r5, [r1, #0]
 8012186:	0635      	lsls	r5, r6, #24
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	d501      	bpl.n	8012190 <_printf_i+0x1cc>
 801218c:	6018      	str	r0, [r3, #0]
 801218e:	e002      	b.n	8012196 <_printf_i+0x1d2>
 8012190:	0671      	lsls	r1, r6, #25
 8012192:	d5fb      	bpl.n	801218c <_printf_i+0x1c8>
 8012194:	8018      	strh	r0, [r3, #0]
 8012196:	2300      	movs	r3, #0
 8012198:	6123      	str	r3, [r4, #16]
 801219a:	4616      	mov	r6, r2
 801219c:	e7ba      	b.n	8012114 <_printf_i+0x150>
 801219e:	680b      	ldr	r3, [r1, #0]
 80121a0:	1d1a      	adds	r2, r3, #4
 80121a2:	600a      	str	r2, [r1, #0]
 80121a4:	681e      	ldr	r6, [r3, #0]
 80121a6:	6862      	ldr	r2, [r4, #4]
 80121a8:	2100      	movs	r1, #0
 80121aa:	4630      	mov	r0, r6
 80121ac:	f7ee f838 	bl	8000220 <memchr>
 80121b0:	b108      	cbz	r0, 80121b6 <_printf_i+0x1f2>
 80121b2:	1b80      	subs	r0, r0, r6
 80121b4:	6060      	str	r0, [r4, #4]
 80121b6:	6863      	ldr	r3, [r4, #4]
 80121b8:	6123      	str	r3, [r4, #16]
 80121ba:	2300      	movs	r3, #0
 80121bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121c0:	e7a8      	b.n	8012114 <_printf_i+0x150>
 80121c2:	6923      	ldr	r3, [r4, #16]
 80121c4:	4632      	mov	r2, r6
 80121c6:	4649      	mov	r1, r9
 80121c8:	4640      	mov	r0, r8
 80121ca:	47d0      	blx	sl
 80121cc:	3001      	adds	r0, #1
 80121ce:	d0ab      	beq.n	8012128 <_printf_i+0x164>
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	079b      	lsls	r3, r3, #30
 80121d4:	d413      	bmi.n	80121fe <_printf_i+0x23a>
 80121d6:	68e0      	ldr	r0, [r4, #12]
 80121d8:	9b03      	ldr	r3, [sp, #12]
 80121da:	4298      	cmp	r0, r3
 80121dc:	bfb8      	it	lt
 80121de:	4618      	movlt	r0, r3
 80121e0:	e7a4      	b.n	801212c <_printf_i+0x168>
 80121e2:	2301      	movs	r3, #1
 80121e4:	4632      	mov	r2, r6
 80121e6:	4649      	mov	r1, r9
 80121e8:	4640      	mov	r0, r8
 80121ea:	47d0      	blx	sl
 80121ec:	3001      	adds	r0, #1
 80121ee:	d09b      	beq.n	8012128 <_printf_i+0x164>
 80121f0:	3501      	adds	r5, #1
 80121f2:	68e3      	ldr	r3, [r4, #12]
 80121f4:	9903      	ldr	r1, [sp, #12]
 80121f6:	1a5b      	subs	r3, r3, r1
 80121f8:	42ab      	cmp	r3, r5
 80121fa:	dcf2      	bgt.n	80121e2 <_printf_i+0x21e>
 80121fc:	e7eb      	b.n	80121d6 <_printf_i+0x212>
 80121fe:	2500      	movs	r5, #0
 8012200:	f104 0619 	add.w	r6, r4, #25
 8012204:	e7f5      	b.n	80121f2 <_printf_i+0x22e>
 8012206:	bf00      	nop
 8012208:	0801487a 	.word	0x0801487a
 801220c:	0801488b 	.word	0x0801488b

08012210 <_sbrk_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d06      	ldr	r5, [pc, #24]	; (801222c <_sbrk_r+0x1c>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	602b      	str	r3, [r5, #0]
 801221c:	f7f1 f988 	bl	8003530 <_sbrk>
 8012220:	1c43      	adds	r3, r0, #1
 8012222:	d102      	bne.n	801222a <_sbrk_r+0x1a>
 8012224:	682b      	ldr	r3, [r5, #0]
 8012226:	b103      	cbz	r3, 801222a <_sbrk_r+0x1a>
 8012228:	6023      	str	r3, [r4, #0]
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	20001ba4 	.word	0x20001ba4

08012230 <siprintf>:
 8012230:	b40e      	push	{r1, r2, r3}
 8012232:	b500      	push	{lr}
 8012234:	b09c      	sub	sp, #112	; 0x70
 8012236:	ab1d      	add	r3, sp, #116	; 0x74
 8012238:	9002      	str	r0, [sp, #8]
 801223a:	9006      	str	r0, [sp, #24]
 801223c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012240:	4809      	ldr	r0, [pc, #36]	; (8012268 <siprintf+0x38>)
 8012242:	9107      	str	r1, [sp, #28]
 8012244:	9104      	str	r1, [sp, #16]
 8012246:	4909      	ldr	r1, [pc, #36]	; (801226c <siprintf+0x3c>)
 8012248:	f853 2b04 	ldr.w	r2, [r3], #4
 801224c:	9105      	str	r1, [sp, #20]
 801224e:	6800      	ldr	r0, [r0, #0]
 8012250:	9301      	str	r3, [sp, #4]
 8012252:	a902      	add	r1, sp, #8
 8012254:	f001 faa2 	bl	801379c <_svfiprintf_r>
 8012258:	9b02      	ldr	r3, [sp, #8]
 801225a:	2200      	movs	r2, #0
 801225c:	701a      	strb	r2, [r3, #0]
 801225e:	b01c      	add	sp, #112	; 0x70
 8012260:	f85d eb04 	ldr.w	lr, [sp], #4
 8012264:	b003      	add	sp, #12
 8012266:	4770      	bx	lr
 8012268:	20000604 	.word	0x20000604
 801226c:	ffff0208 	.word	0xffff0208

08012270 <quorem>:
 8012270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012274:	6903      	ldr	r3, [r0, #16]
 8012276:	690c      	ldr	r4, [r1, #16]
 8012278:	42a3      	cmp	r3, r4
 801227a:	4607      	mov	r7, r0
 801227c:	f2c0 8081 	blt.w	8012382 <quorem+0x112>
 8012280:	3c01      	subs	r4, #1
 8012282:	f101 0814 	add.w	r8, r1, #20
 8012286:	f100 0514 	add.w	r5, r0, #20
 801228a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801228e:	9301      	str	r3, [sp, #4]
 8012290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012298:	3301      	adds	r3, #1
 801229a:	429a      	cmp	r2, r3
 801229c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80122a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80122a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80122a8:	d331      	bcc.n	801230e <quorem+0x9e>
 80122aa:	f04f 0e00 	mov.w	lr, #0
 80122ae:	4640      	mov	r0, r8
 80122b0:	46ac      	mov	ip, r5
 80122b2:	46f2      	mov	sl, lr
 80122b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80122b8:	b293      	uxth	r3, r2
 80122ba:	fb06 e303 	mla	r3, r6, r3, lr
 80122be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	ebaa 0303 	sub.w	r3, sl, r3
 80122c8:	0c12      	lsrs	r2, r2, #16
 80122ca:	f8dc a000 	ldr.w	sl, [ip]
 80122ce:	fb06 e202 	mla	r2, r6, r2, lr
 80122d2:	fa13 f38a 	uxtah	r3, r3, sl
 80122d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80122da:	fa1f fa82 	uxth.w	sl, r2
 80122de:	f8dc 2000 	ldr.w	r2, [ip]
 80122e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80122e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122f0:	4581      	cmp	r9, r0
 80122f2:	f84c 3b04 	str.w	r3, [ip], #4
 80122f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80122fa:	d2db      	bcs.n	80122b4 <quorem+0x44>
 80122fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8012300:	b92b      	cbnz	r3, 801230e <quorem+0x9e>
 8012302:	9b01      	ldr	r3, [sp, #4]
 8012304:	3b04      	subs	r3, #4
 8012306:	429d      	cmp	r5, r3
 8012308:	461a      	mov	r2, r3
 801230a:	d32e      	bcc.n	801236a <quorem+0xfa>
 801230c:	613c      	str	r4, [r7, #16]
 801230e:	4638      	mov	r0, r7
 8012310:	f001 f8b4 	bl	801347c <__mcmp>
 8012314:	2800      	cmp	r0, #0
 8012316:	db24      	blt.n	8012362 <quorem+0xf2>
 8012318:	3601      	adds	r6, #1
 801231a:	4628      	mov	r0, r5
 801231c:	f04f 0c00 	mov.w	ip, #0
 8012320:	f858 2b04 	ldr.w	r2, [r8], #4
 8012324:	f8d0 e000 	ldr.w	lr, [r0]
 8012328:	b293      	uxth	r3, r2
 801232a:	ebac 0303 	sub.w	r3, ip, r3
 801232e:	0c12      	lsrs	r2, r2, #16
 8012330:	fa13 f38e 	uxtah	r3, r3, lr
 8012334:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801233c:	b29b      	uxth	r3, r3
 801233e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012342:	45c1      	cmp	r9, r8
 8012344:	f840 3b04 	str.w	r3, [r0], #4
 8012348:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801234c:	d2e8      	bcs.n	8012320 <quorem+0xb0>
 801234e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012356:	b922      	cbnz	r2, 8012362 <quorem+0xf2>
 8012358:	3b04      	subs	r3, #4
 801235a:	429d      	cmp	r5, r3
 801235c:	461a      	mov	r2, r3
 801235e:	d30a      	bcc.n	8012376 <quorem+0x106>
 8012360:	613c      	str	r4, [r7, #16]
 8012362:	4630      	mov	r0, r6
 8012364:	b003      	add	sp, #12
 8012366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801236a:	6812      	ldr	r2, [r2, #0]
 801236c:	3b04      	subs	r3, #4
 801236e:	2a00      	cmp	r2, #0
 8012370:	d1cc      	bne.n	801230c <quorem+0x9c>
 8012372:	3c01      	subs	r4, #1
 8012374:	e7c7      	b.n	8012306 <quorem+0x96>
 8012376:	6812      	ldr	r2, [r2, #0]
 8012378:	3b04      	subs	r3, #4
 801237a:	2a00      	cmp	r2, #0
 801237c:	d1f0      	bne.n	8012360 <quorem+0xf0>
 801237e:	3c01      	subs	r4, #1
 8012380:	e7eb      	b.n	801235a <quorem+0xea>
 8012382:	2000      	movs	r0, #0
 8012384:	e7ee      	b.n	8012364 <quorem+0xf4>
	...

08012388 <_dtoa_r>:
 8012388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238c:	ed2d 8b02 	vpush	{d8}
 8012390:	ec57 6b10 	vmov	r6, r7, d0
 8012394:	b095      	sub	sp, #84	; 0x54
 8012396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801239c:	9105      	str	r1, [sp, #20]
 801239e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80123a2:	4604      	mov	r4, r0
 80123a4:	9209      	str	r2, [sp, #36]	; 0x24
 80123a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80123a8:	b975      	cbnz	r5, 80123c8 <_dtoa_r+0x40>
 80123aa:	2010      	movs	r0, #16
 80123ac:	f7ff f9f6 	bl	801179c <malloc>
 80123b0:	4602      	mov	r2, r0
 80123b2:	6260      	str	r0, [r4, #36]	; 0x24
 80123b4:	b920      	cbnz	r0, 80123c0 <_dtoa_r+0x38>
 80123b6:	4bb2      	ldr	r3, [pc, #712]	; (8012680 <_dtoa_r+0x2f8>)
 80123b8:	21ea      	movs	r1, #234	; 0xea
 80123ba:	48b2      	ldr	r0, [pc, #712]	; (8012684 <_dtoa_r+0x2fc>)
 80123bc:	f001 faee 	bl	801399c <__assert_func>
 80123c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80123c4:	6005      	str	r5, [r0, #0]
 80123c6:	60c5      	str	r5, [r0, #12]
 80123c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123ca:	6819      	ldr	r1, [r3, #0]
 80123cc:	b151      	cbz	r1, 80123e4 <_dtoa_r+0x5c>
 80123ce:	685a      	ldr	r2, [r3, #4]
 80123d0:	604a      	str	r2, [r1, #4]
 80123d2:	2301      	movs	r3, #1
 80123d4:	4093      	lsls	r3, r2
 80123d6:	608b      	str	r3, [r1, #8]
 80123d8:	4620      	mov	r0, r4
 80123da:	f000 fe11 	bl	8013000 <_Bfree>
 80123de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123e0:	2200      	movs	r2, #0
 80123e2:	601a      	str	r2, [r3, #0]
 80123e4:	1e3b      	subs	r3, r7, #0
 80123e6:	bfb9      	ittee	lt
 80123e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80123ec:	9303      	strlt	r3, [sp, #12]
 80123ee:	2300      	movge	r3, #0
 80123f0:	f8c8 3000 	strge.w	r3, [r8]
 80123f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80123f8:	4ba3      	ldr	r3, [pc, #652]	; (8012688 <_dtoa_r+0x300>)
 80123fa:	bfbc      	itt	lt
 80123fc:	2201      	movlt	r2, #1
 80123fe:	f8c8 2000 	strlt.w	r2, [r8]
 8012402:	ea33 0309 	bics.w	r3, r3, r9
 8012406:	d11b      	bne.n	8012440 <_dtoa_r+0xb8>
 8012408:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801240a:	f242 730f 	movw	r3, #9999	; 0x270f
 801240e:	6013      	str	r3, [r2, #0]
 8012410:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012414:	4333      	orrs	r3, r6
 8012416:	f000 857a 	beq.w	8012f0e <_dtoa_r+0xb86>
 801241a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801241c:	b963      	cbnz	r3, 8012438 <_dtoa_r+0xb0>
 801241e:	4b9b      	ldr	r3, [pc, #620]	; (801268c <_dtoa_r+0x304>)
 8012420:	e024      	b.n	801246c <_dtoa_r+0xe4>
 8012422:	4b9b      	ldr	r3, [pc, #620]	; (8012690 <_dtoa_r+0x308>)
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	3308      	adds	r3, #8
 8012428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801242a:	6013      	str	r3, [r2, #0]
 801242c:	9800      	ldr	r0, [sp, #0]
 801242e:	b015      	add	sp, #84	; 0x54
 8012430:	ecbd 8b02 	vpop	{d8}
 8012434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012438:	4b94      	ldr	r3, [pc, #592]	; (801268c <_dtoa_r+0x304>)
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	3303      	adds	r3, #3
 801243e:	e7f3      	b.n	8012428 <_dtoa_r+0xa0>
 8012440:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012444:	2200      	movs	r2, #0
 8012446:	ec51 0b17 	vmov	r0, r1, d7
 801244a:	2300      	movs	r3, #0
 801244c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012450:	f7ee fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8012454:	4680      	mov	r8, r0
 8012456:	b158      	cbz	r0, 8012470 <_dtoa_r+0xe8>
 8012458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801245a:	2301      	movs	r3, #1
 801245c:	6013      	str	r3, [r2, #0]
 801245e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012460:	2b00      	cmp	r3, #0
 8012462:	f000 8551 	beq.w	8012f08 <_dtoa_r+0xb80>
 8012466:	488b      	ldr	r0, [pc, #556]	; (8012694 <_dtoa_r+0x30c>)
 8012468:	6018      	str	r0, [r3, #0]
 801246a:	1e43      	subs	r3, r0, #1
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	e7dd      	b.n	801242c <_dtoa_r+0xa4>
 8012470:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012474:	aa12      	add	r2, sp, #72	; 0x48
 8012476:	a913      	add	r1, sp, #76	; 0x4c
 8012478:	4620      	mov	r0, r4
 801247a:	f001 f8a3 	bl	80135c4 <__d2b>
 801247e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012482:	4683      	mov	fp, r0
 8012484:	2d00      	cmp	r5, #0
 8012486:	d07c      	beq.n	8012582 <_dtoa_r+0x1fa>
 8012488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801248a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801248e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012492:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012496:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801249a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801249e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80124a2:	4b7d      	ldr	r3, [pc, #500]	; (8012698 <_dtoa_r+0x310>)
 80124a4:	2200      	movs	r2, #0
 80124a6:	4630      	mov	r0, r6
 80124a8:	4639      	mov	r1, r7
 80124aa:	f7ed ff0d 	bl	80002c8 <__aeabi_dsub>
 80124ae:	a36e      	add	r3, pc, #440	; (adr r3, 8012668 <_dtoa_r+0x2e0>)
 80124b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b4:	f7ee f8c0 	bl	8000638 <__aeabi_dmul>
 80124b8:	a36d      	add	r3, pc, #436	; (adr r3, 8012670 <_dtoa_r+0x2e8>)
 80124ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124be:	f7ed ff05 	bl	80002cc <__adddf3>
 80124c2:	4606      	mov	r6, r0
 80124c4:	4628      	mov	r0, r5
 80124c6:	460f      	mov	r7, r1
 80124c8:	f7ee f84c 	bl	8000564 <__aeabi_i2d>
 80124cc:	a36a      	add	r3, pc, #424	; (adr r3, 8012678 <_dtoa_r+0x2f0>)
 80124ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d2:	f7ee f8b1 	bl	8000638 <__aeabi_dmul>
 80124d6:	4602      	mov	r2, r0
 80124d8:	460b      	mov	r3, r1
 80124da:	4630      	mov	r0, r6
 80124dc:	4639      	mov	r1, r7
 80124de:	f7ed fef5 	bl	80002cc <__adddf3>
 80124e2:	4606      	mov	r6, r0
 80124e4:	460f      	mov	r7, r1
 80124e6:	f7ee fb57 	bl	8000b98 <__aeabi_d2iz>
 80124ea:	2200      	movs	r2, #0
 80124ec:	4682      	mov	sl, r0
 80124ee:	2300      	movs	r3, #0
 80124f0:	4630      	mov	r0, r6
 80124f2:	4639      	mov	r1, r7
 80124f4:	f7ee fb12 	bl	8000b1c <__aeabi_dcmplt>
 80124f8:	b148      	cbz	r0, 801250e <_dtoa_r+0x186>
 80124fa:	4650      	mov	r0, sl
 80124fc:	f7ee f832 	bl	8000564 <__aeabi_i2d>
 8012500:	4632      	mov	r2, r6
 8012502:	463b      	mov	r3, r7
 8012504:	f7ee fb00 	bl	8000b08 <__aeabi_dcmpeq>
 8012508:	b908      	cbnz	r0, 801250e <_dtoa_r+0x186>
 801250a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801250e:	f1ba 0f16 	cmp.w	sl, #22
 8012512:	d854      	bhi.n	80125be <_dtoa_r+0x236>
 8012514:	4b61      	ldr	r3, [pc, #388]	; (801269c <_dtoa_r+0x314>)
 8012516:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012522:	f7ee fafb 	bl	8000b1c <__aeabi_dcmplt>
 8012526:	2800      	cmp	r0, #0
 8012528:	d04b      	beq.n	80125c2 <_dtoa_r+0x23a>
 801252a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801252e:	2300      	movs	r3, #0
 8012530:	930e      	str	r3, [sp, #56]	; 0x38
 8012532:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012534:	1b5d      	subs	r5, r3, r5
 8012536:	1e6b      	subs	r3, r5, #1
 8012538:	9304      	str	r3, [sp, #16]
 801253a:	bf43      	ittte	mi
 801253c:	2300      	movmi	r3, #0
 801253e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012542:	9304      	strmi	r3, [sp, #16]
 8012544:	f04f 0800 	movpl.w	r8, #0
 8012548:	f1ba 0f00 	cmp.w	sl, #0
 801254c:	db3b      	blt.n	80125c6 <_dtoa_r+0x23e>
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012554:	4453      	add	r3, sl
 8012556:	9304      	str	r3, [sp, #16]
 8012558:	2300      	movs	r3, #0
 801255a:	9306      	str	r3, [sp, #24]
 801255c:	9b05      	ldr	r3, [sp, #20]
 801255e:	2b09      	cmp	r3, #9
 8012560:	d869      	bhi.n	8012636 <_dtoa_r+0x2ae>
 8012562:	2b05      	cmp	r3, #5
 8012564:	bfc4      	itt	gt
 8012566:	3b04      	subgt	r3, #4
 8012568:	9305      	strgt	r3, [sp, #20]
 801256a:	9b05      	ldr	r3, [sp, #20]
 801256c:	f1a3 0302 	sub.w	r3, r3, #2
 8012570:	bfcc      	ite	gt
 8012572:	2500      	movgt	r5, #0
 8012574:	2501      	movle	r5, #1
 8012576:	2b03      	cmp	r3, #3
 8012578:	d869      	bhi.n	801264e <_dtoa_r+0x2c6>
 801257a:	e8df f003 	tbb	[pc, r3]
 801257e:	4e2c      	.short	0x4e2c
 8012580:	5a4c      	.short	0x5a4c
 8012582:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012586:	441d      	add	r5, r3
 8012588:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801258c:	2b20      	cmp	r3, #32
 801258e:	bfc1      	itttt	gt
 8012590:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012594:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012598:	fa09 f303 	lslgt.w	r3, r9, r3
 801259c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80125a0:	bfda      	itte	le
 80125a2:	f1c3 0320 	rsble	r3, r3, #32
 80125a6:	fa06 f003 	lslle.w	r0, r6, r3
 80125aa:	4318      	orrgt	r0, r3
 80125ac:	f7ed ffca 	bl	8000544 <__aeabi_ui2d>
 80125b0:	2301      	movs	r3, #1
 80125b2:	4606      	mov	r6, r0
 80125b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80125b8:	3d01      	subs	r5, #1
 80125ba:	9310      	str	r3, [sp, #64]	; 0x40
 80125bc:	e771      	b.n	80124a2 <_dtoa_r+0x11a>
 80125be:	2301      	movs	r3, #1
 80125c0:	e7b6      	b.n	8012530 <_dtoa_r+0x1a8>
 80125c2:	900e      	str	r0, [sp, #56]	; 0x38
 80125c4:	e7b5      	b.n	8012532 <_dtoa_r+0x1aa>
 80125c6:	f1ca 0300 	rsb	r3, sl, #0
 80125ca:	9306      	str	r3, [sp, #24]
 80125cc:	2300      	movs	r3, #0
 80125ce:	eba8 080a 	sub.w	r8, r8, sl
 80125d2:	930d      	str	r3, [sp, #52]	; 0x34
 80125d4:	e7c2      	b.n	801255c <_dtoa_r+0x1d4>
 80125d6:	2300      	movs	r3, #0
 80125d8:	9308      	str	r3, [sp, #32]
 80125da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125dc:	2b00      	cmp	r3, #0
 80125de:	dc39      	bgt.n	8012654 <_dtoa_r+0x2cc>
 80125e0:	f04f 0901 	mov.w	r9, #1
 80125e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80125e8:	464b      	mov	r3, r9
 80125ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80125ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80125f0:	2200      	movs	r2, #0
 80125f2:	6042      	str	r2, [r0, #4]
 80125f4:	2204      	movs	r2, #4
 80125f6:	f102 0614 	add.w	r6, r2, #20
 80125fa:	429e      	cmp	r6, r3
 80125fc:	6841      	ldr	r1, [r0, #4]
 80125fe:	d92f      	bls.n	8012660 <_dtoa_r+0x2d8>
 8012600:	4620      	mov	r0, r4
 8012602:	f000 fcbd 	bl	8012f80 <_Balloc>
 8012606:	9000      	str	r0, [sp, #0]
 8012608:	2800      	cmp	r0, #0
 801260a:	d14b      	bne.n	80126a4 <_dtoa_r+0x31c>
 801260c:	4b24      	ldr	r3, [pc, #144]	; (80126a0 <_dtoa_r+0x318>)
 801260e:	4602      	mov	r2, r0
 8012610:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012614:	e6d1      	b.n	80123ba <_dtoa_r+0x32>
 8012616:	2301      	movs	r3, #1
 8012618:	e7de      	b.n	80125d8 <_dtoa_r+0x250>
 801261a:	2300      	movs	r3, #0
 801261c:	9308      	str	r3, [sp, #32]
 801261e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012620:	eb0a 0903 	add.w	r9, sl, r3
 8012624:	f109 0301 	add.w	r3, r9, #1
 8012628:	2b01      	cmp	r3, #1
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	bfb8      	it	lt
 801262e:	2301      	movlt	r3, #1
 8012630:	e7dd      	b.n	80125ee <_dtoa_r+0x266>
 8012632:	2301      	movs	r3, #1
 8012634:	e7f2      	b.n	801261c <_dtoa_r+0x294>
 8012636:	2501      	movs	r5, #1
 8012638:	2300      	movs	r3, #0
 801263a:	9305      	str	r3, [sp, #20]
 801263c:	9508      	str	r5, [sp, #32]
 801263e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012642:	2200      	movs	r2, #0
 8012644:	f8cd 9004 	str.w	r9, [sp, #4]
 8012648:	2312      	movs	r3, #18
 801264a:	9209      	str	r2, [sp, #36]	; 0x24
 801264c:	e7cf      	b.n	80125ee <_dtoa_r+0x266>
 801264e:	2301      	movs	r3, #1
 8012650:	9308      	str	r3, [sp, #32]
 8012652:	e7f4      	b.n	801263e <_dtoa_r+0x2b6>
 8012654:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012658:	f8cd 9004 	str.w	r9, [sp, #4]
 801265c:	464b      	mov	r3, r9
 801265e:	e7c6      	b.n	80125ee <_dtoa_r+0x266>
 8012660:	3101      	adds	r1, #1
 8012662:	6041      	str	r1, [r0, #4]
 8012664:	0052      	lsls	r2, r2, #1
 8012666:	e7c6      	b.n	80125f6 <_dtoa_r+0x26e>
 8012668:	636f4361 	.word	0x636f4361
 801266c:	3fd287a7 	.word	0x3fd287a7
 8012670:	8b60c8b3 	.word	0x8b60c8b3
 8012674:	3fc68a28 	.word	0x3fc68a28
 8012678:	509f79fb 	.word	0x509f79fb
 801267c:	3fd34413 	.word	0x3fd34413
 8012680:	080148a9 	.word	0x080148a9
 8012684:	080148c0 	.word	0x080148c0
 8012688:	7ff00000 	.word	0x7ff00000
 801268c:	080148a5 	.word	0x080148a5
 8012690:	0801489c 	.word	0x0801489c
 8012694:	08014879 	.word	0x08014879
 8012698:	3ff80000 	.word	0x3ff80000
 801269c:	080149b8 	.word	0x080149b8
 80126a0:	0801491f 	.word	0x0801491f
 80126a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126a6:	9a00      	ldr	r2, [sp, #0]
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	9b01      	ldr	r3, [sp, #4]
 80126ac:	2b0e      	cmp	r3, #14
 80126ae:	f200 80ad 	bhi.w	801280c <_dtoa_r+0x484>
 80126b2:	2d00      	cmp	r5, #0
 80126b4:	f000 80aa 	beq.w	801280c <_dtoa_r+0x484>
 80126b8:	f1ba 0f00 	cmp.w	sl, #0
 80126bc:	dd36      	ble.n	801272c <_dtoa_r+0x3a4>
 80126be:	4ac3      	ldr	r2, [pc, #780]	; (80129cc <_dtoa_r+0x644>)
 80126c0:	f00a 030f 	and.w	r3, sl, #15
 80126c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80126c8:	ed93 7b00 	vldr	d7, [r3]
 80126cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80126d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80126d4:	eeb0 8a47 	vmov.f32	s16, s14
 80126d8:	eef0 8a67 	vmov.f32	s17, s15
 80126dc:	d016      	beq.n	801270c <_dtoa_r+0x384>
 80126de:	4bbc      	ldr	r3, [pc, #752]	; (80129d0 <_dtoa_r+0x648>)
 80126e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80126e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80126e8:	f7ee f8d0 	bl	800088c <__aeabi_ddiv>
 80126ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126f0:	f007 070f 	and.w	r7, r7, #15
 80126f4:	2503      	movs	r5, #3
 80126f6:	4eb6      	ldr	r6, [pc, #728]	; (80129d0 <_dtoa_r+0x648>)
 80126f8:	b957      	cbnz	r7, 8012710 <_dtoa_r+0x388>
 80126fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126fe:	ec53 2b18 	vmov	r2, r3, d8
 8012702:	f7ee f8c3 	bl	800088c <__aeabi_ddiv>
 8012706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801270a:	e029      	b.n	8012760 <_dtoa_r+0x3d8>
 801270c:	2502      	movs	r5, #2
 801270e:	e7f2      	b.n	80126f6 <_dtoa_r+0x36e>
 8012710:	07f9      	lsls	r1, r7, #31
 8012712:	d508      	bpl.n	8012726 <_dtoa_r+0x39e>
 8012714:	ec51 0b18 	vmov	r0, r1, d8
 8012718:	e9d6 2300 	ldrd	r2, r3, [r6]
 801271c:	f7ed ff8c 	bl	8000638 <__aeabi_dmul>
 8012720:	ec41 0b18 	vmov	d8, r0, r1
 8012724:	3501      	adds	r5, #1
 8012726:	107f      	asrs	r7, r7, #1
 8012728:	3608      	adds	r6, #8
 801272a:	e7e5      	b.n	80126f8 <_dtoa_r+0x370>
 801272c:	f000 80a6 	beq.w	801287c <_dtoa_r+0x4f4>
 8012730:	f1ca 0600 	rsb	r6, sl, #0
 8012734:	4ba5      	ldr	r3, [pc, #660]	; (80129cc <_dtoa_r+0x644>)
 8012736:	4fa6      	ldr	r7, [pc, #664]	; (80129d0 <_dtoa_r+0x648>)
 8012738:	f006 020f 	and.w	r2, r6, #15
 801273c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012744:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012748:	f7ed ff76 	bl	8000638 <__aeabi_dmul>
 801274c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012750:	1136      	asrs	r6, r6, #4
 8012752:	2300      	movs	r3, #0
 8012754:	2502      	movs	r5, #2
 8012756:	2e00      	cmp	r6, #0
 8012758:	f040 8085 	bne.w	8012866 <_dtoa_r+0x4de>
 801275c:	2b00      	cmp	r3, #0
 801275e:	d1d2      	bne.n	8012706 <_dtoa_r+0x37e>
 8012760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012762:	2b00      	cmp	r3, #0
 8012764:	f000 808c 	beq.w	8012880 <_dtoa_r+0x4f8>
 8012768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801276c:	4b99      	ldr	r3, [pc, #612]	; (80129d4 <_dtoa_r+0x64c>)
 801276e:	2200      	movs	r2, #0
 8012770:	4630      	mov	r0, r6
 8012772:	4639      	mov	r1, r7
 8012774:	f7ee f9d2 	bl	8000b1c <__aeabi_dcmplt>
 8012778:	2800      	cmp	r0, #0
 801277a:	f000 8081 	beq.w	8012880 <_dtoa_r+0x4f8>
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d07d      	beq.n	8012880 <_dtoa_r+0x4f8>
 8012784:	f1b9 0f00 	cmp.w	r9, #0
 8012788:	dd3c      	ble.n	8012804 <_dtoa_r+0x47c>
 801278a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801278e:	9307      	str	r3, [sp, #28]
 8012790:	2200      	movs	r2, #0
 8012792:	4b91      	ldr	r3, [pc, #580]	; (80129d8 <_dtoa_r+0x650>)
 8012794:	4630      	mov	r0, r6
 8012796:	4639      	mov	r1, r7
 8012798:	f7ed ff4e 	bl	8000638 <__aeabi_dmul>
 801279c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127a0:	3501      	adds	r5, #1
 80127a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80127a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80127aa:	4628      	mov	r0, r5
 80127ac:	f7ed feda 	bl	8000564 <__aeabi_i2d>
 80127b0:	4632      	mov	r2, r6
 80127b2:	463b      	mov	r3, r7
 80127b4:	f7ed ff40 	bl	8000638 <__aeabi_dmul>
 80127b8:	4b88      	ldr	r3, [pc, #544]	; (80129dc <_dtoa_r+0x654>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	f7ed fd86 	bl	80002cc <__adddf3>
 80127c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80127c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127c8:	9303      	str	r3, [sp, #12]
 80127ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d15c      	bne.n	801288a <_dtoa_r+0x502>
 80127d0:	4b83      	ldr	r3, [pc, #524]	; (80129e0 <_dtoa_r+0x658>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	4630      	mov	r0, r6
 80127d6:	4639      	mov	r1, r7
 80127d8:	f7ed fd76 	bl	80002c8 <__aeabi_dsub>
 80127dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80127e0:	4606      	mov	r6, r0
 80127e2:	460f      	mov	r7, r1
 80127e4:	f7ee f9b8 	bl	8000b58 <__aeabi_dcmpgt>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	f040 8296 	bne.w	8012d1a <_dtoa_r+0x992>
 80127ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80127f2:	4630      	mov	r0, r6
 80127f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127f8:	4639      	mov	r1, r7
 80127fa:	f7ee f98f 	bl	8000b1c <__aeabi_dcmplt>
 80127fe:	2800      	cmp	r0, #0
 8012800:	f040 8288 	bne.w	8012d14 <_dtoa_r+0x98c>
 8012804:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801280c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801280e:	2b00      	cmp	r3, #0
 8012810:	f2c0 8158 	blt.w	8012ac4 <_dtoa_r+0x73c>
 8012814:	f1ba 0f0e 	cmp.w	sl, #14
 8012818:	f300 8154 	bgt.w	8012ac4 <_dtoa_r+0x73c>
 801281c:	4b6b      	ldr	r3, [pc, #428]	; (80129cc <_dtoa_r+0x644>)
 801281e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012822:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012828:	2b00      	cmp	r3, #0
 801282a:	f280 80e3 	bge.w	80129f4 <_dtoa_r+0x66c>
 801282e:	9b01      	ldr	r3, [sp, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	f300 80df 	bgt.w	80129f4 <_dtoa_r+0x66c>
 8012836:	f040 826d 	bne.w	8012d14 <_dtoa_r+0x98c>
 801283a:	4b69      	ldr	r3, [pc, #420]	; (80129e0 <_dtoa_r+0x658>)
 801283c:	2200      	movs	r2, #0
 801283e:	4640      	mov	r0, r8
 8012840:	4649      	mov	r1, r9
 8012842:	f7ed fef9 	bl	8000638 <__aeabi_dmul>
 8012846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801284a:	f7ee f97b 	bl	8000b44 <__aeabi_dcmpge>
 801284e:	9e01      	ldr	r6, [sp, #4]
 8012850:	4637      	mov	r7, r6
 8012852:	2800      	cmp	r0, #0
 8012854:	f040 8243 	bne.w	8012cde <_dtoa_r+0x956>
 8012858:	9d00      	ldr	r5, [sp, #0]
 801285a:	2331      	movs	r3, #49	; 0x31
 801285c:	f805 3b01 	strb.w	r3, [r5], #1
 8012860:	f10a 0a01 	add.w	sl, sl, #1
 8012864:	e23f      	b.n	8012ce6 <_dtoa_r+0x95e>
 8012866:	07f2      	lsls	r2, r6, #31
 8012868:	d505      	bpl.n	8012876 <_dtoa_r+0x4ee>
 801286a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801286e:	f7ed fee3 	bl	8000638 <__aeabi_dmul>
 8012872:	3501      	adds	r5, #1
 8012874:	2301      	movs	r3, #1
 8012876:	1076      	asrs	r6, r6, #1
 8012878:	3708      	adds	r7, #8
 801287a:	e76c      	b.n	8012756 <_dtoa_r+0x3ce>
 801287c:	2502      	movs	r5, #2
 801287e:	e76f      	b.n	8012760 <_dtoa_r+0x3d8>
 8012880:	9b01      	ldr	r3, [sp, #4]
 8012882:	f8cd a01c 	str.w	sl, [sp, #28]
 8012886:	930c      	str	r3, [sp, #48]	; 0x30
 8012888:	e78d      	b.n	80127a6 <_dtoa_r+0x41e>
 801288a:	9900      	ldr	r1, [sp, #0]
 801288c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801288e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012890:	4b4e      	ldr	r3, [pc, #312]	; (80129cc <_dtoa_r+0x644>)
 8012892:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012896:	4401      	add	r1, r0
 8012898:	9102      	str	r1, [sp, #8]
 801289a:	9908      	ldr	r1, [sp, #32]
 801289c:	eeb0 8a47 	vmov.f32	s16, s14
 80128a0:	eef0 8a67 	vmov.f32	s17, s15
 80128a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80128ac:	2900      	cmp	r1, #0
 80128ae:	d045      	beq.n	801293c <_dtoa_r+0x5b4>
 80128b0:	494c      	ldr	r1, [pc, #304]	; (80129e4 <_dtoa_r+0x65c>)
 80128b2:	2000      	movs	r0, #0
 80128b4:	f7ed ffea 	bl	800088c <__aeabi_ddiv>
 80128b8:	ec53 2b18 	vmov	r2, r3, d8
 80128bc:	f7ed fd04 	bl	80002c8 <__aeabi_dsub>
 80128c0:	9d00      	ldr	r5, [sp, #0]
 80128c2:	ec41 0b18 	vmov	d8, r0, r1
 80128c6:	4639      	mov	r1, r7
 80128c8:	4630      	mov	r0, r6
 80128ca:	f7ee f965 	bl	8000b98 <__aeabi_d2iz>
 80128ce:	900c      	str	r0, [sp, #48]	; 0x30
 80128d0:	f7ed fe48 	bl	8000564 <__aeabi_i2d>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	4630      	mov	r0, r6
 80128da:	4639      	mov	r1, r7
 80128dc:	f7ed fcf4 	bl	80002c8 <__aeabi_dsub>
 80128e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128e2:	3330      	adds	r3, #48	; 0x30
 80128e4:	f805 3b01 	strb.w	r3, [r5], #1
 80128e8:	ec53 2b18 	vmov	r2, r3, d8
 80128ec:	4606      	mov	r6, r0
 80128ee:	460f      	mov	r7, r1
 80128f0:	f7ee f914 	bl	8000b1c <__aeabi_dcmplt>
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d165      	bne.n	80129c4 <_dtoa_r+0x63c>
 80128f8:	4632      	mov	r2, r6
 80128fa:	463b      	mov	r3, r7
 80128fc:	4935      	ldr	r1, [pc, #212]	; (80129d4 <_dtoa_r+0x64c>)
 80128fe:	2000      	movs	r0, #0
 8012900:	f7ed fce2 	bl	80002c8 <__aeabi_dsub>
 8012904:	ec53 2b18 	vmov	r2, r3, d8
 8012908:	f7ee f908 	bl	8000b1c <__aeabi_dcmplt>
 801290c:	2800      	cmp	r0, #0
 801290e:	f040 80b9 	bne.w	8012a84 <_dtoa_r+0x6fc>
 8012912:	9b02      	ldr	r3, [sp, #8]
 8012914:	429d      	cmp	r5, r3
 8012916:	f43f af75 	beq.w	8012804 <_dtoa_r+0x47c>
 801291a:	4b2f      	ldr	r3, [pc, #188]	; (80129d8 <_dtoa_r+0x650>)
 801291c:	ec51 0b18 	vmov	r0, r1, d8
 8012920:	2200      	movs	r2, #0
 8012922:	f7ed fe89 	bl	8000638 <__aeabi_dmul>
 8012926:	4b2c      	ldr	r3, [pc, #176]	; (80129d8 <_dtoa_r+0x650>)
 8012928:	ec41 0b18 	vmov	d8, r0, r1
 801292c:	2200      	movs	r2, #0
 801292e:	4630      	mov	r0, r6
 8012930:	4639      	mov	r1, r7
 8012932:	f7ed fe81 	bl	8000638 <__aeabi_dmul>
 8012936:	4606      	mov	r6, r0
 8012938:	460f      	mov	r7, r1
 801293a:	e7c4      	b.n	80128c6 <_dtoa_r+0x53e>
 801293c:	ec51 0b17 	vmov	r0, r1, d7
 8012940:	f7ed fe7a 	bl	8000638 <__aeabi_dmul>
 8012944:	9b02      	ldr	r3, [sp, #8]
 8012946:	9d00      	ldr	r5, [sp, #0]
 8012948:	930c      	str	r3, [sp, #48]	; 0x30
 801294a:	ec41 0b18 	vmov	d8, r0, r1
 801294e:	4639      	mov	r1, r7
 8012950:	4630      	mov	r0, r6
 8012952:	f7ee f921 	bl	8000b98 <__aeabi_d2iz>
 8012956:	9011      	str	r0, [sp, #68]	; 0x44
 8012958:	f7ed fe04 	bl	8000564 <__aeabi_i2d>
 801295c:	4602      	mov	r2, r0
 801295e:	460b      	mov	r3, r1
 8012960:	4630      	mov	r0, r6
 8012962:	4639      	mov	r1, r7
 8012964:	f7ed fcb0 	bl	80002c8 <__aeabi_dsub>
 8012968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801296a:	3330      	adds	r3, #48	; 0x30
 801296c:	f805 3b01 	strb.w	r3, [r5], #1
 8012970:	9b02      	ldr	r3, [sp, #8]
 8012972:	429d      	cmp	r5, r3
 8012974:	4606      	mov	r6, r0
 8012976:	460f      	mov	r7, r1
 8012978:	f04f 0200 	mov.w	r2, #0
 801297c:	d134      	bne.n	80129e8 <_dtoa_r+0x660>
 801297e:	4b19      	ldr	r3, [pc, #100]	; (80129e4 <_dtoa_r+0x65c>)
 8012980:	ec51 0b18 	vmov	r0, r1, d8
 8012984:	f7ed fca2 	bl	80002cc <__adddf3>
 8012988:	4602      	mov	r2, r0
 801298a:	460b      	mov	r3, r1
 801298c:	4630      	mov	r0, r6
 801298e:	4639      	mov	r1, r7
 8012990:	f7ee f8e2 	bl	8000b58 <__aeabi_dcmpgt>
 8012994:	2800      	cmp	r0, #0
 8012996:	d175      	bne.n	8012a84 <_dtoa_r+0x6fc>
 8012998:	ec53 2b18 	vmov	r2, r3, d8
 801299c:	4911      	ldr	r1, [pc, #68]	; (80129e4 <_dtoa_r+0x65c>)
 801299e:	2000      	movs	r0, #0
 80129a0:	f7ed fc92 	bl	80002c8 <__aeabi_dsub>
 80129a4:	4602      	mov	r2, r0
 80129a6:	460b      	mov	r3, r1
 80129a8:	4630      	mov	r0, r6
 80129aa:	4639      	mov	r1, r7
 80129ac:	f7ee f8b6 	bl	8000b1c <__aeabi_dcmplt>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	f43f af27 	beq.w	8012804 <_dtoa_r+0x47c>
 80129b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80129b8:	1e6b      	subs	r3, r5, #1
 80129ba:	930c      	str	r3, [sp, #48]	; 0x30
 80129bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80129c0:	2b30      	cmp	r3, #48	; 0x30
 80129c2:	d0f8      	beq.n	80129b6 <_dtoa_r+0x62e>
 80129c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80129c8:	e04a      	b.n	8012a60 <_dtoa_r+0x6d8>
 80129ca:	bf00      	nop
 80129cc:	080149b8 	.word	0x080149b8
 80129d0:	08014990 	.word	0x08014990
 80129d4:	3ff00000 	.word	0x3ff00000
 80129d8:	40240000 	.word	0x40240000
 80129dc:	401c0000 	.word	0x401c0000
 80129e0:	40140000 	.word	0x40140000
 80129e4:	3fe00000 	.word	0x3fe00000
 80129e8:	4baf      	ldr	r3, [pc, #700]	; (8012ca8 <_dtoa_r+0x920>)
 80129ea:	f7ed fe25 	bl	8000638 <__aeabi_dmul>
 80129ee:	4606      	mov	r6, r0
 80129f0:	460f      	mov	r7, r1
 80129f2:	e7ac      	b.n	801294e <_dtoa_r+0x5c6>
 80129f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80129f8:	9d00      	ldr	r5, [sp, #0]
 80129fa:	4642      	mov	r2, r8
 80129fc:	464b      	mov	r3, r9
 80129fe:	4630      	mov	r0, r6
 8012a00:	4639      	mov	r1, r7
 8012a02:	f7ed ff43 	bl	800088c <__aeabi_ddiv>
 8012a06:	f7ee f8c7 	bl	8000b98 <__aeabi_d2iz>
 8012a0a:	9002      	str	r0, [sp, #8]
 8012a0c:	f7ed fdaa 	bl	8000564 <__aeabi_i2d>
 8012a10:	4642      	mov	r2, r8
 8012a12:	464b      	mov	r3, r9
 8012a14:	f7ed fe10 	bl	8000638 <__aeabi_dmul>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	4639      	mov	r1, r7
 8012a20:	f7ed fc52 	bl	80002c8 <__aeabi_dsub>
 8012a24:	9e02      	ldr	r6, [sp, #8]
 8012a26:	9f01      	ldr	r7, [sp, #4]
 8012a28:	3630      	adds	r6, #48	; 0x30
 8012a2a:	f805 6b01 	strb.w	r6, [r5], #1
 8012a2e:	9e00      	ldr	r6, [sp, #0]
 8012a30:	1bae      	subs	r6, r5, r6
 8012a32:	42b7      	cmp	r7, r6
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	d137      	bne.n	8012aaa <_dtoa_r+0x722>
 8012a3a:	f7ed fc47 	bl	80002cc <__adddf3>
 8012a3e:	4642      	mov	r2, r8
 8012a40:	464b      	mov	r3, r9
 8012a42:	4606      	mov	r6, r0
 8012a44:	460f      	mov	r7, r1
 8012a46:	f7ee f887 	bl	8000b58 <__aeabi_dcmpgt>
 8012a4a:	b9c8      	cbnz	r0, 8012a80 <_dtoa_r+0x6f8>
 8012a4c:	4642      	mov	r2, r8
 8012a4e:	464b      	mov	r3, r9
 8012a50:	4630      	mov	r0, r6
 8012a52:	4639      	mov	r1, r7
 8012a54:	f7ee f858 	bl	8000b08 <__aeabi_dcmpeq>
 8012a58:	b110      	cbz	r0, 8012a60 <_dtoa_r+0x6d8>
 8012a5a:	9b02      	ldr	r3, [sp, #8]
 8012a5c:	07d9      	lsls	r1, r3, #31
 8012a5e:	d40f      	bmi.n	8012a80 <_dtoa_r+0x6f8>
 8012a60:	4620      	mov	r0, r4
 8012a62:	4659      	mov	r1, fp
 8012a64:	f000 facc 	bl	8013000 <_Bfree>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	702b      	strb	r3, [r5, #0]
 8012a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a6e:	f10a 0001 	add.w	r0, sl, #1
 8012a72:	6018      	str	r0, [r3, #0]
 8012a74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f43f acd8 	beq.w	801242c <_dtoa_r+0xa4>
 8012a7c:	601d      	str	r5, [r3, #0]
 8012a7e:	e4d5      	b.n	801242c <_dtoa_r+0xa4>
 8012a80:	f8cd a01c 	str.w	sl, [sp, #28]
 8012a84:	462b      	mov	r3, r5
 8012a86:	461d      	mov	r5, r3
 8012a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a8c:	2a39      	cmp	r2, #57	; 0x39
 8012a8e:	d108      	bne.n	8012aa2 <_dtoa_r+0x71a>
 8012a90:	9a00      	ldr	r2, [sp, #0]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d1f7      	bne.n	8012a86 <_dtoa_r+0x6fe>
 8012a96:	9a07      	ldr	r2, [sp, #28]
 8012a98:	9900      	ldr	r1, [sp, #0]
 8012a9a:	3201      	adds	r2, #1
 8012a9c:	9207      	str	r2, [sp, #28]
 8012a9e:	2230      	movs	r2, #48	; 0x30
 8012aa0:	700a      	strb	r2, [r1, #0]
 8012aa2:	781a      	ldrb	r2, [r3, #0]
 8012aa4:	3201      	adds	r2, #1
 8012aa6:	701a      	strb	r2, [r3, #0]
 8012aa8:	e78c      	b.n	80129c4 <_dtoa_r+0x63c>
 8012aaa:	4b7f      	ldr	r3, [pc, #508]	; (8012ca8 <_dtoa_r+0x920>)
 8012aac:	2200      	movs	r2, #0
 8012aae:	f7ed fdc3 	bl	8000638 <__aeabi_dmul>
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4606      	mov	r6, r0
 8012ab8:	460f      	mov	r7, r1
 8012aba:	f7ee f825 	bl	8000b08 <__aeabi_dcmpeq>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d09b      	beq.n	80129fa <_dtoa_r+0x672>
 8012ac2:	e7cd      	b.n	8012a60 <_dtoa_r+0x6d8>
 8012ac4:	9a08      	ldr	r2, [sp, #32]
 8012ac6:	2a00      	cmp	r2, #0
 8012ac8:	f000 80c4 	beq.w	8012c54 <_dtoa_r+0x8cc>
 8012acc:	9a05      	ldr	r2, [sp, #20]
 8012ace:	2a01      	cmp	r2, #1
 8012ad0:	f300 80a8 	bgt.w	8012c24 <_dtoa_r+0x89c>
 8012ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ad6:	2a00      	cmp	r2, #0
 8012ad8:	f000 80a0 	beq.w	8012c1c <_dtoa_r+0x894>
 8012adc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ae0:	9e06      	ldr	r6, [sp, #24]
 8012ae2:	4645      	mov	r5, r8
 8012ae4:	9a04      	ldr	r2, [sp, #16]
 8012ae6:	2101      	movs	r1, #1
 8012ae8:	441a      	add	r2, r3
 8012aea:	4620      	mov	r0, r4
 8012aec:	4498      	add	r8, r3
 8012aee:	9204      	str	r2, [sp, #16]
 8012af0:	f000 fb42 	bl	8013178 <__i2b>
 8012af4:	4607      	mov	r7, r0
 8012af6:	2d00      	cmp	r5, #0
 8012af8:	dd0b      	ble.n	8012b12 <_dtoa_r+0x78a>
 8012afa:	9b04      	ldr	r3, [sp, #16]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	dd08      	ble.n	8012b12 <_dtoa_r+0x78a>
 8012b00:	42ab      	cmp	r3, r5
 8012b02:	9a04      	ldr	r2, [sp, #16]
 8012b04:	bfa8      	it	ge
 8012b06:	462b      	movge	r3, r5
 8012b08:	eba8 0803 	sub.w	r8, r8, r3
 8012b0c:	1aed      	subs	r5, r5, r3
 8012b0e:	1ad3      	subs	r3, r2, r3
 8012b10:	9304      	str	r3, [sp, #16]
 8012b12:	9b06      	ldr	r3, [sp, #24]
 8012b14:	b1fb      	cbz	r3, 8012b56 <_dtoa_r+0x7ce>
 8012b16:	9b08      	ldr	r3, [sp, #32]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f000 809f 	beq.w	8012c5c <_dtoa_r+0x8d4>
 8012b1e:	2e00      	cmp	r6, #0
 8012b20:	dd11      	ble.n	8012b46 <_dtoa_r+0x7be>
 8012b22:	4639      	mov	r1, r7
 8012b24:	4632      	mov	r2, r6
 8012b26:	4620      	mov	r0, r4
 8012b28:	f000 fbe2 	bl	80132f0 <__pow5mult>
 8012b2c:	465a      	mov	r2, fp
 8012b2e:	4601      	mov	r1, r0
 8012b30:	4607      	mov	r7, r0
 8012b32:	4620      	mov	r0, r4
 8012b34:	f000 fb36 	bl	80131a4 <__multiply>
 8012b38:	4659      	mov	r1, fp
 8012b3a:	9007      	str	r0, [sp, #28]
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 fa5f 	bl	8013000 <_Bfree>
 8012b42:	9b07      	ldr	r3, [sp, #28]
 8012b44:	469b      	mov	fp, r3
 8012b46:	9b06      	ldr	r3, [sp, #24]
 8012b48:	1b9a      	subs	r2, r3, r6
 8012b4a:	d004      	beq.n	8012b56 <_dtoa_r+0x7ce>
 8012b4c:	4659      	mov	r1, fp
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f000 fbce 	bl	80132f0 <__pow5mult>
 8012b54:	4683      	mov	fp, r0
 8012b56:	2101      	movs	r1, #1
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f000 fb0d 	bl	8013178 <__i2b>
 8012b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	4606      	mov	r6, r0
 8012b64:	dd7c      	ble.n	8012c60 <_dtoa_r+0x8d8>
 8012b66:	461a      	mov	r2, r3
 8012b68:	4601      	mov	r1, r0
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f000 fbc0 	bl	80132f0 <__pow5mult>
 8012b70:	9b05      	ldr	r3, [sp, #20]
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	4606      	mov	r6, r0
 8012b76:	dd76      	ble.n	8012c66 <_dtoa_r+0x8de>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	9306      	str	r3, [sp, #24]
 8012b7c:	6933      	ldr	r3, [r6, #16]
 8012b7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012b82:	6918      	ldr	r0, [r3, #16]
 8012b84:	f000 faa8 	bl	80130d8 <__hi0bits>
 8012b88:	f1c0 0020 	rsb	r0, r0, #32
 8012b8c:	9b04      	ldr	r3, [sp, #16]
 8012b8e:	4418      	add	r0, r3
 8012b90:	f010 001f 	ands.w	r0, r0, #31
 8012b94:	f000 8086 	beq.w	8012ca4 <_dtoa_r+0x91c>
 8012b98:	f1c0 0320 	rsb	r3, r0, #32
 8012b9c:	2b04      	cmp	r3, #4
 8012b9e:	dd7f      	ble.n	8012ca0 <_dtoa_r+0x918>
 8012ba0:	f1c0 001c 	rsb	r0, r0, #28
 8012ba4:	9b04      	ldr	r3, [sp, #16]
 8012ba6:	4403      	add	r3, r0
 8012ba8:	4480      	add	r8, r0
 8012baa:	4405      	add	r5, r0
 8012bac:	9304      	str	r3, [sp, #16]
 8012bae:	f1b8 0f00 	cmp.w	r8, #0
 8012bb2:	dd05      	ble.n	8012bc0 <_dtoa_r+0x838>
 8012bb4:	4659      	mov	r1, fp
 8012bb6:	4642      	mov	r2, r8
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f000 fbf3 	bl	80133a4 <__lshift>
 8012bbe:	4683      	mov	fp, r0
 8012bc0:	9b04      	ldr	r3, [sp, #16]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	dd05      	ble.n	8012bd2 <_dtoa_r+0x84a>
 8012bc6:	4631      	mov	r1, r6
 8012bc8:	461a      	mov	r2, r3
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f000 fbea 	bl	80133a4 <__lshift>
 8012bd0:	4606      	mov	r6, r0
 8012bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d069      	beq.n	8012cac <_dtoa_r+0x924>
 8012bd8:	4631      	mov	r1, r6
 8012bda:	4658      	mov	r0, fp
 8012bdc:	f000 fc4e 	bl	801347c <__mcmp>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	da63      	bge.n	8012cac <_dtoa_r+0x924>
 8012be4:	2300      	movs	r3, #0
 8012be6:	4659      	mov	r1, fp
 8012be8:	220a      	movs	r2, #10
 8012bea:	4620      	mov	r0, r4
 8012bec:	f000 fa2a 	bl	8013044 <__multadd>
 8012bf0:	9b08      	ldr	r3, [sp, #32]
 8012bf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012bf6:	4683      	mov	fp, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f000 818f 	beq.w	8012f1c <_dtoa_r+0xb94>
 8012bfe:	4639      	mov	r1, r7
 8012c00:	2300      	movs	r3, #0
 8012c02:	220a      	movs	r2, #10
 8012c04:	4620      	mov	r0, r4
 8012c06:	f000 fa1d 	bl	8013044 <__multadd>
 8012c0a:	f1b9 0f00 	cmp.w	r9, #0
 8012c0e:	4607      	mov	r7, r0
 8012c10:	f300 808e 	bgt.w	8012d30 <_dtoa_r+0x9a8>
 8012c14:	9b05      	ldr	r3, [sp, #20]
 8012c16:	2b02      	cmp	r3, #2
 8012c18:	dc50      	bgt.n	8012cbc <_dtoa_r+0x934>
 8012c1a:	e089      	b.n	8012d30 <_dtoa_r+0x9a8>
 8012c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c22:	e75d      	b.n	8012ae0 <_dtoa_r+0x758>
 8012c24:	9b01      	ldr	r3, [sp, #4]
 8012c26:	1e5e      	subs	r6, r3, #1
 8012c28:	9b06      	ldr	r3, [sp, #24]
 8012c2a:	42b3      	cmp	r3, r6
 8012c2c:	bfbf      	itttt	lt
 8012c2e:	9b06      	ldrlt	r3, [sp, #24]
 8012c30:	9606      	strlt	r6, [sp, #24]
 8012c32:	1af2      	sublt	r2, r6, r3
 8012c34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012c36:	bfb6      	itet	lt
 8012c38:	189b      	addlt	r3, r3, r2
 8012c3a:	1b9e      	subge	r6, r3, r6
 8012c3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012c3e:	9b01      	ldr	r3, [sp, #4]
 8012c40:	bfb8      	it	lt
 8012c42:	2600      	movlt	r6, #0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	bfb5      	itete	lt
 8012c48:	eba8 0503 	sublt.w	r5, r8, r3
 8012c4c:	9b01      	ldrge	r3, [sp, #4]
 8012c4e:	2300      	movlt	r3, #0
 8012c50:	4645      	movge	r5, r8
 8012c52:	e747      	b.n	8012ae4 <_dtoa_r+0x75c>
 8012c54:	9e06      	ldr	r6, [sp, #24]
 8012c56:	9f08      	ldr	r7, [sp, #32]
 8012c58:	4645      	mov	r5, r8
 8012c5a:	e74c      	b.n	8012af6 <_dtoa_r+0x76e>
 8012c5c:	9a06      	ldr	r2, [sp, #24]
 8012c5e:	e775      	b.n	8012b4c <_dtoa_r+0x7c4>
 8012c60:	9b05      	ldr	r3, [sp, #20]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	dc18      	bgt.n	8012c98 <_dtoa_r+0x910>
 8012c66:	9b02      	ldr	r3, [sp, #8]
 8012c68:	b9b3      	cbnz	r3, 8012c98 <_dtoa_r+0x910>
 8012c6a:	9b03      	ldr	r3, [sp, #12]
 8012c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c70:	b9a3      	cbnz	r3, 8012c9c <_dtoa_r+0x914>
 8012c72:	9b03      	ldr	r3, [sp, #12]
 8012c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c78:	0d1b      	lsrs	r3, r3, #20
 8012c7a:	051b      	lsls	r3, r3, #20
 8012c7c:	b12b      	cbz	r3, 8012c8a <_dtoa_r+0x902>
 8012c7e:	9b04      	ldr	r3, [sp, #16]
 8012c80:	3301      	adds	r3, #1
 8012c82:	9304      	str	r3, [sp, #16]
 8012c84:	f108 0801 	add.w	r8, r8, #1
 8012c88:	2301      	movs	r3, #1
 8012c8a:	9306      	str	r3, [sp, #24]
 8012c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f47f af74 	bne.w	8012b7c <_dtoa_r+0x7f4>
 8012c94:	2001      	movs	r0, #1
 8012c96:	e779      	b.n	8012b8c <_dtoa_r+0x804>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	e7f6      	b.n	8012c8a <_dtoa_r+0x902>
 8012c9c:	9b02      	ldr	r3, [sp, #8]
 8012c9e:	e7f4      	b.n	8012c8a <_dtoa_r+0x902>
 8012ca0:	d085      	beq.n	8012bae <_dtoa_r+0x826>
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	301c      	adds	r0, #28
 8012ca6:	e77d      	b.n	8012ba4 <_dtoa_r+0x81c>
 8012ca8:	40240000 	.word	0x40240000
 8012cac:	9b01      	ldr	r3, [sp, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	dc38      	bgt.n	8012d24 <_dtoa_r+0x99c>
 8012cb2:	9b05      	ldr	r3, [sp, #20]
 8012cb4:	2b02      	cmp	r3, #2
 8012cb6:	dd35      	ble.n	8012d24 <_dtoa_r+0x99c>
 8012cb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012cbc:	f1b9 0f00 	cmp.w	r9, #0
 8012cc0:	d10d      	bne.n	8012cde <_dtoa_r+0x956>
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	464b      	mov	r3, r9
 8012cc6:	2205      	movs	r2, #5
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 f9bb 	bl	8013044 <__multadd>
 8012cce:	4601      	mov	r1, r0
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	4658      	mov	r0, fp
 8012cd4:	f000 fbd2 	bl	801347c <__mcmp>
 8012cd8:	2800      	cmp	r0, #0
 8012cda:	f73f adbd 	bgt.w	8012858 <_dtoa_r+0x4d0>
 8012cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ce0:	9d00      	ldr	r5, [sp, #0]
 8012ce2:	ea6f 0a03 	mvn.w	sl, r3
 8012ce6:	f04f 0800 	mov.w	r8, #0
 8012cea:	4631      	mov	r1, r6
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 f987 	bl	8013000 <_Bfree>
 8012cf2:	2f00      	cmp	r7, #0
 8012cf4:	f43f aeb4 	beq.w	8012a60 <_dtoa_r+0x6d8>
 8012cf8:	f1b8 0f00 	cmp.w	r8, #0
 8012cfc:	d005      	beq.n	8012d0a <_dtoa_r+0x982>
 8012cfe:	45b8      	cmp	r8, r7
 8012d00:	d003      	beq.n	8012d0a <_dtoa_r+0x982>
 8012d02:	4641      	mov	r1, r8
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 f97b 	bl	8013000 <_Bfree>
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f000 f977 	bl	8013000 <_Bfree>
 8012d12:	e6a5      	b.n	8012a60 <_dtoa_r+0x6d8>
 8012d14:	2600      	movs	r6, #0
 8012d16:	4637      	mov	r7, r6
 8012d18:	e7e1      	b.n	8012cde <_dtoa_r+0x956>
 8012d1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012d1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012d20:	4637      	mov	r7, r6
 8012d22:	e599      	b.n	8012858 <_dtoa_r+0x4d0>
 8012d24:	9b08      	ldr	r3, [sp, #32]
 8012d26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 80fd 	beq.w	8012f2a <_dtoa_r+0xba2>
 8012d30:	2d00      	cmp	r5, #0
 8012d32:	dd05      	ble.n	8012d40 <_dtoa_r+0x9b8>
 8012d34:	4639      	mov	r1, r7
 8012d36:	462a      	mov	r2, r5
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f000 fb33 	bl	80133a4 <__lshift>
 8012d3e:	4607      	mov	r7, r0
 8012d40:	9b06      	ldr	r3, [sp, #24]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d05c      	beq.n	8012e00 <_dtoa_r+0xa78>
 8012d46:	6879      	ldr	r1, [r7, #4]
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 f919 	bl	8012f80 <_Balloc>
 8012d4e:	4605      	mov	r5, r0
 8012d50:	b928      	cbnz	r0, 8012d5e <_dtoa_r+0x9d6>
 8012d52:	4b80      	ldr	r3, [pc, #512]	; (8012f54 <_dtoa_r+0xbcc>)
 8012d54:	4602      	mov	r2, r0
 8012d56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012d5a:	f7ff bb2e 	b.w	80123ba <_dtoa_r+0x32>
 8012d5e:	693a      	ldr	r2, [r7, #16]
 8012d60:	3202      	adds	r2, #2
 8012d62:	0092      	lsls	r2, r2, #2
 8012d64:	f107 010c 	add.w	r1, r7, #12
 8012d68:	300c      	adds	r0, #12
 8012d6a:	f7fe fd27 	bl	80117bc <memcpy>
 8012d6e:	2201      	movs	r2, #1
 8012d70:	4629      	mov	r1, r5
 8012d72:	4620      	mov	r0, r4
 8012d74:	f000 fb16 	bl	80133a4 <__lshift>
 8012d78:	9b00      	ldr	r3, [sp, #0]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	9301      	str	r3, [sp, #4]
 8012d7e:	9b00      	ldr	r3, [sp, #0]
 8012d80:	444b      	add	r3, r9
 8012d82:	9307      	str	r3, [sp, #28]
 8012d84:	9b02      	ldr	r3, [sp, #8]
 8012d86:	f003 0301 	and.w	r3, r3, #1
 8012d8a:	46b8      	mov	r8, r7
 8012d8c:	9306      	str	r3, [sp, #24]
 8012d8e:	4607      	mov	r7, r0
 8012d90:	9b01      	ldr	r3, [sp, #4]
 8012d92:	4631      	mov	r1, r6
 8012d94:	3b01      	subs	r3, #1
 8012d96:	4658      	mov	r0, fp
 8012d98:	9302      	str	r3, [sp, #8]
 8012d9a:	f7ff fa69 	bl	8012270 <quorem>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	3330      	adds	r3, #48	; 0x30
 8012da2:	9004      	str	r0, [sp, #16]
 8012da4:	4641      	mov	r1, r8
 8012da6:	4658      	mov	r0, fp
 8012da8:	9308      	str	r3, [sp, #32]
 8012daa:	f000 fb67 	bl	801347c <__mcmp>
 8012dae:	463a      	mov	r2, r7
 8012db0:	4681      	mov	r9, r0
 8012db2:	4631      	mov	r1, r6
 8012db4:	4620      	mov	r0, r4
 8012db6:	f000 fb7d 	bl	80134b4 <__mdiff>
 8012dba:	68c2      	ldr	r2, [r0, #12]
 8012dbc:	9b08      	ldr	r3, [sp, #32]
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	bb02      	cbnz	r2, 8012e04 <_dtoa_r+0xa7c>
 8012dc2:	4601      	mov	r1, r0
 8012dc4:	4658      	mov	r0, fp
 8012dc6:	f000 fb59 	bl	801347c <__mcmp>
 8012dca:	9b08      	ldr	r3, [sp, #32]
 8012dcc:	4602      	mov	r2, r0
 8012dce:	4629      	mov	r1, r5
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012dd6:	f000 f913 	bl	8013000 <_Bfree>
 8012dda:	9b05      	ldr	r3, [sp, #20]
 8012ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dde:	9d01      	ldr	r5, [sp, #4]
 8012de0:	ea43 0102 	orr.w	r1, r3, r2
 8012de4:	9b06      	ldr	r3, [sp, #24]
 8012de6:	430b      	orrs	r3, r1
 8012de8:	9b08      	ldr	r3, [sp, #32]
 8012dea:	d10d      	bne.n	8012e08 <_dtoa_r+0xa80>
 8012dec:	2b39      	cmp	r3, #57	; 0x39
 8012dee:	d029      	beq.n	8012e44 <_dtoa_r+0xabc>
 8012df0:	f1b9 0f00 	cmp.w	r9, #0
 8012df4:	dd01      	ble.n	8012dfa <_dtoa_r+0xa72>
 8012df6:	9b04      	ldr	r3, [sp, #16]
 8012df8:	3331      	adds	r3, #49	; 0x31
 8012dfa:	9a02      	ldr	r2, [sp, #8]
 8012dfc:	7013      	strb	r3, [r2, #0]
 8012dfe:	e774      	b.n	8012cea <_dtoa_r+0x962>
 8012e00:	4638      	mov	r0, r7
 8012e02:	e7b9      	b.n	8012d78 <_dtoa_r+0x9f0>
 8012e04:	2201      	movs	r2, #1
 8012e06:	e7e2      	b.n	8012dce <_dtoa_r+0xa46>
 8012e08:	f1b9 0f00 	cmp.w	r9, #0
 8012e0c:	db06      	blt.n	8012e1c <_dtoa_r+0xa94>
 8012e0e:	9905      	ldr	r1, [sp, #20]
 8012e10:	ea41 0909 	orr.w	r9, r1, r9
 8012e14:	9906      	ldr	r1, [sp, #24]
 8012e16:	ea59 0101 	orrs.w	r1, r9, r1
 8012e1a:	d120      	bne.n	8012e5e <_dtoa_r+0xad6>
 8012e1c:	2a00      	cmp	r2, #0
 8012e1e:	ddec      	ble.n	8012dfa <_dtoa_r+0xa72>
 8012e20:	4659      	mov	r1, fp
 8012e22:	2201      	movs	r2, #1
 8012e24:	4620      	mov	r0, r4
 8012e26:	9301      	str	r3, [sp, #4]
 8012e28:	f000 fabc 	bl	80133a4 <__lshift>
 8012e2c:	4631      	mov	r1, r6
 8012e2e:	4683      	mov	fp, r0
 8012e30:	f000 fb24 	bl	801347c <__mcmp>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	9b01      	ldr	r3, [sp, #4]
 8012e38:	dc02      	bgt.n	8012e40 <_dtoa_r+0xab8>
 8012e3a:	d1de      	bne.n	8012dfa <_dtoa_r+0xa72>
 8012e3c:	07da      	lsls	r2, r3, #31
 8012e3e:	d5dc      	bpl.n	8012dfa <_dtoa_r+0xa72>
 8012e40:	2b39      	cmp	r3, #57	; 0x39
 8012e42:	d1d8      	bne.n	8012df6 <_dtoa_r+0xa6e>
 8012e44:	9a02      	ldr	r2, [sp, #8]
 8012e46:	2339      	movs	r3, #57	; 0x39
 8012e48:	7013      	strb	r3, [r2, #0]
 8012e4a:	462b      	mov	r3, r5
 8012e4c:	461d      	mov	r5, r3
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012e54:	2a39      	cmp	r2, #57	; 0x39
 8012e56:	d050      	beq.n	8012efa <_dtoa_r+0xb72>
 8012e58:	3201      	adds	r2, #1
 8012e5a:	701a      	strb	r2, [r3, #0]
 8012e5c:	e745      	b.n	8012cea <_dtoa_r+0x962>
 8012e5e:	2a00      	cmp	r2, #0
 8012e60:	dd03      	ble.n	8012e6a <_dtoa_r+0xae2>
 8012e62:	2b39      	cmp	r3, #57	; 0x39
 8012e64:	d0ee      	beq.n	8012e44 <_dtoa_r+0xabc>
 8012e66:	3301      	adds	r3, #1
 8012e68:	e7c7      	b.n	8012dfa <_dtoa_r+0xa72>
 8012e6a:	9a01      	ldr	r2, [sp, #4]
 8012e6c:	9907      	ldr	r1, [sp, #28]
 8012e6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012e72:	428a      	cmp	r2, r1
 8012e74:	d02a      	beq.n	8012ecc <_dtoa_r+0xb44>
 8012e76:	4659      	mov	r1, fp
 8012e78:	2300      	movs	r3, #0
 8012e7a:	220a      	movs	r2, #10
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	f000 f8e1 	bl	8013044 <__multadd>
 8012e82:	45b8      	cmp	r8, r7
 8012e84:	4683      	mov	fp, r0
 8012e86:	f04f 0300 	mov.w	r3, #0
 8012e8a:	f04f 020a 	mov.w	r2, #10
 8012e8e:	4641      	mov	r1, r8
 8012e90:	4620      	mov	r0, r4
 8012e92:	d107      	bne.n	8012ea4 <_dtoa_r+0xb1c>
 8012e94:	f000 f8d6 	bl	8013044 <__multadd>
 8012e98:	4680      	mov	r8, r0
 8012e9a:	4607      	mov	r7, r0
 8012e9c:	9b01      	ldr	r3, [sp, #4]
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	9301      	str	r3, [sp, #4]
 8012ea2:	e775      	b.n	8012d90 <_dtoa_r+0xa08>
 8012ea4:	f000 f8ce 	bl	8013044 <__multadd>
 8012ea8:	4639      	mov	r1, r7
 8012eaa:	4680      	mov	r8, r0
 8012eac:	2300      	movs	r3, #0
 8012eae:	220a      	movs	r2, #10
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f000 f8c7 	bl	8013044 <__multadd>
 8012eb6:	4607      	mov	r7, r0
 8012eb8:	e7f0      	b.n	8012e9c <_dtoa_r+0xb14>
 8012eba:	f1b9 0f00 	cmp.w	r9, #0
 8012ebe:	9a00      	ldr	r2, [sp, #0]
 8012ec0:	bfcc      	ite	gt
 8012ec2:	464d      	movgt	r5, r9
 8012ec4:	2501      	movle	r5, #1
 8012ec6:	4415      	add	r5, r2
 8012ec8:	f04f 0800 	mov.w	r8, #0
 8012ecc:	4659      	mov	r1, fp
 8012ece:	2201      	movs	r2, #1
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	9301      	str	r3, [sp, #4]
 8012ed4:	f000 fa66 	bl	80133a4 <__lshift>
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4683      	mov	fp, r0
 8012edc:	f000 face 	bl	801347c <__mcmp>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	dcb2      	bgt.n	8012e4a <_dtoa_r+0xac2>
 8012ee4:	d102      	bne.n	8012eec <_dtoa_r+0xb64>
 8012ee6:	9b01      	ldr	r3, [sp, #4]
 8012ee8:	07db      	lsls	r3, r3, #31
 8012eea:	d4ae      	bmi.n	8012e4a <_dtoa_r+0xac2>
 8012eec:	462b      	mov	r3, r5
 8012eee:	461d      	mov	r5, r3
 8012ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ef4:	2a30      	cmp	r2, #48	; 0x30
 8012ef6:	d0fa      	beq.n	8012eee <_dtoa_r+0xb66>
 8012ef8:	e6f7      	b.n	8012cea <_dtoa_r+0x962>
 8012efa:	9a00      	ldr	r2, [sp, #0]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d1a5      	bne.n	8012e4c <_dtoa_r+0xac4>
 8012f00:	f10a 0a01 	add.w	sl, sl, #1
 8012f04:	2331      	movs	r3, #49	; 0x31
 8012f06:	e779      	b.n	8012dfc <_dtoa_r+0xa74>
 8012f08:	4b13      	ldr	r3, [pc, #76]	; (8012f58 <_dtoa_r+0xbd0>)
 8012f0a:	f7ff baaf 	b.w	801246c <_dtoa_r+0xe4>
 8012f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	f47f aa86 	bne.w	8012422 <_dtoa_r+0x9a>
 8012f16:	4b11      	ldr	r3, [pc, #68]	; (8012f5c <_dtoa_r+0xbd4>)
 8012f18:	f7ff baa8 	b.w	801246c <_dtoa_r+0xe4>
 8012f1c:	f1b9 0f00 	cmp.w	r9, #0
 8012f20:	dc03      	bgt.n	8012f2a <_dtoa_r+0xba2>
 8012f22:	9b05      	ldr	r3, [sp, #20]
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	f73f aec9 	bgt.w	8012cbc <_dtoa_r+0x934>
 8012f2a:	9d00      	ldr	r5, [sp, #0]
 8012f2c:	4631      	mov	r1, r6
 8012f2e:	4658      	mov	r0, fp
 8012f30:	f7ff f99e 	bl	8012270 <quorem>
 8012f34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012f38:	f805 3b01 	strb.w	r3, [r5], #1
 8012f3c:	9a00      	ldr	r2, [sp, #0]
 8012f3e:	1aaa      	subs	r2, r5, r2
 8012f40:	4591      	cmp	r9, r2
 8012f42:	ddba      	ble.n	8012eba <_dtoa_r+0xb32>
 8012f44:	4659      	mov	r1, fp
 8012f46:	2300      	movs	r3, #0
 8012f48:	220a      	movs	r2, #10
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f000 f87a 	bl	8013044 <__multadd>
 8012f50:	4683      	mov	fp, r0
 8012f52:	e7eb      	b.n	8012f2c <_dtoa_r+0xba4>
 8012f54:	0801491f 	.word	0x0801491f
 8012f58:	08014878 	.word	0x08014878
 8012f5c:	0801489c 	.word	0x0801489c

08012f60 <_localeconv_r>:
 8012f60:	4800      	ldr	r0, [pc, #0]	; (8012f64 <_localeconv_r+0x4>)
 8012f62:	4770      	bx	lr
 8012f64:	20000758 	.word	0x20000758

08012f68 <__malloc_lock>:
 8012f68:	4801      	ldr	r0, [pc, #4]	; (8012f70 <__malloc_lock+0x8>)
 8012f6a:	f000 bd48 	b.w	80139fe <__retarget_lock_acquire_recursive>
 8012f6e:	bf00      	nop
 8012f70:	20001bac 	.word	0x20001bac

08012f74 <__malloc_unlock>:
 8012f74:	4801      	ldr	r0, [pc, #4]	; (8012f7c <__malloc_unlock+0x8>)
 8012f76:	f000 bd43 	b.w	8013a00 <__retarget_lock_release_recursive>
 8012f7a:	bf00      	nop
 8012f7c:	20001bac 	.word	0x20001bac

08012f80 <_Balloc>:
 8012f80:	b570      	push	{r4, r5, r6, lr}
 8012f82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012f84:	4604      	mov	r4, r0
 8012f86:	460d      	mov	r5, r1
 8012f88:	b976      	cbnz	r6, 8012fa8 <_Balloc+0x28>
 8012f8a:	2010      	movs	r0, #16
 8012f8c:	f7fe fc06 	bl	801179c <malloc>
 8012f90:	4602      	mov	r2, r0
 8012f92:	6260      	str	r0, [r4, #36]	; 0x24
 8012f94:	b920      	cbnz	r0, 8012fa0 <_Balloc+0x20>
 8012f96:	4b18      	ldr	r3, [pc, #96]	; (8012ff8 <_Balloc+0x78>)
 8012f98:	4818      	ldr	r0, [pc, #96]	; (8012ffc <_Balloc+0x7c>)
 8012f9a:	2166      	movs	r1, #102	; 0x66
 8012f9c:	f000 fcfe 	bl	801399c <__assert_func>
 8012fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fa4:	6006      	str	r6, [r0, #0]
 8012fa6:	60c6      	str	r6, [r0, #12]
 8012fa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012faa:	68f3      	ldr	r3, [r6, #12]
 8012fac:	b183      	cbz	r3, 8012fd0 <_Balloc+0x50>
 8012fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fb0:	68db      	ldr	r3, [r3, #12]
 8012fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012fb6:	b9b8      	cbnz	r0, 8012fe8 <_Balloc+0x68>
 8012fb8:	2101      	movs	r1, #1
 8012fba:	fa01 f605 	lsl.w	r6, r1, r5
 8012fbe:	1d72      	adds	r2, r6, #5
 8012fc0:	0092      	lsls	r2, r2, #2
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	f000 fb5a 	bl	801367c <_calloc_r>
 8012fc8:	b160      	cbz	r0, 8012fe4 <_Balloc+0x64>
 8012fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012fce:	e00e      	b.n	8012fee <_Balloc+0x6e>
 8012fd0:	2221      	movs	r2, #33	; 0x21
 8012fd2:	2104      	movs	r1, #4
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f000 fb51 	bl	801367c <_calloc_r>
 8012fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fdc:	60f0      	str	r0, [r6, #12]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d1e4      	bne.n	8012fae <_Balloc+0x2e>
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}
 8012fe8:	6802      	ldr	r2, [r0, #0]
 8012fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012fee:	2300      	movs	r3, #0
 8012ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ff4:	e7f7      	b.n	8012fe6 <_Balloc+0x66>
 8012ff6:	bf00      	nop
 8012ff8:	080148a9 	.word	0x080148a9
 8012ffc:	08014930 	.word	0x08014930

08013000 <_Bfree>:
 8013000:	b570      	push	{r4, r5, r6, lr}
 8013002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013004:	4605      	mov	r5, r0
 8013006:	460c      	mov	r4, r1
 8013008:	b976      	cbnz	r6, 8013028 <_Bfree+0x28>
 801300a:	2010      	movs	r0, #16
 801300c:	f7fe fbc6 	bl	801179c <malloc>
 8013010:	4602      	mov	r2, r0
 8013012:	6268      	str	r0, [r5, #36]	; 0x24
 8013014:	b920      	cbnz	r0, 8013020 <_Bfree+0x20>
 8013016:	4b09      	ldr	r3, [pc, #36]	; (801303c <_Bfree+0x3c>)
 8013018:	4809      	ldr	r0, [pc, #36]	; (8013040 <_Bfree+0x40>)
 801301a:	218a      	movs	r1, #138	; 0x8a
 801301c:	f000 fcbe 	bl	801399c <__assert_func>
 8013020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013024:	6006      	str	r6, [r0, #0]
 8013026:	60c6      	str	r6, [r0, #12]
 8013028:	b13c      	cbz	r4, 801303a <_Bfree+0x3a>
 801302a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801302c:	6862      	ldr	r2, [r4, #4]
 801302e:	68db      	ldr	r3, [r3, #12]
 8013030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013034:	6021      	str	r1, [r4, #0]
 8013036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	080148a9 	.word	0x080148a9
 8013040:	08014930 	.word	0x08014930

08013044 <__multadd>:
 8013044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013048:	690e      	ldr	r6, [r1, #16]
 801304a:	4607      	mov	r7, r0
 801304c:	4698      	mov	r8, r3
 801304e:	460c      	mov	r4, r1
 8013050:	f101 0014 	add.w	r0, r1, #20
 8013054:	2300      	movs	r3, #0
 8013056:	6805      	ldr	r5, [r0, #0]
 8013058:	b2a9      	uxth	r1, r5
 801305a:	fb02 8101 	mla	r1, r2, r1, r8
 801305e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013062:	0c2d      	lsrs	r5, r5, #16
 8013064:	fb02 c505 	mla	r5, r2, r5, ip
 8013068:	b289      	uxth	r1, r1
 801306a:	3301      	adds	r3, #1
 801306c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013070:	429e      	cmp	r6, r3
 8013072:	f840 1b04 	str.w	r1, [r0], #4
 8013076:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801307a:	dcec      	bgt.n	8013056 <__multadd+0x12>
 801307c:	f1b8 0f00 	cmp.w	r8, #0
 8013080:	d022      	beq.n	80130c8 <__multadd+0x84>
 8013082:	68a3      	ldr	r3, [r4, #8]
 8013084:	42b3      	cmp	r3, r6
 8013086:	dc19      	bgt.n	80130bc <__multadd+0x78>
 8013088:	6861      	ldr	r1, [r4, #4]
 801308a:	4638      	mov	r0, r7
 801308c:	3101      	adds	r1, #1
 801308e:	f7ff ff77 	bl	8012f80 <_Balloc>
 8013092:	4605      	mov	r5, r0
 8013094:	b928      	cbnz	r0, 80130a2 <__multadd+0x5e>
 8013096:	4602      	mov	r2, r0
 8013098:	4b0d      	ldr	r3, [pc, #52]	; (80130d0 <__multadd+0x8c>)
 801309a:	480e      	ldr	r0, [pc, #56]	; (80130d4 <__multadd+0x90>)
 801309c:	21b5      	movs	r1, #181	; 0xb5
 801309e:	f000 fc7d 	bl	801399c <__assert_func>
 80130a2:	6922      	ldr	r2, [r4, #16]
 80130a4:	3202      	adds	r2, #2
 80130a6:	f104 010c 	add.w	r1, r4, #12
 80130aa:	0092      	lsls	r2, r2, #2
 80130ac:	300c      	adds	r0, #12
 80130ae:	f7fe fb85 	bl	80117bc <memcpy>
 80130b2:	4621      	mov	r1, r4
 80130b4:	4638      	mov	r0, r7
 80130b6:	f7ff ffa3 	bl	8013000 <_Bfree>
 80130ba:	462c      	mov	r4, r5
 80130bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80130c0:	3601      	adds	r6, #1
 80130c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80130c6:	6126      	str	r6, [r4, #16]
 80130c8:	4620      	mov	r0, r4
 80130ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ce:	bf00      	nop
 80130d0:	0801491f 	.word	0x0801491f
 80130d4:	08014930 	.word	0x08014930

080130d8 <__hi0bits>:
 80130d8:	0c03      	lsrs	r3, r0, #16
 80130da:	041b      	lsls	r3, r3, #16
 80130dc:	b9d3      	cbnz	r3, 8013114 <__hi0bits+0x3c>
 80130de:	0400      	lsls	r0, r0, #16
 80130e0:	2310      	movs	r3, #16
 80130e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80130e6:	bf04      	itt	eq
 80130e8:	0200      	lsleq	r0, r0, #8
 80130ea:	3308      	addeq	r3, #8
 80130ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80130f0:	bf04      	itt	eq
 80130f2:	0100      	lsleq	r0, r0, #4
 80130f4:	3304      	addeq	r3, #4
 80130f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80130fa:	bf04      	itt	eq
 80130fc:	0080      	lsleq	r0, r0, #2
 80130fe:	3302      	addeq	r3, #2
 8013100:	2800      	cmp	r0, #0
 8013102:	db05      	blt.n	8013110 <__hi0bits+0x38>
 8013104:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013108:	f103 0301 	add.w	r3, r3, #1
 801310c:	bf08      	it	eq
 801310e:	2320      	moveq	r3, #32
 8013110:	4618      	mov	r0, r3
 8013112:	4770      	bx	lr
 8013114:	2300      	movs	r3, #0
 8013116:	e7e4      	b.n	80130e2 <__hi0bits+0xa>

08013118 <__lo0bits>:
 8013118:	6803      	ldr	r3, [r0, #0]
 801311a:	f013 0207 	ands.w	r2, r3, #7
 801311e:	4601      	mov	r1, r0
 8013120:	d00b      	beq.n	801313a <__lo0bits+0x22>
 8013122:	07da      	lsls	r2, r3, #31
 8013124:	d424      	bmi.n	8013170 <__lo0bits+0x58>
 8013126:	0798      	lsls	r0, r3, #30
 8013128:	bf49      	itett	mi
 801312a:	085b      	lsrmi	r3, r3, #1
 801312c:	089b      	lsrpl	r3, r3, #2
 801312e:	2001      	movmi	r0, #1
 8013130:	600b      	strmi	r3, [r1, #0]
 8013132:	bf5c      	itt	pl
 8013134:	600b      	strpl	r3, [r1, #0]
 8013136:	2002      	movpl	r0, #2
 8013138:	4770      	bx	lr
 801313a:	b298      	uxth	r0, r3
 801313c:	b9b0      	cbnz	r0, 801316c <__lo0bits+0x54>
 801313e:	0c1b      	lsrs	r3, r3, #16
 8013140:	2010      	movs	r0, #16
 8013142:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013146:	bf04      	itt	eq
 8013148:	0a1b      	lsreq	r3, r3, #8
 801314a:	3008      	addeq	r0, #8
 801314c:	071a      	lsls	r2, r3, #28
 801314e:	bf04      	itt	eq
 8013150:	091b      	lsreq	r3, r3, #4
 8013152:	3004      	addeq	r0, #4
 8013154:	079a      	lsls	r2, r3, #30
 8013156:	bf04      	itt	eq
 8013158:	089b      	lsreq	r3, r3, #2
 801315a:	3002      	addeq	r0, #2
 801315c:	07da      	lsls	r2, r3, #31
 801315e:	d403      	bmi.n	8013168 <__lo0bits+0x50>
 8013160:	085b      	lsrs	r3, r3, #1
 8013162:	f100 0001 	add.w	r0, r0, #1
 8013166:	d005      	beq.n	8013174 <__lo0bits+0x5c>
 8013168:	600b      	str	r3, [r1, #0]
 801316a:	4770      	bx	lr
 801316c:	4610      	mov	r0, r2
 801316e:	e7e8      	b.n	8013142 <__lo0bits+0x2a>
 8013170:	2000      	movs	r0, #0
 8013172:	4770      	bx	lr
 8013174:	2020      	movs	r0, #32
 8013176:	4770      	bx	lr

08013178 <__i2b>:
 8013178:	b510      	push	{r4, lr}
 801317a:	460c      	mov	r4, r1
 801317c:	2101      	movs	r1, #1
 801317e:	f7ff feff 	bl	8012f80 <_Balloc>
 8013182:	4602      	mov	r2, r0
 8013184:	b928      	cbnz	r0, 8013192 <__i2b+0x1a>
 8013186:	4b05      	ldr	r3, [pc, #20]	; (801319c <__i2b+0x24>)
 8013188:	4805      	ldr	r0, [pc, #20]	; (80131a0 <__i2b+0x28>)
 801318a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801318e:	f000 fc05 	bl	801399c <__assert_func>
 8013192:	2301      	movs	r3, #1
 8013194:	6144      	str	r4, [r0, #20]
 8013196:	6103      	str	r3, [r0, #16]
 8013198:	bd10      	pop	{r4, pc}
 801319a:	bf00      	nop
 801319c:	0801491f 	.word	0x0801491f
 80131a0:	08014930 	.word	0x08014930

080131a4 <__multiply>:
 80131a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a8:	4614      	mov	r4, r2
 80131aa:	690a      	ldr	r2, [r1, #16]
 80131ac:	6923      	ldr	r3, [r4, #16]
 80131ae:	429a      	cmp	r2, r3
 80131b0:	bfb8      	it	lt
 80131b2:	460b      	movlt	r3, r1
 80131b4:	460d      	mov	r5, r1
 80131b6:	bfbc      	itt	lt
 80131b8:	4625      	movlt	r5, r4
 80131ba:	461c      	movlt	r4, r3
 80131bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80131c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80131c4:	68ab      	ldr	r3, [r5, #8]
 80131c6:	6869      	ldr	r1, [r5, #4]
 80131c8:	eb0a 0709 	add.w	r7, sl, r9
 80131cc:	42bb      	cmp	r3, r7
 80131ce:	b085      	sub	sp, #20
 80131d0:	bfb8      	it	lt
 80131d2:	3101      	addlt	r1, #1
 80131d4:	f7ff fed4 	bl	8012f80 <_Balloc>
 80131d8:	b930      	cbnz	r0, 80131e8 <__multiply+0x44>
 80131da:	4602      	mov	r2, r0
 80131dc:	4b42      	ldr	r3, [pc, #264]	; (80132e8 <__multiply+0x144>)
 80131de:	4843      	ldr	r0, [pc, #268]	; (80132ec <__multiply+0x148>)
 80131e0:	f240 115d 	movw	r1, #349	; 0x15d
 80131e4:	f000 fbda 	bl	801399c <__assert_func>
 80131e8:	f100 0614 	add.w	r6, r0, #20
 80131ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80131f0:	4633      	mov	r3, r6
 80131f2:	2200      	movs	r2, #0
 80131f4:	4543      	cmp	r3, r8
 80131f6:	d31e      	bcc.n	8013236 <__multiply+0x92>
 80131f8:	f105 0c14 	add.w	ip, r5, #20
 80131fc:	f104 0314 	add.w	r3, r4, #20
 8013200:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013204:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013208:	9202      	str	r2, [sp, #8]
 801320a:	ebac 0205 	sub.w	r2, ip, r5
 801320e:	3a15      	subs	r2, #21
 8013210:	f022 0203 	bic.w	r2, r2, #3
 8013214:	3204      	adds	r2, #4
 8013216:	f105 0115 	add.w	r1, r5, #21
 801321a:	458c      	cmp	ip, r1
 801321c:	bf38      	it	cc
 801321e:	2204      	movcc	r2, #4
 8013220:	9201      	str	r2, [sp, #4]
 8013222:	9a02      	ldr	r2, [sp, #8]
 8013224:	9303      	str	r3, [sp, #12]
 8013226:	429a      	cmp	r2, r3
 8013228:	d808      	bhi.n	801323c <__multiply+0x98>
 801322a:	2f00      	cmp	r7, #0
 801322c:	dc55      	bgt.n	80132da <__multiply+0x136>
 801322e:	6107      	str	r7, [r0, #16]
 8013230:	b005      	add	sp, #20
 8013232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013236:	f843 2b04 	str.w	r2, [r3], #4
 801323a:	e7db      	b.n	80131f4 <__multiply+0x50>
 801323c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013240:	f1ba 0f00 	cmp.w	sl, #0
 8013244:	d020      	beq.n	8013288 <__multiply+0xe4>
 8013246:	f105 0e14 	add.w	lr, r5, #20
 801324a:	46b1      	mov	r9, r6
 801324c:	2200      	movs	r2, #0
 801324e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013252:	f8d9 b000 	ldr.w	fp, [r9]
 8013256:	b2a1      	uxth	r1, r4
 8013258:	fa1f fb8b 	uxth.w	fp, fp
 801325c:	fb0a b101 	mla	r1, sl, r1, fp
 8013260:	4411      	add	r1, r2
 8013262:	f8d9 2000 	ldr.w	r2, [r9]
 8013266:	0c24      	lsrs	r4, r4, #16
 8013268:	0c12      	lsrs	r2, r2, #16
 801326a:	fb0a 2404 	mla	r4, sl, r4, r2
 801326e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013272:	b289      	uxth	r1, r1
 8013274:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013278:	45f4      	cmp	ip, lr
 801327a:	f849 1b04 	str.w	r1, [r9], #4
 801327e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013282:	d8e4      	bhi.n	801324e <__multiply+0xaa>
 8013284:	9901      	ldr	r1, [sp, #4]
 8013286:	5072      	str	r2, [r6, r1]
 8013288:	9a03      	ldr	r2, [sp, #12]
 801328a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801328e:	3304      	adds	r3, #4
 8013290:	f1b9 0f00 	cmp.w	r9, #0
 8013294:	d01f      	beq.n	80132d6 <__multiply+0x132>
 8013296:	6834      	ldr	r4, [r6, #0]
 8013298:	f105 0114 	add.w	r1, r5, #20
 801329c:	46b6      	mov	lr, r6
 801329e:	f04f 0a00 	mov.w	sl, #0
 80132a2:	880a      	ldrh	r2, [r1, #0]
 80132a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80132a8:	fb09 b202 	mla	r2, r9, r2, fp
 80132ac:	4492      	add	sl, r2
 80132ae:	b2a4      	uxth	r4, r4
 80132b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80132b4:	f84e 4b04 	str.w	r4, [lr], #4
 80132b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80132bc:	f8be 2000 	ldrh.w	r2, [lr]
 80132c0:	0c24      	lsrs	r4, r4, #16
 80132c2:	fb09 2404 	mla	r4, r9, r4, r2
 80132c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80132ca:	458c      	cmp	ip, r1
 80132cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80132d0:	d8e7      	bhi.n	80132a2 <__multiply+0xfe>
 80132d2:	9a01      	ldr	r2, [sp, #4]
 80132d4:	50b4      	str	r4, [r6, r2]
 80132d6:	3604      	adds	r6, #4
 80132d8:	e7a3      	b.n	8013222 <__multiply+0x7e>
 80132da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d1a5      	bne.n	801322e <__multiply+0x8a>
 80132e2:	3f01      	subs	r7, #1
 80132e4:	e7a1      	b.n	801322a <__multiply+0x86>
 80132e6:	bf00      	nop
 80132e8:	0801491f 	.word	0x0801491f
 80132ec:	08014930 	.word	0x08014930

080132f0 <__pow5mult>:
 80132f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132f4:	4615      	mov	r5, r2
 80132f6:	f012 0203 	ands.w	r2, r2, #3
 80132fa:	4606      	mov	r6, r0
 80132fc:	460f      	mov	r7, r1
 80132fe:	d007      	beq.n	8013310 <__pow5mult+0x20>
 8013300:	4c25      	ldr	r4, [pc, #148]	; (8013398 <__pow5mult+0xa8>)
 8013302:	3a01      	subs	r2, #1
 8013304:	2300      	movs	r3, #0
 8013306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801330a:	f7ff fe9b 	bl	8013044 <__multadd>
 801330e:	4607      	mov	r7, r0
 8013310:	10ad      	asrs	r5, r5, #2
 8013312:	d03d      	beq.n	8013390 <__pow5mult+0xa0>
 8013314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013316:	b97c      	cbnz	r4, 8013338 <__pow5mult+0x48>
 8013318:	2010      	movs	r0, #16
 801331a:	f7fe fa3f 	bl	801179c <malloc>
 801331e:	4602      	mov	r2, r0
 8013320:	6270      	str	r0, [r6, #36]	; 0x24
 8013322:	b928      	cbnz	r0, 8013330 <__pow5mult+0x40>
 8013324:	4b1d      	ldr	r3, [pc, #116]	; (801339c <__pow5mult+0xac>)
 8013326:	481e      	ldr	r0, [pc, #120]	; (80133a0 <__pow5mult+0xb0>)
 8013328:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801332c:	f000 fb36 	bl	801399c <__assert_func>
 8013330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013334:	6004      	str	r4, [r0, #0]
 8013336:	60c4      	str	r4, [r0, #12]
 8013338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801333c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013340:	b94c      	cbnz	r4, 8013356 <__pow5mult+0x66>
 8013342:	f240 2171 	movw	r1, #625	; 0x271
 8013346:	4630      	mov	r0, r6
 8013348:	f7ff ff16 	bl	8013178 <__i2b>
 801334c:	2300      	movs	r3, #0
 801334e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013352:	4604      	mov	r4, r0
 8013354:	6003      	str	r3, [r0, #0]
 8013356:	f04f 0900 	mov.w	r9, #0
 801335a:	07eb      	lsls	r3, r5, #31
 801335c:	d50a      	bpl.n	8013374 <__pow5mult+0x84>
 801335e:	4639      	mov	r1, r7
 8013360:	4622      	mov	r2, r4
 8013362:	4630      	mov	r0, r6
 8013364:	f7ff ff1e 	bl	80131a4 <__multiply>
 8013368:	4639      	mov	r1, r7
 801336a:	4680      	mov	r8, r0
 801336c:	4630      	mov	r0, r6
 801336e:	f7ff fe47 	bl	8013000 <_Bfree>
 8013372:	4647      	mov	r7, r8
 8013374:	106d      	asrs	r5, r5, #1
 8013376:	d00b      	beq.n	8013390 <__pow5mult+0xa0>
 8013378:	6820      	ldr	r0, [r4, #0]
 801337a:	b938      	cbnz	r0, 801338c <__pow5mult+0x9c>
 801337c:	4622      	mov	r2, r4
 801337e:	4621      	mov	r1, r4
 8013380:	4630      	mov	r0, r6
 8013382:	f7ff ff0f 	bl	80131a4 <__multiply>
 8013386:	6020      	str	r0, [r4, #0]
 8013388:	f8c0 9000 	str.w	r9, [r0]
 801338c:	4604      	mov	r4, r0
 801338e:	e7e4      	b.n	801335a <__pow5mult+0x6a>
 8013390:	4638      	mov	r0, r7
 8013392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013396:	bf00      	nop
 8013398:	08014a80 	.word	0x08014a80
 801339c:	080148a9 	.word	0x080148a9
 80133a0:	08014930 	.word	0x08014930

080133a4 <__lshift>:
 80133a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a8:	460c      	mov	r4, r1
 80133aa:	6849      	ldr	r1, [r1, #4]
 80133ac:	6923      	ldr	r3, [r4, #16]
 80133ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133b2:	68a3      	ldr	r3, [r4, #8]
 80133b4:	4607      	mov	r7, r0
 80133b6:	4691      	mov	r9, r2
 80133b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133bc:	f108 0601 	add.w	r6, r8, #1
 80133c0:	42b3      	cmp	r3, r6
 80133c2:	db0b      	blt.n	80133dc <__lshift+0x38>
 80133c4:	4638      	mov	r0, r7
 80133c6:	f7ff fddb 	bl	8012f80 <_Balloc>
 80133ca:	4605      	mov	r5, r0
 80133cc:	b948      	cbnz	r0, 80133e2 <__lshift+0x3e>
 80133ce:	4602      	mov	r2, r0
 80133d0:	4b28      	ldr	r3, [pc, #160]	; (8013474 <__lshift+0xd0>)
 80133d2:	4829      	ldr	r0, [pc, #164]	; (8013478 <__lshift+0xd4>)
 80133d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80133d8:	f000 fae0 	bl	801399c <__assert_func>
 80133dc:	3101      	adds	r1, #1
 80133de:	005b      	lsls	r3, r3, #1
 80133e0:	e7ee      	b.n	80133c0 <__lshift+0x1c>
 80133e2:	2300      	movs	r3, #0
 80133e4:	f100 0114 	add.w	r1, r0, #20
 80133e8:	f100 0210 	add.w	r2, r0, #16
 80133ec:	4618      	mov	r0, r3
 80133ee:	4553      	cmp	r3, sl
 80133f0:	db33      	blt.n	801345a <__lshift+0xb6>
 80133f2:	6920      	ldr	r0, [r4, #16]
 80133f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80133f8:	f104 0314 	add.w	r3, r4, #20
 80133fc:	f019 091f 	ands.w	r9, r9, #31
 8013400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013404:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013408:	d02b      	beq.n	8013462 <__lshift+0xbe>
 801340a:	f1c9 0e20 	rsb	lr, r9, #32
 801340e:	468a      	mov	sl, r1
 8013410:	2200      	movs	r2, #0
 8013412:	6818      	ldr	r0, [r3, #0]
 8013414:	fa00 f009 	lsl.w	r0, r0, r9
 8013418:	4302      	orrs	r2, r0
 801341a:	f84a 2b04 	str.w	r2, [sl], #4
 801341e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013422:	459c      	cmp	ip, r3
 8013424:	fa22 f20e 	lsr.w	r2, r2, lr
 8013428:	d8f3      	bhi.n	8013412 <__lshift+0x6e>
 801342a:	ebac 0304 	sub.w	r3, ip, r4
 801342e:	3b15      	subs	r3, #21
 8013430:	f023 0303 	bic.w	r3, r3, #3
 8013434:	3304      	adds	r3, #4
 8013436:	f104 0015 	add.w	r0, r4, #21
 801343a:	4584      	cmp	ip, r0
 801343c:	bf38      	it	cc
 801343e:	2304      	movcc	r3, #4
 8013440:	50ca      	str	r2, [r1, r3]
 8013442:	b10a      	cbz	r2, 8013448 <__lshift+0xa4>
 8013444:	f108 0602 	add.w	r6, r8, #2
 8013448:	3e01      	subs	r6, #1
 801344a:	4638      	mov	r0, r7
 801344c:	612e      	str	r6, [r5, #16]
 801344e:	4621      	mov	r1, r4
 8013450:	f7ff fdd6 	bl	8013000 <_Bfree>
 8013454:	4628      	mov	r0, r5
 8013456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801345a:	f842 0f04 	str.w	r0, [r2, #4]!
 801345e:	3301      	adds	r3, #1
 8013460:	e7c5      	b.n	80133ee <__lshift+0x4a>
 8013462:	3904      	subs	r1, #4
 8013464:	f853 2b04 	ldr.w	r2, [r3], #4
 8013468:	f841 2f04 	str.w	r2, [r1, #4]!
 801346c:	459c      	cmp	ip, r3
 801346e:	d8f9      	bhi.n	8013464 <__lshift+0xc0>
 8013470:	e7ea      	b.n	8013448 <__lshift+0xa4>
 8013472:	bf00      	nop
 8013474:	0801491f 	.word	0x0801491f
 8013478:	08014930 	.word	0x08014930

0801347c <__mcmp>:
 801347c:	b530      	push	{r4, r5, lr}
 801347e:	6902      	ldr	r2, [r0, #16]
 8013480:	690c      	ldr	r4, [r1, #16]
 8013482:	1b12      	subs	r2, r2, r4
 8013484:	d10e      	bne.n	80134a4 <__mcmp+0x28>
 8013486:	f100 0314 	add.w	r3, r0, #20
 801348a:	3114      	adds	r1, #20
 801348c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013494:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013498:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801349c:	42a5      	cmp	r5, r4
 801349e:	d003      	beq.n	80134a8 <__mcmp+0x2c>
 80134a0:	d305      	bcc.n	80134ae <__mcmp+0x32>
 80134a2:	2201      	movs	r2, #1
 80134a4:	4610      	mov	r0, r2
 80134a6:	bd30      	pop	{r4, r5, pc}
 80134a8:	4283      	cmp	r3, r0
 80134aa:	d3f3      	bcc.n	8013494 <__mcmp+0x18>
 80134ac:	e7fa      	b.n	80134a4 <__mcmp+0x28>
 80134ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134b2:	e7f7      	b.n	80134a4 <__mcmp+0x28>

080134b4 <__mdiff>:
 80134b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b8:	460c      	mov	r4, r1
 80134ba:	4606      	mov	r6, r0
 80134bc:	4611      	mov	r1, r2
 80134be:	4620      	mov	r0, r4
 80134c0:	4617      	mov	r7, r2
 80134c2:	f7ff ffdb 	bl	801347c <__mcmp>
 80134c6:	1e05      	subs	r5, r0, #0
 80134c8:	d110      	bne.n	80134ec <__mdiff+0x38>
 80134ca:	4629      	mov	r1, r5
 80134cc:	4630      	mov	r0, r6
 80134ce:	f7ff fd57 	bl	8012f80 <_Balloc>
 80134d2:	b930      	cbnz	r0, 80134e2 <__mdiff+0x2e>
 80134d4:	4b39      	ldr	r3, [pc, #228]	; (80135bc <__mdiff+0x108>)
 80134d6:	4602      	mov	r2, r0
 80134d8:	f240 2132 	movw	r1, #562	; 0x232
 80134dc:	4838      	ldr	r0, [pc, #224]	; (80135c0 <__mdiff+0x10c>)
 80134de:	f000 fa5d 	bl	801399c <__assert_func>
 80134e2:	2301      	movs	r3, #1
 80134e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80134e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ec:	bfa4      	itt	ge
 80134ee:	463b      	movge	r3, r7
 80134f0:	4627      	movge	r7, r4
 80134f2:	4630      	mov	r0, r6
 80134f4:	6879      	ldr	r1, [r7, #4]
 80134f6:	bfa6      	itte	ge
 80134f8:	461c      	movge	r4, r3
 80134fa:	2500      	movge	r5, #0
 80134fc:	2501      	movlt	r5, #1
 80134fe:	f7ff fd3f 	bl	8012f80 <_Balloc>
 8013502:	b920      	cbnz	r0, 801350e <__mdiff+0x5a>
 8013504:	4b2d      	ldr	r3, [pc, #180]	; (80135bc <__mdiff+0x108>)
 8013506:	4602      	mov	r2, r0
 8013508:	f44f 7110 	mov.w	r1, #576	; 0x240
 801350c:	e7e6      	b.n	80134dc <__mdiff+0x28>
 801350e:	693e      	ldr	r6, [r7, #16]
 8013510:	60c5      	str	r5, [r0, #12]
 8013512:	6925      	ldr	r5, [r4, #16]
 8013514:	f107 0114 	add.w	r1, r7, #20
 8013518:	f104 0914 	add.w	r9, r4, #20
 801351c:	f100 0e14 	add.w	lr, r0, #20
 8013520:	f107 0210 	add.w	r2, r7, #16
 8013524:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013528:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801352c:	46f2      	mov	sl, lr
 801352e:	2700      	movs	r7, #0
 8013530:	f859 3b04 	ldr.w	r3, [r9], #4
 8013534:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013538:	fa1f f883 	uxth.w	r8, r3
 801353c:	fa17 f78b 	uxtah	r7, r7, fp
 8013540:	0c1b      	lsrs	r3, r3, #16
 8013542:	eba7 0808 	sub.w	r8, r7, r8
 8013546:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801354a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801354e:	fa1f f888 	uxth.w	r8, r8
 8013552:	141f      	asrs	r7, r3, #16
 8013554:	454d      	cmp	r5, r9
 8013556:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801355a:	f84a 3b04 	str.w	r3, [sl], #4
 801355e:	d8e7      	bhi.n	8013530 <__mdiff+0x7c>
 8013560:	1b2b      	subs	r3, r5, r4
 8013562:	3b15      	subs	r3, #21
 8013564:	f023 0303 	bic.w	r3, r3, #3
 8013568:	3304      	adds	r3, #4
 801356a:	3415      	adds	r4, #21
 801356c:	42a5      	cmp	r5, r4
 801356e:	bf38      	it	cc
 8013570:	2304      	movcc	r3, #4
 8013572:	4419      	add	r1, r3
 8013574:	4473      	add	r3, lr
 8013576:	469e      	mov	lr, r3
 8013578:	460d      	mov	r5, r1
 801357a:	4565      	cmp	r5, ip
 801357c:	d30e      	bcc.n	801359c <__mdiff+0xe8>
 801357e:	f10c 0203 	add.w	r2, ip, #3
 8013582:	1a52      	subs	r2, r2, r1
 8013584:	f022 0203 	bic.w	r2, r2, #3
 8013588:	3903      	subs	r1, #3
 801358a:	458c      	cmp	ip, r1
 801358c:	bf38      	it	cc
 801358e:	2200      	movcc	r2, #0
 8013590:	441a      	add	r2, r3
 8013592:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013596:	b17b      	cbz	r3, 80135b8 <__mdiff+0x104>
 8013598:	6106      	str	r6, [r0, #16]
 801359a:	e7a5      	b.n	80134e8 <__mdiff+0x34>
 801359c:	f855 8b04 	ldr.w	r8, [r5], #4
 80135a0:	fa17 f488 	uxtah	r4, r7, r8
 80135a4:	1422      	asrs	r2, r4, #16
 80135a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80135aa:	b2a4      	uxth	r4, r4
 80135ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80135b0:	f84e 4b04 	str.w	r4, [lr], #4
 80135b4:	1417      	asrs	r7, r2, #16
 80135b6:	e7e0      	b.n	801357a <__mdiff+0xc6>
 80135b8:	3e01      	subs	r6, #1
 80135ba:	e7ea      	b.n	8013592 <__mdiff+0xde>
 80135bc:	0801491f 	.word	0x0801491f
 80135c0:	08014930 	.word	0x08014930

080135c4 <__d2b>:
 80135c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135c8:	4689      	mov	r9, r1
 80135ca:	2101      	movs	r1, #1
 80135cc:	ec57 6b10 	vmov	r6, r7, d0
 80135d0:	4690      	mov	r8, r2
 80135d2:	f7ff fcd5 	bl	8012f80 <_Balloc>
 80135d6:	4604      	mov	r4, r0
 80135d8:	b930      	cbnz	r0, 80135e8 <__d2b+0x24>
 80135da:	4602      	mov	r2, r0
 80135dc:	4b25      	ldr	r3, [pc, #148]	; (8013674 <__d2b+0xb0>)
 80135de:	4826      	ldr	r0, [pc, #152]	; (8013678 <__d2b+0xb4>)
 80135e0:	f240 310a 	movw	r1, #778	; 0x30a
 80135e4:	f000 f9da 	bl	801399c <__assert_func>
 80135e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80135ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80135f0:	bb35      	cbnz	r5, 8013640 <__d2b+0x7c>
 80135f2:	2e00      	cmp	r6, #0
 80135f4:	9301      	str	r3, [sp, #4]
 80135f6:	d028      	beq.n	801364a <__d2b+0x86>
 80135f8:	4668      	mov	r0, sp
 80135fa:	9600      	str	r6, [sp, #0]
 80135fc:	f7ff fd8c 	bl	8013118 <__lo0bits>
 8013600:	9900      	ldr	r1, [sp, #0]
 8013602:	b300      	cbz	r0, 8013646 <__d2b+0x82>
 8013604:	9a01      	ldr	r2, [sp, #4]
 8013606:	f1c0 0320 	rsb	r3, r0, #32
 801360a:	fa02 f303 	lsl.w	r3, r2, r3
 801360e:	430b      	orrs	r3, r1
 8013610:	40c2      	lsrs	r2, r0
 8013612:	6163      	str	r3, [r4, #20]
 8013614:	9201      	str	r2, [sp, #4]
 8013616:	9b01      	ldr	r3, [sp, #4]
 8013618:	61a3      	str	r3, [r4, #24]
 801361a:	2b00      	cmp	r3, #0
 801361c:	bf14      	ite	ne
 801361e:	2202      	movne	r2, #2
 8013620:	2201      	moveq	r2, #1
 8013622:	6122      	str	r2, [r4, #16]
 8013624:	b1d5      	cbz	r5, 801365c <__d2b+0x98>
 8013626:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801362a:	4405      	add	r5, r0
 801362c:	f8c9 5000 	str.w	r5, [r9]
 8013630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013634:	f8c8 0000 	str.w	r0, [r8]
 8013638:	4620      	mov	r0, r4
 801363a:	b003      	add	sp, #12
 801363c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013644:	e7d5      	b.n	80135f2 <__d2b+0x2e>
 8013646:	6161      	str	r1, [r4, #20]
 8013648:	e7e5      	b.n	8013616 <__d2b+0x52>
 801364a:	a801      	add	r0, sp, #4
 801364c:	f7ff fd64 	bl	8013118 <__lo0bits>
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	6163      	str	r3, [r4, #20]
 8013654:	2201      	movs	r2, #1
 8013656:	6122      	str	r2, [r4, #16]
 8013658:	3020      	adds	r0, #32
 801365a:	e7e3      	b.n	8013624 <__d2b+0x60>
 801365c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013664:	f8c9 0000 	str.w	r0, [r9]
 8013668:	6918      	ldr	r0, [r3, #16]
 801366a:	f7ff fd35 	bl	80130d8 <__hi0bits>
 801366e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013672:	e7df      	b.n	8013634 <__d2b+0x70>
 8013674:	0801491f 	.word	0x0801491f
 8013678:	08014930 	.word	0x08014930

0801367c <_calloc_r>:
 801367c:	b513      	push	{r0, r1, r4, lr}
 801367e:	434a      	muls	r2, r1
 8013680:	4611      	mov	r1, r2
 8013682:	9201      	str	r2, [sp, #4]
 8013684:	f7fe f900 	bl	8011888 <_malloc_r>
 8013688:	4604      	mov	r4, r0
 801368a:	b118      	cbz	r0, 8013694 <_calloc_r+0x18>
 801368c:	9a01      	ldr	r2, [sp, #4]
 801368e:	2100      	movs	r1, #0
 8013690:	f7fe f8a2 	bl	80117d8 <memset>
 8013694:	4620      	mov	r0, r4
 8013696:	b002      	add	sp, #8
 8013698:	bd10      	pop	{r4, pc}

0801369a <_realloc_r>:
 801369a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801369c:	4607      	mov	r7, r0
 801369e:	4614      	mov	r4, r2
 80136a0:	460e      	mov	r6, r1
 80136a2:	b921      	cbnz	r1, 80136ae <_realloc_r+0x14>
 80136a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80136a8:	4611      	mov	r1, r2
 80136aa:	f7fe b8ed 	b.w	8011888 <_malloc_r>
 80136ae:	b922      	cbnz	r2, 80136ba <_realloc_r+0x20>
 80136b0:	f7fe f89a 	bl	80117e8 <_free_r>
 80136b4:	4625      	mov	r5, r4
 80136b6:	4628      	mov	r0, r5
 80136b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136ba:	f000 f9ce 	bl	8013a5a <_malloc_usable_size_r>
 80136be:	42a0      	cmp	r0, r4
 80136c0:	d20f      	bcs.n	80136e2 <_realloc_r+0x48>
 80136c2:	4621      	mov	r1, r4
 80136c4:	4638      	mov	r0, r7
 80136c6:	f7fe f8df 	bl	8011888 <_malloc_r>
 80136ca:	4605      	mov	r5, r0
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d0f2      	beq.n	80136b6 <_realloc_r+0x1c>
 80136d0:	4631      	mov	r1, r6
 80136d2:	4622      	mov	r2, r4
 80136d4:	f7fe f872 	bl	80117bc <memcpy>
 80136d8:	4631      	mov	r1, r6
 80136da:	4638      	mov	r0, r7
 80136dc:	f7fe f884 	bl	80117e8 <_free_r>
 80136e0:	e7e9      	b.n	80136b6 <_realloc_r+0x1c>
 80136e2:	4635      	mov	r5, r6
 80136e4:	e7e7      	b.n	80136b6 <_realloc_r+0x1c>

080136e6 <__ssputs_r>:
 80136e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136ea:	688e      	ldr	r6, [r1, #8]
 80136ec:	429e      	cmp	r6, r3
 80136ee:	4682      	mov	sl, r0
 80136f0:	460c      	mov	r4, r1
 80136f2:	4690      	mov	r8, r2
 80136f4:	461f      	mov	r7, r3
 80136f6:	d838      	bhi.n	801376a <__ssputs_r+0x84>
 80136f8:	898a      	ldrh	r2, [r1, #12]
 80136fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80136fe:	d032      	beq.n	8013766 <__ssputs_r+0x80>
 8013700:	6825      	ldr	r5, [r4, #0]
 8013702:	6909      	ldr	r1, [r1, #16]
 8013704:	eba5 0901 	sub.w	r9, r5, r1
 8013708:	6965      	ldr	r5, [r4, #20]
 801370a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801370e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013712:	3301      	adds	r3, #1
 8013714:	444b      	add	r3, r9
 8013716:	106d      	asrs	r5, r5, #1
 8013718:	429d      	cmp	r5, r3
 801371a:	bf38      	it	cc
 801371c:	461d      	movcc	r5, r3
 801371e:	0553      	lsls	r3, r2, #21
 8013720:	d531      	bpl.n	8013786 <__ssputs_r+0xa0>
 8013722:	4629      	mov	r1, r5
 8013724:	f7fe f8b0 	bl	8011888 <_malloc_r>
 8013728:	4606      	mov	r6, r0
 801372a:	b950      	cbnz	r0, 8013742 <__ssputs_r+0x5c>
 801372c:	230c      	movs	r3, #12
 801372e:	f8ca 3000 	str.w	r3, [sl]
 8013732:	89a3      	ldrh	r3, [r4, #12]
 8013734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013738:	81a3      	strh	r3, [r4, #12]
 801373a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801373e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013742:	6921      	ldr	r1, [r4, #16]
 8013744:	464a      	mov	r2, r9
 8013746:	f7fe f839 	bl	80117bc <memcpy>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013754:	81a3      	strh	r3, [r4, #12]
 8013756:	6126      	str	r6, [r4, #16]
 8013758:	6165      	str	r5, [r4, #20]
 801375a:	444e      	add	r6, r9
 801375c:	eba5 0509 	sub.w	r5, r5, r9
 8013760:	6026      	str	r6, [r4, #0]
 8013762:	60a5      	str	r5, [r4, #8]
 8013764:	463e      	mov	r6, r7
 8013766:	42be      	cmp	r6, r7
 8013768:	d900      	bls.n	801376c <__ssputs_r+0x86>
 801376a:	463e      	mov	r6, r7
 801376c:	4632      	mov	r2, r6
 801376e:	6820      	ldr	r0, [r4, #0]
 8013770:	4641      	mov	r1, r8
 8013772:	f000 f958 	bl	8013a26 <memmove>
 8013776:	68a3      	ldr	r3, [r4, #8]
 8013778:	6822      	ldr	r2, [r4, #0]
 801377a:	1b9b      	subs	r3, r3, r6
 801377c:	4432      	add	r2, r6
 801377e:	60a3      	str	r3, [r4, #8]
 8013780:	6022      	str	r2, [r4, #0]
 8013782:	2000      	movs	r0, #0
 8013784:	e7db      	b.n	801373e <__ssputs_r+0x58>
 8013786:	462a      	mov	r2, r5
 8013788:	f7ff ff87 	bl	801369a <_realloc_r>
 801378c:	4606      	mov	r6, r0
 801378e:	2800      	cmp	r0, #0
 8013790:	d1e1      	bne.n	8013756 <__ssputs_r+0x70>
 8013792:	6921      	ldr	r1, [r4, #16]
 8013794:	4650      	mov	r0, sl
 8013796:	f7fe f827 	bl	80117e8 <_free_r>
 801379a:	e7c7      	b.n	801372c <__ssputs_r+0x46>

0801379c <_svfiprintf_r>:
 801379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a0:	4698      	mov	r8, r3
 80137a2:	898b      	ldrh	r3, [r1, #12]
 80137a4:	061b      	lsls	r3, r3, #24
 80137a6:	b09d      	sub	sp, #116	; 0x74
 80137a8:	4607      	mov	r7, r0
 80137aa:	460d      	mov	r5, r1
 80137ac:	4614      	mov	r4, r2
 80137ae:	d50e      	bpl.n	80137ce <_svfiprintf_r+0x32>
 80137b0:	690b      	ldr	r3, [r1, #16]
 80137b2:	b963      	cbnz	r3, 80137ce <_svfiprintf_r+0x32>
 80137b4:	2140      	movs	r1, #64	; 0x40
 80137b6:	f7fe f867 	bl	8011888 <_malloc_r>
 80137ba:	6028      	str	r0, [r5, #0]
 80137bc:	6128      	str	r0, [r5, #16]
 80137be:	b920      	cbnz	r0, 80137ca <_svfiprintf_r+0x2e>
 80137c0:	230c      	movs	r3, #12
 80137c2:	603b      	str	r3, [r7, #0]
 80137c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137c8:	e0d1      	b.n	801396e <_svfiprintf_r+0x1d2>
 80137ca:	2340      	movs	r3, #64	; 0x40
 80137cc:	616b      	str	r3, [r5, #20]
 80137ce:	2300      	movs	r3, #0
 80137d0:	9309      	str	r3, [sp, #36]	; 0x24
 80137d2:	2320      	movs	r3, #32
 80137d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80137dc:	2330      	movs	r3, #48	; 0x30
 80137de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013988 <_svfiprintf_r+0x1ec>
 80137e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137e6:	f04f 0901 	mov.w	r9, #1
 80137ea:	4623      	mov	r3, r4
 80137ec:	469a      	mov	sl, r3
 80137ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137f2:	b10a      	cbz	r2, 80137f8 <_svfiprintf_r+0x5c>
 80137f4:	2a25      	cmp	r2, #37	; 0x25
 80137f6:	d1f9      	bne.n	80137ec <_svfiprintf_r+0x50>
 80137f8:	ebba 0b04 	subs.w	fp, sl, r4
 80137fc:	d00b      	beq.n	8013816 <_svfiprintf_r+0x7a>
 80137fe:	465b      	mov	r3, fp
 8013800:	4622      	mov	r2, r4
 8013802:	4629      	mov	r1, r5
 8013804:	4638      	mov	r0, r7
 8013806:	f7ff ff6e 	bl	80136e6 <__ssputs_r>
 801380a:	3001      	adds	r0, #1
 801380c:	f000 80aa 	beq.w	8013964 <_svfiprintf_r+0x1c8>
 8013810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013812:	445a      	add	r2, fp
 8013814:	9209      	str	r2, [sp, #36]	; 0x24
 8013816:	f89a 3000 	ldrb.w	r3, [sl]
 801381a:	2b00      	cmp	r3, #0
 801381c:	f000 80a2 	beq.w	8013964 <_svfiprintf_r+0x1c8>
 8013820:	2300      	movs	r3, #0
 8013822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801382a:	f10a 0a01 	add.w	sl, sl, #1
 801382e:	9304      	str	r3, [sp, #16]
 8013830:	9307      	str	r3, [sp, #28]
 8013832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013836:	931a      	str	r3, [sp, #104]	; 0x68
 8013838:	4654      	mov	r4, sl
 801383a:	2205      	movs	r2, #5
 801383c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013840:	4851      	ldr	r0, [pc, #324]	; (8013988 <_svfiprintf_r+0x1ec>)
 8013842:	f7ec fced 	bl	8000220 <memchr>
 8013846:	9a04      	ldr	r2, [sp, #16]
 8013848:	b9d8      	cbnz	r0, 8013882 <_svfiprintf_r+0xe6>
 801384a:	06d0      	lsls	r0, r2, #27
 801384c:	bf44      	itt	mi
 801384e:	2320      	movmi	r3, #32
 8013850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013854:	0711      	lsls	r1, r2, #28
 8013856:	bf44      	itt	mi
 8013858:	232b      	movmi	r3, #43	; 0x2b
 801385a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801385e:	f89a 3000 	ldrb.w	r3, [sl]
 8013862:	2b2a      	cmp	r3, #42	; 0x2a
 8013864:	d015      	beq.n	8013892 <_svfiprintf_r+0xf6>
 8013866:	9a07      	ldr	r2, [sp, #28]
 8013868:	4654      	mov	r4, sl
 801386a:	2000      	movs	r0, #0
 801386c:	f04f 0c0a 	mov.w	ip, #10
 8013870:	4621      	mov	r1, r4
 8013872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013876:	3b30      	subs	r3, #48	; 0x30
 8013878:	2b09      	cmp	r3, #9
 801387a:	d94e      	bls.n	801391a <_svfiprintf_r+0x17e>
 801387c:	b1b0      	cbz	r0, 80138ac <_svfiprintf_r+0x110>
 801387e:	9207      	str	r2, [sp, #28]
 8013880:	e014      	b.n	80138ac <_svfiprintf_r+0x110>
 8013882:	eba0 0308 	sub.w	r3, r0, r8
 8013886:	fa09 f303 	lsl.w	r3, r9, r3
 801388a:	4313      	orrs	r3, r2
 801388c:	9304      	str	r3, [sp, #16]
 801388e:	46a2      	mov	sl, r4
 8013890:	e7d2      	b.n	8013838 <_svfiprintf_r+0x9c>
 8013892:	9b03      	ldr	r3, [sp, #12]
 8013894:	1d19      	adds	r1, r3, #4
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	9103      	str	r1, [sp, #12]
 801389a:	2b00      	cmp	r3, #0
 801389c:	bfbb      	ittet	lt
 801389e:	425b      	neglt	r3, r3
 80138a0:	f042 0202 	orrlt.w	r2, r2, #2
 80138a4:	9307      	strge	r3, [sp, #28]
 80138a6:	9307      	strlt	r3, [sp, #28]
 80138a8:	bfb8      	it	lt
 80138aa:	9204      	strlt	r2, [sp, #16]
 80138ac:	7823      	ldrb	r3, [r4, #0]
 80138ae:	2b2e      	cmp	r3, #46	; 0x2e
 80138b0:	d10c      	bne.n	80138cc <_svfiprintf_r+0x130>
 80138b2:	7863      	ldrb	r3, [r4, #1]
 80138b4:	2b2a      	cmp	r3, #42	; 0x2a
 80138b6:	d135      	bne.n	8013924 <_svfiprintf_r+0x188>
 80138b8:	9b03      	ldr	r3, [sp, #12]
 80138ba:	1d1a      	adds	r2, r3, #4
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	9203      	str	r2, [sp, #12]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	bfb8      	it	lt
 80138c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80138c8:	3402      	adds	r4, #2
 80138ca:	9305      	str	r3, [sp, #20]
 80138cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013998 <_svfiprintf_r+0x1fc>
 80138d0:	7821      	ldrb	r1, [r4, #0]
 80138d2:	2203      	movs	r2, #3
 80138d4:	4650      	mov	r0, sl
 80138d6:	f7ec fca3 	bl	8000220 <memchr>
 80138da:	b140      	cbz	r0, 80138ee <_svfiprintf_r+0x152>
 80138dc:	2340      	movs	r3, #64	; 0x40
 80138de:	eba0 000a 	sub.w	r0, r0, sl
 80138e2:	fa03 f000 	lsl.w	r0, r3, r0
 80138e6:	9b04      	ldr	r3, [sp, #16]
 80138e8:	4303      	orrs	r3, r0
 80138ea:	3401      	adds	r4, #1
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138f2:	4826      	ldr	r0, [pc, #152]	; (801398c <_svfiprintf_r+0x1f0>)
 80138f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138f8:	2206      	movs	r2, #6
 80138fa:	f7ec fc91 	bl	8000220 <memchr>
 80138fe:	2800      	cmp	r0, #0
 8013900:	d038      	beq.n	8013974 <_svfiprintf_r+0x1d8>
 8013902:	4b23      	ldr	r3, [pc, #140]	; (8013990 <_svfiprintf_r+0x1f4>)
 8013904:	bb1b      	cbnz	r3, 801394e <_svfiprintf_r+0x1b2>
 8013906:	9b03      	ldr	r3, [sp, #12]
 8013908:	3307      	adds	r3, #7
 801390a:	f023 0307 	bic.w	r3, r3, #7
 801390e:	3308      	adds	r3, #8
 8013910:	9303      	str	r3, [sp, #12]
 8013912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013914:	4433      	add	r3, r6
 8013916:	9309      	str	r3, [sp, #36]	; 0x24
 8013918:	e767      	b.n	80137ea <_svfiprintf_r+0x4e>
 801391a:	fb0c 3202 	mla	r2, ip, r2, r3
 801391e:	460c      	mov	r4, r1
 8013920:	2001      	movs	r0, #1
 8013922:	e7a5      	b.n	8013870 <_svfiprintf_r+0xd4>
 8013924:	2300      	movs	r3, #0
 8013926:	3401      	adds	r4, #1
 8013928:	9305      	str	r3, [sp, #20]
 801392a:	4619      	mov	r1, r3
 801392c:	f04f 0c0a 	mov.w	ip, #10
 8013930:	4620      	mov	r0, r4
 8013932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013936:	3a30      	subs	r2, #48	; 0x30
 8013938:	2a09      	cmp	r2, #9
 801393a:	d903      	bls.n	8013944 <_svfiprintf_r+0x1a8>
 801393c:	2b00      	cmp	r3, #0
 801393e:	d0c5      	beq.n	80138cc <_svfiprintf_r+0x130>
 8013940:	9105      	str	r1, [sp, #20]
 8013942:	e7c3      	b.n	80138cc <_svfiprintf_r+0x130>
 8013944:	fb0c 2101 	mla	r1, ip, r1, r2
 8013948:	4604      	mov	r4, r0
 801394a:	2301      	movs	r3, #1
 801394c:	e7f0      	b.n	8013930 <_svfiprintf_r+0x194>
 801394e:	ab03      	add	r3, sp, #12
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	462a      	mov	r2, r5
 8013954:	4b0f      	ldr	r3, [pc, #60]	; (8013994 <_svfiprintf_r+0x1f8>)
 8013956:	a904      	add	r1, sp, #16
 8013958:	4638      	mov	r0, r7
 801395a:	f7fe f88f 	bl	8011a7c <_printf_float>
 801395e:	1c42      	adds	r2, r0, #1
 8013960:	4606      	mov	r6, r0
 8013962:	d1d6      	bne.n	8013912 <_svfiprintf_r+0x176>
 8013964:	89ab      	ldrh	r3, [r5, #12]
 8013966:	065b      	lsls	r3, r3, #25
 8013968:	f53f af2c 	bmi.w	80137c4 <_svfiprintf_r+0x28>
 801396c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801396e:	b01d      	add	sp, #116	; 0x74
 8013970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013974:	ab03      	add	r3, sp, #12
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	462a      	mov	r2, r5
 801397a:	4b06      	ldr	r3, [pc, #24]	; (8013994 <_svfiprintf_r+0x1f8>)
 801397c:	a904      	add	r1, sp, #16
 801397e:	4638      	mov	r0, r7
 8013980:	f7fe fb20 	bl	8011fc4 <_printf_i>
 8013984:	e7eb      	b.n	801395e <_svfiprintf_r+0x1c2>
 8013986:	bf00      	nop
 8013988:	08014a8c 	.word	0x08014a8c
 801398c:	08014a96 	.word	0x08014a96
 8013990:	08011a7d 	.word	0x08011a7d
 8013994:	080136e7 	.word	0x080136e7
 8013998:	08014a92 	.word	0x08014a92

0801399c <__assert_func>:
 801399c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801399e:	4614      	mov	r4, r2
 80139a0:	461a      	mov	r2, r3
 80139a2:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <__assert_func+0x2c>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	4605      	mov	r5, r0
 80139a8:	68d8      	ldr	r0, [r3, #12]
 80139aa:	b14c      	cbz	r4, 80139c0 <__assert_func+0x24>
 80139ac:	4b07      	ldr	r3, [pc, #28]	; (80139cc <__assert_func+0x30>)
 80139ae:	9100      	str	r1, [sp, #0]
 80139b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139b4:	4906      	ldr	r1, [pc, #24]	; (80139d0 <__assert_func+0x34>)
 80139b6:	462b      	mov	r3, r5
 80139b8:	f000 f80e 	bl	80139d8 <fiprintf>
 80139bc:	f000 fa7c 	bl	8013eb8 <abort>
 80139c0:	4b04      	ldr	r3, [pc, #16]	; (80139d4 <__assert_func+0x38>)
 80139c2:	461c      	mov	r4, r3
 80139c4:	e7f3      	b.n	80139ae <__assert_func+0x12>
 80139c6:	bf00      	nop
 80139c8:	20000604 	.word	0x20000604
 80139cc:	08014a9d 	.word	0x08014a9d
 80139d0:	08014aaa 	.word	0x08014aaa
 80139d4:	08014ad8 	.word	0x08014ad8

080139d8 <fiprintf>:
 80139d8:	b40e      	push	{r1, r2, r3}
 80139da:	b503      	push	{r0, r1, lr}
 80139dc:	4601      	mov	r1, r0
 80139de:	ab03      	add	r3, sp, #12
 80139e0:	4805      	ldr	r0, [pc, #20]	; (80139f8 <fiprintf+0x20>)
 80139e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80139e6:	6800      	ldr	r0, [r0, #0]
 80139e8:	9301      	str	r3, [sp, #4]
 80139ea:	f000 f867 	bl	8013abc <_vfiprintf_r>
 80139ee:	b002      	add	sp, #8
 80139f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80139f4:	b003      	add	sp, #12
 80139f6:	4770      	bx	lr
 80139f8:	20000604 	.word	0x20000604

080139fc <__retarget_lock_init_recursive>:
 80139fc:	4770      	bx	lr

080139fe <__retarget_lock_acquire_recursive>:
 80139fe:	4770      	bx	lr

08013a00 <__retarget_lock_release_recursive>:
 8013a00:	4770      	bx	lr

08013a02 <__ascii_mbtowc>:
 8013a02:	b082      	sub	sp, #8
 8013a04:	b901      	cbnz	r1, 8013a08 <__ascii_mbtowc+0x6>
 8013a06:	a901      	add	r1, sp, #4
 8013a08:	b142      	cbz	r2, 8013a1c <__ascii_mbtowc+0x1a>
 8013a0a:	b14b      	cbz	r3, 8013a20 <__ascii_mbtowc+0x1e>
 8013a0c:	7813      	ldrb	r3, [r2, #0]
 8013a0e:	600b      	str	r3, [r1, #0]
 8013a10:	7812      	ldrb	r2, [r2, #0]
 8013a12:	1e10      	subs	r0, r2, #0
 8013a14:	bf18      	it	ne
 8013a16:	2001      	movne	r0, #1
 8013a18:	b002      	add	sp, #8
 8013a1a:	4770      	bx	lr
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	e7fb      	b.n	8013a18 <__ascii_mbtowc+0x16>
 8013a20:	f06f 0001 	mvn.w	r0, #1
 8013a24:	e7f8      	b.n	8013a18 <__ascii_mbtowc+0x16>

08013a26 <memmove>:
 8013a26:	4288      	cmp	r0, r1
 8013a28:	b510      	push	{r4, lr}
 8013a2a:	eb01 0402 	add.w	r4, r1, r2
 8013a2e:	d902      	bls.n	8013a36 <memmove+0x10>
 8013a30:	4284      	cmp	r4, r0
 8013a32:	4623      	mov	r3, r4
 8013a34:	d807      	bhi.n	8013a46 <memmove+0x20>
 8013a36:	1e43      	subs	r3, r0, #1
 8013a38:	42a1      	cmp	r1, r4
 8013a3a:	d008      	beq.n	8013a4e <memmove+0x28>
 8013a3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a44:	e7f8      	b.n	8013a38 <memmove+0x12>
 8013a46:	4402      	add	r2, r0
 8013a48:	4601      	mov	r1, r0
 8013a4a:	428a      	cmp	r2, r1
 8013a4c:	d100      	bne.n	8013a50 <memmove+0x2a>
 8013a4e:	bd10      	pop	{r4, pc}
 8013a50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a58:	e7f7      	b.n	8013a4a <memmove+0x24>

08013a5a <_malloc_usable_size_r>:
 8013a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a5e:	1f18      	subs	r0, r3, #4
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	bfbc      	itt	lt
 8013a64:	580b      	ldrlt	r3, [r1, r0]
 8013a66:	18c0      	addlt	r0, r0, r3
 8013a68:	4770      	bx	lr

08013a6a <__sfputc_r>:
 8013a6a:	6893      	ldr	r3, [r2, #8]
 8013a6c:	3b01      	subs	r3, #1
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	b410      	push	{r4}
 8013a72:	6093      	str	r3, [r2, #8]
 8013a74:	da08      	bge.n	8013a88 <__sfputc_r+0x1e>
 8013a76:	6994      	ldr	r4, [r2, #24]
 8013a78:	42a3      	cmp	r3, r4
 8013a7a:	db01      	blt.n	8013a80 <__sfputc_r+0x16>
 8013a7c:	290a      	cmp	r1, #10
 8013a7e:	d103      	bne.n	8013a88 <__sfputc_r+0x1e>
 8013a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a84:	f000 b94a 	b.w	8013d1c <__swbuf_r>
 8013a88:	6813      	ldr	r3, [r2, #0]
 8013a8a:	1c58      	adds	r0, r3, #1
 8013a8c:	6010      	str	r0, [r2, #0]
 8013a8e:	7019      	strb	r1, [r3, #0]
 8013a90:	4608      	mov	r0, r1
 8013a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <__sfputs_r>:
 8013a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	460f      	mov	r7, r1
 8013a9e:	4614      	mov	r4, r2
 8013aa0:	18d5      	adds	r5, r2, r3
 8013aa2:	42ac      	cmp	r4, r5
 8013aa4:	d101      	bne.n	8013aaa <__sfputs_r+0x12>
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	e007      	b.n	8013aba <__sfputs_r+0x22>
 8013aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013aae:	463a      	mov	r2, r7
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	f7ff ffda 	bl	8013a6a <__sfputc_r>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	d1f3      	bne.n	8013aa2 <__sfputs_r+0xa>
 8013aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013abc <_vfiprintf_r>:
 8013abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac0:	460d      	mov	r5, r1
 8013ac2:	b09d      	sub	sp, #116	; 0x74
 8013ac4:	4614      	mov	r4, r2
 8013ac6:	4698      	mov	r8, r3
 8013ac8:	4606      	mov	r6, r0
 8013aca:	b118      	cbz	r0, 8013ad4 <_vfiprintf_r+0x18>
 8013acc:	6983      	ldr	r3, [r0, #24]
 8013ace:	b90b      	cbnz	r3, 8013ad4 <_vfiprintf_r+0x18>
 8013ad0:	f000 fb14 	bl	80140fc <__sinit>
 8013ad4:	4b89      	ldr	r3, [pc, #548]	; (8013cfc <_vfiprintf_r+0x240>)
 8013ad6:	429d      	cmp	r5, r3
 8013ad8:	d11b      	bne.n	8013b12 <_vfiprintf_r+0x56>
 8013ada:	6875      	ldr	r5, [r6, #4]
 8013adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ade:	07d9      	lsls	r1, r3, #31
 8013ae0:	d405      	bmi.n	8013aee <_vfiprintf_r+0x32>
 8013ae2:	89ab      	ldrh	r3, [r5, #12]
 8013ae4:	059a      	lsls	r2, r3, #22
 8013ae6:	d402      	bmi.n	8013aee <_vfiprintf_r+0x32>
 8013ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013aea:	f7ff ff88 	bl	80139fe <__retarget_lock_acquire_recursive>
 8013aee:	89ab      	ldrh	r3, [r5, #12]
 8013af0:	071b      	lsls	r3, r3, #28
 8013af2:	d501      	bpl.n	8013af8 <_vfiprintf_r+0x3c>
 8013af4:	692b      	ldr	r3, [r5, #16]
 8013af6:	b9eb      	cbnz	r3, 8013b34 <_vfiprintf_r+0x78>
 8013af8:	4629      	mov	r1, r5
 8013afa:	4630      	mov	r0, r6
 8013afc:	f000 f96e 	bl	8013ddc <__swsetup_r>
 8013b00:	b1c0      	cbz	r0, 8013b34 <_vfiprintf_r+0x78>
 8013b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b04:	07dc      	lsls	r4, r3, #31
 8013b06:	d50e      	bpl.n	8013b26 <_vfiprintf_r+0x6a>
 8013b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b0c:	b01d      	add	sp, #116	; 0x74
 8013b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b12:	4b7b      	ldr	r3, [pc, #492]	; (8013d00 <_vfiprintf_r+0x244>)
 8013b14:	429d      	cmp	r5, r3
 8013b16:	d101      	bne.n	8013b1c <_vfiprintf_r+0x60>
 8013b18:	68b5      	ldr	r5, [r6, #8]
 8013b1a:	e7df      	b.n	8013adc <_vfiprintf_r+0x20>
 8013b1c:	4b79      	ldr	r3, [pc, #484]	; (8013d04 <_vfiprintf_r+0x248>)
 8013b1e:	429d      	cmp	r5, r3
 8013b20:	bf08      	it	eq
 8013b22:	68f5      	ldreq	r5, [r6, #12]
 8013b24:	e7da      	b.n	8013adc <_vfiprintf_r+0x20>
 8013b26:	89ab      	ldrh	r3, [r5, #12]
 8013b28:	0598      	lsls	r0, r3, #22
 8013b2a:	d4ed      	bmi.n	8013b08 <_vfiprintf_r+0x4c>
 8013b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b2e:	f7ff ff67 	bl	8013a00 <__retarget_lock_release_recursive>
 8013b32:	e7e9      	b.n	8013b08 <_vfiprintf_r+0x4c>
 8013b34:	2300      	movs	r3, #0
 8013b36:	9309      	str	r3, [sp, #36]	; 0x24
 8013b38:	2320      	movs	r3, #32
 8013b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b42:	2330      	movs	r3, #48	; 0x30
 8013b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d08 <_vfiprintf_r+0x24c>
 8013b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b4c:	f04f 0901 	mov.w	r9, #1
 8013b50:	4623      	mov	r3, r4
 8013b52:	469a      	mov	sl, r3
 8013b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b58:	b10a      	cbz	r2, 8013b5e <_vfiprintf_r+0xa2>
 8013b5a:	2a25      	cmp	r2, #37	; 0x25
 8013b5c:	d1f9      	bne.n	8013b52 <_vfiprintf_r+0x96>
 8013b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8013b62:	d00b      	beq.n	8013b7c <_vfiprintf_r+0xc0>
 8013b64:	465b      	mov	r3, fp
 8013b66:	4622      	mov	r2, r4
 8013b68:	4629      	mov	r1, r5
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	f7ff ff94 	bl	8013a98 <__sfputs_r>
 8013b70:	3001      	adds	r0, #1
 8013b72:	f000 80aa 	beq.w	8013cca <_vfiprintf_r+0x20e>
 8013b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b78:	445a      	add	r2, fp
 8013b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8013b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	f000 80a2 	beq.w	8013cca <_vfiprintf_r+0x20e>
 8013b86:	2300      	movs	r3, #0
 8013b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b90:	f10a 0a01 	add.w	sl, sl, #1
 8013b94:	9304      	str	r3, [sp, #16]
 8013b96:	9307      	str	r3, [sp, #28]
 8013b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8013b9e:	4654      	mov	r4, sl
 8013ba0:	2205      	movs	r2, #5
 8013ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ba6:	4858      	ldr	r0, [pc, #352]	; (8013d08 <_vfiprintf_r+0x24c>)
 8013ba8:	f7ec fb3a 	bl	8000220 <memchr>
 8013bac:	9a04      	ldr	r2, [sp, #16]
 8013bae:	b9d8      	cbnz	r0, 8013be8 <_vfiprintf_r+0x12c>
 8013bb0:	06d1      	lsls	r1, r2, #27
 8013bb2:	bf44      	itt	mi
 8013bb4:	2320      	movmi	r3, #32
 8013bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bba:	0713      	lsls	r3, r2, #28
 8013bbc:	bf44      	itt	mi
 8013bbe:	232b      	movmi	r3, #43	; 0x2b
 8013bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8013bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8013bca:	d015      	beq.n	8013bf8 <_vfiprintf_r+0x13c>
 8013bcc:	9a07      	ldr	r2, [sp, #28]
 8013bce:	4654      	mov	r4, sl
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	f04f 0c0a 	mov.w	ip, #10
 8013bd6:	4621      	mov	r1, r4
 8013bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bdc:	3b30      	subs	r3, #48	; 0x30
 8013bde:	2b09      	cmp	r3, #9
 8013be0:	d94e      	bls.n	8013c80 <_vfiprintf_r+0x1c4>
 8013be2:	b1b0      	cbz	r0, 8013c12 <_vfiprintf_r+0x156>
 8013be4:	9207      	str	r2, [sp, #28]
 8013be6:	e014      	b.n	8013c12 <_vfiprintf_r+0x156>
 8013be8:	eba0 0308 	sub.w	r3, r0, r8
 8013bec:	fa09 f303 	lsl.w	r3, r9, r3
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	9304      	str	r3, [sp, #16]
 8013bf4:	46a2      	mov	sl, r4
 8013bf6:	e7d2      	b.n	8013b9e <_vfiprintf_r+0xe2>
 8013bf8:	9b03      	ldr	r3, [sp, #12]
 8013bfa:	1d19      	adds	r1, r3, #4
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	9103      	str	r1, [sp, #12]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	bfbb      	ittet	lt
 8013c04:	425b      	neglt	r3, r3
 8013c06:	f042 0202 	orrlt.w	r2, r2, #2
 8013c0a:	9307      	strge	r3, [sp, #28]
 8013c0c:	9307      	strlt	r3, [sp, #28]
 8013c0e:	bfb8      	it	lt
 8013c10:	9204      	strlt	r2, [sp, #16]
 8013c12:	7823      	ldrb	r3, [r4, #0]
 8013c14:	2b2e      	cmp	r3, #46	; 0x2e
 8013c16:	d10c      	bne.n	8013c32 <_vfiprintf_r+0x176>
 8013c18:	7863      	ldrb	r3, [r4, #1]
 8013c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c1c:	d135      	bne.n	8013c8a <_vfiprintf_r+0x1ce>
 8013c1e:	9b03      	ldr	r3, [sp, #12]
 8013c20:	1d1a      	adds	r2, r3, #4
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	9203      	str	r2, [sp, #12]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	bfb8      	it	lt
 8013c2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013c2e:	3402      	adds	r4, #2
 8013c30:	9305      	str	r3, [sp, #20]
 8013c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d18 <_vfiprintf_r+0x25c>
 8013c36:	7821      	ldrb	r1, [r4, #0]
 8013c38:	2203      	movs	r2, #3
 8013c3a:	4650      	mov	r0, sl
 8013c3c:	f7ec faf0 	bl	8000220 <memchr>
 8013c40:	b140      	cbz	r0, 8013c54 <_vfiprintf_r+0x198>
 8013c42:	2340      	movs	r3, #64	; 0x40
 8013c44:	eba0 000a 	sub.w	r0, r0, sl
 8013c48:	fa03 f000 	lsl.w	r0, r3, r0
 8013c4c:	9b04      	ldr	r3, [sp, #16]
 8013c4e:	4303      	orrs	r3, r0
 8013c50:	3401      	adds	r4, #1
 8013c52:	9304      	str	r3, [sp, #16]
 8013c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c58:	482c      	ldr	r0, [pc, #176]	; (8013d0c <_vfiprintf_r+0x250>)
 8013c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c5e:	2206      	movs	r2, #6
 8013c60:	f7ec fade 	bl	8000220 <memchr>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d03f      	beq.n	8013ce8 <_vfiprintf_r+0x22c>
 8013c68:	4b29      	ldr	r3, [pc, #164]	; (8013d10 <_vfiprintf_r+0x254>)
 8013c6a:	bb1b      	cbnz	r3, 8013cb4 <_vfiprintf_r+0x1f8>
 8013c6c:	9b03      	ldr	r3, [sp, #12]
 8013c6e:	3307      	adds	r3, #7
 8013c70:	f023 0307 	bic.w	r3, r3, #7
 8013c74:	3308      	adds	r3, #8
 8013c76:	9303      	str	r3, [sp, #12]
 8013c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c7a:	443b      	add	r3, r7
 8013c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c7e:	e767      	b.n	8013b50 <_vfiprintf_r+0x94>
 8013c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c84:	460c      	mov	r4, r1
 8013c86:	2001      	movs	r0, #1
 8013c88:	e7a5      	b.n	8013bd6 <_vfiprintf_r+0x11a>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	3401      	adds	r4, #1
 8013c8e:	9305      	str	r3, [sp, #20]
 8013c90:	4619      	mov	r1, r3
 8013c92:	f04f 0c0a 	mov.w	ip, #10
 8013c96:	4620      	mov	r0, r4
 8013c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c9c:	3a30      	subs	r2, #48	; 0x30
 8013c9e:	2a09      	cmp	r2, #9
 8013ca0:	d903      	bls.n	8013caa <_vfiprintf_r+0x1ee>
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d0c5      	beq.n	8013c32 <_vfiprintf_r+0x176>
 8013ca6:	9105      	str	r1, [sp, #20]
 8013ca8:	e7c3      	b.n	8013c32 <_vfiprintf_r+0x176>
 8013caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cae:	4604      	mov	r4, r0
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	e7f0      	b.n	8013c96 <_vfiprintf_r+0x1da>
 8013cb4:	ab03      	add	r3, sp, #12
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	462a      	mov	r2, r5
 8013cba:	4b16      	ldr	r3, [pc, #88]	; (8013d14 <_vfiprintf_r+0x258>)
 8013cbc:	a904      	add	r1, sp, #16
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f7fd fedc 	bl	8011a7c <_printf_float>
 8013cc4:	4607      	mov	r7, r0
 8013cc6:	1c78      	adds	r0, r7, #1
 8013cc8:	d1d6      	bne.n	8013c78 <_vfiprintf_r+0x1bc>
 8013cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ccc:	07d9      	lsls	r1, r3, #31
 8013cce:	d405      	bmi.n	8013cdc <_vfiprintf_r+0x220>
 8013cd0:	89ab      	ldrh	r3, [r5, #12]
 8013cd2:	059a      	lsls	r2, r3, #22
 8013cd4:	d402      	bmi.n	8013cdc <_vfiprintf_r+0x220>
 8013cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cd8:	f7ff fe92 	bl	8013a00 <__retarget_lock_release_recursive>
 8013cdc:	89ab      	ldrh	r3, [r5, #12]
 8013cde:	065b      	lsls	r3, r3, #25
 8013ce0:	f53f af12 	bmi.w	8013b08 <_vfiprintf_r+0x4c>
 8013ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ce6:	e711      	b.n	8013b0c <_vfiprintf_r+0x50>
 8013ce8:	ab03      	add	r3, sp, #12
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	462a      	mov	r2, r5
 8013cee:	4b09      	ldr	r3, [pc, #36]	; (8013d14 <_vfiprintf_r+0x258>)
 8013cf0:	a904      	add	r1, sp, #16
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f7fe f966 	bl	8011fc4 <_printf_i>
 8013cf8:	e7e4      	b.n	8013cc4 <_vfiprintf_r+0x208>
 8013cfa:	bf00      	nop
 8013cfc:	08014c04 	.word	0x08014c04
 8013d00:	08014c24 	.word	0x08014c24
 8013d04:	08014be4 	.word	0x08014be4
 8013d08:	08014a8c 	.word	0x08014a8c
 8013d0c:	08014a96 	.word	0x08014a96
 8013d10:	08011a7d 	.word	0x08011a7d
 8013d14:	08013a99 	.word	0x08013a99
 8013d18:	08014a92 	.word	0x08014a92

08013d1c <__swbuf_r>:
 8013d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d1e:	460e      	mov	r6, r1
 8013d20:	4614      	mov	r4, r2
 8013d22:	4605      	mov	r5, r0
 8013d24:	b118      	cbz	r0, 8013d2e <__swbuf_r+0x12>
 8013d26:	6983      	ldr	r3, [r0, #24]
 8013d28:	b90b      	cbnz	r3, 8013d2e <__swbuf_r+0x12>
 8013d2a:	f000 f9e7 	bl	80140fc <__sinit>
 8013d2e:	4b21      	ldr	r3, [pc, #132]	; (8013db4 <__swbuf_r+0x98>)
 8013d30:	429c      	cmp	r4, r3
 8013d32:	d12b      	bne.n	8013d8c <__swbuf_r+0x70>
 8013d34:	686c      	ldr	r4, [r5, #4]
 8013d36:	69a3      	ldr	r3, [r4, #24]
 8013d38:	60a3      	str	r3, [r4, #8]
 8013d3a:	89a3      	ldrh	r3, [r4, #12]
 8013d3c:	071a      	lsls	r2, r3, #28
 8013d3e:	d52f      	bpl.n	8013da0 <__swbuf_r+0x84>
 8013d40:	6923      	ldr	r3, [r4, #16]
 8013d42:	b36b      	cbz	r3, 8013da0 <__swbuf_r+0x84>
 8013d44:	6923      	ldr	r3, [r4, #16]
 8013d46:	6820      	ldr	r0, [r4, #0]
 8013d48:	1ac0      	subs	r0, r0, r3
 8013d4a:	6963      	ldr	r3, [r4, #20]
 8013d4c:	b2f6      	uxtb	r6, r6
 8013d4e:	4283      	cmp	r3, r0
 8013d50:	4637      	mov	r7, r6
 8013d52:	dc04      	bgt.n	8013d5e <__swbuf_r+0x42>
 8013d54:	4621      	mov	r1, r4
 8013d56:	4628      	mov	r0, r5
 8013d58:	f000 f93c 	bl	8013fd4 <_fflush_r>
 8013d5c:	bb30      	cbnz	r0, 8013dac <__swbuf_r+0x90>
 8013d5e:	68a3      	ldr	r3, [r4, #8]
 8013d60:	3b01      	subs	r3, #1
 8013d62:	60a3      	str	r3, [r4, #8]
 8013d64:	6823      	ldr	r3, [r4, #0]
 8013d66:	1c5a      	adds	r2, r3, #1
 8013d68:	6022      	str	r2, [r4, #0]
 8013d6a:	701e      	strb	r6, [r3, #0]
 8013d6c:	6963      	ldr	r3, [r4, #20]
 8013d6e:	3001      	adds	r0, #1
 8013d70:	4283      	cmp	r3, r0
 8013d72:	d004      	beq.n	8013d7e <__swbuf_r+0x62>
 8013d74:	89a3      	ldrh	r3, [r4, #12]
 8013d76:	07db      	lsls	r3, r3, #31
 8013d78:	d506      	bpl.n	8013d88 <__swbuf_r+0x6c>
 8013d7a:	2e0a      	cmp	r6, #10
 8013d7c:	d104      	bne.n	8013d88 <__swbuf_r+0x6c>
 8013d7e:	4621      	mov	r1, r4
 8013d80:	4628      	mov	r0, r5
 8013d82:	f000 f927 	bl	8013fd4 <_fflush_r>
 8013d86:	b988      	cbnz	r0, 8013dac <__swbuf_r+0x90>
 8013d88:	4638      	mov	r0, r7
 8013d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d8c:	4b0a      	ldr	r3, [pc, #40]	; (8013db8 <__swbuf_r+0x9c>)
 8013d8e:	429c      	cmp	r4, r3
 8013d90:	d101      	bne.n	8013d96 <__swbuf_r+0x7a>
 8013d92:	68ac      	ldr	r4, [r5, #8]
 8013d94:	e7cf      	b.n	8013d36 <__swbuf_r+0x1a>
 8013d96:	4b09      	ldr	r3, [pc, #36]	; (8013dbc <__swbuf_r+0xa0>)
 8013d98:	429c      	cmp	r4, r3
 8013d9a:	bf08      	it	eq
 8013d9c:	68ec      	ldreq	r4, [r5, #12]
 8013d9e:	e7ca      	b.n	8013d36 <__swbuf_r+0x1a>
 8013da0:	4621      	mov	r1, r4
 8013da2:	4628      	mov	r0, r5
 8013da4:	f000 f81a 	bl	8013ddc <__swsetup_r>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d0cb      	beq.n	8013d44 <__swbuf_r+0x28>
 8013dac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013db0:	e7ea      	b.n	8013d88 <__swbuf_r+0x6c>
 8013db2:	bf00      	nop
 8013db4:	08014c04 	.word	0x08014c04
 8013db8:	08014c24 	.word	0x08014c24
 8013dbc:	08014be4 	.word	0x08014be4

08013dc0 <__ascii_wctomb>:
 8013dc0:	b149      	cbz	r1, 8013dd6 <__ascii_wctomb+0x16>
 8013dc2:	2aff      	cmp	r2, #255	; 0xff
 8013dc4:	bf85      	ittet	hi
 8013dc6:	238a      	movhi	r3, #138	; 0x8a
 8013dc8:	6003      	strhi	r3, [r0, #0]
 8013dca:	700a      	strbls	r2, [r1, #0]
 8013dcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013dd0:	bf98      	it	ls
 8013dd2:	2001      	movls	r0, #1
 8013dd4:	4770      	bx	lr
 8013dd6:	4608      	mov	r0, r1
 8013dd8:	4770      	bx	lr
	...

08013ddc <__swsetup_r>:
 8013ddc:	4b32      	ldr	r3, [pc, #200]	; (8013ea8 <__swsetup_r+0xcc>)
 8013dde:	b570      	push	{r4, r5, r6, lr}
 8013de0:	681d      	ldr	r5, [r3, #0]
 8013de2:	4606      	mov	r6, r0
 8013de4:	460c      	mov	r4, r1
 8013de6:	b125      	cbz	r5, 8013df2 <__swsetup_r+0x16>
 8013de8:	69ab      	ldr	r3, [r5, #24]
 8013dea:	b913      	cbnz	r3, 8013df2 <__swsetup_r+0x16>
 8013dec:	4628      	mov	r0, r5
 8013dee:	f000 f985 	bl	80140fc <__sinit>
 8013df2:	4b2e      	ldr	r3, [pc, #184]	; (8013eac <__swsetup_r+0xd0>)
 8013df4:	429c      	cmp	r4, r3
 8013df6:	d10f      	bne.n	8013e18 <__swsetup_r+0x3c>
 8013df8:	686c      	ldr	r4, [r5, #4]
 8013dfa:	89a3      	ldrh	r3, [r4, #12]
 8013dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e00:	0719      	lsls	r1, r3, #28
 8013e02:	d42c      	bmi.n	8013e5e <__swsetup_r+0x82>
 8013e04:	06dd      	lsls	r5, r3, #27
 8013e06:	d411      	bmi.n	8013e2c <__swsetup_r+0x50>
 8013e08:	2309      	movs	r3, #9
 8013e0a:	6033      	str	r3, [r6, #0]
 8013e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e10:	81a3      	strh	r3, [r4, #12]
 8013e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e16:	e03e      	b.n	8013e96 <__swsetup_r+0xba>
 8013e18:	4b25      	ldr	r3, [pc, #148]	; (8013eb0 <__swsetup_r+0xd4>)
 8013e1a:	429c      	cmp	r4, r3
 8013e1c:	d101      	bne.n	8013e22 <__swsetup_r+0x46>
 8013e1e:	68ac      	ldr	r4, [r5, #8]
 8013e20:	e7eb      	b.n	8013dfa <__swsetup_r+0x1e>
 8013e22:	4b24      	ldr	r3, [pc, #144]	; (8013eb4 <__swsetup_r+0xd8>)
 8013e24:	429c      	cmp	r4, r3
 8013e26:	bf08      	it	eq
 8013e28:	68ec      	ldreq	r4, [r5, #12]
 8013e2a:	e7e6      	b.n	8013dfa <__swsetup_r+0x1e>
 8013e2c:	0758      	lsls	r0, r3, #29
 8013e2e:	d512      	bpl.n	8013e56 <__swsetup_r+0x7a>
 8013e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e32:	b141      	cbz	r1, 8013e46 <__swsetup_r+0x6a>
 8013e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e38:	4299      	cmp	r1, r3
 8013e3a:	d002      	beq.n	8013e42 <__swsetup_r+0x66>
 8013e3c:	4630      	mov	r0, r6
 8013e3e:	f7fd fcd3 	bl	80117e8 <_free_r>
 8013e42:	2300      	movs	r3, #0
 8013e44:	6363      	str	r3, [r4, #52]	; 0x34
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e4c:	81a3      	strh	r3, [r4, #12]
 8013e4e:	2300      	movs	r3, #0
 8013e50:	6063      	str	r3, [r4, #4]
 8013e52:	6923      	ldr	r3, [r4, #16]
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	89a3      	ldrh	r3, [r4, #12]
 8013e58:	f043 0308 	orr.w	r3, r3, #8
 8013e5c:	81a3      	strh	r3, [r4, #12]
 8013e5e:	6923      	ldr	r3, [r4, #16]
 8013e60:	b94b      	cbnz	r3, 8013e76 <__swsetup_r+0x9a>
 8013e62:	89a3      	ldrh	r3, [r4, #12]
 8013e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e6c:	d003      	beq.n	8013e76 <__swsetup_r+0x9a>
 8013e6e:	4621      	mov	r1, r4
 8013e70:	4630      	mov	r0, r6
 8013e72:	f000 fa05 	bl	8014280 <__smakebuf_r>
 8013e76:	89a0      	ldrh	r0, [r4, #12]
 8013e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e7c:	f010 0301 	ands.w	r3, r0, #1
 8013e80:	d00a      	beq.n	8013e98 <__swsetup_r+0xbc>
 8013e82:	2300      	movs	r3, #0
 8013e84:	60a3      	str	r3, [r4, #8]
 8013e86:	6963      	ldr	r3, [r4, #20]
 8013e88:	425b      	negs	r3, r3
 8013e8a:	61a3      	str	r3, [r4, #24]
 8013e8c:	6923      	ldr	r3, [r4, #16]
 8013e8e:	b943      	cbnz	r3, 8013ea2 <__swsetup_r+0xc6>
 8013e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e94:	d1ba      	bne.n	8013e0c <__swsetup_r+0x30>
 8013e96:	bd70      	pop	{r4, r5, r6, pc}
 8013e98:	0781      	lsls	r1, r0, #30
 8013e9a:	bf58      	it	pl
 8013e9c:	6963      	ldrpl	r3, [r4, #20]
 8013e9e:	60a3      	str	r3, [r4, #8]
 8013ea0:	e7f4      	b.n	8013e8c <__swsetup_r+0xb0>
 8013ea2:	2000      	movs	r0, #0
 8013ea4:	e7f7      	b.n	8013e96 <__swsetup_r+0xba>
 8013ea6:	bf00      	nop
 8013ea8:	20000604 	.word	0x20000604
 8013eac:	08014c04 	.word	0x08014c04
 8013eb0:	08014c24 	.word	0x08014c24
 8013eb4:	08014be4 	.word	0x08014be4

08013eb8 <abort>:
 8013eb8:	b508      	push	{r3, lr}
 8013eba:	2006      	movs	r0, #6
 8013ebc:	f000 fa48 	bl	8014350 <raise>
 8013ec0:	2001      	movs	r0, #1
 8013ec2:	f000 fb4d 	bl	8014560 <_exit>
	...

08013ec8 <__sflush_r>:
 8013ec8:	898a      	ldrh	r2, [r1, #12]
 8013eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ece:	4605      	mov	r5, r0
 8013ed0:	0710      	lsls	r0, r2, #28
 8013ed2:	460c      	mov	r4, r1
 8013ed4:	d458      	bmi.n	8013f88 <__sflush_r+0xc0>
 8013ed6:	684b      	ldr	r3, [r1, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	dc05      	bgt.n	8013ee8 <__sflush_r+0x20>
 8013edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	dc02      	bgt.n	8013ee8 <__sflush_r+0x20>
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013eea:	2e00      	cmp	r6, #0
 8013eec:	d0f9      	beq.n	8013ee2 <__sflush_r+0x1a>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ef4:	682f      	ldr	r7, [r5, #0]
 8013ef6:	602b      	str	r3, [r5, #0]
 8013ef8:	d032      	beq.n	8013f60 <__sflush_r+0x98>
 8013efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	075a      	lsls	r2, r3, #29
 8013f00:	d505      	bpl.n	8013f0e <__sflush_r+0x46>
 8013f02:	6863      	ldr	r3, [r4, #4]
 8013f04:	1ac0      	subs	r0, r0, r3
 8013f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f08:	b10b      	cbz	r3, 8013f0e <__sflush_r+0x46>
 8013f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f0c:	1ac0      	subs	r0, r0, r3
 8013f0e:	2300      	movs	r3, #0
 8013f10:	4602      	mov	r2, r0
 8013f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f14:	6a21      	ldr	r1, [r4, #32]
 8013f16:	4628      	mov	r0, r5
 8013f18:	47b0      	blx	r6
 8013f1a:	1c43      	adds	r3, r0, #1
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	d106      	bne.n	8013f2e <__sflush_r+0x66>
 8013f20:	6829      	ldr	r1, [r5, #0]
 8013f22:	291d      	cmp	r1, #29
 8013f24:	d82c      	bhi.n	8013f80 <__sflush_r+0xb8>
 8013f26:	4a2a      	ldr	r2, [pc, #168]	; (8013fd0 <__sflush_r+0x108>)
 8013f28:	40ca      	lsrs	r2, r1
 8013f2a:	07d6      	lsls	r6, r2, #31
 8013f2c:	d528      	bpl.n	8013f80 <__sflush_r+0xb8>
 8013f2e:	2200      	movs	r2, #0
 8013f30:	6062      	str	r2, [r4, #4]
 8013f32:	04d9      	lsls	r1, r3, #19
 8013f34:	6922      	ldr	r2, [r4, #16]
 8013f36:	6022      	str	r2, [r4, #0]
 8013f38:	d504      	bpl.n	8013f44 <__sflush_r+0x7c>
 8013f3a:	1c42      	adds	r2, r0, #1
 8013f3c:	d101      	bne.n	8013f42 <__sflush_r+0x7a>
 8013f3e:	682b      	ldr	r3, [r5, #0]
 8013f40:	b903      	cbnz	r3, 8013f44 <__sflush_r+0x7c>
 8013f42:	6560      	str	r0, [r4, #84]	; 0x54
 8013f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f46:	602f      	str	r7, [r5, #0]
 8013f48:	2900      	cmp	r1, #0
 8013f4a:	d0ca      	beq.n	8013ee2 <__sflush_r+0x1a>
 8013f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f50:	4299      	cmp	r1, r3
 8013f52:	d002      	beq.n	8013f5a <__sflush_r+0x92>
 8013f54:	4628      	mov	r0, r5
 8013f56:	f7fd fc47 	bl	80117e8 <_free_r>
 8013f5a:	2000      	movs	r0, #0
 8013f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8013f5e:	e7c1      	b.n	8013ee4 <__sflush_r+0x1c>
 8013f60:	6a21      	ldr	r1, [r4, #32]
 8013f62:	2301      	movs	r3, #1
 8013f64:	4628      	mov	r0, r5
 8013f66:	47b0      	blx	r6
 8013f68:	1c41      	adds	r1, r0, #1
 8013f6a:	d1c7      	bne.n	8013efc <__sflush_r+0x34>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d0c4      	beq.n	8013efc <__sflush_r+0x34>
 8013f72:	2b1d      	cmp	r3, #29
 8013f74:	d001      	beq.n	8013f7a <__sflush_r+0xb2>
 8013f76:	2b16      	cmp	r3, #22
 8013f78:	d101      	bne.n	8013f7e <__sflush_r+0xb6>
 8013f7a:	602f      	str	r7, [r5, #0]
 8013f7c:	e7b1      	b.n	8013ee2 <__sflush_r+0x1a>
 8013f7e:	89a3      	ldrh	r3, [r4, #12]
 8013f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f84:	81a3      	strh	r3, [r4, #12]
 8013f86:	e7ad      	b.n	8013ee4 <__sflush_r+0x1c>
 8013f88:	690f      	ldr	r7, [r1, #16]
 8013f8a:	2f00      	cmp	r7, #0
 8013f8c:	d0a9      	beq.n	8013ee2 <__sflush_r+0x1a>
 8013f8e:	0793      	lsls	r3, r2, #30
 8013f90:	680e      	ldr	r6, [r1, #0]
 8013f92:	bf08      	it	eq
 8013f94:	694b      	ldreq	r3, [r1, #20]
 8013f96:	600f      	str	r7, [r1, #0]
 8013f98:	bf18      	it	ne
 8013f9a:	2300      	movne	r3, #0
 8013f9c:	eba6 0807 	sub.w	r8, r6, r7
 8013fa0:	608b      	str	r3, [r1, #8]
 8013fa2:	f1b8 0f00 	cmp.w	r8, #0
 8013fa6:	dd9c      	ble.n	8013ee2 <__sflush_r+0x1a>
 8013fa8:	6a21      	ldr	r1, [r4, #32]
 8013faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013fac:	4643      	mov	r3, r8
 8013fae:	463a      	mov	r2, r7
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	47b0      	blx	r6
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	dc06      	bgt.n	8013fc6 <__sflush_r+0xfe>
 8013fb8:	89a3      	ldrh	r3, [r4, #12]
 8013fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fbe:	81a3      	strh	r3, [r4, #12]
 8013fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fc4:	e78e      	b.n	8013ee4 <__sflush_r+0x1c>
 8013fc6:	4407      	add	r7, r0
 8013fc8:	eba8 0800 	sub.w	r8, r8, r0
 8013fcc:	e7e9      	b.n	8013fa2 <__sflush_r+0xda>
 8013fce:	bf00      	nop
 8013fd0:	20400001 	.word	0x20400001

08013fd4 <_fflush_r>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	690b      	ldr	r3, [r1, #16]
 8013fd8:	4605      	mov	r5, r0
 8013fda:	460c      	mov	r4, r1
 8013fdc:	b913      	cbnz	r3, 8013fe4 <_fflush_r+0x10>
 8013fde:	2500      	movs	r5, #0
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	bd38      	pop	{r3, r4, r5, pc}
 8013fe4:	b118      	cbz	r0, 8013fee <_fflush_r+0x1a>
 8013fe6:	6983      	ldr	r3, [r0, #24]
 8013fe8:	b90b      	cbnz	r3, 8013fee <_fflush_r+0x1a>
 8013fea:	f000 f887 	bl	80140fc <__sinit>
 8013fee:	4b14      	ldr	r3, [pc, #80]	; (8014040 <_fflush_r+0x6c>)
 8013ff0:	429c      	cmp	r4, r3
 8013ff2:	d11b      	bne.n	801402c <_fflush_r+0x58>
 8013ff4:	686c      	ldr	r4, [r5, #4]
 8013ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d0ef      	beq.n	8013fde <_fflush_r+0xa>
 8013ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014000:	07d0      	lsls	r0, r2, #31
 8014002:	d404      	bmi.n	801400e <_fflush_r+0x3a>
 8014004:	0599      	lsls	r1, r3, #22
 8014006:	d402      	bmi.n	801400e <_fflush_r+0x3a>
 8014008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801400a:	f7ff fcf8 	bl	80139fe <__retarget_lock_acquire_recursive>
 801400e:	4628      	mov	r0, r5
 8014010:	4621      	mov	r1, r4
 8014012:	f7ff ff59 	bl	8013ec8 <__sflush_r>
 8014016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014018:	07da      	lsls	r2, r3, #31
 801401a:	4605      	mov	r5, r0
 801401c:	d4e0      	bmi.n	8013fe0 <_fflush_r+0xc>
 801401e:	89a3      	ldrh	r3, [r4, #12]
 8014020:	059b      	lsls	r3, r3, #22
 8014022:	d4dd      	bmi.n	8013fe0 <_fflush_r+0xc>
 8014024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014026:	f7ff fceb 	bl	8013a00 <__retarget_lock_release_recursive>
 801402a:	e7d9      	b.n	8013fe0 <_fflush_r+0xc>
 801402c:	4b05      	ldr	r3, [pc, #20]	; (8014044 <_fflush_r+0x70>)
 801402e:	429c      	cmp	r4, r3
 8014030:	d101      	bne.n	8014036 <_fflush_r+0x62>
 8014032:	68ac      	ldr	r4, [r5, #8]
 8014034:	e7df      	b.n	8013ff6 <_fflush_r+0x22>
 8014036:	4b04      	ldr	r3, [pc, #16]	; (8014048 <_fflush_r+0x74>)
 8014038:	429c      	cmp	r4, r3
 801403a:	bf08      	it	eq
 801403c:	68ec      	ldreq	r4, [r5, #12]
 801403e:	e7da      	b.n	8013ff6 <_fflush_r+0x22>
 8014040:	08014c04 	.word	0x08014c04
 8014044:	08014c24 	.word	0x08014c24
 8014048:	08014be4 	.word	0x08014be4

0801404c <std>:
 801404c:	2300      	movs	r3, #0
 801404e:	b510      	push	{r4, lr}
 8014050:	4604      	mov	r4, r0
 8014052:	e9c0 3300 	strd	r3, r3, [r0]
 8014056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801405a:	6083      	str	r3, [r0, #8]
 801405c:	8181      	strh	r1, [r0, #12]
 801405e:	6643      	str	r3, [r0, #100]	; 0x64
 8014060:	81c2      	strh	r2, [r0, #14]
 8014062:	6183      	str	r3, [r0, #24]
 8014064:	4619      	mov	r1, r3
 8014066:	2208      	movs	r2, #8
 8014068:	305c      	adds	r0, #92	; 0x5c
 801406a:	f7fd fbb5 	bl	80117d8 <memset>
 801406e:	4b05      	ldr	r3, [pc, #20]	; (8014084 <std+0x38>)
 8014070:	6263      	str	r3, [r4, #36]	; 0x24
 8014072:	4b05      	ldr	r3, [pc, #20]	; (8014088 <std+0x3c>)
 8014074:	62a3      	str	r3, [r4, #40]	; 0x28
 8014076:	4b05      	ldr	r3, [pc, #20]	; (801408c <std+0x40>)
 8014078:	62e3      	str	r3, [r4, #44]	; 0x2c
 801407a:	4b05      	ldr	r3, [pc, #20]	; (8014090 <std+0x44>)
 801407c:	6224      	str	r4, [r4, #32]
 801407e:	6323      	str	r3, [r4, #48]	; 0x30
 8014080:	bd10      	pop	{r4, pc}
 8014082:	bf00      	nop
 8014084:	08014389 	.word	0x08014389
 8014088:	080143ab 	.word	0x080143ab
 801408c:	080143e3 	.word	0x080143e3
 8014090:	08014407 	.word	0x08014407

08014094 <_cleanup_r>:
 8014094:	4901      	ldr	r1, [pc, #4]	; (801409c <_cleanup_r+0x8>)
 8014096:	f000 b8af 	b.w	80141f8 <_fwalk_reent>
 801409a:	bf00      	nop
 801409c:	08013fd5 	.word	0x08013fd5

080140a0 <__sfmoreglue>:
 80140a0:	b570      	push	{r4, r5, r6, lr}
 80140a2:	1e4a      	subs	r2, r1, #1
 80140a4:	2568      	movs	r5, #104	; 0x68
 80140a6:	4355      	muls	r5, r2
 80140a8:	460e      	mov	r6, r1
 80140aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140ae:	f7fd fbeb 	bl	8011888 <_malloc_r>
 80140b2:	4604      	mov	r4, r0
 80140b4:	b140      	cbz	r0, 80140c8 <__sfmoreglue+0x28>
 80140b6:	2100      	movs	r1, #0
 80140b8:	e9c0 1600 	strd	r1, r6, [r0]
 80140bc:	300c      	adds	r0, #12
 80140be:	60a0      	str	r0, [r4, #8]
 80140c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140c4:	f7fd fb88 	bl	80117d8 <memset>
 80140c8:	4620      	mov	r0, r4
 80140ca:	bd70      	pop	{r4, r5, r6, pc}

080140cc <__sfp_lock_acquire>:
 80140cc:	4801      	ldr	r0, [pc, #4]	; (80140d4 <__sfp_lock_acquire+0x8>)
 80140ce:	f7ff bc96 	b.w	80139fe <__retarget_lock_acquire_recursive>
 80140d2:	bf00      	nop
 80140d4:	20001bb0 	.word	0x20001bb0

080140d8 <__sfp_lock_release>:
 80140d8:	4801      	ldr	r0, [pc, #4]	; (80140e0 <__sfp_lock_release+0x8>)
 80140da:	f7ff bc91 	b.w	8013a00 <__retarget_lock_release_recursive>
 80140de:	bf00      	nop
 80140e0:	20001bb0 	.word	0x20001bb0

080140e4 <__sinit_lock_acquire>:
 80140e4:	4801      	ldr	r0, [pc, #4]	; (80140ec <__sinit_lock_acquire+0x8>)
 80140e6:	f7ff bc8a 	b.w	80139fe <__retarget_lock_acquire_recursive>
 80140ea:	bf00      	nop
 80140ec:	20001bab 	.word	0x20001bab

080140f0 <__sinit_lock_release>:
 80140f0:	4801      	ldr	r0, [pc, #4]	; (80140f8 <__sinit_lock_release+0x8>)
 80140f2:	f7ff bc85 	b.w	8013a00 <__retarget_lock_release_recursive>
 80140f6:	bf00      	nop
 80140f8:	20001bab 	.word	0x20001bab

080140fc <__sinit>:
 80140fc:	b510      	push	{r4, lr}
 80140fe:	4604      	mov	r4, r0
 8014100:	f7ff fff0 	bl	80140e4 <__sinit_lock_acquire>
 8014104:	69a3      	ldr	r3, [r4, #24]
 8014106:	b11b      	cbz	r3, 8014110 <__sinit+0x14>
 8014108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801410c:	f7ff bff0 	b.w	80140f0 <__sinit_lock_release>
 8014110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014114:	6523      	str	r3, [r4, #80]	; 0x50
 8014116:	4b13      	ldr	r3, [pc, #76]	; (8014164 <__sinit+0x68>)
 8014118:	4a13      	ldr	r2, [pc, #76]	; (8014168 <__sinit+0x6c>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	62a2      	str	r2, [r4, #40]	; 0x28
 801411e:	42a3      	cmp	r3, r4
 8014120:	bf04      	itt	eq
 8014122:	2301      	moveq	r3, #1
 8014124:	61a3      	streq	r3, [r4, #24]
 8014126:	4620      	mov	r0, r4
 8014128:	f000 f820 	bl	801416c <__sfp>
 801412c:	6060      	str	r0, [r4, #4]
 801412e:	4620      	mov	r0, r4
 8014130:	f000 f81c 	bl	801416c <__sfp>
 8014134:	60a0      	str	r0, [r4, #8]
 8014136:	4620      	mov	r0, r4
 8014138:	f000 f818 	bl	801416c <__sfp>
 801413c:	2200      	movs	r2, #0
 801413e:	60e0      	str	r0, [r4, #12]
 8014140:	2104      	movs	r1, #4
 8014142:	6860      	ldr	r0, [r4, #4]
 8014144:	f7ff ff82 	bl	801404c <std>
 8014148:	68a0      	ldr	r0, [r4, #8]
 801414a:	2201      	movs	r2, #1
 801414c:	2109      	movs	r1, #9
 801414e:	f7ff ff7d 	bl	801404c <std>
 8014152:	68e0      	ldr	r0, [r4, #12]
 8014154:	2202      	movs	r2, #2
 8014156:	2112      	movs	r1, #18
 8014158:	f7ff ff78 	bl	801404c <std>
 801415c:	2301      	movs	r3, #1
 801415e:	61a3      	str	r3, [r4, #24]
 8014160:	e7d2      	b.n	8014108 <__sinit+0xc>
 8014162:	bf00      	nop
 8014164:	08014864 	.word	0x08014864
 8014168:	08014095 	.word	0x08014095

0801416c <__sfp>:
 801416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416e:	4607      	mov	r7, r0
 8014170:	f7ff ffac 	bl	80140cc <__sfp_lock_acquire>
 8014174:	4b1e      	ldr	r3, [pc, #120]	; (80141f0 <__sfp+0x84>)
 8014176:	681e      	ldr	r6, [r3, #0]
 8014178:	69b3      	ldr	r3, [r6, #24]
 801417a:	b913      	cbnz	r3, 8014182 <__sfp+0x16>
 801417c:	4630      	mov	r0, r6
 801417e:	f7ff ffbd 	bl	80140fc <__sinit>
 8014182:	3648      	adds	r6, #72	; 0x48
 8014184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014188:	3b01      	subs	r3, #1
 801418a:	d503      	bpl.n	8014194 <__sfp+0x28>
 801418c:	6833      	ldr	r3, [r6, #0]
 801418e:	b30b      	cbz	r3, 80141d4 <__sfp+0x68>
 8014190:	6836      	ldr	r6, [r6, #0]
 8014192:	e7f7      	b.n	8014184 <__sfp+0x18>
 8014194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014198:	b9d5      	cbnz	r5, 80141d0 <__sfp+0x64>
 801419a:	4b16      	ldr	r3, [pc, #88]	; (80141f4 <__sfp+0x88>)
 801419c:	60e3      	str	r3, [r4, #12]
 801419e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141a2:	6665      	str	r5, [r4, #100]	; 0x64
 80141a4:	f7ff fc2a 	bl	80139fc <__retarget_lock_init_recursive>
 80141a8:	f7ff ff96 	bl	80140d8 <__sfp_lock_release>
 80141ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80141b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80141b4:	6025      	str	r5, [r4, #0]
 80141b6:	61a5      	str	r5, [r4, #24]
 80141b8:	2208      	movs	r2, #8
 80141ba:	4629      	mov	r1, r5
 80141bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80141c0:	f7fd fb0a 	bl	80117d8 <memset>
 80141c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80141c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80141cc:	4620      	mov	r0, r4
 80141ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141d0:	3468      	adds	r4, #104	; 0x68
 80141d2:	e7d9      	b.n	8014188 <__sfp+0x1c>
 80141d4:	2104      	movs	r1, #4
 80141d6:	4638      	mov	r0, r7
 80141d8:	f7ff ff62 	bl	80140a0 <__sfmoreglue>
 80141dc:	4604      	mov	r4, r0
 80141de:	6030      	str	r0, [r6, #0]
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d1d5      	bne.n	8014190 <__sfp+0x24>
 80141e4:	f7ff ff78 	bl	80140d8 <__sfp_lock_release>
 80141e8:	230c      	movs	r3, #12
 80141ea:	603b      	str	r3, [r7, #0]
 80141ec:	e7ee      	b.n	80141cc <__sfp+0x60>
 80141ee:	bf00      	nop
 80141f0:	08014864 	.word	0x08014864
 80141f4:	ffff0001 	.word	0xffff0001

080141f8 <_fwalk_reent>:
 80141f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141fc:	4606      	mov	r6, r0
 80141fe:	4688      	mov	r8, r1
 8014200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014204:	2700      	movs	r7, #0
 8014206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801420a:	f1b9 0901 	subs.w	r9, r9, #1
 801420e:	d505      	bpl.n	801421c <_fwalk_reent+0x24>
 8014210:	6824      	ldr	r4, [r4, #0]
 8014212:	2c00      	cmp	r4, #0
 8014214:	d1f7      	bne.n	8014206 <_fwalk_reent+0xe>
 8014216:	4638      	mov	r0, r7
 8014218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801421c:	89ab      	ldrh	r3, [r5, #12]
 801421e:	2b01      	cmp	r3, #1
 8014220:	d907      	bls.n	8014232 <_fwalk_reent+0x3a>
 8014222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014226:	3301      	adds	r3, #1
 8014228:	d003      	beq.n	8014232 <_fwalk_reent+0x3a>
 801422a:	4629      	mov	r1, r5
 801422c:	4630      	mov	r0, r6
 801422e:	47c0      	blx	r8
 8014230:	4307      	orrs	r7, r0
 8014232:	3568      	adds	r5, #104	; 0x68
 8014234:	e7e9      	b.n	801420a <_fwalk_reent+0x12>

08014236 <__swhatbuf_r>:
 8014236:	b570      	push	{r4, r5, r6, lr}
 8014238:	460e      	mov	r6, r1
 801423a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801423e:	2900      	cmp	r1, #0
 8014240:	b096      	sub	sp, #88	; 0x58
 8014242:	4614      	mov	r4, r2
 8014244:	461d      	mov	r5, r3
 8014246:	da07      	bge.n	8014258 <__swhatbuf_r+0x22>
 8014248:	2300      	movs	r3, #0
 801424a:	602b      	str	r3, [r5, #0]
 801424c:	89b3      	ldrh	r3, [r6, #12]
 801424e:	061a      	lsls	r2, r3, #24
 8014250:	d410      	bmi.n	8014274 <__swhatbuf_r+0x3e>
 8014252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014256:	e00e      	b.n	8014276 <__swhatbuf_r+0x40>
 8014258:	466a      	mov	r2, sp
 801425a:	f000 f8fb 	bl	8014454 <_fstat_r>
 801425e:	2800      	cmp	r0, #0
 8014260:	dbf2      	blt.n	8014248 <__swhatbuf_r+0x12>
 8014262:	9a01      	ldr	r2, [sp, #4]
 8014264:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014268:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801426c:	425a      	negs	r2, r3
 801426e:	415a      	adcs	r2, r3
 8014270:	602a      	str	r2, [r5, #0]
 8014272:	e7ee      	b.n	8014252 <__swhatbuf_r+0x1c>
 8014274:	2340      	movs	r3, #64	; 0x40
 8014276:	2000      	movs	r0, #0
 8014278:	6023      	str	r3, [r4, #0]
 801427a:	b016      	add	sp, #88	; 0x58
 801427c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014280 <__smakebuf_r>:
 8014280:	898b      	ldrh	r3, [r1, #12]
 8014282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014284:	079d      	lsls	r5, r3, #30
 8014286:	4606      	mov	r6, r0
 8014288:	460c      	mov	r4, r1
 801428a:	d507      	bpl.n	801429c <__smakebuf_r+0x1c>
 801428c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014290:	6023      	str	r3, [r4, #0]
 8014292:	6123      	str	r3, [r4, #16]
 8014294:	2301      	movs	r3, #1
 8014296:	6163      	str	r3, [r4, #20]
 8014298:	b002      	add	sp, #8
 801429a:	bd70      	pop	{r4, r5, r6, pc}
 801429c:	ab01      	add	r3, sp, #4
 801429e:	466a      	mov	r2, sp
 80142a0:	f7ff ffc9 	bl	8014236 <__swhatbuf_r>
 80142a4:	9900      	ldr	r1, [sp, #0]
 80142a6:	4605      	mov	r5, r0
 80142a8:	4630      	mov	r0, r6
 80142aa:	f7fd faed 	bl	8011888 <_malloc_r>
 80142ae:	b948      	cbnz	r0, 80142c4 <__smakebuf_r+0x44>
 80142b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142b4:	059a      	lsls	r2, r3, #22
 80142b6:	d4ef      	bmi.n	8014298 <__smakebuf_r+0x18>
 80142b8:	f023 0303 	bic.w	r3, r3, #3
 80142bc:	f043 0302 	orr.w	r3, r3, #2
 80142c0:	81a3      	strh	r3, [r4, #12]
 80142c2:	e7e3      	b.n	801428c <__smakebuf_r+0xc>
 80142c4:	4b0d      	ldr	r3, [pc, #52]	; (80142fc <__smakebuf_r+0x7c>)
 80142c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80142c8:	89a3      	ldrh	r3, [r4, #12]
 80142ca:	6020      	str	r0, [r4, #0]
 80142cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142d0:	81a3      	strh	r3, [r4, #12]
 80142d2:	9b00      	ldr	r3, [sp, #0]
 80142d4:	6163      	str	r3, [r4, #20]
 80142d6:	9b01      	ldr	r3, [sp, #4]
 80142d8:	6120      	str	r0, [r4, #16]
 80142da:	b15b      	cbz	r3, 80142f4 <__smakebuf_r+0x74>
 80142dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142e0:	4630      	mov	r0, r6
 80142e2:	f000 f8c9 	bl	8014478 <_isatty_r>
 80142e6:	b128      	cbz	r0, 80142f4 <__smakebuf_r+0x74>
 80142e8:	89a3      	ldrh	r3, [r4, #12]
 80142ea:	f023 0303 	bic.w	r3, r3, #3
 80142ee:	f043 0301 	orr.w	r3, r3, #1
 80142f2:	81a3      	strh	r3, [r4, #12]
 80142f4:	89a0      	ldrh	r0, [r4, #12]
 80142f6:	4305      	orrs	r5, r0
 80142f8:	81a5      	strh	r5, [r4, #12]
 80142fa:	e7cd      	b.n	8014298 <__smakebuf_r+0x18>
 80142fc:	08014095 	.word	0x08014095

08014300 <_raise_r>:
 8014300:	291f      	cmp	r1, #31
 8014302:	b538      	push	{r3, r4, r5, lr}
 8014304:	4604      	mov	r4, r0
 8014306:	460d      	mov	r5, r1
 8014308:	d904      	bls.n	8014314 <_raise_r+0x14>
 801430a:	2316      	movs	r3, #22
 801430c:	6003      	str	r3, [r0, #0]
 801430e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014312:	bd38      	pop	{r3, r4, r5, pc}
 8014314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014316:	b112      	cbz	r2, 801431e <_raise_r+0x1e>
 8014318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801431c:	b94b      	cbnz	r3, 8014332 <_raise_r+0x32>
 801431e:	4620      	mov	r0, r4
 8014320:	f000 f830 	bl	8014384 <_getpid_r>
 8014324:	462a      	mov	r2, r5
 8014326:	4601      	mov	r1, r0
 8014328:	4620      	mov	r0, r4
 801432a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801432e:	f000 b817 	b.w	8014360 <_kill_r>
 8014332:	2b01      	cmp	r3, #1
 8014334:	d00a      	beq.n	801434c <_raise_r+0x4c>
 8014336:	1c59      	adds	r1, r3, #1
 8014338:	d103      	bne.n	8014342 <_raise_r+0x42>
 801433a:	2316      	movs	r3, #22
 801433c:	6003      	str	r3, [r0, #0]
 801433e:	2001      	movs	r0, #1
 8014340:	e7e7      	b.n	8014312 <_raise_r+0x12>
 8014342:	2400      	movs	r4, #0
 8014344:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014348:	4628      	mov	r0, r5
 801434a:	4798      	blx	r3
 801434c:	2000      	movs	r0, #0
 801434e:	e7e0      	b.n	8014312 <_raise_r+0x12>

08014350 <raise>:
 8014350:	4b02      	ldr	r3, [pc, #8]	; (801435c <raise+0xc>)
 8014352:	4601      	mov	r1, r0
 8014354:	6818      	ldr	r0, [r3, #0]
 8014356:	f7ff bfd3 	b.w	8014300 <_raise_r>
 801435a:	bf00      	nop
 801435c:	20000604 	.word	0x20000604

08014360 <_kill_r>:
 8014360:	b538      	push	{r3, r4, r5, lr}
 8014362:	4d07      	ldr	r5, [pc, #28]	; (8014380 <_kill_r+0x20>)
 8014364:	2300      	movs	r3, #0
 8014366:	4604      	mov	r4, r0
 8014368:	4608      	mov	r0, r1
 801436a:	4611      	mov	r1, r2
 801436c:	602b      	str	r3, [r5, #0]
 801436e:	f000 f8d7 	bl	8014520 <_kill>
 8014372:	1c43      	adds	r3, r0, #1
 8014374:	d102      	bne.n	801437c <_kill_r+0x1c>
 8014376:	682b      	ldr	r3, [r5, #0]
 8014378:	b103      	cbz	r3, 801437c <_kill_r+0x1c>
 801437a:	6023      	str	r3, [r4, #0]
 801437c:	bd38      	pop	{r3, r4, r5, pc}
 801437e:	bf00      	nop
 8014380:	20001ba4 	.word	0x20001ba4

08014384 <_getpid_r>:
 8014384:	f000 b8bc 	b.w	8014500 <_getpid>

08014388 <__sread>:
 8014388:	b510      	push	{r4, lr}
 801438a:	460c      	mov	r4, r1
 801438c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014390:	f000 f894 	bl	80144bc <_read_r>
 8014394:	2800      	cmp	r0, #0
 8014396:	bfab      	itete	ge
 8014398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801439a:	89a3      	ldrhlt	r3, [r4, #12]
 801439c:	181b      	addge	r3, r3, r0
 801439e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143a2:	bfac      	ite	ge
 80143a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80143a6:	81a3      	strhlt	r3, [r4, #12]
 80143a8:	bd10      	pop	{r4, pc}

080143aa <__swrite>:
 80143aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ae:	461f      	mov	r7, r3
 80143b0:	898b      	ldrh	r3, [r1, #12]
 80143b2:	05db      	lsls	r3, r3, #23
 80143b4:	4605      	mov	r5, r0
 80143b6:	460c      	mov	r4, r1
 80143b8:	4616      	mov	r6, r2
 80143ba:	d505      	bpl.n	80143c8 <__swrite+0x1e>
 80143bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143c0:	2302      	movs	r3, #2
 80143c2:	2200      	movs	r2, #0
 80143c4:	f000 f868 	bl	8014498 <_lseek_r>
 80143c8:	89a3      	ldrh	r3, [r4, #12]
 80143ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80143d2:	81a3      	strh	r3, [r4, #12]
 80143d4:	4632      	mov	r2, r6
 80143d6:	463b      	mov	r3, r7
 80143d8:	4628      	mov	r0, r5
 80143da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143de:	f000 b817 	b.w	8014410 <_write_r>

080143e2 <__sseek>:
 80143e2:	b510      	push	{r4, lr}
 80143e4:	460c      	mov	r4, r1
 80143e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143ea:	f000 f855 	bl	8014498 <_lseek_r>
 80143ee:	1c43      	adds	r3, r0, #1
 80143f0:	89a3      	ldrh	r3, [r4, #12]
 80143f2:	bf15      	itete	ne
 80143f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80143f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80143fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80143fe:	81a3      	strheq	r3, [r4, #12]
 8014400:	bf18      	it	ne
 8014402:	81a3      	strhne	r3, [r4, #12]
 8014404:	bd10      	pop	{r4, pc}

08014406 <__sclose>:
 8014406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801440a:	f000 b813 	b.w	8014434 <_close_r>
	...

08014410 <_write_r>:
 8014410:	b538      	push	{r3, r4, r5, lr}
 8014412:	4d07      	ldr	r5, [pc, #28]	; (8014430 <_write_r+0x20>)
 8014414:	4604      	mov	r4, r0
 8014416:	4608      	mov	r0, r1
 8014418:	4611      	mov	r1, r2
 801441a:	2200      	movs	r2, #0
 801441c:	602a      	str	r2, [r5, #0]
 801441e:	461a      	mov	r2, r3
 8014420:	f000 f896 	bl	8014550 <_write>
 8014424:	1c43      	adds	r3, r0, #1
 8014426:	d102      	bne.n	801442e <_write_r+0x1e>
 8014428:	682b      	ldr	r3, [r5, #0]
 801442a:	b103      	cbz	r3, 801442e <_write_r+0x1e>
 801442c:	6023      	str	r3, [r4, #0]
 801442e:	bd38      	pop	{r3, r4, r5, pc}
 8014430:	20001ba4 	.word	0x20001ba4

08014434 <_close_r>:
 8014434:	b538      	push	{r3, r4, r5, lr}
 8014436:	4d06      	ldr	r5, [pc, #24]	; (8014450 <_close_r+0x1c>)
 8014438:	2300      	movs	r3, #0
 801443a:	4604      	mov	r4, r0
 801443c:	4608      	mov	r0, r1
 801443e:	602b      	str	r3, [r5, #0]
 8014440:	f000 f84e 	bl	80144e0 <_close>
 8014444:	1c43      	adds	r3, r0, #1
 8014446:	d102      	bne.n	801444e <_close_r+0x1a>
 8014448:	682b      	ldr	r3, [r5, #0]
 801444a:	b103      	cbz	r3, 801444e <_close_r+0x1a>
 801444c:	6023      	str	r3, [r4, #0]
 801444e:	bd38      	pop	{r3, r4, r5, pc}
 8014450:	20001ba4 	.word	0x20001ba4

08014454 <_fstat_r>:
 8014454:	b538      	push	{r3, r4, r5, lr}
 8014456:	4d07      	ldr	r5, [pc, #28]	; (8014474 <_fstat_r+0x20>)
 8014458:	2300      	movs	r3, #0
 801445a:	4604      	mov	r4, r0
 801445c:	4608      	mov	r0, r1
 801445e:	4611      	mov	r1, r2
 8014460:	602b      	str	r3, [r5, #0]
 8014462:	f000 f845 	bl	80144f0 <_fstat>
 8014466:	1c43      	adds	r3, r0, #1
 8014468:	d102      	bne.n	8014470 <_fstat_r+0x1c>
 801446a:	682b      	ldr	r3, [r5, #0]
 801446c:	b103      	cbz	r3, 8014470 <_fstat_r+0x1c>
 801446e:	6023      	str	r3, [r4, #0]
 8014470:	bd38      	pop	{r3, r4, r5, pc}
 8014472:	bf00      	nop
 8014474:	20001ba4 	.word	0x20001ba4

08014478 <_isatty_r>:
 8014478:	b538      	push	{r3, r4, r5, lr}
 801447a:	4d06      	ldr	r5, [pc, #24]	; (8014494 <_isatty_r+0x1c>)
 801447c:	2300      	movs	r3, #0
 801447e:	4604      	mov	r4, r0
 8014480:	4608      	mov	r0, r1
 8014482:	602b      	str	r3, [r5, #0]
 8014484:	f000 f844 	bl	8014510 <_isatty>
 8014488:	1c43      	adds	r3, r0, #1
 801448a:	d102      	bne.n	8014492 <_isatty_r+0x1a>
 801448c:	682b      	ldr	r3, [r5, #0]
 801448e:	b103      	cbz	r3, 8014492 <_isatty_r+0x1a>
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	bd38      	pop	{r3, r4, r5, pc}
 8014494:	20001ba4 	.word	0x20001ba4

08014498 <_lseek_r>:
 8014498:	b538      	push	{r3, r4, r5, lr}
 801449a:	4d07      	ldr	r5, [pc, #28]	; (80144b8 <_lseek_r+0x20>)
 801449c:	4604      	mov	r4, r0
 801449e:	4608      	mov	r0, r1
 80144a0:	4611      	mov	r1, r2
 80144a2:	2200      	movs	r2, #0
 80144a4:	602a      	str	r2, [r5, #0]
 80144a6:	461a      	mov	r2, r3
 80144a8:	f000 f842 	bl	8014530 <_lseek>
 80144ac:	1c43      	adds	r3, r0, #1
 80144ae:	d102      	bne.n	80144b6 <_lseek_r+0x1e>
 80144b0:	682b      	ldr	r3, [r5, #0]
 80144b2:	b103      	cbz	r3, 80144b6 <_lseek_r+0x1e>
 80144b4:	6023      	str	r3, [r4, #0]
 80144b6:	bd38      	pop	{r3, r4, r5, pc}
 80144b8:	20001ba4 	.word	0x20001ba4

080144bc <_read_r>:
 80144bc:	b538      	push	{r3, r4, r5, lr}
 80144be:	4d07      	ldr	r5, [pc, #28]	; (80144dc <_read_r+0x20>)
 80144c0:	4604      	mov	r4, r0
 80144c2:	4608      	mov	r0, r1
 80144c4:	4611      	mov	r1, r2
 80144c6:	2200      	movs	r2, #0
 80144c8:	602a      	str	r2, [r5, #0]
 80144ca:	461a      	mov	r2, r3
 80144cc:	f000 f838 	bl	8014540 <_read>
 80144d0:	1c43      	adds	r3, r0, #1
 80144d2:	d102      	bne.n	80144da <_read_r+0x1e>
 80144d4:	682b      	ldr	r3, [r5, #0]
 80144d6:	b103      	cbz	r3, 80144da <_read_r+0x1e>
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	bd38      	pop	{r3, r4, r5, pc}
 80144dc:	20001ba4 	.word	0x20001ba4

080144e0 <_close>:
 80144e0:	4b02      	ldr	r3, [pc, #8]	; (80144ec <_close+0xc>)
 80144e2:	2258      	movs	r2, #88	; 0x58
 80144e4:	601a      	str	r2, [r3, #0]
 80144e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144ea:	4770      	bx	lr
 80144ec:	20001ba4 	.word	0x20001ba4

080144f0 <_fstat>:
 80144f0:	4b02      	ldr	r3, [pc, #8]	; (80144fc <_fstat+0xc>)
 80144f2:	2258      	movs	r2, #88	; 0x58
 80144f4:	601a      	str	r2, [r3, #0]
 80144f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144fa:	4770      	bx	lr
 80144fc:	20001ba4 	.word	0x20001ba4

08014500 <_getpid>:
 8014500:	4b02      	ldr	r3, [pc, #8]	; (801450c <_getpid+0xc>)
 8014502:	2258      	movs	r2, #88	; 0x58
 8014504:	601a      	str	r2, [r3, #0]
 8014506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801450a:	4770      	bx	lr
 801450c:	20001ba4 	.word	0x20001ba4

08014510 <_isatty>:
 8014510:	4b02      	ldr	r3, [pc, #8]	; (801451c <_isatty+0xc>)
 8014512:	2258      	movs	r2, #88	; 0x58
 8014514:	601a      	str	r2, [r3, #0]
 8014516:	2000      	movs	r0, #0
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	20001ba4 	.word	0x20001ba4

08014520 <_kill>:
 8014520:	4b02      	ldr	r3, [pc, #8]	; (801452c <_kill+0xc>)
 8014522:	2258      	movs	r2, #88	; 0x58
 8014524:	601a      	str	r2, [r3, #0]
 8014526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801452a:	4770      	bx	lr
 801452c:	20001ba4 	.word	0x20001ba4

08014530 <_lseek>:
 8014530:	4b02      	ldr	r3, [pc, #8]	; (801453c <_lseek+0xc>)
 8014532:	2258      	movs	r2, #88	; 0x58
 8014534:	601a      	str	r2, [r3, #0]
 8014536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801453a:	4770      	bx	lr
 801453c:	20001ba4 	.word	0x20001ba4

08014540 <_read>:
 8014540:	4b02      	ldr	r3, [pc, #8]	; (801454c <_read+0xc>)
 8014542:	2258      	movs	r2, #88	; 0x58
 8014544:	601a      	str	r2, [r3, #0]
 8014546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801454a:	4770      	bx	lr
 801454c:	20001ba4 	.word	0x20001ba4

08014550 <_write>:
 8014550:	4b02      	ldr	r3, [pc, #8]	; (801455c <_write+0xc>)
 8014552:	2258      	movs	r2, #88	; 0x58
 8014554:	601a      	str	r2, [r3, #0]
 8014556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801455a:	4770      	bx	lr
 801455c:	20001ba4 	.word	0x20001ba4

08014560 <_exit>:
 8014560:	e7fe      	b.n	8014560 <_exit>
	...

08014564 <_init>:
 8014564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014566:	bf00      	nop
 8014568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801456a:	bc08      	pop	{r3}
 801456c:	469e      	mov	lr, r3
 801456e:	4770      	bx	lr

08014570 <_fini>:
 8014570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014572:	bf00      	nop
 8014574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014576:	bc08      	pop	{r3}
 8014578:	469e      	mov	lr, r3
 801457a:	4770      	bx	lr
